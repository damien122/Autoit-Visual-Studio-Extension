{
  "Case Block": {
    "prefix": "Case Block",
    "body": ["Case ${1:value/expression}", "\t${2:statement}"],
    "scope": "source.autoit",
    "description": "A Case block for a Select or Switch statement"
  },
  "Case-Else Block": {
    "prefix": "Case-Else Block",
    "body": ["Case Else", "\t${1:statement}"],
    "scope": "source.autoit",
    "description": "A Case Else block for a Select or Switch statement"
  },
  "Do Loop": {
    "prefix": "Do Loop",
    "body": ["Do", "\t${1:statement(s)}", "Until ${2:expression}"],
    "scope": "source.autoit",
    "description": "Loop based on an expression."
  },
  "Else Block": {
    "prefix": "Else Block",
    "body": ["Else", "\t${1:[else statement(s)]}"],
    "scope": "source.autoit",
    "description": "An Else block for an If statement"
  },
  "For In Loop": {
    "prefix": "For In Loop",
    "body": [
      "For \\$${1:vElement} In \\$${2:aArray}",
      "\t${3:ConsoleWrite(\\$${1:vElement})}",
      "Next"
    ],
    "scope": "source.autoit",
    "description": "Enumerates elements in an Object collection or an Array."
  },
  "For Loop": {
    "prefix": "For Loop",
    "body": [
      "For \\$${1:i} = ${2:0} To ${3:1} Step ${4:+${5:1}}",
      "\t${6:ConsoleWrite(\\$${1:i})}",
      "Next"
    ],
    "scope": "source.autoit",
    "description": "Loop based on an expression."
  },
  "Function Block": {
    "prefix": "Function Block",
    "body": [
      "Func ${1:FunctionName}(${2:\\$${3:Param}})",
      "\t${4}",
      "\t${5:Return ${6:True}}",
      "EndFunc"
    ],
    "scope": "source.autoit",
    "description": "Function that takes zero or more arguments and optionally returns a result."
  },
  "If Statement": {
    "prefix": "If Statement",
    "body": "If ${1:<expression>} Then ${2:statement}",
    "scope": "source.autoit",
    "description": "Single-line If statement snippet"
  },
  "If Block": {
    "prefix": "If Block",
    "body": ["If (${1:<expression>}) Then", "\t${2:statement}", "EndIf"],
    "scope": "source.autoit",
    "description": "Multi-line If block snippet"
  },
  "Select Block": {
    "prefix": "Select Block",
    "body": [
      "Select",
      "\tCase ${1:\\$iFirstNumber = 1}",
      "\t\t${2:True}",
      "\tCase ${3:\\$iSecondNumber = 2}",
      "\t\t${4:True}",
      "\tCase Else",
      "\t\t${5:False}",
      "EndSelect"
    ],
    "scope": "source.autoit",
    "description": "Select block snippet"
  },
  "Switch Block": {
    "prefix": "Switch Block",
    "body": [
      "Switch (${1:\\$variable})",
      "\tCase ${2:6 To 11}",
      "\t\t${3:True}",
      "\tCase ${4:12 To 17}",
      "\t\t${5:True}",
      "\tCase Else",
      "\t\t${6:False}",
      "EndSwitch"
    ],
    "scope": "source.autoit",
    "description": "Switch block snippet"
  },
  "Ternary": {
    "prefix": "Ternary",
    "body": "\\$${1:result} = ( ${2:\\$a == \\$b} ) ? ${3:true} : ${4:false}",
    "scope": "source.autoit",
    "description": "Ternary Conditional Operator"
  },
  "While Loop": {
    "prefix": "While",
    "body": ["While ( ${1:true} )", "\t${2}", "WEnd"],
    "scope": "source.autoit",
    "description": "While Loop snippet"
  },
  "#ce": {
    "prefix": "#ce",
    "body": "#ce ",
    "scope": "source.autoit"
  },
  "comments-end": {
    "prefix": "comments-end",
    "body": "#comments-end\n",
    "scope": "source.autoit"
  },
  "comments-start": {
    "prefix": "#comments-start",
    "body": ["#comments-start", "\t$1", "#comments-end"],
    "scope": "source.autoit",
    "description": "Specify that an entire section of script should be commented out."
  },
  "#cs": {
    "prefix": "#cs",
    "body": ["#cs ", "\t$1", "#ce"],
    "scope": "source.autoit",
    "description": "Specify that an entire section of script should be commented out."
  },
  "Include From Library": {
    "prefix": "#include",
    "body": "#include <${1|APIComConstants,APIConstants,APIDiagConstants,APIDlgConstants,APIErrorsConstants,APIFilesConstants,APIGdiConstants,APILocaleConstants,APIMiscConstants,APIProcConstants,APIRegConstants,APIResConstants,APIShellExConstants,APIShPathConstants,APISysConstants,APIThemeConstants,Array,AutoItConstants,AVIConstants,BorderConstants,ButtonConstants,Clipboard,Color,ColorConstants,ComboConstants,Constants,Crypt,Date,DateTimeConstants,Debug,DirConstants,EditConstants,EventLog,Excel,ExcelConstants,File,FileConstants,FontConstants,FrameConstants,FTPEx,GDIPlus,GDIPlusConstants,GuiAVI,GuiButton,GuiComboBox,GuiComboBoxEx,GUIConstants,GUIConstantsEx,GuiDateTimePicker,GuiEdit,GuiHeader,GuiImageList,GuiIPAddress,GuiListBox,GuiListView,GuiMenu,GuiMonthCal,GuiReBar,GuiRichEdit,GuiScrollBars,GuiSlider,GuiStatusBar,GuiTab,GuiToolbar,GuiToolTip,GuiTreeView,HeaderConstants,IE,ImageListConstants,Inet,InetConstants,IPAddressConstants,ListBoxConstants,ListViewConstants,Math,MathConstants,Memory,MemoryConstants,MenuConstants,Misc,MsgBoxConstants,NamedPipes,NetShare,NTSTATUSConstants,Process,ProcessConstants,ProgressConstants,RebarConstants,RichEditConstants,ScreenCapture,ScrollBarConstants,ScrollBarsConstants,Security,SecurityConstants,SendMessage,SliderConstants,Sound,SQLite,SQLite.dll,StaticConstants,StatusBarConstants,String,StringConstants,StructureConstants,TabConstants,Timers,ToolbarConstants,ToolTipConstants,TrayConstants,TreeViewConstants,UDFGlobalID,UpDownConstants,Visa,WinAPI,WinAPICom,WinAPIConstants,WinAPIDiag,WinAPIDlg,WinAPIError,WinAPIEx,WinAPIFiles,WinAPIGdi,WinAPIInternals,WinAPIlangConstants,WinAPILocale,WinAPIMisc,WinAPIProc,WinAPIReg,WinAPIRes,WinAPIShellEx,WinAPIShPath,WinAPISys,WinAPIsysinfoConstants,WinAPITheme,WinAPIvkeysConstants,WindowsConstants,WinNet,Word,WordConstants|}.au3>",
    "scope": "source.autoit",
    "description": "Scripts from the default AutoIt \\Include folder, in a dropdown list"
  },
  "Include User Script": {
    "prefix": "#include",
    "body": "#include \"${1:[path\\]filename}.au3\"",
    "scope": "source.autoit"
  },
  "EndRegion": {
    "prefix": "EndRegion",
    "body": "#EndRegion ",
    "scope": "source.autoit"
  },
  "forcedef": {
    "prefix": "forcedef",
    "body": "#forcedef ",
    "scope": "source.autoit"
  },
  "forceref": {
    "prefix": "forceref",
    "body": "#forceref ",
    "scope": "source.autoit"
  },
  "ignorefunc": {
    "prefix": "ignorefunc",
    "body": "#ignorefunc ",
    "scope": "source.autoit"
  },
  "Region": {
    "prefix": "Region",
    "body": "#Region ",
    "scope": "source.autoit"
  },
  "Region Block": {
    "prefix": "Region Block",
    "body": ["#Region", "\t${1}", "#EndRegion"],
    "scope": "source.autoit"
  },
  "AutoItSetOption - CaretCoordMode": {
    "prefix": "AutoItSetOption-CaretCoordMode",
    "body": "AutoItSetOption(\"CaretCoordMode\", ${1:0|1|2})",
    "description": "Sets the way coords are used in the caret functions, either absolute coords or coords relative to the current active window:\n0 = relative coords to the active window\n1 = (default) absolute screen coordinates\n2 = relative coords to the client area of the active window",
    "scope": "source.autoit"
  },
  "AutoItSetOption - ExpandEnvStrings": {
    "prefix": "AutoItSetOption-ExpandEnvStrings",
    "body": "AutoItSetOption(\"ExpandEnvStrings\", ${1:0|1})",
    "description": "Changes how literal strings and % symbols are interpreted. By default strings are treated literally, this option allows you to use %environment% variables inside strings, e.g., \"The temp directory is: %temp%\".\n0 = (default) do not expand environment variables\n1 = expand environment variables",
    "scope": "source.autoit"
  },
  "AutoItSetOption - ExpandVarStrings": {
    "prefix": "AutoItSetOption-ExpandVarStrings",
    "body": "AutoItSetOption(\"ExpandVarStrings\", ${1:0|1})",
    "description": "Changes how literal strings and variable/macro ($ and @) symbols are interpreted. By default strings are treated literally, this option allows you to use variables and macros inside strings, e.g., \"The value of var1 is $var1$\".\n0 = (default) do not expand variables\n1 = expand variables (when in this mode and you want to use a literal $ or @ then double it up: \"This is a single dollar $$ sign\".",
    "scope": "source.autoit"
  },
  "AutoItSetOption - GUICloseOnESC": {
    "prefix": "AutoItSetOption-GUICloseOnESC",
    "body": "AutoItSetOption(\"GUICloseOnESC\", ${1:0|1})",
    "description": "When ESC is pressed on a GUI the $GUI_EVENT_CLOSE message is sent. This option toggles this behavior on and off.\n0 = Don't send the $GUI_EVENT_CLOSE message when ESC is pressed.\n1 = (default) Send() the $GUI_EVENT_CLOSE message when ESC is pressed.",
    "scope": "source.autoit"
  },
  "AutoItSetOption - GUICoordMode": {
    "prefix": "AutoItSetOption-GUICoordMode",
    "body": "AutoItSetOption(\"GUICoordMode\", ${1:0|1|2})",
    "description": "Alters the position of a control defined by GUICtrlSetPos().\n0 = relative position to the start of the last control (upper left corner).\n1 = (default) absolute coordinates still relative to the dialog box.\n2 = cell positioning relative to current cell. A -1 for left or top parameter don't increment the start.\nSo next line is -1, offset; next cell is offset,-1; current cell is -1,-1.\nObviously \"offset\" cannot be -1 which reserved to indicate the no increment. But if you can use a multiple of the width you choose to skip or go back.",
    "scope": "source.autoit"
  },
  "AutoItSetOption - GUIDataSeparatorChar": {
    "prefix": "AutoItSetOption-GUIDataSeparatorChar",
    "body": "AutoItSetOption(\"GUIDataSeparatorChar\", \"${1:char}\")",
    "description": "Define the character which delimits subitems in GUICtrlSetData().\nThe default character is '|'.",
    "scope": "source.autoit"
  },
  "AutoItSetOption - GUIOnEventMode": {
    "prefix": "AutoItSetOption-GUIOnEventMode",
    "body": "AutoItSetOption(\"GUIOnEventMode\", ${1:0=disable/1=enable})",
    "description": "Enable/disable OnEvent functions notifications.\n0 = (default) disable.\n1 = enable.",
    "scope": "source.autoit"
  },
  "AutoItSetOption - GUIResizeMode": {
    "prefix": "AutoItSetOption-GUIResizeMode",
    "body": "AutoItSetOption(\"GUIResizeMode\", ${1:param})",
    "description": "Change default resizing for a control.\n0 = (default) keep default control resizing.\n<1024 = any type of resizing see GUICtrlSetResizing().",
    "scope": "source.autoit"
  },
  "AutoItSetOption - GUIEventOptions": {
    "prefix": "AutoItSetOption-GUIEventOptions",
    "body": "AutoItSetOption(\"GUIEventOptions\", ${1:param})",
    "description": "Change special event behavior or GUI function return values.\n0 = (default) Windows behavior on click on Minimize,Restore, Maximize, Resize.\n1 = suppress windows behavior on minimize, restore or maximize click button or window resize. Just sends the notification.",
    "scope": "source.autoit"
  },
  "AutoItSetOption - MouseClickDelay": {
    "prefix": "AutoItSetOption-MouseClickDelay",
    "body": "AutoItSetOption(\"MouseClickDelay\", ${1:milliseconds})",
    "description": "Alters the length of the brief pause in between mouse clicks.\nTime in milliseconds to pause (default=10).",
    "scope": "source.autoit"
  },
  "AutoItSetOption - MouseClickDownDelay": {
    "prefix": "AutoItSetOption-MouseClickDownDelay",
    "body": "AutoItSetOption(\"MouseClickDownDelay\", ${1:milliseconds})",
    "description": "Alters the length a click is held down before release.\nTime in milliseconds to pause (default=10).",
    "scope": "source.autoit"
  },
  "AutoItSetOption - MouseClickDragDelay": {
    "prefix": "AutoItSetOption-MouseClickDragDelay",
    "body": "AutoItSetOption(\"MouseClickDragDelay\", ${1:milliseconds})",
    "description": "Alters the length of the brief pause at the start and end of a mouse drag operation.\nTime in milliseconds to pause (default=250).",
    "scope": "source.autoit"
  },
  "AutoItSetOption - MouseCoordMode": {
    "prefix": "AutoItSetOption-MouseCoordMode",
    "body": "AutoItSetOption(\"MouseCoordMode\", ${1:0|1|2})",
    "description": "Sets the way coords are used in the mouse functions, either absolute coords or coords relative to the current active window:\n0 = relative coords to the active window\n1 = (default) absolute screen coordinates\n2 = relative coords to the client area of the active window",
    "scope": "source.autoit"
  },
  "AutoItSetOption - MustDeclareVars": {
    "prefix": "AutoItSetOption-MustDeclareVars",
    "body": "AutoItSetOption(\"MustDeclareVars\", ${1:0|1})",
    "description": "If this option is used then all variables must be pre-declared with Local, Global or in some cases Dim before they can be used - removes the chance for misspelled variables causing bugs.\n0 = (default) Variables don't need to be pre-declared\n1 = Variables must be pre-declared. See Dim / Global / Local / Const for details on declaring variables.",
    "scope": "source.autoit"
  },
  "AutoItSetOption - PixelCoordMode": {
    "prefix": "AutoItSetOption-PixelCoordMode",
    "body": "AutoItSetOption(\"PixelCoordMode\", ${1:0|1|2})",
    "description": "Sets the way coords are used in the pixel functions, either absolute coords or coords relative to the window defined by hwnd (default active window):\n0 = relative coords to the defined window\n1 = (default) absolute screen coordinates\n2 = relative coords to the client area of the defined window",
    "scope": "source.autoit"
  },
  "AutoItSetOption - SendAttachMode": {
    "prefix": "AutoItSetOption-SendAttachMode",
    "body": "AutoItSetOption(\"SendAttachMode\", ${1:0|1})",
    "description": "Specifies if AutoIt attaches input threads when using Send() function. When not attaching (default mode=0) detecting the state of capslock/scrolllock and numlock can be unreliable under NT4. However, when you specify attach mode=1 the Send(\"{... down/up}\") syntax will not work and there may be problems with sending keys to \"hung\" windows. ControlSend() ALWAYS attaches and is not affected by this mode.\n0 = (default) don't attach\n1 = attach",
    "scope": "source.autoit"
  },
  "AutoItSetOption - SendCapslockMode": {
    "prefix": "AutoItSetOption-SendCapslockMode",
    "body": "AutoItSetOption(\"SendCapslockMode\", ${1:0|1})",
    "description": "Specifies if AutoIt should store the state of capslock before a Send() function and restore it afterwards.\n0 = don't store/restore\n1 = (default) store and restore",
    "scope": "source.autoit"
  },
  "AutoItSetOption - SendKeyDelay": {
    "prefix": "AutoItSetOption-SendKeyDelay",
    "body": "AutoItSetOption(\"SendKeyDelay\", ${1:milliseconds})",
    "description": "Alters the length of the brief pause in between sent keystrokes. A value of 0 removes the delay completely.\nTime in milliseconds to pause (default=5).",
    "scope": "source.autoit"
  },
  "AutoItSetOption - SendKeyDownDelay": {
    "prefix": "AutoItSetOption-SendKeyDownDelay",
    "body": "AutoItSetOption(\"SendKeyDownDelay\", ${1:milliseconds})",
    "description": "Alters the length of time a key is held down before being released during a keystroke. For applications that take a while to register keypresses you may need to raise this value from the default. A value of 0 removes the delay completely.\nTime in milliseconds to pause (default=5).",
    "scope": "source.autoit"
  },
  "AutoItSetOption - TCPTimeout": {
    "prefix": "AutoItSetOption-TCPTimeout",
    "body": "AutoItSetOption(\"TCPTimeout\", ${1:milliseconds})",
    "description": "Defines the time before TCP functions stop if no communication.\nTime in milliseconds before timeout (default=100).",
    "scope": "source.autoit"
  },
  "AutoItSetOption - TrayAutoPause": {
    "prefix": "AutoItSetOption-TrayAutoPause",
    "body": "AutoItSetOption(\"TrayAutoPause\", ${1:0|1})",
    "description": "Script pauses when click on tray icon.\n0 = no pause\n1 = (default) pause. If there is no DefaultMenu no pause will occurs.",
    "scope": "source.autoit"
  },
  "AutoItSetOption - TrayIconDebug": {
    "prefix": "AutoItSetOption-TrayIconDebug",
    "body": "AutoItSetOption(\"TrayIconDebug\", ${1:0|1})",
    "description": "If enabled shows the current script line in the tray icon tip to help debugging.\n0 = (default) no debug information\n1 = show debug",
    "scope": "source.autoit"
  },
  "AutoItSetOption - TrayIconHide": {
    "prefix": "AutoItSetOption-TrayIconHide",
    "body": "AutoItSetOption(\"TrayIconHide\", ${1:0|1})",
    "description": "Hides the AutoIt tray icon. Note: The icon will still initially appear for ~750 milliseconds.\n0 = (default) show icon\n1 = hide icon",
    "scope": "source.autoit"
  },
  "AutoItSetOption - TrayMenuMode": {
    "prefix": "AutoItSetOption-TrayMenuMode",
    "body": "AutoItSetOption(\"TrayMenuMode\", ${1:param})",
    "description": "Extend the behaviour of the script tray icon/menu. This can be done with a combination (adding) of the following values.\n0 = (default) default menu items (Script Paused/Exit) are appended to the usercreated menu; items will automatically be checked/unchecked when clicked; double clicking the tray icon returns the controlID of the $TRAY_DEFAULT item.\n1 = no default menu\n2 = items will not automatically check/uncheck when clicked\n4 = do not return the $TRAY_DEFAULT item controlID when the tray icon is double clicked\n8 = turn off auto check of radio item groups",
    "scope": "source.autoit"
  },
  "AutoItSetOption - TrayOnEventMode": {
    "prefix": "AutoItSetOption-TrayOnEventMode",
    "body": "AutoItSetOption(\"TrayOnEventMode\", ${1:0|1})",
    "description": "Enable/disable OnEvent functions notifications for the tray.\n0 = (default) disable\n1 = enable",
    "scope": "source.autoit"
  },
  "AutoItSetOption - WinDetectHiddenText": {
    "prefix": "AutoItSetOption-WinDetectHiddenText",
    "body": "AutoItSetOption(\"WinDetectHiddenText\", ${1:0|1})",
    "description": "Specifies if hidden window text can be \"seen\" by the window matching functions.\n0 = (default) Do not detect hidden text\n1 = Detect hidden text",
    "scope": "source.autoit"
  },
  "AutoItSetOption - WinSearchChildren": {
    "prefix": "AutoItSetOption-WinSearchChildren",
    "body": "AutoItSetOption(\"WinSearchChildren\", ${1:0|1})",
    "description": "Allows the window search routines to search child windows as well as top-level windows.\n0 = (default) Only search top-level windows\n1 = Search top-level and child windows",
    "scope": "source.autoit"
  },
  "AutoItSetOption - WinTextMatchMode": {
    "prefix": "AutoItSetOption-WinTextMatchMode",
    "body": "AutoItSetOption(\"WinTextMatchMode\", ${1:1|2})",
    "description": "Alters the method that is used to match window text during search operations.\n1 = (default) Complete / Slow mode\n2 = Quick mode\nIn quick mode AutoIt can usually only \"see\" dialog text, button text and the captions of some controls. In the default mode much more text can be seen (for instance the contents of the Notepad window).\nIf you are having performance problems when performing many window searches then changing to the \"quick\" mode may help.",
    "scope": "source.autoit"
  },
  "AutoItSetOption - WinTitleMatchMode": {
    "prefix": "AutoItSetOption-WinTitleMatchMode",
    "body": "AutoItSetOption(\"WinTitleMatchMode\", ${1:-1|-2|-3|-4|1|2|3|4})",
    "description": "Alters the method that is used to match window titles during search operations.\n1 = (default) Match the title from the start\n2 = Match any substring in the title\n3 = Exact title match\n4 = Advanced mode (retained for backwards compatibility only\n-1 to -4 = Case insensitive match according to the other type of match.",
    "scope": "source.autoit"
  },
  "AutoItSetOption - WinWaitDelay": {
    "prefix": "AutoItSetOption-WinWaitDelay",
    "body": "AutoItSetOption(\"WinWaitDelay\", ${1:milliseconds})",
    "description": "Alters how long a script should briefly pause after a successful window-related operation.\nTime in milliseconds to pause (default=250).",
    "scope": "source.autoit"
  },
  "ControlCommand-IsVisible": {
    "prefix": "ControlCommand-IsVisible",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"IsVisible\", \"\")",
    "description": "Returns 1 if Control is visible, 0 otherwise",
    "scope": "source.autoit"
  },
  "ControlCommand-IsEnabled": {
    "prefix": "ControlCommand-IsEnabled",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"IsEnabled\", \"\")",
    "description": "Returns 1 if Control is enabled, 0 otherwise",
    "scope": "source.autoit"
  },
  "ControlCommand-ShowDropDown": {
    "prefix": "ControlCommand-ShowDropDown",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"ShowDropDown\", \"\")",
    "description": "Displays the ComboBox dropdown",
    "scope": "source.autoit"
  },
  "ControlCommand-HideDropDown": {
    "prefix": "ControlCommand-HideDropDown",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"HideDropDown\", \"\")",
    "description": "Hides the ComboBox dropdown",
    "scope": "source.autoit"
  },
  "ControlCommand-AddString": {
    "prefix": "ControlCommand-AddString",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"AddString\",  ${4:\"string\"})",
    "description": "Adds a string to the end in a ListBox or ComboBox",
    "scope": "source.autoit"
  },
  "ControlCommand-DelString": {
    "prefix": "ControlCommand-DelString",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"DelString\", ${4:occurrence})",
    "description": "Deletes a string according to occurrence in a ListBox or ComboBox",
    "scope": "source.autoit"
  },
  "ControlCommand-FindString": {
    "prefix": "ControlCommand-FindString",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"FindString\",  ${4:\"string\"})",
    "description": "Returns occurrence ref of the exact string in a ListBox or ComboBox",
    "scope": "source.autoit"
  },
  "ControlCommand-SetCurrentSelection": {
    "prefix": "ControlCommand-SetCurrentSelection",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"SetCurrentSelection\", ${4:occurrence})",
    "description": "Sets selection to occurrence ref in a ListBox or ComboBox",
    "scope": "source.autoit"
  },
  "ControlCommand-SelectString": {
    "prefix": "ControlCommand-SelectString",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"SelectString\", ${4:\"string\"})",
    "description": "Sets selection according to string in a ListBox or ComboBox",
    "scope": "source.autoit"
  },
  "ControlCommand-IsChecked": {
    "prefix": "ControlCommand-IsChecked",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"IsChecked\", \"\")",
    "description": "Returns 1 if Button is checked, 0 otherwise",
    "scope": "source.autoit"
  },
  "ControlCommand-Check": {
    "prefix": "ControlCommand-Check",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"Check\", \"\")",
    "description": "Checks radio or check Button",
    "scope": "source.autoit"
  },
  "ControlCommand-UnCheck": {
    "prefix": "ControlCommand-UnCheck",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"UnCheck\", \"\")",
    "description": "Unchecks radio or check Button",
    "scope": "source.autoit"
  },
  "ControlCommand-GetCurrentLine": {
    "prefix": "ControlCommand-GetCurrentLine",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"GetCurrentLine\" , \"\")",
    "description": "Returns the line # where the caret is in an Edit",
    "scope": "source.autoit"
  },
  "ControlCommand-GetCurrentCol": {
    "prefix": "ControlCommand-GetCurrentCol",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"GetCurrentCol\", \"\")",
    "description": "Returns the column # where the caret is in an Edit",
    "scope": "source.autoit"
  },
  "ControlCommand-GetCurrentSelection": {
    "prefix": "ControlCommand-GetCurrentSelection",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"GetCurrentSelection\", \"\")",
    "description": "Returns name of the currently selected item in a ListBox or ComboBox",
    "scope": "source.autoit"
  },
  "ControlCommand-GetLineCount": {
    "prefix": "ControlCommand-GetLineCount",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"GetLineCount\", \"\")",
    "description": "Returns # of lines in an Edit",
    "scope": "source.autoit"
  },
  "ControlCommand-GetLine": {
    "prefix": "ControlCommand-GetLine",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"GetLine\", ${4:line#})",
    "description": "Returns text at line # passed of an Edit",
    "scope": "source.autoit"
  },
  "ControlCommand-GetSelected": {
    "prefix": "ControlCommand-GetSelected",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"GetSelected\", \"\")",
    "description": "Returns selected text of an Edit",
    "scope": "source.autoit"
  },
  "ControlCommand-EditPaste": {
    "prefix": "ControlCommand-EditPaste",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"EditPaste\", ${4:\"string\"})",
    "description": "Pastes the 'string' at the Edit's caret position",
    "scope": "source.autoit"
  },
  "ControlCommand-CurrentTab": {
    "prefix": "ControlCommand-CurrentTab",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"CurrentTab\", \"\")",
    "description": "Returns the current Tab shown of a SysTabControl32",
    "scope": "source.autoit"
  },
  "ControlCommand-TabRight": {
    "prefix": "ControlCommand-TabRight",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"TabRight\", \"\")",
    "description": "Moves to the next tab to the right of a SysTabControl32",
    "scope": "source.autoit"
  },
  "ControlCommand-TabLeft": {
    "prefix": "ControlCommand-TabLeft",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"TabLeft\", \"\")",
    "description": "Moves to the next tab to the left of a SysTabControl32",
    "scope": "source.autoit"
  },
  "ControlCommand-SendCommandID": {
    "prefix": "ControlCommand-SendCommandID",
    "body": "ControlCommand(${1:title}, ${2:text}, ${3:classnameNN}, \"SendCommandID\", ${4:Command ID})",
    "description": "Simulates the WM_COMMAND message. Usually used for ToolbarWindow32 controls - use the ToolBar tab of Au3Info to get the Command ID.",
    "scope": "source.autoit"
  },
  "ControlListView - DeSelect": {
    "prefix": "ControlListView-DeSelect",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"DeSelect\", ${4:From [}${4:, ${5:To]}})",
    "description": "Deselects one or more items.",
    "scope": "source.autoit"
  },
  "ControlListView - FindItem": {
    "prefix": "ControlListView-FindItem",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"FindItem\" , ${4:\"string to find\"}${5:, ${6:[SubItem]}})",
    "description": "Returns the item index of the string. Returns -1 if the string is not found.",
    "scope": "source.autoit"
  },
  "ControlListView - GetItemCount": {
    "prefix": "ControlListView-GetItemCount",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"GetItemCount\")",
    "description": "Returns the number of list items.",
    "scope": "source.autoit"
  },
  "ControlListView - GetSelected": {
    "prefix": "ControlListView-GetSelected",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"GetSelected\"${4:, ${5:0|1}})",
    "description": "Returns a string containing the item index of selected items. If option=0 (default) only the first selected item is returned. If option=1 then all the selected items are returned delimited by |, e.g: \"0|3|4|10\". If no items are selected a blank  string is returned.",
    "scope": "source.autoit"
  },
  "ControlListView - GetSelectedCount": {
    "prefix": "ControlListView-GetSelectedCount",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"GetSelectedCount\")",
    "description": "Returns the number of items that are selected.",
    "scope": "source.autoit"
  },
  "ControlListView - GetSubItemCount": {
    "prefix": "ControlListView-GetSubItemCount",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"GetSubItemCount\")",
    "description": "Returns the number of subitems.",
    "scope": "source.autoit"
  },
  "ControlListView - GetText": {
    "prefix": "ControlListView-GetText",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"GetText\", ${4:Item}, ${5:SubItem})",
    "description": "Returns the text of a given item/subitem.",
    "scope": "source.autoit"
  },
  "ControlListView - IsSelected": {
    "prefix": "ControlListView-IsSelected",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"IsSelected\", ${4:Item})",
    "description": "Returns 1 if the item is selected, otherwise returns 0.",
    "scope": "source.autoit"
  },
  "ControlListView - Select": {
    "prefix": "ControlListView-Select",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"Select\", ${4:From [}${5:, ${6: To] }})",
    "description": "Selects one or more items.",
    "scope": "source.autoit"
  },
  "ControlListView - SelectAll": {
    "prefix": "ControlListView-SelectAll",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"SelectAll\")",
    "description": "Selects all items.",
    "scope": "source.autoit"
  },
  "ControlListView - SelectClear": {
    "prefix": "ControlListView-SelectClear",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"SelectClear\")",
    "description": "Clears the selection of all items.",
    "scope": "source.autoit"
  },
  "ControlListView - SelectInvert": {
    "prefix": "ControlListView-SelectInvert",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"SelectInvert\")",
    "description": "Inverts the current selection.",
    "scope": "source.autoit"
  },
  "ControlListView - ViewChange": {
    "prefix": "ControlListView-ViewChange",
    "body": "ControlListView(${1:\"title\"}, ${2:\"text\"}, ${3:controlID}, \"ViewChange\", ${4:\"list|details|smallicons|largeicons\"})",
    "description": "Changes the current view. Valid views are \"list\", \"details\", \"smallicons\", \"largeicons\".",
    "scope": "source.autoit"
  },
  "Opt": {
    "prefix": "Opt",
    "description": "Changes the operation of various AutoIt functions/parameters.",
    "body": "Opt(${1: \"option\" [}${2:, ${3:param]}})",
    "scope": "source.autoit"
  },
  "Opt - CaretCoordMode": {
    "prefix": "Opt-CaretCoordMode",
    "body": "Opt(\"CaretCoordMode\", ${1:0|1|2})",
    "description": "Sets the way coords are used in the caret functions, either absolute coords or coords relative to the current active window:\n0 = relative coords to the active window\n1 = (default) absolute screen coordinates\n2 = relative coords to the client area of the active window",
    "scope": "source.autoit"
  },
  "Opt - ExpandEnvStrings": {
    "prefix": "Opt-ExpandEnvStrings",
    "body": "Opt(\"ExpandEnvStrings\", ${1:0|1})",
    "description": "Changes how literal strings and % symbols are interpreted. By default strings are treated literally, this option allows you to use %environment% variables inside strings, e.g., \"The temp directory is: %temp%\".\n0 = (default) do not expand environment variables\n1 = expand environment variables",
    "scope": "source.autoit"
  },
  "Opt - ExpandVarStrings": {
    "prefix": "Opt-ExpandVarStrings",
    "body": "Opt(\"ExpandVarStrings\", ${1:0|1})",
    "description": "Changes how literal strings and variable/macro ($ and @) symbols are interpreted. By default strings are treated literally, this option allows you to use variables and macros inside strings, e.g., \"The value of var1 is $var1$\".\n0 = (default) do not expand variables\n1 = expand variables (when in this mode and you want to use a literal $ or @ then double it up: \"This is a single dollar $$ sign\".",
    "scope": "source.autoit"
  },
  "Opt - GUICloseOnESC": {
    "prefix": "Opt-GUICloseOnESC",
    "body": "Opt(\"GUICloseOnESC\", ${1:0|1})",
    "description": "When ESC is pressed on a GUI the $GUI_EVENT_CLOSE message is sent. This option toggles this behavior on and off.\n0 = Don't send the $GUI_EVENT_CLOSE message when ESC is pressed.\n1 = (default) Send() the $GUI_EVENT_CLOSE message when ESC is pressed.",
    "scope": "source.autoit"
  },
  "Opt - GUICoordMode": {
    "prefix": "Opt-GUICoordMode",
    "body": "Opt(\"GUICoordMode\", ${1:0|1|2})",
    "description": "Alters the position of a control defined by GUICtrlSetPos().\n0 = relative position to the start of the last control (upper left corner).\n1 = (default) absolute coordinates still relative to the dialog box.\n2 = cell positioning relative to current cell. A -1 for left or top parameter don't increment the start.\nSo next line is -1, offset; next cell is offset,-1; current cell is -1,-1.\nObviously \"offset\" cannot be -1 which reserved to indicate the no increment. But if you can use a multiple of the width you choose to skip or go back.",
    "scope": "source.autoit"
  },
  "Opt - GUIDataSeparatorChar": {
    "prefix": "Opt-GUIDataSeparatorChar",
    "body": "Opt(\"GUIDataSeparatorChar\", \"${1:char}\")",
    "description": "Define the character which delimits subitems in GUICtrlSetData().\nThe default character is '|'.",
    "scope": "source.autoit"
  },
  "Opt - GUIOnEventMode": {
    "prefix": "Opt-GUIOnEventMode",
    "body": "Opt(\"GUIOnEventMode\", ${1:0=disable/1=enable})",
    "description": "Enable/disable OnEvent functions notifications.\n0 = (default) disable.\n1 = enable.",
    "scope": "source.autoit"
  },
  "Opt - GUIResizeMode": {
    "prefix": "Opt-GUIResizeMode",
    "body": "Opt(\"GUIResizeMode\", ${1:param})",
    "description": "Change default resizing for a control.\n0 = (default) keep default control resizing.\n<1024 = any type of resizing see GUICtrlSetResizing().",
    "scope": "source.autoit"
  },
  "Opt - GUIEventOptions": {
    "prefix": "Opt-GUIEventOptions",
    "body": "Opt(\"GUIEventOptions\", ${1:param})",
    "description": "Change special event behavior or GUI function return values.\n0 = (default) Windows behavior on click on Minimize,Restore, Maximize, Resize.\n1 = suppress windows behavior on minimize, restore or maximize click button or window resize. Just sends the notification.",
    "scope": "source.autoit"
  },
  "Opt - MouseClickDelay": {
    "prefix": "Opt-MouseClickDelay",
    "body": "Opt(\"MouseClickDelay\", ${1:milliseconds})",
    "description": "Alters the length of the brief pause in between mouse clicks.\nTime in milliseconds to pause (default=10).",
    "scope": "source.autoit"
  },
  "Opt - MouseClickDownDelay": {
    "prefix": "Opt-MouseClickDownDelay",
    "body": "Opt(\"MouseClickDownDelay\", ${1:milliseconds})",
    "description": "Alters the length a click is held down before release.\nTime in milliseconds to pause (default=10).",
    "scope": "source.autoit"
  },
  "Opt - MouseClickDragDelay": {
    "prefix": "Opt-MouseClickDragDelay",
    "body": "Opt(\"MouseClickDragDelay\", ${1:milliseconds})",
    "description": "Alters the length of the brief pause at the start and end of a mouse drag operation.\nTime in milliseconds to pause (default=250).",
    "scope": "source.autoit"
  },
  "Opt - MouseCoordMode": {
    "prefix": "Opt-MouseCoordMode",
    "body": "Opt(\"MouseCoordMode\", ${1:0|1|2})",
    "description": "Sets the way coords are used in the mouse functions, either absolute coords or coords relative to the current active window:\n0 = relative coords to the active window\n1 = (default) absolute screen coordinates\n2 = relative coords to the client area of the active window",
    "scope": "source.autoit"
  },
  "Opt - MustDeclareVars": {
    "prefix": "Opt-MustDeclareVars",
    "body": "Opt(\"MustDeclareVars\", ${1:0|1})",
    "description": "If this option is used then all variables must be pre-declared with Local, Global or in some cases Dim before they can be used - removes the chance for misspelled variables causing bugs.\n0 = (default) Variables don't need to be pre-declared\n1 = Variables must be pre-declared. See Dim / Global / Local / Const for details on declaring variables.",
    "scope": "source.autoit"
  },
  "Opt - PixelCoordMode": {
    "prefix": "Opt-PixelCoordMode",
    "body": "Opt(\"PixelCoordMode\", ${1:0|1|2})",
    "description": "Sets the way coords are used in the pixel functions, either absolute coords or coords relative to the window defined by hwnd (default active window):\n0 = relative coords to the defined window\n1 = (default) absolute screen coordinates\n2 = relative coords to the client area of the defined window",
    "scope": "source.autoit"
  },
  "Opt - SendAttachMode": {
    "prefix": "Opt-SendAttachMode",
    "body": "Opt(\"SendAttachMode\", ${1:0|1})",
    "description": "Specifies if AutoIt attaches input threads when using Send() function. When not attaching (default mode=0) detecting the state of capslock/scrolllock and numlock can be unreliable under NT4. However, when you specify attach mode=1 the Send(\"{... down/up}\") syntax will not work and there may be problems with sending keys to \"hung\" windows. ControlSend() ALWAYS attaches and is not affected by this mode.\n0 = (default) don't attach\n1 = attach",
    "scope": "source.autoit"
  },
  "Opt - SendCapslockMode": {
    "prefix": "Opt-SendCapslockMode",
    "body": "Opt(\"SendCapslockMode\", ${1:0|1})",
    "description": "Specifies if AutoIt should store the state of capslock before a Send() function and restore it afterwards.\n0 = don't store/restore\n1 = (default) store and restore",
    "scope": "source.autoit"
  },
  "Opt - SendKeyDelay": {
    "prefix": "Opt-SendKeyDelay",
    "body": "Opt(\"SendKeyDelay\", ${1:milliseconds})",
    "description": "Alters the length of the brief pause in between sent keystrokes. A value of 0 removes the delay completely.\nTime in milliseconds to pause (default=5).",
    "scope": "source.autoit"
  },
  "Opt - SendKeyDownDelay": {
    "prefix": "Opt-SendKeyDownDelay",
    "body": "Opt(\"SendKeyDownDelay\", ${1:milliseconds})",
    "description": "Alters the length of time a key is held down before being released during a keystroke. For applications that take a while to register keypresses you may need to raise this value from the default. A value of 0 removes the delay completely.\nTime in milliseconds to pause (default=5).",
    "scope": "source.autoit"
  },
  "Opt - TCPTimeout": {
    "prefix": "Opt-TCPTimeout",
    "body": "Opt(\"TCPTimeout\", ${1:milliseconds})",
    "description": "Defines the time before TCP functions stop if no communication.\nTime in milliseconds before timeout (default=100).",
    "scope": "source.autoit"
  },
  "Opt - TrayAutoPause": {
    "prefix": "Opt-TrayAutoPause",
    "body": "Opt(\"TrayAutoPause\", ${1:0|1})",
    "description": "Script pauses when click on tray icon.\n0 = no pause\n1 = (default) pause. If there is no DefaultMenu no pause will occurs.",
    "scope": "source.autoit"
  },
  "Opt - TrayIconDebug": {
    "prefix": "Opt-TrayIconDebug",
    "body": "Opt(\"TrayIconDebug\", ${1:0|1})",
    "description": "If enabled shows the current script line in the tray icon tip to help debugging.\n0 = (default) no debug information\n1 = show debug",
    "scope": "source.autoit"
  },
  "Opt - TrayIconHide": {
    "prefix": "Opt-TrayIconHide",
    "body": "Opt(\"TrayIconHide\", ${1:0|1})",
    "description": "Hides the AutoIt tray icon. Note: The icon will still initially appear for ~750 milliseconds.\n0 = (default) show icon\n1 = hide icon",
    "scope": "source.autoit"
  },
  "Opt - TrayMenuMode": {
    "prefix": "Opt-TrayMenuMode",
    "body": "Opt(\"TrayMenuMode\", ${1:param})",
    "description": "Extend the behaviour of the script tray icon/menu. This can be done with a combination (adding) of the following values.\n0 = (default) default menu items (Script Paused/Exit) are appended to the usercreated menu; items will automatically be checked/unchecked when clicked; double clicking the tray icon returns the controlID of the $TRAY_DEFAULT item.\n1 = no default menu\n2 = items will not automatically check/uncheck when clicked\n4 = do not return the $TRAY_DEFAULT item controlID when the tray icon is double clicked\n8 = turn off auto check of radio item groups",
    "scope": "source.autoit"
  },
  "Opt - TrayOnEventMode": {
    "prefix": "Opt-TrayOnEventMode",
    "body": "Opt(\"TrayOnEventMode\", ${1:0|1})",
    "description": "Enable/disable OnEvent functions notifications for the tray.\n0 = (default) disable\n1 = enable",
    "scope": "source.autoit"
  },
  "Opt - WinDetectHiddenText": {
    "prefix": "Opt-WinDetectHiddenText",
    "body": "Opt(\"WinDetectHiddenText\", ${1:0|1})",
    "description": "Specifies if hidden window text can be \"seen\" by the window matching functions.\n0 = (default) Do not detect hidden text\n1 = Detect hidden text",
    "scope": "source.autoit"
  },
  "Opt - WinSearchChildren": {
    "prefix": "Opt-WinSearchChildren",
    "body": "Opt(\"WinSearchChildren\", ${1:0|1})",
    "description": "Allows the window search routines to search child windows as well as top-level windows.\n0 = (default) Only search top-level windows\n1 = Search top-level and child windows",
    "scope": "source.autoit"
  },
  "Opt - WinTextMatchMode": {
    "prefix": "Opt-WinTextMatchMode",
    "body": "Opt(\"WinTextMatchMode\", ${1:1|2})",
    "description": "Alters the method that is used to match window text during search operations.\n1 = (default) Complete / Slow mode\n2 = Quick mode\nIn quick mode AutoIt can usually only \"see\" dialog text, button text and the captions of some controls. In the default mode much more text can be seen (for instance the contents of the Notepad window).\nIf you are having performance problems when performing many window searches then changing to the \"quick\" mode may help.",
    "scope": "source.autoit"
  },
  "Opt - WinTitleMatchMode": {
    "prefix": "Opt-WinTitleMatchMode",
    "body": "Opt(\"WinTitleMatchMode\", ${1:-1|-2|-3|-4|1|2|3|4})",
    "description": "Alters the method that is used to match window titles during search operations.\n1 = (default) Match the title from the start\n2 = Match any substring in the title\n3 = Exact title match\n4 = Advanced mode (retained for backwards compatibility only\n-1 to -4 = Case insensitive match according to the other type of match.",
    "scope": "source.autoit"
  },
  "Opt - WinWaitDelay": {
    "prefix": "Opt-WinWaitDelay",
    "body": "Opt(\"WinWaitDelay\", ${1:milliseconds})",
    "description": "Alters how long a script should briefly pause after a successful window-related operation.\nTime in milliseconds to pause (default=250).",
    "scope": "source.autoit"
  },
  "pragma Out": {
    "prefix": "#pragma Out",
    "body": "#pragma compile(Out, ${1:Filename})",
    "description": "Sets the file name of the compiled executable.",
    "scope": "source.autoit"
  },
  "pragma Icon": {
    "prefix": "#pragma Icon",
    "body": "#pragma compile(Icon, ${1:Filename})",
    "description": "Sets the compiled executable icon."
  },
  "pragma ExecLevel": {
    "prefix": "#pragma ExecLevel",
    "body": "#pragma compile(ExecLevel, ${1|none,asInvoker,highestAvailable,requireAdministrator|})",
    "description": "Sets the execution level in the compiled executable manifest."
  },
  "pragma UPX": {
    "prefix": "#pragma UPX",
    "body": "#pragma compile(UPX, ${1|false,true|})",
    "description": "Sets the execution level in the compiled executable manifest."
  },
  "pragma AutoItExecuteAllowed": {
    "prefix": "#pragma AutoItExecuteAllowed",
    "body": "#pragma compile(AutoItExecuteAllowed, ${1|false,true|})",
    "description": "Allows the compiled executable to execute non compiled scripts."
  },
  "pragma Console": {
    "prefix": "#pragma Console",
    "body": "#pragma compile(Console, ${1|false,true|})",
    "description": "Compile the executable in console mode."
  },
  "pragma Compression": {
    "prefix": "#pragma Compression",
    "body": "#pragma compile(Compression, ${1|1,3,5,7,9|})",
    "description": "Sets the compiled executable FileInstall() resources compression."
  },
  "pragma Compatibility": {
    "prefix": "#pragma Compatibility",
    "body": "#pragma compile(Compatibility, ${1|vista,win7,win8,win81,win10|})",
    "description": "Sets the compatibility in the compiled executable manifest."
  },
  "pragma x64": {
    "prefix": "#pragma x64",
    "body": "#pragma compile(x64, ${1|false,true|})",
    "description": "Compiles the executable in 64-bits."
  },
  "pragma inputboxres": {
    "prefix": "#pragma inputboxres",
    "body": "#pragma compile(inputboxres, ${1|false,true|})",
    "description": "Omits the InputBox() resources from being included with the compiled executable."
  },
  "pragma Comments": {
    "prefix": "#pragma Comments",
    "body": "#pragma compile(Comments, ${1:comment})",
    "description": "Sets a comment to the compiled executable."
  },
  "pragma CompanyName": {
    "prefix": "#pragma CompanyName",
    "body": "#pragma compile(CompanyName, ${1:'CompanyName'})",
    "description": "Sets a comment to the compiled executable."
  },
  "pragma FileDescription": {
    "prefix": "#pragma FileDescription",
    "body": "#pragma compile(FileDescription, ${1:'Description'})",
    "description": "Sets a file description to the compiled executable."
  },
  "pragma FileVersion": {
    "prefix": "#pragma FileVersion",
    "body": "#pragma compile(FileVersion, ${1:1.0})",
    "description": "Sets a file version to the compiled executable."
  },
  "pragma InternalName": {
    "prefix": "#pragma InternalName",
    "body": "#pragma compile(InternalName, ${1:\"Internal Name\"})",
    "description": "Sets an internal name to the compiled executable."
  },
  "pragma LegalCopyright": {
    "prefix": "#pragma LegalCopyright",
    "body": "#pragma compile(LegalCopyright, ${1:Legal stuff here})",
    "description": "Sets a legal copyright to the compiled executable."
  },
  "pragma LegalTrademarks": {
    "prefix": "#pragma LegalTrademarks",
    "body": "#pragma compile(LegalTrademarks, ${1:\"Trademarks\"})",
    "description": "Sets a legal trademark to the compiled executable."
  },
  "pragma OriginalFilename": {
    "prefix": "#pragma OriginalFilename",
    "body": "#pragma compile(OriginalFilename, ${1:OriginalName.exe})",
    "description": "Sets an original filename to the compiled executable."
  },
  "pragma ProductName": {
    "prefix": "#pragma ProductName",
    "body": "#pragma compile(ProductName, ${1:No Name})",
    "description": "Sets a product name to the compiled executable."
  },
  "pragma ProductVersion": {
    "prefix": "#pragma ProductVersion",
    "body": "#pragma compile(ProductVersion, ${1:1.0})",
    "description": "Sets a product version to the compiled executable."
  },
  "UDF Setup": {
    "prefix": "setupudf",
    "body": [
      "; #FUNCTION# ====================================================================================================================",
      "; Name...........: ${1}",
      "; Description ...: ${2}",
      "; Syntax.........: ${3}",
      "; Parameters ....: ${4}",
      "; Return values .: ${5}",
      "; Author ........: ${6}",
      "; Modified.......: ${7}",
      "; Remarks .......: ${8}",
      "; Related .......: ${9}",
      "; Link ..........: ${10}",
      "; Example .......: ${11}",
      "; ==============================================================================================================================="
    ],
    "description": "Blank template for an UDF header."
  },
  "AutoIt3Wrapper Directives + Options": {
    "prefix": "a3w",
    "body": [
      "#Region AutoIt3Wrapper Directives",
      ";** This is a list of compiler directives used by AutoIt3Wrapper.exe.",
      ";** comment the lines you don't need or else it will override the default settings",
      ";===============================================================================================",
      ";** AUTOIT3 settings",
      "#AutoIt3Wrapper_UseX64=                         ;(Y/N) Use X64 versions for AutoIt3_x64 or AUT2EXE_x64. Default=N",
      "#AutoIt3Wrapper_Version=                        ; Use Beta or Production for AutoIt3 and AUT2EXE. Default is P",
      "#AutoIt3Wrapper_Run_Debug_Mode=                 ;(Y/N)Run Script with console debugging. Default=N",
      ";===============================================================================================",
      ";** AUT2EXE settings",
      "#AutoIt3Wrapper_Icon=                           ;Filename of the Ico file to use",
      "#AutoIt3Wrapper_OutFile=                        ;Target exe/a3x filename.",
      "#AutoIt3Wrapper_OutFile_Type=                   ;a3x=small AutoIt3 file; exe=Standalone executable (Default)",
      "#AutoIt3Wrapper_Compression=                    ;Compression parameter 0-4  0=Low 2=normal 4=High. Default=2",
      "#AutoIt3Wrapper_UseUpx=                         ;(Y/N) Compress output program.  Default=Y",
      "#AutoIt3Wrapper_Change2CUI=                     ;(Y/N) Change output program to CUI in stead of GUI. Default=N",
      ";===============================================================================================",
      ";** Target program Resource info",
      "#AutoIt3Wrapper_Res_Comment=                    ;Comment field",
      "#AutoIt3Wrapper_Res_Description=                ;Description field",
      "#AutoIt3Wrapper_Res_Fileversion=                ;File Version",
      "#AutoIt3Wrapper_Res_FileVersion_AutoIncrement=  ;(Y/N/P)AutoIncrement FileVersion After Aut2EXE is finished. default=N",
      ";                                                 P=Prompt, Will ask at Compilation time if you want to increase the versionnumber",
      "#AutoIt3Wrapper_Res_Language=                   ;Resource Language code . default 2057=English (United Kingdom)",
      "#AutoIt3Wrapper_Res_LegalCopyright=             ;Copyright field",
      "#AutoIt3Wrapper_res_requestedExecutionLevel=    ;None, asInvoker, highestAvailable or requireAdministrator   (default=None)",
      "#AutoIt3Wrapper_Res_SaveSource=                 ;(Y/N) Save a copy of the Scriptsource in the EXE resources. default=N",
      ";",
      "; free form resource fields ... max 15",
      ";     you can use the following variables:",
      ";     %AutoItVer% which will be replaced with the version of AutoIt3",
      ";     %date% = PC date in short date format",
      ";     %longdate% = PC date in long date format",
      ";     %time% = PC timeformat",
      ";  eg: #AutoIt3Wrapper_Res_Field=AutoIt Version%AutoItVer%",
      "#AutoIt3Wrapper_Res_Field=                      ;Free format fieldnamefieldvalue",
      "#AutoIt3Wrapper_Res_Field=                      ;Free format fieldnamefieldvalue",
      "#AutoIt3Wrapper_Res_Field=                      ;Free format fieldnamefieldvalue",
      "; Add extra ICO files to the resources which can be used with TraySetIcon(@ScriptFullPath, 3) etc",
      "; list of filename of the Ico files to be added, First one will have number 3, then 4 ..etc",
      "#AutoIt3Wrapper_Res_Icon_Add=                   ; Filename of ICO to be added.",
      "#AutoIt3Wrapper_Res_Icon_Add=                   ; Filename of ICO to be added.",
      "; Add extra files to the resources",
      "#AutoIt3Wrapper_Res_File_Add=                   ; Filename[,Section [,ResName]] to be added.",
      "#AutoIt3Wrapper_Res_File_Add=                   ; Filename[,Section [,ResName]] to be added.",
      ";===============================================================================================",
      "; Tidy Settings",
      "#AutoIt3Wrapper_Run_Tidy=                       ;(Y/N) Run Tidy before compilation. default=N",
      "#AutoIt3Wrapper_Tidy_Stop_OnError=              ;(Y/N) Continue when only Warnings. default=Y",
      "#Tidy_Parameters=                               ;Tidy Parameters...see SciTE4AutoIt3 Helpfile for options ",
      ";===============================================================================================",
      "; Au3Stripper",
      "#AutoIt3Wrapper_Run_Au3Stripper=                 ;(Y/N) Run Au3Stripper before compilation. default=N",
      "#Au3Stripper_parameters=",
      ";===============================================================================================",
      "; AU3Check settings",
      "#AutoIt3Wrapper_Run_AU3Check=                   ;(Y/N) Run au3check before compilation. Default=Y",
      "#AutoIt3Wrapper_AU3Check_Parameters=            ;Au3Check parameters",
      "#AutoIt3Wrapper_AU3Check_Stop_OnWarning=        ;(Y/N) N=Continue on Warnings.(Default) Y=Always stop on Warnings",
      "#AutoIt3Wrapper_PlugIn_Funcs=                   ;Define PlugIn function names separated by a Comma to avoid AU3Check errors",
      ";===============================================================================================",
      "; cvsWrapper settings",
      "#AutoIt3Wrapper_Versioning==                    ;(Y/N/V) Run cvsWrapper to update the script source. default=N ",
      ";                                                 V=only when version is increased by #AutoIt3Wrapper_Res_FileVersion_AutoIncrement.",
      "#AutoIt3Wrapper_Versioning_Parameters=          ; /NoPrompt  : Will skip the cvsComments prompt",
      ";                                                 /Comments  : Text to added in the cvsComments. It can also contain the below variables. ",
      ";===============================================================================================",
      "; RUN BEFORE AND AFTER definitions",
      "; The following directives can contain: these variables",
      ";  %in% , %out%, %icon% which will be replaced by the fullpath filename.",
      ";  %scriptdir% same as @ScriptDir and %scriptfile% = filename without extension.",
      ";  %fileversion% is the information from the #AutoIt3Wrapper_Res_Fileversion directive",
      ";   %scitedir% will be replaced by the SciTE program directory",
      ";   %autoitdir% will be replaced by the AutoIt3 program directory",
      "#AutoIt3Wrapper_Run_Before=                     ;process to run before compilation - you can have multiple records that will be processed in sequence",
      "#AutoIt3Wrapper_Run_After=                      ;process to run After compilation - you can have multiple records that will be processed in sequence",
      "#EndRegion"
    ]
  },
  "AutoIt3Wrapper Directives (No Comments)": {
    "prefix": "a3w2",
    "body": [
      "#Region - AutoIt3Wrapper Directives",
      "#AutoIt3Wrapper_UseX64=",
      "#AutoIt3Wrapper_Version=",
      "#AutoIt3Wrapper_Run_Debug_Mode=",
      "#AutoIt3Wrapper_Icon=",
      "#AutoIt3Wrapper_OutFile=",
      "#AutoIt3Wrapper_OutFile_Type=",
      "#AutoIt3Wrapper_Compression=",
      "#AutoIt3Wrapper_UseUpx=",
      "#AutoIt3Wrapper_Change2CUI=",
      "#AutoIt3Wrapper_Res_Comment=",
      "#AutoIt3Wrapper_Res_Description=",
      "#AutoIt3Wrapper_Res_Fileversion=",
      "#AutoIt3Wrapper_Res_FileVersion_AutoIncrement=",
      "#AutoIt3Wrapper_Res_Language=",
      "#AutoIt3Wrapper_Res_LegalCopyright=",
      "#AutoIt3Wrapper_res_requestedExecutionLevel=",
      "#AutoIt3Wrapper_Res_SaveSource=",
      "#AutoIt3Wrapper_Res_Field=",
      "#AutoIt3Wrapper_Res_Field=",
      "#AutoIt3Wrapper_Res_Field=",
      "#AutoIt3Wrapper_Res_Icon_Add=",
      "#AutoIt3Wrapper_Res_Icon_Add=",
      "#AutoIt3Wrapper_Res_File_Add=",
      "#AutoIt3Wrapper_Res_File_Add=",
      "#AutoIt3Wrapper_Run_Tidy=",
      "#AutoIt3Wrapper_Tidy_Stop_OnError=",
      "#Tidy_Parameters=",
      "#AutoIt3Wrapper_Run_Au3Stripper=",
      "#Au3Stripper_parameters=",
      "#AutoIt3Wrapper_Run_AU3Check=",
      "#AutoIt3Wrapper_AU3Check_Parameters=",
      "#AutoIt3Wrapper_AU3Check_Stop_OnWarning=",
      "#AutoIt3Wrapper_PlugIn_Funcs=",
      "#AutoIt3Wrapper_Versioning==",
      "#AutoIt3Wrapper_Versioning_Parameters=",
      "#AutoIt3Wrapper_Run_Before=",
      "#AutoIt3Wrapper_Run_After=",
      "#EndRegion"
    ]
  }
}
