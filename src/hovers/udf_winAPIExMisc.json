{
    "_WinAPI_GetExtended": [
        "Retrieves the last extended function return value",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_GetExtended ( )\r```"
    ],
    "_WinAPI_PlaySound": [
        "Plays a sound specified by the given file name, resource, or system event",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_PlaySound ( $sSound [, $iFlags = $SND_SYSTEM_NOSTOP [, $hInstance = 0]] )\r```"
    ],
    "_WinAPI_CharToOem": [
        "Converts a string into the OEM-defined character set",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_CharToOem ( $sStr )\r```"
    ],
    "_WinAPI_DWordToFloat": [
        "Converts a value of type DWORD to a value of type FLOAT",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_DWordToFloat ( $iValue )\r```"
    ],
    "_WinAPI_DWordToInt": [
        "Converts a value of type DWORD to a value of type INT",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_DWordToInt ( $iValue )\r```"
    ],
    "_WinAPI_FloatToDWord": [
        "Converts a value of type FLOAT to a value of type DWORD",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_FloatToDWord ( $iValue )\r```"
    ],
    "_WinAPI_GetString": [
        "Returns a string located at the specified memory address",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_GetString ( $pString [, $bUnicode = True] )\r```"
    ],
    "_WinAPI_HashData": [
        "Hashes a memory block",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_HashData ( $pMemory, $iSize [, $iLength = 32] )\r```"
    ],
    "_WinAPI_HashString": [
        "Hashes a string",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_HashString ( $sString [, $bCaseSensitive = True [, $iLength = 32]] )\r```"
    ],
    "_WinAPI_HiByte": [
        "Returns the high BYTE of a 16-bit (2 bytes) value",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_HiByte ( $iValue )\r```"
    ],
    "_WinAPI_HiDWord": [
        "Returns the high DWORD of a 64-bit (8 bytes) value",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_HiDWord ( $iValue )\r```"
    ],
    "_WinAPI_IntToDWord": [
        "Converts a value of type INT to a value of type DWORD",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_IntToDWord ( $iValue )\r```"
    ],
    "_WinAPI_LoByte": [
        "Returns the low BYTE of a 16-bit (2 bytes) value",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_LoByte ( $iValue )\r```"
    ],
    "_WinAPI_LoDWord": [
        "Returns the low DWORD of a 64-bit (8 bytes) value",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_LoDWord ( $iValue )\r```"
    ],
    "_WinAPI_LongMid": [
        "Extracts a number of bits from a DWORD (32-bit) value",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_LongMid ( $iValue, $iStart, $iCount )\r```"
    ],
    "_WinAPI_MakeWord": [
        "Returns a WORD (16-bit) value from two BYTE (8-bit) values",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_MakeWord ( $iLo, $iHi )\r```"
    ],
    "_WinAPI_OemToChar": [
        "Converts a string from the OEM-defined character set into either an ANSI string",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_OemToChar ( $sStr )\r```"
    ],
    "_WinAPI_ShortToWord": [
        "Converts a value of type SHORT to a value of type WORD",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_ShortToWord ( $iValue )\r```"
    ],
    "_WinAPI_StrFormatByteSize": [
        "Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_StrFormatByteSize ( $iSize )\r```"
    ],
    "_WinAPI_StrFormatByteSizeEx": [
        "Converts a numeric value into a string that represents the number expressed as separated groups of digits to the left of the decimal",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_StrFormatByteSizeEx ( $iSize )\r```"
    ],
    "_WinAPI_StrFormatKBSize": [
        "Converts a numeric value into a string that represents the number expressed as a size value in kilobytes",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_StrFormatKBSize ( $iSize )\r```"
    ],
    "_WinAPI_StrFromTimeInterval": [
        "Converts a time interval to a string",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_StrFromTimeInterval ( $iTime [, $iDigits = 7] )\r```"
    ],
    "_WinAPI_StrLen": [
        "Returns the length of the specified string",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_StrLen ( $pString [, $bUnicode = True] )\r```"
    ],
    "_WinAPI_SwapDWord": [
        "Converts a ULONG from little-endian to big-endian, and vice versa",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_SwapDWord ( $iValue )\r```"
    ],
    "_WinAPI_SwapQWord": [
        "Converts a ULONGLONG from little-endian to big-endian, and vice versa",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_SwapQWord ( $iValue )\r```"
    ],
    "_WinAPI_SwapWord": [
        "Converts a USHORT from little-endian to big-endian, and vice versa",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_SwapWord ( $iValue )\r```"
    ],
    "_WinAPI_WordToShort": [
        "Converts a value of type WORD to a value of type SHORT",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_WordToShort ( $iValue )\r```"
    ],
    "_WinAPI_ArrayToStruct": [
        "Converts an array of strings to the structure",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_ArrayToStruct ( Const ByRef $aData [, $iStart = 0 [, $iEnd = -1]] )\r```"
    ],
    "_WinAPI_CopyStruct": [
        "Creates a duplicate of a specified structure",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_CopyStruct ( $tStruct [, $sStruct = ''] )\r```"
    ],
    "_WinAPI_CreateMargins": [
        "Creates $tagMARGINS structure with specified left, right, top, and bottom retaining borders",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_CreateMargins ( $iLeftWidth, $iRightWidth, $iTopHeight, $iBottomHeight )\r```"
    ],
    "_WinAPI_CreatePoint": [
        "Creates $tagPOINT structure with the x- and y-coordinates of the specified point",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_CreatePoint ( $iX, $iY )\r```"
    ],
    "_WinAPI_CreateRect": [
        "Creates $tagRECT structure with the coordinates of the specified rectangle",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_CreateRect ( $iLeft, $iTop, $iRight, $iBottom )\r```"
    ],
    "_WinAPI_CreateRectEx": [
        "Creates $tagRECT structure with the coordinates of the specified rectangle",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_CreateRectEx ( $iX, $iY, $iWidth, $iHeight )\r```"
    ],
    "_WinAPI_CreateSize": [
        "Creates $tagSIZE structure with the width and height of the specified rectangle",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_CreateSize ( $iWidth, $iHeight )\r```"
    ],
    "_WinAPI_StructToArray": [
        "Converts the structure to the array of strings",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_StructToArray ( $tStruct [, $iItems = 0] )\r```"
    ],
    "_WinAPI_UnionStruct": [
        "Creates the structure of two structures",
        "```\r#include <WinAPIMisc.au3>\r_WinAPI_UnionStruct ( $tStruct1, $tStruct2 [, $sStruct = ''] )\r```"
    ]
}
