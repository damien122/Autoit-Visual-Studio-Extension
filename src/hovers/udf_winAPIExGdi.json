{
    "_WinAPI_CreateDIB": [
        "Creates an uncompressed device-independent bitmap (DIB) with the specified width, height, and color depth",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateDIB ( $iWidth, $iHeight [, $iBitsPerPel = 32 [, $tColorTable = 0 [, $iColorCount = 0]]] )\r```"
    ],
    "_WinAPI_AdjustBitmap": [
        "Creates a new device-depended bitmap (DDB) from the source bitmap with new dimensions and color adjustment",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_AdjustBitmap ( $hBitmap, $iWidth, $iHeight [, $iMode = 3 [, $tAdjustment = 0]] )\r```"
    ],
    "_WinAPI_AlphaBlend": [
        "Displays bitmaps that have transparent or semitransparent pixels",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_AlphaBlend ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iAlpha [, $bAlpha = False] )\r```"
    ],
    "_WinAPI_CompressBitmapBits": [
        "Creates a compressed data block from the specified bitmap",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CompressBitmapBits ( $hBitmap, ByRef $pBuffer [, $iCompression = 0 [, $iQuality = 100]] )\r```"
    ],
    "_WinAPI_CopyBitmap": [
        "Creates a duplicate of a specified bitmap with a device-independent bitmap (DIB) section",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CopyBitmap ( $hBitmap )\r```"
    ],
    "_WinAPI_CopyImage": [
        "Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CopyImage ( $hImage [, $iType = 0 [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] )\r```"
    ],
    "_WinAPI_Create32BitHBITMAP": [
        "Creates a 32 bits-per-pixel bitmap from the specified icon",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_Create32BitHBITMAP ( $hIcon [, $bDib = False [, $bDelete = False]] )\r```"
    ],
    "_WinAPI_Create32BitHICON": [
        "Converts an icon to a 32 bits-per-pixel format and copies to the new icon",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_Create32BitHICON ( $hIcon [, $bDelete = False] )\r```"
    ],
    "_WinAPI_CreateANDBitmap": [
        "Creates AND bitmask device-independent bitmap (DIB) from the specified bitmap",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateANDBitmap ( $hBitmap )\r```"
    ],
    "_WinAPI_CreateBitmapIndirect": [
        "Creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel)",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateBitmapIndirect ( $tBITMAP )\r```"
    ],
    "_WinAPI_CreateCompatibleBitmapEx": [
        "Creates a bitmap compatible with the device and fills it the specified color",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateCompatibleBitmapEx ( $hDC, $iWidth, $iHeight, $iRGB )\r```"
    ],
    "_WinAPI_CreateDIB": [
        "Creates an uncompressed device-independent bitmap (DIB) with the specified width, height, and color depth",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateDIB ( $iWidth, $iHeight [, $iBitsPerPel = 32 [, $tColorTable = 0 [, $iColorCount = 0]]] )\r```"
    ],
    "_WinAPI_CreateDIBColorTable": [
        "Creates RGB color table from the specified array of colors",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateDIBColorTable ( Const ByRef $aColorTable [, $iStart = 0 [, $iEnd = -1]] )\r```"
    ],
    "_WinAPI_CreateDIBitmap": [
        "Creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateDIBitmap ( $hDC, $tBITMAPINFO, $iUsage [, $pBits = 0] )\r```"
    ],
    "_WinAPI_CreateDIBSection": [
        "Creates a DIB that applications can write to directly",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateDIBSection ( $hDC, $tBITMAPINFO, $iUsage, ByRef $pBits [, $hSection = 0 [, $iOffset = 0]] )\r```"
    ],
    "_WinAPI_CreateEmptyIcon": [
        "Creates a fully transparent icon with the specified width, height, and color depth",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateEmptyIcon ( $iWidth, $iHeight [, $iBitsPerPel = 32] )\r```"
    ],
    "_WinAPI_CreateIconIndirect": [
        "Creates an icon or cursor that has the specified size, colors, and bit patterns",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateIconIndirect ( $hBitmap, $hMask [, $iXHotspot = 0 [, $iYHotspot = 0 [, $bIcon = True]]] )\r```"
    ],
    "_WinAPI_DrawBitmap": [
        "Draws a bitmap into the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DrawBitmap ( $hDC, $iX, $iY, $hBitmap [, $iRop = 0x00CC0020] )\r```"
    ],
    "_WinAPI_ExtFloodFill": [
        "Fills an area of the display surface with the current brush",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ExtFloodFill ( $hDC, $iX, $iY, $iRGB [, $iType = 0] )\r```"
    ],
    "_WinAPI_GetBitmapBits": [
        "Copies the bitmap bits of a specified device-dependent bitmap into a buffer",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetBitmapBits ( $hBitmap, $iSize, $pBits )\r```"
    ],
    "_WinAPI_GetBitmapDimension": [
        "Retrieves a dimension of the specified bitmap",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetBitmapDimension ( $hBitmap )\r```"
    ],
    "_WinAPI_GetBitmapDimensionEx": [
        "Retrieves the dimensions of a compatible bitmap",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetBitmapDimensionEx ( $hBitmap )\r```"
    ],
    "_WinAPI_GetDIBColorTable": [
        "Retrieves RGB color table from the DIB section bitmap",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetDIBColorTable ( $hBitmap )\r```"
    ],
    "_WinAPI_GetIconDimension": [
        "Retrieves a dimension of the specified icon",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetIconDimension ( $hIcon )\r```"
    ],
    "_WinAPI_GetPixel": [
        "Retrieves the color value of the pixel at the specified coordinates",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetPixel ( $hDC, $iX, $iY )\r```"
    ],
    "_WinAPI_GetStretchBltMode": [
        "Retrieves the current stretching mode",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetStretchBltMode ( $hDC )\r```"
    ],
    "_WinAPI_GradientFill": [
        "Fills rectangle or triangle gradient",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GradientFill ( $hDC, Const ByRef $aVertex [, $iStart = 0 [, $iEnd = -1 [, $bRotate = False]]] )\r```"
    ],
    "_WinAPI_InvertANDBitmap": [
        "Inverts the specified AND bitmask bitmap by performing a logical NOT operation",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_InvertANDBitmap ( $hBitmap [, $bDelete = False] )\r```"
    ],
    "_WinAPI_IsAlphaBitmap": [
        "Determines whether the specified bitmap has an alpha channel",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_IsAlphaBitmap ( $hBitmap )\r```"
    ],
    "_WinAPI_MaskBlt": [
        "Combines the color data for the source and destination bitmaps using the specified mask and raster operation",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_MaskBlt ( $hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $hMask, $iXMask, $iYMask, $iRop )\r```"
    ],
    "_WinAPI_PlgBlt": [
        "Performs a bit-block transfer of color data from the specified rectangle in the source DC to the specified parallelogram in the DC context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PlgBlt ( $hDestDC, Const ByRef $aPoint, $hSrcDC, $iXSrc, $iYSrc, $iWidth, $iHeight [, $hMask = 0 [, $iXMask = 0 [, $iYMask = 0]]] )\r```"
    ],
    "_WinAPI_RadialGradientFill": [
        "Fills radial gradient",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_RadialGradientFill ( $hDC, $iX, $iY, $iRadius, $iRGB1, $iRGB2 [, $fAngleStart = 0 [, $fAngleEnd = 360 [, $fStep = 5]]] )\r```"
    ],
    "_WinAPI_SaveHBITMAPToFile": [
        "Saves a specified bitmap to the specified bitmap (.bmp) file",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SaveHBITMAPToFile ( $sFilePath, $hBitmap [, $iXPelsPerMeter = Default [, $iYPelsPerMeter = Default]] )\r```"
    ],
    "_WinAPI_SaveHICONToFile": [
        "Saves a specified single or multiple icon (HICON) to the specified icon (.ico) file",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SaveHICONToFile ( $sFilePath, Const ByRef $vIcon [, $bCompress = 0 [, $iStart = 0 [, $iEnd = -1]]] )\r```"
    ],
    "_WinAPI_SetBitmapBits": [
        "Sets the bits of color data for a bitmap to the specified values",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetBitmapBits ( $hBitmap, $iSize, $pBits )\r```"
    ],
    "_WinAPI_SetBitmapDimensionEx": [
        "Assigns preferred dimensions to a compatible bitmap",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetBitmapDimensionEx ( $hBitmap, $iWidth, $iHeight )\r```"
    ],
    "_WinAPI_SetDIBColorTable": [
        "Sets RGB color table in the DIB section bitmap",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetDIBColorTable ( $hBitmap, $tColorTable, $iColorCount )\r```"
    ],
    "_WinAPI_SetDIBitsToDevice": [
        "Sets the pixels in the specified rectangle on the device",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetDIBitsToDevice ( $hDC, $iXDest, $iYDest, $iWidth, $iHeight, $iXSrc, $iYSrc, $iStartScan, $iScanLines, $tBITMAPINFO, $iUsage, $pBits )\r```"
    ],
    "_WinAPI_SetPixel": [
        "Sets the pixel at the specified coordinates to the specified color",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetPixel ( $hDC, $iX, $iY, $iRGB )\r```"
    ],
    "_WinAPI_SetStretchBltMode": [
        "Sets the bitmap stretching mode in the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetStretchBltMode ( $hDC, $iMode )\r```"
    ],
    "_WinAPI_StretchBlt": [
        "Copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_StretchBlt ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRop )\r```"
    ],
    "_WinAPI_StretchDIBits": [
        "Copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle, stretching or compressing the rows and columns by using the specified raster operation",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_StretchDIBits ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $tBITMAPINFO, $iUsage, $pBits, $iRop )\r```"
    ],
    "_WinAPI_TransparentBlt": [
        "Performs a bit-block transfer of the color data corresponding to a rectangle of pixels",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_TransparentBlt ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRGB )\r```"
    ],
    "_WinAPI_CreateBrushIndirect": [
        "Creates a logical brush that has the specified style, color, and pattern",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateBrushIndirect ( $iStyle, $iRGB [, $iHatch = 0] )\r```"
    ],
    "_WinAPI_ExtCreatePen": [
        "Creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ExtCreatePen ( $iPenStyle, $iWidth, $iBrushStyle, $iRGB [, $iHatch = 0 [, $aUserStyle = 0 [, $iStart = 0 [, $iEnd = -1]]]] )\r```"
    ],
    "_WinAPI_GetBrushOrg": [
        "Retrieves the current brush origin for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetBrushOrg ( $hDC )\r```"
    ],
    "_WinAPI_PatBlt": [
        "Paints the specified rectangle using the brush that is currently selected into the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PatBlt ( $hDC, $iX, $iY, $iWidth, $iHeight, $iRop )\r```"
    ],
    "_WinAPI_SetBrushOrg": [
        "Sets the brush origin that GDI assigns to the next brush an application selects into the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetBrushOrg ( $hDC, $iX, $iY )\r```"
    ],
    "_WinAPI_SetDCBrushColor": [
        "Sets the current device context (DC) brush color to the specified color value",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetDCBrushColor ( $hDC, $iRGB )\r```"
    ],
    "_WinAPI_SetDCPenColor": [
        "Sets the current device context (DC) pen color to the specified color value",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetDCPenColor ( $hDC, $iRGB )\r```"
    ],
    "_WinAPI_ExcludeClipRect": [
        "Creates a new clipping region that consists of the existing clipping region minus the specified rectangle",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ExcludeClipRect ( $hDC, $tRECT )\r```"
    ],
    "_WinAPI_ExtSelectClipRgn": [
        "Combines the specified region with the current clipping region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ExtSelectClipRgn ( $hDC, $hRgn [, $iMode = 5] )\r```"
    ],
    "_WinAPI_GetClipBox": [
        "Retrieves the dimensions of the bounding rectangle of the visible area",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetClipBox ( $hDC, ByRef $tRECT )\r```"
    ],
    "_WinAPI_GetClipRgn": [
        "Retrieves a handle identifying the current application-defined clipping region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetClipRgn ( $hDC )\r```"
    ],
    "_WinAPI_IntersectClipRect": [
        "Creates a new clipping region from the intersection of the current clipping region and the specified rectangle",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_IntersectClipRect ( $hDC, $tRECT )\r```"
    ],
    "_WinAPI_OffsetClipRgn": [
        "Moves the clipping region of a device context by the specified offsets",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_OffsetClipRgn ( $hDC, $iXOffset, $iYOffset )\r```"
    ],
    "_WinAPI_PtVisible": [
        "Determines whether the specified point is within the clipping region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PtVisible ( $hDC, $iX, $iY )\r```"
    ],
    "_WinAPI_RectVisible": [
        "Determines whether any part of the specified rectangle lies within the clipping region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_RectVisible ( $hDC, $tRECT )\r```"
    ],
    "_WinAPI_SelectClipPath": [
        "Selects the current path as a clipping region, combining the new region with any existing clipping region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SelectClipPath ( $hDC [, $iMode = 5] )\r```"
    ],
    "_WinAPI_SelectClipRgn": [
        "Selects a region as the current clipping region for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SelectClipRgn ( $hDC, $hRgn )\r```"
    ],
    "_WinAPI_ColorAdjustLuma": [
        "Changes the luminance of a RGB value",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ColorAdjustLuma ( $iRGB, $iPercent [, $bScale = True] )\r```"
    ],
    "_WinAPI_ColorHLSToRGB": [
        "Converts colors from hue-luminance-saturation (HLS) to RGB format",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ColorHLSToRGB ( $iHue, $iLuminance, $iSaturation )\r```"
    ],
    "_WinAPI_ColorRGBToHLS": [
        "Converts colors from RGB to hue-luminance-saturation (HLS) format",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ColorRGBToHLS ( $iRGB, ByRef $iHue, ByRef $iLuminance, ByRef $iSaturation )\r```"
    ],
    "_WinAPI_CreateColorAdjustment": [
        "Creates $tagCOLORADJUSTMENT structure specifies the color adjustment",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateColorAdjustment ( [$iFlags = 0 [, $iIlluminant = 0 [, $iGammaR = 10000 [, $iGammaG = 10000 [, $iGammaB = 10000 [, $iBlack = 0 [, $iWhite = 10000 [, $iContrast = 0 [, $iBrightness = 0 [, $iColorfulness = 0 [, $iTint = 0]]]]]]]]]]] )\r```"
    ],
    "_WinAPI_GetBValue": [
        "Retrieves an intensity value for the blue component of a 32-bit RGB value",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetBValue ( $iRGB )\r```"
    ],
    "_WinAPI_GetColorAdjustment": [
        "Retrieves the color adjustment for the specified device context (DC)",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetColorAdjustment ( $hDC )\r```"
    ],
    "_WinAPI_GetDeviceGammaRamp": [
        "Gets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetDeviceGammaRamp ( $hDC, ByRef $aRamp )\r```"
    ],
    "_WinAPI_GetGValue": [
        "Retrieves an intensity value for the green component of a 32-bit RGB value",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetGValue ( $iRGB )\r```"
    ],
    "_WinAPI_GetRValue": [
        "Retrieves an intensity value for the red component of a 32-bit RGB value",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetRValue ( $iRGB )\r```"
    ],
    "_WinAPI_GetUDFColorMode": [
        "Retrieves the current color mode for WinAPIEx UDF library",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetUDFColorMode ( )\r```"
    ],
    "_WinAPI_InvertColor": [
        "Inverts (negative) the specified color",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_InvertColor ( $iColor )\r```"
    ],
    "_WinAPI_RGB": [
        "Creates a RGB color value based on red, green, and blue components",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_RGB ( $iRed, $iGreen, $iBlue )\r```"
    ],
    "_WinAPI_SetColorAdjustment": [
        "Sets the color adjustment for a device context (DC)",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetColorAdjustment ( $hDC, $tAdjustment )\r```"
    ],
    "_WinAPI_SetDeviceGammaRamp": [
        "Sets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetDeviceGammaRamp ( $hDC, Const ByRef $aRamp )\r```"
    ],
    "_WinAPI_SetUDFColorMode": [
        "Sets the color mode for the WinAPIEx library",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetUDFColorMode ( $iMode )\r```"
    ],
    "_WinAPI_SwitchColor": [
        "Converts a color from BGR to RGB and vice versa",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SwitchColor ( $iColor )\r```"
    ],
    "_WinAPI_CombineTransform": [
        "Concatenates two world-space to page-space transformations",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CombineTransform ( $tXFORM1, $tXFORM2 )\r```"
    ],
    "_WinAPI_CreateTransform": [
        "Creates $tagXFORM structure specifies a world-space to page-space transformation",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateTransform ( [$nM11 = 1 [, $nM12 = 0 [, $nM21 = 0 [, $nM22 = 1 [, $nDX = 0 [, $nDY = 0]]]]]] )\r```"
    ],
    "_WinAPI_DPtoLP": [
        "Converts device coordinates into logical coordinates",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DPtoLP ( $hDC, ByRef $tPOINT [, $iCount = 1] )\r```"
    ],
    "_WinAPI_GetCurrentPosition": [
        "Retrieves the current position for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetCurrentPosition ( $hDC )\r```"
    ],
    "_WinAPI_GetGraphicsMode": [
        "Retrieves the current graphics mode for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetGraphicsMode ( $hDC )\r```"
    ],
    "_WinAPI_GetMapMode": [
        "Retrieves the current mapping mode",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetMapMode ( $hDC )\r```"
    ],
    "_WinAPI_GetPosFromRect": [
        "Interprets the coordinates of the rectangle as offset and position coordinates",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetPosFromRect ( $tRECT )\r```"
    ],
    "_WinAPI_GetWindowExt": [
        "Retrieves the x-extent and y-extent of the window for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetWindowExt ( $hDC )\r```"
    ],
    "_WinAPI_GetWindowOrg": [
        "Retrieves the x-coordinates and y-coordinates of the window origin for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetWindowOrg ( $hDC )\r```"
    ],
    "_WinAPI_GetWorldTransform": [
        "Retrieves the current world-space to page-space transformation",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetWorldTransform ( $hDC )\r```"
    ],
    "_WinAPI_LPtoDP": [
        "Converts a logical coordinates into device coordinates",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_LPtoDP ( $hDC, ByRef $tPOINT [, $iCount = 1] )\r```"
    ],
    "_WinAPI_ModifyWorldTransform": [
        "Changes the world transformation for a device context using the specified mode",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ModifyWorldTransform ( $hDC, $tXFORM, $iMode )\r```"
    ],
    "_WinAPI_OffsetPoints": [
        "Moves a points from the array by the specified offsets",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_OffsetPoints ( ByRef $aPoint, $iXOffset, $iYOffset [, $iStart = 0 [, $iEnd = -1]] )\r```"
    ],
    "_WinAPI_OffsetWindowOrg": [
        "Modifies the window origin for a device context using the specified horizontal and vertical offsets",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_OffsetWindowOrg ( $hDC, $iXOffset, $iYOffset )\r```"
    ],
    "_WinAPI_RotatePoints": [
        "Rotates a points from the array by the specified angle",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_RotatePoints ( ByRef $aPoint, $iXC, $iYC, $fAngle [, $iStart = 0 [, $iEnd = -1]] )\r```"
    ],
    "_WinAPI_ScaleWindowExt": [
        "Modifies the window for a device context using the ratios formed by the specified multiplicands and divisors",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ScaleWindowExt ( $hDC, $iXNum, $iXDenom, $iYNum, $iYDenom )\r```"
    ],
    "_WinAPI_SetGraphicsMode": [
        "Sets the graphics mode for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetGraphicsMode ( $hDC, $iMode )\r```"
    ],
    "_WinAPI_SetMapMode": [
        "Sets the mapping mode of the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetMapMode ( $hDC, $iMode )\r```"
    ],
    "_WinAPI_SetWindowExt": [
        "Sets the horizontal and vertical extents of the window for a device context by using the specified values",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetWindowExt ( $hDC, $iXExtent, $iYExtent )\r```"
    ],
    "_WinAPI_SetWindowOrg": [
        "Specifies which window point maps to the viewport origin (0,0)",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetWindowOrg ( $hDC, $iX, $iY )\r```"
    ],
    "_WinAPI_SetWorldTransform": [
        "Sets a two-dimensional linear transformation between world space and page space for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetWorldTransform ( $hDC, $tXFORM )\r```"
    ],
    "_WinAPI_DwmDefWindowProc": [
        "Default window procedure for Desktop Window Manager (DWM) hit testing within the non-client area",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmDefWindowProc ( $hWnd, $iMsg, $wParam, $lParam )\r```"
    ],
    "_WinAPI_DwmEnableBlurBehindWindow": [
        "Enables the blur effect on a specified window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmEnableBlurBehindWindow ( $hWnd [, $bEnable = True [, $bTransition = False [, $hRgn = 0]]] )\r```"
    ],
    "_WinAPI_DwmEnableComposition": [
        "Enables or disables Desktop Window Manager (DWM) composition",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmEnableComposition ( $bEnable )\r```"
    ],
    "_WinAPI_DwmExtendFrameIntoClientArea": [
        "Extends the window frame behind the client area",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmExtendFrameIntoClientArea ( $hWnd [, $tMARGINS = 0] )\r```"
    ],
    "_WinAPI_DwmGetColorizationColor": [
        "Retrieves the current color used for Desktop Window Manager (DWM) glass composition",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmGetColorizationColor ( )\r```"
    ],
    "_WinAPI_DwmGetColorizationParameters": [
        "Retrieves the colorization parameters used for Desktop Window Manager (DWM)",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmGetColorizationParameters ( )\r```"
    ],
    "_WinAPI_DwmGetWindowAttribute": [
        "Retrieves the current value of a specified attribute applied to the window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmGetWindowAttribute ( $hWnd, $iAttribute )\r```"
    ],
    "_WinAPI_DwmInvalidateIconicBitmaps": [
        "Indicates that all previously provided iconic bitmaps from a window, both thumbnails and peek representations, should be refreshed",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmInvalidateIconicBitmaps ( $hWnd )\r```"
    ],
    "_WinAPI_DwmIsCompositionEnabled": [
        "Determines whether Desktop Window Manager (DWM) composition is enabled",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmIsCompositionEnabled ( )\r```"
    ],
    "_WinAPI_DwmQueryThumbnailSourceSize": [
        "Returns the source size of the Desktop Window Manager (DWM) thumbnail",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmQueryThumbnailSourceSize ( $hThumbnail )\r```"
    ],
    "_WinAPI_DwmRegisterThumbnail": [
        "Creates a Desktop Window Manager (DWM) thumbnail relationship between the destination and source windows",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmRegisterThumbnail ( $hDestination, $hSource )\r```"
    ],
    "_WinAPI_DwmSetColorizationParameters": [
        "Sets the colorization parameters for Desktop Window Manager (DWM)",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmSetColorizationParameters ( $tDWMCP )\r```"
    ],
    "_WinAPI_DwmSetIconicLivePreviewBitmap": [
        "Sets a static, iconic bitmap to display a live preview (also known as a Peek preview) of a window or tab",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmSetIconicLivePreviewBitmap ( $hWnd, $hBitmap [, $bFrame = False [, $tClient = 0]] )\r```"
    ],
    "_WinAPI_DwmSetIconicThumbnail": [
        "Sets a static, iconic bitmap on a window or tab to use as a thumbnail representation",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmSetIconicThumbnail ( $hWnd, $hBitmap [, $bFrame = False] )\r```"
    ],
    "_WinAPI_DwmSetWindowAttribute": [
        "Sets the value of the specified attributes for non-client rendering to apply to the window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmSetWindowAttribute ( $hWnd, $iAttribute, $iData )\r```"
    ],
    "_WinAPI_DwmUnregisterThumbnail": [
        "Removes a Desktop Window Manager (DWM) thumbnail relationship",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmUnregisterThumbnail ( $hThumbnail )\r```"
    ],
    "_WinAPI_DwmUpdateThumbnailProperties": [
        "Specifies Desktop Window Manager (DWM) thumbnail properties",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DwmUpdateThumbnailProperties ( $hThumbnail [, $bVisible = True [, $bClientAreaOnly = False [, $iOpacity = 255 [, $tRectDest = 0 [, $tRectSrc = 0]]]]] )\r```"
    ],
    "_WinAPI_EnumDisplaySettings": [
        "Retrieves information about one of the graphics modes for a display device",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_EnumDisplaySettings ( $sDevice, $iMode )\r```"
    ],
    "_WinAPI_GetCurrentObject": [
        "Retrieves a handle to an object of the specified type that has been selected into the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetCurrentObject ( $hDC, $iType )\r```"
    ],
    "_WinAPI_GetDCEx": [
        "Retrieves a handle to a device context (DC) for the client area of a specified window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetDCEx ( $hWnd, $hRgn, $iFlags )\r```"
    ],
    "_WinAPI_GetObjectType": [
        "Retrieves the type of the specified object",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetObjectType ( $hObject )\r```"
    ],
    "_WinAPI_PrintWindow": [
        "Copies a visual window into the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PrintWindow ( $hWnd, $hDC [, $bClient = False] )\r```"
    ],
    "_WinAPI_RestoreDC": [
        "Restores a device context (DC) to the specified state",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_RestoreDC ( $hDC, $iID )\r```"
    ],
    "_WinAPI_SaveDC": [
        "Saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes to a context stack",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SaveDC ( $hDC )\r```"
    ],
    "_WinAPI_AddFontMemResourceEx": [
        "Adds the font resource from a memory image to the system",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_AddFontMemResourceEx ( $pData, $iSize )\r```"
    ],
    "_WinAPI_AddFontResourceEx": [
        "Adds the font resource from the specified file to the system font table",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_AddFontResourceEx ( $sFont [, $iFlag = 0 [, $bNotify = False]] )\r```"
    ],
    "_WinAPI_CreateFontEx": [
        "Creates a logical font with the specified characteristics",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateFontEx ( $iHeight [, $iWidth = 0 [, $iEscapement = 0 [, $iOrientation = 0 [, $iWeight = 400 [, $bItalic = False [, $bUnderline = False [, $bStrikeOut = False [, $iCharSet = 1 [, $iOutPrecision = 0 [, $iClipPrecision = 0 [, $iQuality = 0 [, $iPitchAndFamily = 0 [, $sFaceName = '' [, $iStyle = 0]]]]]]]]]]]]]] )\r```"
    ],
    "_WinAPI_EnumFontFamilies": [
        "Enumerates all uniquely-named fonts in the system that match the specified font characteristics",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_EnumFontFamilies ( [$hDC = 0 [, $sFaceName = '' [, $iCharSet = 1 [, $iFontType = 0x07 [, $sPattern = '' [, $bExclude = False]]]]]] )\r```"
    ],
    "_WinAPI_GetFontName": [
        "Retrieves the unique name of the font based on its typeface name, character set, and style",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetFontName ( $sFaceName [, $iStyle = 0 [, $iCharSet = 1]] )\r```"
    ],
    "_WinAPI_GetFontResourceInfo": [
        "Retrieves the fontname from the specified font resource file",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetFontResourceInfo ( $sFont [, $bForce = False [, $iFlag = Default]] )\r```"
    ],
    "_WinAPI_GetFontMemoryResourceInfo": [
        "Reads out font information from a TTF loaded into the memory",
        "```\r#include <GDIPlus.au3>\r_WinAPI_GetFontMemoryResourceInfo ( $pMemory [, $iFlag = 1] )\r```"
    ],
    "_WinAPI_GetGlyphOutline": [
        "Retrieves the outline or bitmap for a character in the TrueType font",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetGlyphOutline ( $hDC, $sChar, $iFormat, ByRef $pBuffer [, $tMAT2 = 0] )\r```"
    ],
    "_WinAPI_GetOutlineTextMetrics": [
        "Retrieves text metrics for TrueType fonts",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetOutlineTextMetrics ( $hDC )\r```"
    ],
    "_WinAPI_GetTabbedTextExtent": [
        "Computes the width and height of a character string which may contain one or more tab characters",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetTabbedTextExtent ( $hDC, $sText [, $aTab = 0 [, $iStart = 0 [, $iEnd = -1]]] )\r```"
    ],
    "_WinAPI_GetTextAlign": [
        "Retrieves the text-alignment setting for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetTextAlign ( $hDC )\r```"
    ],
    "_WinAPI_GetTextCharacterExtra": [
        "Retrieves the current intercharacter spacing for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetTextCharacterExtra ( $hDC )\r```"
    ],
    "_WinAPI_GetTextColor": [
        "Retrieves the current text color for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetTextColor ( $hDC )\r```"
    ],
    "_WinAPI_GetTextFace": [
        "Retrieves the typeface name of the font that is selected into the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetTextFace ( $hDC )\r```"
    ],
    "_WinAPI_RemoveFontMemResourceEx": [
        "Removes the fonts added from a memory image",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_RemoveFontMemResourceEx ( $hFont )\r```"
    ],
    "_WinAPI_RemoveFontResourceEx": [
        "Removes the fonts in the specified file from the system font table",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_RemoveFontResourceEx ( $sFont [, $iFlag = 0 [, $bNotify = False]] )\r```"
    ],
    "_WinAPI_SetTextAlign": [
        "Sets the text-alignment flags for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetTextAlign ( $hDC [, $iMode = 0] )\r```"
    ],
    "_WinAPI_SetTextCharacterExtra": [
        "Sets the intercharacter spacing for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetTextCharacterExtra ( $hDC, $iCharExtra )\r```"
    ],
    "_WinAPI_SetTextJustification": [
        "Specifies the amount of space the system should add to the break characters in a string of text",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetTextJustification ( $hDC, $iBreakExtra, $iBreakCount )\r```"
    ],
    "_WinAPI_TabbedTextOut": [
        "Writes a character string at a specified location and expanding tabs to the specified tab-stop positions",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_TabbedTextOut ( $hDC, $iX, $iY, $sText [, $aTab = 0 [, $iStart = 0 [, $iEnd = -1 [, $iOrigin = 0]]]] )\r```"
    ],
    "_WinAPI_TextOut": [
        "Writes a string at the specified location, using the currently selected font, background color, and text color",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_TextOut ( $hDC, $iX, $iY, $sText )\r```"
    ],
    "_WinAPI_AngleArc": [
        "Draws a line segment and an arc",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_AngleArc ( $hDC, $iX, $iY, $iRadius, $nStartAngle, $nSweepAngle )\r```"
    ],
    "_WinAPI_Arc": [
        "Draws an elliptical arc",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_Arc ( $hDC, $tRECT, $iXStartArc, $iYStartArc, $iXEndArc, $iYEndArc )\r```"
    ],
    "_WinAPI_ArcTo": [
        "Draws an elliptical arc",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ArcTo ( $hDC, $tRECT, $iXRadial1, $iYRadial1, $iXRadial2, $iYRadial2 )\r```"
    ],
    "_WinAPI_GetArcDirection": [
        "Retrieves the current arc direction for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetArcDirection ( $hDC )\r```"
    ],
    "_WinAPI_LineDDA": [
        "Determines which pixels should be highlighted for a line",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_LineDDA ( $iX1, $iY1, $iX2, $iY2, $pLineProc [, $pData = 0] )\r```"
    ],
    "_WinAPI_MoveToEx": [
        "Updates the current position to the specified point",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_MoveToEx ( $hDC, $iX, $iY )\r```"
    ],
    "_WinAPI_PolyBezier": [
        "Draws one or more Bezier curves",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PolyBezier ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] )\r```"
    ],
    "_WinAPI_PolyBezierTo": [
        "Draws one or more Bezier curves",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PolyBezierTo ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] )\r```"
    ],
    "_WinAPI_PolyDraw": [
        "Draws a set of line segments and Bezier curves",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PolyDraw ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] )\r```"
    ],
    "_WinAPI_SetArcDirection": [
        "Sets the drawing arc direction",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetArcDirection ( $hDC, $iDirection )\r```"
    ],
    "_WinAPI_CloseEnhMetaFile": [
        "Closes an enhanced-metafile device context and returns a handle that identifies an enhanced-format metafile",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CloseEnhMetaFile ( $hDC )\r```"
    ],
    "_WinAPI_CopyEnhMetaFile": [
        "Copies the contents of an enhanced-format metafile to a specified file",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CopyEnhMetaFile ( $hEmf [, $sFilePath = ''] )\r```"
    ],
    "_WinAPI_CreateEnhMetaFile": [
        "Creates a device context for an enhanced-format metafile",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateEnhMetaFile ( [$hDC = 0 [, $tRECT = 0 [, $bPixels = False [, $sFilePath = '' [, $sDescription = '']]]]] )\r```"
    ],
    "_WinAPI_DeleteEnhMetaFile": [
        "Deletes an enhanced-format metafile or an enhanced-format metafile handle",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DeleteEnhMetaFile ( $hEmf )\r```"
    ],
    "_WinAPI_GdiComment": [
        "Copies a comment from a buffer into a specified enhanced-format metafile",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GdiComment ( $hDC, $pBuffer, $iSize )\r```"
    ],
    "_WinAPI_GetEnhMetaFile": [
        "Creates a handle that identifies the enhanced-format metafile stored in the specified file",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetEnhMetaFile ( $sFilePath )\r```"
    ],
    "_WinAPI_GetEnhMetaFileBits": [
        "Retrieves the contents of the specified enhanced-format metafile",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetEnhMetaFileBits ( $hEmf, ByRef $pBuffer )\r```"
    ],
    "_WinAPI_GetEnhMetaFileDescription": [
        "Retrieves an optional text description from an enhanced-format metafile",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetEnhMetaFileDescription ( $hEmf )\r```"
    ],
    "_WinAPI_GetEnhMetaFileDimension": [
        "Retrieves a dimension of the specified enhanced-format metafile",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetEnhMetaFileDimension ( $hEmf )\r```"
    ],
    "_WinAPI_GetEnhMetaFileHeader": [
        "Retrieves the record containing the header for the specified enhanced-format metafile",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetEnhMetaFileHeader ( $hEmf )\r```"
    ],
    "_WinAPI_PlayEnhMetaFile": [
        "Displays the picture stored in the specified enhanced-format metafile",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PlayEnhMetaFile ( $hDC, $hEmf, $tRECT )\r```"
    ],
    "_WinAPI_SetEnhMetaFileBits": [
        "Creates a memory-based enhanced-format metafile from the specified data",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetEnhMetaFileBits ( $pData, $iLength )\r```"
    ],
    "_WinAPI_EnumDisplayMonitors": [
        "Enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers)",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_EnumDisplayMonitors ( [$hDC = 0 [, $tRECT = 0]] )\r```"
    ],
    "_WinAPI_MonitorFromPoint": [
        "Retrieves a handle to the display monitor that contains a specified point",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_MonitorFromPoint ( $tPOINT [, $iFlag = 1] )\r```"
    ],
    "_WinAPI_MonitorFromRect": [
        "Retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_MonitorFromRect ( $tRECT [, $iFlag = 1] )\r```"
    ],
    "_WinAPI_MonitorFromWindow": [
        "Retrieves a handle to the display monitor that has the largest area of intersection with the specified window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_MonitorFromWindow ( $hWnd [, $iFlag = 1] )\r```"
    ],
    "_WinAPI_BeginPaint": [
        "Prepares the specified window for painting",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_BeginPaint ( $hWnd, ByRef $tPAINTSTRUCT )\r```"
    ],
    "_WinAPI_DrawAnimatedRects": [
        "Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DrawAnimatedRects ( $hWnd, $tRectFrom, $tRectTo )\r```"
    ],
    "_WinAPI_DrawShadowText": [
        "Draws formatted text in the specified rectangle with a drop shadow",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DrawShadowText ( $hDC, $sText, $iRGBText, $iRGBShadow [, $iXOffset = 0 [, $iYOffset = 0 [, $tRECT = 0 [, $iFlags = 0]]]] )\r```"
    ],
    "_WinAPI_EndPaint": [
        "Marks the end of painting in the specified window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_EndPaint ( $hWnd, ByRef $tPAINTSTRUCT )\r```"
    ],
    "_WinAPI_GetBkColor": [
        "Retrieves the current background color for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetBkColor ( $hDC )\r```"
    ],
    "_WinAPI_GetBoundsRect": [
        "Obtains the current accumulated bounding rectangle for a specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetBoundsRect ( $hDC [, $iFlags = 0] )\r```"
    ],
    "_WinAPI_GetROP2": [
        "Retrieves the foreground mix mode of the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetROP2 ( $hDC )\r```"
    ],
    "_WinAPI_GetUpdateRect": [
        "Retrieves the coordinates of the rectangle that completely encloses the update region of the specified window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetUpdateRect ( $hWnd [, $bErase = True] )\r```"
    ],
    "_WinAPI_GetUpdateRgn": [
        "Retrieves the update region of a window by copying it into the specified region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetUpdateRgn ( $hWnd, $hRgn [, $bErase = True] )\r```"
    ],
    "_WinAPI_GetWindowRgnBox": [
        "Retrieves the dimensions of the tightest bounding rectangle for the window region of a window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetWindowRgnBox ( $hWnd, ByRef $tRECT )\r```"
    ],
    "_WinAPI_InvalidateRgn": [
        "Adds a region to the specified window's update region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_InvalidateRgn ( $hWnd [, $hRgn = 0 [, $bErase = True]] )\r```"
    ],
    "_WinAPI_LockWindowUpdate": [
        "Disables or enables drawing in the specified window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_LockWindowUpdate ( $hWnd )\r```"
    ],
    "_WinAPI_PaintDesktop": [
        "Fills the clipping region in the specified device context with the desktop pattern or wallpaper",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PaintDesktop ( $hDC )\r```"
    ],
    "_WinAPI_SetBoundsRect": [
        "Controls the accumulation of bounding rectangle information for the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetBoundsRect ( $hDC, $iFlags [, $tRECT = 0] )\r```"
    ],
    "_WinAPI_SetROP2": [
        "Retrieves the foreground mix mode of the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetROP2 ( $hDC, $iMode )\r```"
    ],
    "_WinAPI_ValidateRect": [
        "Removes a rectangle from the current update region of the specified window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ValidateRect ( $hWnd [, $tRECT = 0] )\r```"
    ],
    "_WinAPI_ValidateRgn": [
        "Removes a region from the current update region of the specified window",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ValidateRgn ( $hWnd [, $hRgn = 0] )\r```"
    ],
    "_WinAPI_WindowFromDC": [
        "Retrieves a handle to the window associated with the specified display device context (DC)",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_WindowFromDC ( $hDC )\r```"
    ],
    "_WinAPI_AbortPath": [
        "Closes and discards any paths in the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_AbortPath ( $hDC )\r```"
    ],
    "_WinAPI_BeginPath": [
        "Opens a path bracket in the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_BeginPath ( $hDC )\r```"
    ],
    "_WinAPI_CloseFigure": [
        "Closes an open figure in a path",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CloseFigure ( $hDC )\r```"
    ],
    "_WinAPI_EndPath": [
        "Closes a path bracket and selects the path defined by the bracket into the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_EndPath ( $hDC )\r```"
    ],
    "_WinAPI_FillPath": [
        "Closes any open figures in the current path and fills the path's interior by using the current brush",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_FillPath ( $hDC )\r```"
    ],
    "_WinAPI_FlattenPath": [
        "Transforms any curves in the path that is selected into the current DC, turning each curve into a sequence of lines",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_FlattenPath ( $hDC )\r```"
    ],
    "_WinAPI_PathToRegion": [
        "Creates a region from the path that is selected into the specified device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PathToRegion ( $hDC )\r```"
    ],
    "_WinAPI_StrokeAndFillPath": [
        "Closes any open figures in a path, strokes the outline of the path, and fills its interior",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_StrokeAndFillPath ( $hDC )\r```"
    ],
    "_WinAPI_StrokePath": [
        "Renders the specified path by using the current pen",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_StrokePath ( $hDC )\r```"
    ],
    "_WinAPI_WidenPath": [
        "Redefines the current path as the area that would be painted if the path were stroked",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_WidenPath ( $hDC )\r```"
    ],
    "_WinAPI_CopyRect": [
        "Copies the coordinates of one rectangle to another",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CopyRect ( $tRECT )\r```"
    ],
    "_WinAPI_DrawFocusRect": [
        "Draws a rectangle in the style used to indicate that the rectangle has the focus",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_DrawFocusRect ( $hDC, $tRECT )\r```"
    ],
    "_WinAPI_EqualRect": [
        "Determines whether the two specified rectangles are equal",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_EqualRect ( $tRECT1, $tRECT2 )\r```"
    ],
    "_WinAPI_InflateRect": [
        "Increases or decreases the width and height of the specified rectangle",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_InflateRect ( ByRef $tRECT, $iDX, $iDY )\r```"
    ],
    "_WinAPI_IntersectRect": [
        "Creates the intersection of two rectangles",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_IntersectRect ( $tRECT1, $tRECT2 )\r```"
    ],
    "_WinAPI_IsRectEmpty": [
        "Determines whether the specified rectangle is empty",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_IsRectEmpty ( $tRECT )\r```"
    ],
    "_WinAPI_OffsetRect": [
        "Moves the specified rectangle by the specified offsets",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_OffsetRect ( ByRef $tRECT, $iDX, $iDY )\r```"
    ],
    "_WinAPI_PtInRectEx": [
        "Determines whether the specified point lies within the specified rectangle",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PtInRectEx ( $iX, $iY, $iLeft, $iTop, $iRight, $iBottom )\r```"
    ],
    "_WinAPI_SubtractRect": [
        "Determines the coordinates of a rectangle formed by subtracting one rectangle from another",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SubtractRect ( $tRECT1, $tRECT2 )\r```"
    ],
    "_WinAPI_UnionRect": [
        "Creates the union of two rectangles",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_UnionRect ( $tRECT1, $tRECT2 )\r```"
    ],
    "_WinAPI_CreateEllipticRgn": [
        "Creates an elliptical region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateEllipticRgn ( $tRECT )\r```"
    ],
    "_WinAPI_CreateNullRgn": [
        "Creates an empty region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateNullRgn ( )\r```"
    ],
    "_WinAPI_CreatePolygonRgn": [
        "Creates a polygonal region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreatePolygonRgn ( Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1 [, $iMode = 1]]] )\r```"
    ],
    "_WinAPI_CreateRectRgnIndirect": [
        "Creates a rectangular region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_CreateRectRgnIndirect ( $tRECT )\r```"
    ],
    "_WinAPI_EqualRgn": [
        "Checks the two specified regions to determine whether they are identical",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_EqualRgn ( $hRgn1, $hRgn2 )\r```"
    ],
    "_WinAPI_ExtCreateRegion": [
        "Creates a region from the specified region and transformation data",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_ExtCreateRegion ( $tRGNDATA [, $tXFORM = 0] )\r```"
    ],
    "_WinAPI_FillRgn": [
        "Fills a region by using the specified brush",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_FillRgn ( $hDC, $hRgn, $hBrush )\r```"
    ],
    "_WinAPI_FrameRgn": [
        "Draws a border around the specified region by using the specified brush",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_FrameRgn ( $hDC, $hRgn, $hBrush, $iWidth, $iHeight )\r```"
    ],
    "_WinAPI_GetPolyFillMode": [
        "Retrieves the current polygon fill mode",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetPolyFillMode ( $hDC )\r```"
    ],
    "_WinAPI_GetRegionData": [
        "Fills the specified buffer with data describing a region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetRegionData ( $hRgn, ByRef $tRGNDATA )\r```"
    ],
    "_WinAPI_GetRgnBox": [
        "Retrieves the bounding rectangle of the specified region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_GetRgnBox ( $hRgn, ByRef $tRECT )\r```"
    ],
    "_WinAPI_InvertRgn": [
        "Inverts the colors in the specified region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_InvertRgn ( $hDC, $hRgn )\r```"
    ],
    "_WinAPI_OffsetRgn": [
        "Moves a region by the specified offsets",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_OffsetRgn ( $hRgn, $iXOffset, $iYOffset )\r```"
    ],
    "_WinAPI_PaintRgn": [
        "Paints the specified region by using the brush currently selected into the device context",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PaintRgn ( $hDC, $hRgn )\r```"
    ],
    "_WinAPI_PtInRegion": [
        "Determines whether the specified point is inside the specified region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_PtInRegion ( $hRgn, $iX, $iY )\r```"
    ],
    "_WinAPI_RectInRegion": [
        "Determines whether any part of the specified rectangle is within the boundaries of a region",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_RectInRegion ( $hRgn, $tRECT )\r```"
    ],
    "_WinAPI_SetPolyFillMode": [
        "Sets the polygon fill mode for functions that fill polygons",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetPolyFillMode ( $hDC [, $iMode = 1] )\r```"
    ],
    "_WinAPI_SetRectRgn": [
        "Converts a region into a rectangular region with the specified coordinates",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_SetRectRgn ( $hRgn, $tRECT )\r```"
    ],
    "_WinAPI_Ellipse": [
        "Draws an ellipse",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_Ellipse ( $hDC, $tRECT )\r```"
    ],
    "_WinAPI_InvertRect": [
        "Inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_InvertRect ( $hDC, $tRECT )\r```"
    ],
    "_WinAPI_Polygon": [
        "Draws a polygon consisting of two or more vertices connected by straight lines",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_Polygon ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] )\r```"
    ],
    "_WinAPI_Rectangle": [
        "Draws a rectangle",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_Rectangle ( $hDC, $tRECT )\r```"
    ],
    "_WinAPI_RoundRect": [
        "Draws a rectangle with rounded corners",
        "```\r#include <WinAPIGdi.au3>\r_WinAPI_RoundRect ( $hDC, $tRECT, $iWidth, $iHeight )\r```"
    ]
}
