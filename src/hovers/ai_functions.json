{
    "Abs": [
        "Calculates the absolute value of a number.",
        "```\rAbs ( expression )\r```"
    ],
    "ACos": [
        "Calculates the arcCosine of a number.",
        "```\rACos ( expression )\r```"
    ],
    "AdlibRegister": [
        "Registers an Adlib function.",
        "```\rAdlibRegister ( \"function\" [, time = 250] )\r```"
    ],
    "AdlibUnRegister": [
        "Unregisters an adlib function.",
        "```\rAdlibUnRegister ( [\"function\"] )\r```"
    ],
    "Asc": [
        "Returns the ASCII code of a character.",
        "```\rAsc ( \"char\" )\r```"
    ],
    "AscW": [
        "Returns the unicode code of a character.",
        "```\rAscW ( \"char\" )\r```"
    ],
    "ASin": [
        "Calculates the arcsine of a number.",
        "```\rASin ( expression )\r```"
    ],
    "Assign": [
        "Assigns a variable by name with the data.",
        "```\rAssign ( \"varname\", \"data\" [, flag = 0] )\r```"
    ],
    "ATan": [
        "Calculates the arctangent of a number.",
        "```\rATan ( expression )\r```"
    ],
    "AutoItSetOption": [
        "Changes the operation of various AutoIt functions/parameters.",
        "```\rAutoItSetOption ( \"option\" [, param] )\r```"
    ],
    "AutoItWinGetTitle": [
        "Retrieves the title of the AutoIt window.",
        "```\rAutoItWinGetTitle ( )\r```"
    ],
    "AutoItWinSetTitle": [
        "Changes the title of the AutoIt window.",
        "```\rAutoItWinSetTitle ( \"newtitle\" )\r```"
    ],
    "Beep": [
        "Plays back a beep to the user.",
        "```\rBeep ( [Frequency = 500 [, Duration = 1000]] )\r```"
    ],
    "Binary": [
        "Returns the binary representation of an expression.",
        "```\rBinary ( expression )\r```"
    ],
    "BinaryLen": [
        "Returns the number of bytes in a binary variant.",
        "```\rBinaryLen ( binary )\r```"
    ],
    "BinaryMid": [
        "Extracts a number of bytes from a binary variant.",
        "```\rBinaryMid ( binary, start [, count] )\r```"
    ],
    "BinaryToString": [
        "Converts a binary variant into a string.",
        "```\rBinaryToString ( expression [, flag = 1] )\r```"
    ],
    "BitAND": [
        "Performs a bitwise AND operation.",
        "```\rBitAND ( value1, value2 [, value n] )\r```"
    ],
    "BitNOT": [
        "Performs a bitwise NOT operation.",
        "```\rBitNOT ( value )\r```"
    ],
    "BitOR": [
        "Performs a bitwise OR operation.",
        "```\rBitOR ( value1, value2 [, value n] )\r```"
    ],
    "BitRotate": [
        "Performs a bit shifting operation, with rotation.",
        "```\rBitRotate ( value [, shift = 1 [, size = \"W\"]] )\r```"
    ],
    "BitShift": [
        "Performs a bit shifting operation.",
        "```\rBitShift ( value, shift )\r```"
    ],
    "BitXOR": [
        "Performs a bitwise exclusive OR (XOR) operation.",
        "```\rBitXOR ( value1, value2 [, value n] )\r```"
    ],
    "BlockInput": [
        "Disable/enable the mouse and keyboard.",
        "```\rBlockInput ( flag )\r```"
    ],
    "Break": [
        "Enables or disables the users' ability to exit a script from the tray icon menu.",
        "```\rBreak ( mode )\r```"
    ],
    "Call": [
        "Calls a user-defined or built-in function contained in first parameter.",
        "```\rCall ( \"function\" [, param1 [, param2 [, paramN]]] )\r```"
    ],
    "CDTray": [
        "Opens or closes the CD tray.",
        "```\rCDTray ( \"drive\", \"status\" )\r```"
    ],
    "Ceiling": [
        "Returns a number rounded up to the next integer.",
        "```\rCeiling ( expression )\r```"
    ],
    "Chr": [
        "Returns a character corresponding to an ASCII code.",
		"```\rChr ( ASCIIcode )\r```"
	],
    "ChrW": [
        "Returns a character corresponding to a unicode code.",
		"```\rChrW ( UNICODEcode )\r```"
	],
	"ClipGet": [
        "Retrieves text from the clipboard.",
        "```\rClipGet ( )\r```"
	],
	"ClipPut": [
        "Writes text to the clipboard.",
		"```\rClipPut ( \"value\" )\r```"
	],
    "ConsoleRead": [
        "Read from the STDIN stream of the AutoIt script process.",
		"```\rConsoleRead ( [peek = False [, binary = False]] )\r```"
	],
    "ConsoleWrite": [
        "Writes data to the STDOUT stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.",
        "```\rConsoleWrite ( \"data\" )\r```"
    ],
    "ConsoleWriteError": [
        "Writes data to the STDERR stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.",
        "```\rConsoleWriteError ( \"data\" )\r```"
    ],
    "ControlClick": [
        "Sends a mouse click command to a given control.",
        "```\rControlClick ( \"title\", \"text\", controlID [, button = \"left\" [, clicks = 1 [, x [, y]]]] )\r```"
    ],
    "ControlCommand" : [
        "Sends a command to a control.",
        "```\rControlCommand ( \"title\", \"text\", controlID, \"command\" [, \"option\"] )\r```"
    ],
    "ControlDisable" : [
        "Disables or \"grays-out\" a control.",
        "```\rControlDisable ( \"title\", \"text\", controlID )\r```"
    ],
    "ControlEnable" : [
        "Enables a \"grayed-out\" control.",
        "```\rControlEnable ( \"title\", \"text\", controlID )\r```"
    ],
    "ControlFocus" : [
        "Sets input focus to a given control on a window.",
        "```\rControlFocus ( \"title\", \"text\", controlID )\r```"
    ],
    "ControlGetFocus" : [
        "Returns the ControlRef# of the control that has keyboard focus within a specified window.",
        "```\rControlGetFocus ( \"title\" [, \"text\"] )\r```"
    ],
    "ControlGetHandle" : [
        "Retrieves the internal handle of a control.",
        "```\rControlGetHandle ( \"title\", \"text\", controlID )\r```"
    ],
    "ControlGetPos" : [
        "Retrieves the position and size of a control relative to its window.",
        "```\rControlGetPos ( \"title\", \"text\", controlID )\r```"
    ],
    "ControlGetText" : [
        "Retrieves text from a control.",
        "```\rControlGetText ( \"title\", \"text\", controlID )\r```"
    ],
    "ControlHide" : [
        "Hides a control.",
        "```\rControlHide ( \"title\", \"text\", controlID )\r```"
    ],
    "ControlListView" : [
        "Sends a command to a ListView32 control.",
        "```\rControlListView ( \"title\", \"text\", controlID, \"command\" [, option1 [, option2]] )\r```"
    ],
    "ControlMove" : [
        "Moves a control within a window.",
        "```\rControlMove ( \"title\", \"text\", controlID, x, y [, width [, height]] )\r```"
    ],
    "ControlSend" : [
        "Sends a string of characters to a control.",
        "```\rControlSend ( \"title\", \"text\", controlID, \"string\" [, flag = 0] )\r```"
    ],
    "ControlSetText" : [
        "Sets text of a control.",
        "```\rControlSetText ( \"title\", \"text\", controlID, \"new text\" [, flag = 0] )\r```"
    ],
    "ControlShow": [
        "Shows a control that was hidden.",
        "```\rControlShow ( \"title\", \"text\", controlID )\r```"
    ],
    "ControlTreeView": [
        "Sends a command to a TreeView32 control.",
        "```\rControlTreeView ( \"title\", \"text\", controlID, \"command\" [, option1] )\r```"
    ],
    "Cos": [
        "Calculates the cosine of a number.",
        "```\rCos ( expression )\r```"
    ],
    "Dec": [
        "Returns a numeric representation of a hexadecimal string.",
        "```\rDec ( \"hex\" [, flag = 0] )\r```"
    ],
    "DirCopy": [
        "Copies a directory and all sub-directories and files (Similar to xcopy).",
        "```\rDirCopy ( \"source dir\", \"dest dir\" [, flag = 0] )\r```"
    ],
    "DirCreate": [
		"Creates a directory/folder.",
		"```\rDirCreate ( \"path\" )\r```"
	],
    "DirGetSize": [
		"Returns the size in bytes of a given directory.",
		"```\rDirGetSize ( \"path\" [, flag = 0] )\r```"
	],
    "DirMove": [
		"Moves a directory and all sub-directories and files.",
		"```\rDirMove ( \"source dir\", \"dest dir\" [, flag = 0] )\r```"
	],
    "DirRemove": [
		"Deletes a directory/folder.",
		"```\rDirRemove ( \"path\" [, recurse = 0] )\r```"
	],
    "DllCall": [
		"Dynamically calls a function in a DLL.",
		"```\rDllCall ( \"dll\", \"return type\", \"function\" [, type1, param1 [, type n, param n]] )\r```"
	],
    "DllCallAddress": [
		"Dynamically calls a function at a specific memory address.",
		"```\rDllCallAddress ( \"return type\", address [, type1, param1 [, type n, param n]] )\r```"
	],
    "DllCallbackFree": [
		"Frees a previously created handle created with DllCallbackRegister.",
		"```\rDllCallbackFree ( handle )\r```"
	],
    "DllCallbackGetPtr": [
		"Returns the pointer to a callback function that can be passed to the Win32 API.",
		"```\rDllCallbackGetPtr ( handle )\r```"
	],
    "DllStructGetSize": [
		"Returns the size of the struct in bytes.",
		"```\rDllStructGetSize ( Struct )\r```"
	],
    "DllStructSetData": [
		"Sets the data of an element in the struct.",
		"```\rDllStructSetData ( Struct, Element, value [, index] )\r```"
	],
    "DriveGetDrive": [
		"Returns an array containing the enumerated drives.",
		"```\rDriveGetDrive ( \"type\" )\r```"
	],
    "DriveGetFileSystem": [
		"Returns File System Type of a drive.",
		"```\rDriveGetFileSystem ( \"path\" )\r```"
	],
    "DriveGetLabel": [
		"Returns Volume Label of a drive, if it has one.",
		"```\rDriveGetLabel ( \"path\" )\r```"
	],
    "DriveGetSerial": [
		"Returns Serial Number of a drive.",
		"```\rDriveGetSerial ( \"path\" )\r```"
	],
    "DriveGetType": [
		"Returns drive type.",
		"```\rDriveGetType ( \"path\" [, operation = 1] )\r```"
	],
    "DriveMapAdd": [
		"Maps a network drive.",
		"```\rDriveMapAdd ( \"device\", \"remote share\" [, flags = 0 [, \"user\" [, \"password\"]]] )\r```"
	],
    "DriveMapDel": [
		"Disconnects a network drive.",
		"```\rDriveMapDel ( \"drive\" )\r```"
	],
    "DriveMapGet": [
		"Retrieves the details of a mapped drive.",
		"```\rDriveMapGet ( \"device\" )\r```"
	],
    "DriveSetLabel": [
		"Sets the Volume Label of a drive.",
		"```\rDriveSetLabel ( \"path\", \"label\" )\r```"
	],
    "DriveSpaceFree": [
		"Returns the free disk space of a path in Megabytes.",
		"```\rDriveSpaceFree ( \"path\" )\r```"
	],
    "DriveSpaceTotal": [
		"Returns the total disk space of a path in Megabytes.",
		"```\rDriveSpaceTotal ( \"path\" )\r```"
	],
    "DriveStatus": [
		"Returns the status of the drive as a string.",
		"```\rDriveStatus ( \"path\" )\r```"
	],
    "EnvGet": [
		"Retrieves an environment variable.",
		"```\rEnvGet ( \"envvariable\" )\r```"
	],
    "EnvSet": [
		"Writes an environment variable.",
		"```\rEnvSet ( \"envvariable\" [, \"value\"] )\r```"
	],
    "EnvUpdate": [
		"Refreshes the OS environment.",
		"```\rEnvUpdate ( )\r```"
	],
    "Eval": [
		"Return the value of the variable defined by a string.",
		"```\rEval ( string )\r```"
	],
    "Execute": [
		"Execute an expression.",
		"```\rExecute ( string )\r```"
	],
    "Exp": [
		"Calculates e to the power of a number.",
		"```\rExp ( expression )\r```"
	],
    "FileChangeDir": [
		"Changes the current working directory.",
		"```\rFileChangeDir ( \"path\" )\r```"
	],
    "FileClose": [
		"Closes a previously opened file.",
		"```\rFileClose ( \"filehandle\" )\r```"
	],
    "FileCopy": [
		"Copies one or more files.",
		"```\rFileCopy ( \"source\", \"dest\" [, flag = 0] )\r```"
	],
    "FileCreateNTFSLink": [
		"Creates an NTFS hardlink to a file or a directory.",
		"```\rFileCreateNTFSLink ( \"source\", \"hardlink\" [, flag = 0] )\r```"
	],
    "FileCreateShortcut": [
		"Creates a shortcut (.lnk) to a file.",
		"```\rFileCreateShortcut ( \"file\", \"lnk\" [, \"workdir\" [, \"args\" [, \"desc\" [, \"icon\" [, \"hotkey\" [, icon number [, state]]]]]]] )\r```"
	],
    "FileDelete": [
		"Delete one or more files.",
		"```\rFileDelete ( \"filename\" )\r```"
	],
    "FileExists": [
		"Checks if a file or directory exists.",
		"```\rFileExists ( \"path\" )\r```"
	],
    "FileFindFirstFile": [
		"Creates a search handle, defined by a path and file mask.",
		"```\rFileFindFirstFile ( \"filename\" )\r```"
	],
    "FileFindNextFile": [
		"Returns the next filename defined by the search handle.",
		"```\rFileFindNextFile ( search [, flag = 0])\r```"
	],
    "FileFlush": [
		"Flushes the file's buffer to disk.",
		"```\rFileFlush ( \"filehandle\" )\r```"
	],
    "FileGetAttrib": [
		"Returns a code string representing a file's attributes.",
		"```\rFileGetAttrib ( \"filename\" )\r```"
	],
    "FileGetEncoding": [
		"Determines the text encoding used in a file.",
		"```\rFileGetEncoding ( \"filehandle/filename\" [, mode = 1] )\r```"
	],
    "FileGetLongName": [
		"Returns the long path+name of the path+name passed.",
		"```\rFileGetLongName ( \"filename\" [, flag = 0] )\r```"
	],
    "FileGetPos": [
		"Retrieves the current file position.",
		"```\rFileGetPos ( \"filehandle\" )\r```"
	],
    "FileGetShortcut": [
		"Retrieves details about a shortcut.",
		"```\rFileGetShortcut ( \"lnk\" )\r```"
	],
    "FileGetShortName": [
		"Returns the 8.3 short path+name of the path+name passed.",
		"```\rFileGetShortName ( \"filename\" [, flag = 0] )\r```"
	],
    "FileGetSize": [
		"Returns the size of a file in bytes.",
		"```\rFileGetSize ( \"filename\" )\r```"
	],
    "FileGetTime": [
		"Returns the time and date information for a file.",
		"```\rFileGetTime ( \"filename\" [, option = 0 [, format = 0]] )\r```"
	],
    "FileGetVersion": [
		"Returns version information stored in a file.",
		"```\rFileGetVersion ( \"filename\" [, \"stringname\"] )\r```"
	],
    "FileInstall": [
		"Include and install a file with the compiled script.",
		"```\rFileInstall ( \"source\", \"dest\" [, flag = 0] )\r```"
	],
    "FileMove": [
		"Moves one or more files.",
		"```\rFileMove ( \"source\", \"dest\" [, flag = 0] )\r```"
	],
    "FileOpen": [
		"Opens a file for reading or writing.",
		"```\rFileOpen ( \"filename\" [, mode = 0] )\r```"
	],
    "FileOpenDialog": [
		"Initiates a Open File Dialog.",
		"```\rFileOpenDialog ( \"title\", \"init dir\", \"filter\" [, options = 0 [, \"default name\" [, hwnd]]] )\r```"
	],
    "FileRead": [
		"Read in a number of characters from a previously opened file.",
		"```\rFileRead ( \"filehandle/filename\" [, count] )\r```"
	],
    "FileReadLine": [
		"Read in a line of text from a previously opened text file.",
		"```\rFileReadLine ( \"filehandle/filename\" [, line = 1] )\r```"
	],
    "FileReadToArray": [
		"Reads the specified file into an array.",
		"```\rFileReadToArray ( \"filehandle/filename\" )\r```"
	],
    "FileRecycle": [
		"Sends a file or directory to the recycle bin.",
		"```\rFileRecycle ( \"source\" )\r```"
	],
    "FileRecycleEmpty": [
		"Empties the recycle bin.",
		"```\rFileRecycleEmpty ( [\"source\"] )\r```"
	],
    "FileSaveDialog": [
		"Initiates a Save File Dialog.",
		"```\rFileSaveDialog ( \"title\", \"init dir\", \"filter\" [, options = 0 [, \"default name\" [, hwnd]]] )\r```"
	],
    "FileSelectFolder": [
		"Initiates a Browse For Folder dialog.",
		"```\rFileSelectFolder ( \"dialog text\", \"root dir\" [, flag = 0 [, \"initial dir\" [, hwnd]]] )\r```"
	],
    "FileSetAttrib": [
		"Sets the attributes of one or more files/directories.",
		"```\rFileSetAttrib ( \"file pattern\", \"+-RASHNOT\" [, recurse = 0] )\r```"
	],
    "FileSetEnd": [
		"Sets the end of the file at the current file position.",
		"```\rFileSetEnd ( \"filehandle\" )\r```"
	],
    "FileSetPos": [
		"Sets the current file position.",
		"```\rFileSetPos ( \"filehandle\", offset, origin )\r```"
	],
    "FileSetTime": [
		"Sets the timestamp of one of more files.",
		"```\rFileSetTime ( \"file pattern\", \"time\" [, type = 0 [, recurse = 0]] )\r```"
	],
    "FileWrite": [
		"Write text/data to the end of a previously opened file.",
		"```\rFileWrite ( \"filehandle/filename\", \"text/data\" )\r```"
	],
    "FileWriteLine": [
		"Append a line of text to the end of a previously opened text file.",
		"```\rFileWriteLine ( \"filehandle/filename\", \"line\" )\r```"
	],
    "Floor": [
		"Returns a number rounded down to the closest integer.",
		"```\rFloor ( expression )\r```"
	],
    "FtpSetProxy": [
		"Sets the internet proxy to use for ftp access.",
		"```\rFtpSetProxy ( mode = 0 [, \"proxy:port\" [, \"username\" [, \"password\"]]] )\r```"
	],
    "FuncName": [
		"Returns the name of a function stored in a variable.",
		"```\rFuncName ( $Functionvariable )\r```"
	],
    "GUICreate": [
		"Create a GUI window.",
		"```\rGUICreate ( \"title\" [, width [, height [, left = -1 [, top = -1 [, style = -1 [, exStyle = -1 [, parent = 0]]]]]]] )\r```"
	],
    "GUICtrlCreateAvi": [
		"Creates an AVI video control for the GUI.",
		"```\rGUICtrlCreateAvi ( filename, subfileid, left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateButton": [
		"Creates a Button control for the GUI.",
		"```\rGUICtrlCreateButton ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateCheckbox": [
		"Creates a Checkbox control for the GUI.",
		"```\rGUICtrlCreateCheckbox ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateCombo": [
		"Creates a ComboBox control for the GUI.",
		"```\rGUICtrlCreateCombo ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateContextMenu": [
		"Creates a context menu for a control or entire GUI window.",
		"```\rGUICtrlCreateContextMenu ( [controlID] )\r```"
	],
    "GUICtrlCreateDate": [
		"Creates a date control for the GUI.",
		"```\rGUICtrlCreateDate ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateDummy": [
		"Creates a Dummy control for the GUI.",
		"```\rGUICtrlCreateDummy ( )\r```"
	],
    "GUICtrlCreateEdit": [
		"Creates an Edit control for the GUI.",
		"```\rGUICtrlCreateEdit ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateGraphic": [
		"Creates a Graphic control for the GUI.",
		"```\rGUICtrlCreateGraphic ( left, top [, width [, height [, style]]] )\r```"
	],
    "GUICtrlCreateGroup": [
		"Creates a Group control for the GUI.",
		"```\rGUICtrlCreateGroup ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateIcon": [
		"Creates an Icon control for the GUI.",
		"```\rGUICtrlCreateIcon ( filename, iconName, left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateInput": [
		"Creates an Input control for the GUI.",
		"```\rGUICtrlCreateInput ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateLabel": [
		"Creates a static Label control for the GUI.",
		"```\rGUICtrlCreateLabel ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateList": [
		"Creates a List control for the GUI.",
		"```\rGUICtrlCreateList ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateListView": [
		"Creates a ListView control for the GUI.",
		"```\rGUICtrlCreateListView ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateListViewItem": [
		"Creates a ListView item.",
		"```\rGUICtrlCreateListViewItem ( \"text\", listviewID )\r```"
	],
    "GUICtrlCreateMenu": [
		"Creates a Menu control for the GUI.",
		"```\rGUICtrlCreateMenu ( \"submenutext\" [, menuID = -1 [, menuentry = -1]] )\r```"
	],
    "GUICtrlCreateMenuItem": [
		"Creates a MenuItem control for the GUI.",
		"```\rGUICtrlCreateMenuItem ( \"text\", menuID [, menuentry = -1 [, menuradioitem = 0]] )\r```"
	],
    "GUICtrlCreateMonthCal": [
		"Creates a month calendar control for the GUI.",
		"```\rGUICtrlCreateMonthCal ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateObj": [
		"Creates an ActiveX control in the GUI.",
		"```\rGUICtrlCreateObj ( ObjectVar, left, top [, width [, height]] )\r```"
	],
    "GUICtrlCreatePic": [
		"Creates a Picture control for the GUI.",
		"```\rGUICtrlCreatePic ( filename, left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateProgress": [
		"Creates a Progress control for the GUI.",
		"```\rGUICtrlCreateProgress ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateRadio": [
		"Creates a Radio button control for the GUI.",
		"```\rGUICtrlCreateRadio ( \"text\", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateSlider": [
		"Creates a Slider control for the GUI.",
		"```\rGUICtrlCreateSlider ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateTab": [
		"Creates a Tab control for the GUI.",
		"```\rGUICtrlCreateTab ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateTabItem": [
		"Creates a TabItem control within an existing tab control in the GUI.",
		"```\rGUICtrlCreateTabItem ( \"text\" )\r```"
	],
    "GUICtrlCreateTreeView": [
		"Creates a TreeView control for the GUI.",
		"```\rGUICtrlCreateTreeView ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )\r```"
	],
    "GUICtrlCreateTreeViewItem": [
		"Creates a TreeViewItem control for the GUI.",
		"```\rGUICtrlCreateTreeViewItem ( \"text\", treeviewID )\r```"
	],
    "GUICtrlCreateUpdown": [
		"Creates an UpDown control for the GUI.",
		"```\rGUICtrlCreateUpdown ( inputcontrolID [, style = -1] )\r```"
	],
    "GUICtrlDelete": [
		"Deletes a control.",
		"```\rGUICtrlDelete ( controlID )\r```"
	],
    "GUICtrlGetHandle": [
		"Returns the handle for a control and some special (item) handles (Menu, ContextMenu, TreeViewItem).",
		"```\rGUICtrlGetHandle ( controlID )\r```"
	],
    "GUICtrlGetState": [
		"Gets the current state of a control.",
		"```\rGUICtrlGetState ( controlID )\r```"
	],
    "GUICtrlRead": [
		"Read state or data of a control.",
		"```\rGUICtrlRead ( controlID [, advanced = 0] )\r```"
	],
    "GUICtrlRecvMsg": [
		"Send a message to a control and retrieve information in lParam.",
		"```\rGUICtrlRecvMsg ( controlID , msg [, wParam [, lParamType]] )\r```"
	],
    "GUICtrlRegisterListViewSort": [
		"Register a user defined function for an internal listview sorting callback function.",
		"```\rGUICtrlRegisterListViewSort ( controlID, \"function\" )\r```"
	],
    "GUICtrlSendMsg": [
		"Send a message to a control.",
		"```\rGUICtrlSendMsg ( controlID, msg , wParam, lParam )\r```"
	],
    "GUICtrlSendToDummy": [
		"Sends a message to a Dummy control.",
		"```\rGUICtrlSendToDummy ( controlID [, state] )\r```"
	],
    "GUICtrlSetBkColor": [
		"Sets the background color of a control.",
		"```\rGUICtrlSetBkColor ( controlID, backgroundcolor )\r```"
	],
    "GUICtrlSetColor": [
		"Sets the text color of a control.",
		"```\rGUICtrlSetColor ( controlID, textcolor )\r```"
	],
    "GUICtrlSetCursor": [
		"Sets the mouse cursor icon for a particular control.",
		"```\rGUICtrlSetCursor ( controlID, cursorID )\r```"
	],
    "GUICtrlSetData": [
		"Modifies the data for a control.",
		"```\rGUICtrlSetData ( controlID, data [, default] )\r```"
	],
    "GUICtrlSetDefBkColor": [
		"Sets the default background color of all the controls of the GUI window.",
		"```\rGUICtrlSetDefBkColor ( defbkcolor [, winhandle] )\r```"
	],
    "GUICtrlSetDefColor": [
		"Sets the default text color of all the controls of the GUI window.",
		"```\rGUICtrlSetDefColor ( deftextcolor [, winhandle] )\r```"
	],
    "GUICtrlSetFont": [
		"Sets the font for a control.",
		"```\rGUICtrlSetFont ( controlID, size [, weight [, attribute [, fontname [, quality]]]] )\r```"
	],
    "GUICtrlSetGraphic": [
		"Modifies the data for a control.",
		"```\rGUICtrlSetGraphic ( controlID, type [, par1 [, ... par6]] )\r```"
	],
    "GUICtrlSetImage": [
		"Sets the bitmap or icon image to use for a control.",
		"```\rGUICtrlSetImage ( controlID, filename [, iconname [, icontype]] )\r```"
	],
    "GUICtrlSetLimit": [
		"Limits the number of characters/pixels for a control.",
		"```\rGUICtrlSetLimit ( controlID, max [, min = 0] )\r```"
	],
    "GUICtrlSetOnEvent": [
		"Defines a user-defined function to be called when a control is clicked.",
		"```\rGUICtrlSetOnEvent ( controlID, \"function\" )\r```"
	],
    "GUICtrlSetPos": [
		"Changes the position of a control within the GUI window.",
		"```\rGUICtrlSetPos ( controlID, left [, top [, width [, height]]] )\r```"
	],
    "GUICtrlSetResizing": [
		"Defines the resizing method used by a control.",
		"```\rGUICtrlSetResizing ( controlID, resizing )\r```"
	],
    "GUICtrlSetState": [
		"Changes the state of a control.",
		"```\rGUICtrlSetState ( controlID, state )\r```"
	],
    "GUICtrlSetStyle": [
		"Changes the style of a control.",
		"```\rGUICtrlSetStyle ( controlID, style [, exStyle] )\r```"
	],
    "GUICtrlSetTip": [
		"Sets the tip text associated with a control.",
		"```\rGUICtrlSetTip ( controlID, tiptext [, \"title\" [, icon [, options]]] )\r```"
	],
    "GUIDelete": [
		"Deletes a GUI window and all controls that it contains.",
		"```\rGUIDelete ( [winhandle] )\r```"
	],
    "GUIGetCursorInfo": [
		"Gets the mouse cursor position relative to GUI window.",
		"```\rGUIGetCursorInfo ( [winhandle] )\r```"
	],
    "GUIGetMsg": [
		"Polls the GUI to see if any events have occurred.",
		"```\rGUIGetMsg ( [advanced = 0] )\r```"
	],
    "GUIGetStyle": [
		"Retrieves the styles of a GUI window.",
		"```\rGUIGetStyle ( [winhandle] )\r```"
	],
    "GUIRegisterMsg": [
		"Register a user defined function for a known Windows Message ID (WM_MSG).",
		"```\rGUIRegisterMsg ( msgID, \"function\" )\r```"
	],
    "GUISetAccelerators": [
		"Sets the accelerator table to be used in a GUI window.",
		"```\rGUISetAccelerators ( accelerators [, winhandle] )\r```"
	],
    "GUISetBkColor": [
		"Sets the background color of the GUI window.",
		"```\rGUISetBkColor ( background [, winhandle] )\r```"
	],
    "GUISetCoord": [
		"Sets absolute coordinates for the next control.",
		"```\rGUISetCoord ( left, top [, width [, height [, winhandle]]] )\r```"
	],
    "GUISetCursor": [
		"Sets the mouse cursor icon for a GUI window.",
		"```\rGUISetCursor ( [cursorID [, override = 0 [, winhandle]]] )\r```"
	],
    "GUISetFont": [
		"Sets the default font for a GUI window.",
		"```\rGUISetFont ( size [, weight [, attribute [, fontname [, winhandle [, quality]]]]] )\r```"
	],
    "GUISetHelp": [
		"Sets an executable file that will be run when F1 is pressed.",
		"```\rGUISetHelp ( helpfile [, winhandle] )\r```"
	],
    "GUISetIcon": [
		"Sets the icon used in a GUI window.",
		"```\rGUISetIcon ( iconfile [, iconID [, winhandle]] )\r```"
	],
    "GUISetOnEvent": [
		"Defines a user function to be called when a system button is clicked.",
		"```\rGUISetOnEvent ( specialID, \"function\" [, winhandle] )\r```"
	],
    "GUISetState": [
		"Changes the state of a GUI window.",
		"```\rGUISetState ( [flag [, winhandle]] )\r```"
	],
    "GUISetStyle": [
		"Changes the styles of a GUI window.",
		"```\rGUISetStyle ( Style [, ExStyle [, winhandle]] )\r```"
	],
    "GUIStartGroup": [
		"Defines that any subsequent controls that are created will be \"grouped\" together.",
		"```\rGUIStartGroup ( [winhandle] )\r```"
	],
    "GUISwitch": [
		"Switches the current window used for GUI functions.",
		"```\rGUISwitch ( winhandle [, tabitemID] )\r```"
	],
    "Hex": [
		"Returns a string representation of an integer or of a binary type converted to hexadecimal.",
		"```\rHex ( expression [, length] )\r```"
	],
    "HotKeySet": [
		"Sets a hotkey that calls a user function.",
		"```\rHotKeySet ( \"key\" [, \"function\"] )\r```"
	],
    "HttpSetProxy": [
		"Sets the internet proxy to use for http access.",
		"```\rHttpSetProxy ( mode = 0 [, \"proxy:port\" [, \"username\" [, \"password\"]]] )\r```"
	],
    "HttpSetUserAgent": [
		"Sets the HTTP user-agent string which is sent with all Inet requests.",
		"```\rHttpSetUserAgent ( \"user agent\" )\r```"
	],
    "HWnd": [
		"Converts an expression into an HWND handle.",
		"```\rHWnd ( expression )\r```"
	],
    "InetClose": [
		"Closes a handle returned from `InetGet()`.",
		"```\rInetClose ( handle )\r```"
	],
    "InetGet": [
		"Downloads a file from the internet using the HTTP, HTTPS or FTP protocol.",
		"```\rInetGet ( \"URL\", \"filename\" [, options = 0 [, background = 0]] )\r```"
	],
    "InetGetInfo": [
		"Returns detailed data for a handle returned from `InetGet()`.",
		"```\rInetGetInfo ( [handle [, index = -1]] )\r```"
	],
    "InetGetSize": [
		"Returns the size (in bytes) of a file located on the internet.",
		"```\rInetGetSize ( \"URL\" [, options = 0] )\r```"
	],
    "InetRead": [
		"Downloads a file from the internet using the HTTP, HTTPS or FTP protocol.",
		"```\rInetRead ( \"URL\" [, options = 0] )\r```"
	],
    "IniDelete": [
		"Deletes a value from a standard format .ini file.",
		"```\rIniDelete ( \"filename\", \"section\" [, \"key\"] )\r```"
	],
    "IniRead": [
		"Reads a value from a standard format .ini file.",
		"```\rIniRead ( \"filename\", \"section\", \"key\", \"default\" )\r```"
	],
    "IniReadSection": [
		"Reads all key/value pairs from a section in a standard format .ini file.",
		"```\rIniReadSection ( \"filename\", \"section\" )\r```"
	],
    "IniReadSectionNames": [
		"Reads all sections in a standard format .ini file.",
		"```\rIniReadSectionNames ( \"filename\" )\r```"
	],
    "IniRenameSection": [
		"Renames a section in a standard format .ini file.",
		"```\rIniRenameSection ( \"filename\", \"section\", \"new section\" [, flag = 0] )\r```"
	],
    "IniWrite": [
		"Writes a value to a standard format .ini file.",
		"```\rIniWrite ( \"filename\", \"section\", \"key\", \"value\" )\r```"
	],
    "IniWriteSection": [
		"Writes a section to a standard format .ini file.",
		"```\rIniWriteSection ( \"filename\", \"section\", \"data\" [, index = 1] )\r```"
	],
    "InputBox": [
		"Displays an input box to ask the user to enter a string.",
		"```\rInputBox ( \"title\", \"prompt\" [, \"default\" [, \"password char\" [, width = -1 [, height = -1 [, left = Default [, top = Default [, timeout = 0 [, hwnd]]]]]]]] )\r```"
	],
    "Int": [
		"Returns the integer (whole number) representation of an expression.",
		"```\rInt ( expression [, flag = 0] )\r```"
	],
    "IsAdmin": [
		"Checks if the current user has full administrator privileges.",
		"```\rIsAdmin ( )\r```"
	],
    "IsArray": [
		"Checks if a variable is an array type.",
		"```\rIsArray ( variable )\r```"
	],
    "IsBinary": [
		"Checks if a variable or expression is a binary type.",
		"```\rIsBinary ( expression )\r```"
	],
    "IsBool": [
		"Checks if a variable's base type is boolean.",
		"```\rIsBool ( variable )\r```"
	],
    "IsDeclared": [
		"Check if a variable has been declared.",
		"```\rIsDeclared ( expression )\r```"
	],
    "IsDllStruct": [
		"Checks if a variable is a DllStruct type.",
		"```\rIsDllStruct ( variable )\r```"
	],
    "IsFloat": [
		"Checks if the value of a variable or expression has a fractional component.",
		"```\rIsFloat ( variable )\r```"
	],
    "IsFunc": [
		"Checks if a variable or expression is a function type.",
		"```\rIsFunc ( expression )\r```"
	],
    "IsHWnd": [
		"Checks if a variable's base type is a pointer and window handle.",
		"```\rIsHWnd ( variable )\r```"
	],
    "IsInt": [
		"Checks if the value of a variable or expression has no fractional component.",
		"```\rIsInt ( variable )\r```"
	],
    "IsKeyword": [
		"Checks if a variable is a keyword (for example, Default).",
		"```\rIsKeyword ( variable )\r```"
	],
		"IsMap": [
		"Checks if a variables is a Map type.",
		"```\rIsMap ( variable )\r```"
	],
    "IsNumber": [
		"Checks if a variable's base type is numeric.",
		"```\rIsNumber ( variable )\r```"
	],
    "IsObj": [
		"Checks if a variable or expression is an object type.",
		"```\rIsObj ( variable )\r```"
	],
    "IsPtr": [
		"Checks if a variable's base type is a pointer.",
		"```\rIsPtr ( variable )\r```"
	],
    "IsString": [
		"Checks if a variable is a string type.",
		"```\rIsString ( variable )\r```"
	],
    "Log": [
		"Calculates the natural logarithm of a number.",
		"```\rLog ( expression )\r```"
	],
		"MapAppend": [
		"Add an element to a Map variable.",
		"```\rMapAppend ( map, value )\r```"
	],
		"MapExists": [
		"Determine whether a key exists within a Map.",
		"```\rMapExists ( map, key )\r```"
	],
		"MapKeys": [
		"Returns an array holding the keys within a Map.",
		"```\rMapKeys ( map )\r```"
	],
		"MapRemove": [
		"Remove a key and its associated value from a Map.",
		"```\rMapRemove ( map, key )\r```"
	],
		"MemGetStats": [
		"Retrieves memory related information.",
		"```\rMemGetStats ( )\r```"
	],
    "Mod": [
		"Performs the modulus operation.",
		"```\rMod ( value1, value2 )\r```"
	],
    "MouseClick": [
		"Perform a mouse click operation.",
		"```\rMouseClick ( \"button\" [, x, y [, clicks = 1 [, speed = 10]]] )\r```"
	],
    "MouseClickDrag": [
		"Perform a mouse click and drag operation.",
		"```\rMouseClickDrag ( \"button\", x1, y1, x2, y2 [, speed = 10] )\r```"
	],
    "MouseDown": [
		"Perform a mouse down event at the current mouse position.",
		"```\rMouseDown ( \"button\" )\r```"
	],
    "MouseGetCursor": [
		"Returns the cursor ID Number for the current Mouse Cursor.",
		"```\rMouseGetCursor ( )\r```"
	],
    "MouseGetPos": [
		"Retrieves the current position of the mouse cursor.",
		"```\rMouseGetPos ( [dimension] )\r```"
	],
    "MouseMove": [
		"Moves the mouse pointer.",
		"```\rMouseMove ( x, y [, speed = 10] )\r```"
	],
    "MouseUp": [
		"Perform a mouse up event at the current mouse position.",
		"```\rMouseUp ( \"button\" )\r```"
	],
    "MouseWheel": [
		"Moves the mouse wheel up or down.",
		"```\rMouseWheel ( \"direction\" [, clicks = 1] )\r```"
	],
    "MsgBox": [
		"Displays a simple message box with optional timeout.",
		"```\rMsgBox ( flag, \"title\", \"text\" [, timeout = 0 [, hwnd]] )\r```"
	],
    "Number": [
		"Returns the numeric representation of an expression.",
		"```\rNumber ( expression [, flag = 0] )\r```"
	],
    "ObjCreate": [
		"Creates a reference to a COM object from the given classname.",
		"```\rObjCreate ( \"classname\" [, \"servername\" [, \"username\" [, \"password\"]]] )\r```"
	],
    "ObjCreateInterface": [
		"Creates a reference to an object from the given classname/object pointer, interface identifier and description string. _(Experimental)_",
		"```\rObjCreateInterface ( \"CLSID\" , \"IID\" [, \"interface_description\",[flag = True]] )\r```"
	],
    "ObjEvent": [
		"Handles incoming events from the given Object.",
		"```\rObjEvent ( $ObjectVar, \"functionprefix\" [, \"interface name\"] )\rObjEvent ( \"AutoIt.Error\" [, \"function\"] )\r```"
	],
    "ObjGet": [
		"Retrieves a reference to a COM object from an existing process or filename.",
		"```\rObjGet ( \"filename\" [, \"classname\" [, instance]] )\r```"
	],
    "ObjName": [
		"Returns the name or interface description of an Object.",
		"```\rObjName ( $Objectvariable [, Flag = 1] )\r```"
	],
    "OnAutoItExitRegister": [
		"Registers a function to be called when AutoIt exits.",
		"```\rOnAutoItExitRegister ( \"function\" )\r```"
	],
    "OnAutoItExitUnRegister": [
		"UnRegisters a function that was called when AutoIt exits.",
		"```\rOnAutoItExitUnRegister ( \"function\" )\r```"
	],
    "Ping": [
		"Pings a host and returns the roundtrip-time.",
		"```\rPing ( \"address/hostname\" [, timeout = 4000] )\r```"
	],
    "PixelChecksum": [
		"Generates a checksum for a region of pixels.",
		"```\rPixelChecksum ( left, top, right, bottom [, step = 1 [, hwnd [, mode = 0]]] )\r```"
	],
    "PixelGetColor": [
		"Returns a pixel color according to x,y pixel coordinates.",
		"```\rPixelGetColor ( x , y [, hwnd] )\r```"
	],
    "PixelSearch": [
		"Searches a rectangle of pixels for the pixel color provided.",
		"```\rPixelSearch ( left, top, right, bottom, color [, shade-variation = 0 [, step = 1 [, hwnd]]] )\r```"
	],
    "ProcessClose": [
		"Terminates a named process.",
		"```\rProcessClose ( \"process\" )\r```"
	],
    "ProcessExists": [
		"Checks to see if a specified process exists.",
		"```\rProcessExists ( \"process\" )\r```"
	],
    "ProcessGetStats": [
		"Returns an array about Memory or IO infos of a running process.",
		"```\rProcessGetStats ( [\"process\" [, type = 0]] )\r```"
	],
    "ProcessList": [
		"Returns an array listing the currently running processes (names and PIDs).",
		"```\rProcessList ( [\"name\"] )\r```"
	],
    "ProcessSetPriority": [
		"Changes the priority of a process.",
		"```\rProcessSetPriority ( \"process\", priority )\r```"
	],
    "ProcessWait": [
		"Pauses script execution until a given process exists.",
		"```\rProcessWait ( \"process\" [, timeout = 0] )\r```"
	],
    "ProcessWaitClose": [
		"Pauses script execution until a given process does not exist.",
		"```\rProcessWaitClose ( \"process\" [, timeout = 0] )\r```"
	],
    "ProgressOff": [
		"Turns Progress window off.",
		"```\rProgressOff ( )\r```"
	],
    "ProgressOn": [
		"Creates a customizable progress bar window.",
		"```\rProgressOn ( \"title\", \"maintext\" [, \"subtext\" [, x pos [, y pos [, opt]]]] )\r```"
	],
    "ProgressSet": [
		"Sets the position and/or text of a previously created Progress bar window.",
		"```\rProgressSet ( percent [, \"subtext\" [, \"maintext\"]] )\r```"
	],
    "Ptr": [
		"Converts an expression into a pointer variant.",
		"```\rPtr ( expression )\r```"
	],
    "Random": [
		"Generates a pseudo-random float-type number.",
		"```\rRandom ( [Min = 0 [, Max = 1 [, Flag = 0]]] )\r```"
	],
    "RegDelete": [
		"Deletes a key or value from the registry.",
		"```\rRegDelete ( \"keyname\" [, \"valuename\"] )\r```"
	],
    "RegEnumKey": [
		"Reads the name of a subkey according to its instance.",
		"```\rRegEnumKey ( \"keyname\", instance )\r```"
	],
    "RegEnumVal": [
		"Reads the name of a value according to its instance.",
		"```\rRegEnumVal ( \"keyname\", instance )\r```"
	],
    "RegRead": [
		"Reads a value from the registry.",
		"```\rRegRead ( \"keyname\", \"valuename\" )\r```"
	],
    "RegWrite": [
		"Creates a key or value in the registry.",
		"```\rRegWrite ( \"keyname\" [, \"valuename\", \"type\", value] )\r```"
	],
    "Round": [
		"Returns a number rounded to a specified number of decimal places.",
		"```\rRound ( expression [, decimalplaces] )\r```"
	],
    "Run": [
		"Runs an external program.",
		"```\rRun ( \"program\" [, \"workingdir\" [, show_flag [, opt_flag]]] )\r```"
	],
    "RunAs": [
		"Runs an external program under the context of a different user.",
		"```\rRunAs ( \"username\", \"domain\", \"password\", logon_flag, \"program\" [, \"workingdir\" [, show_flag [, opt_flag]]] )\r```"
	],
    "RunAsWait": [
		"Runs an external program under the context of a different user and pauses script execution until the program finishes.",
		"```\rRunAsWait ( \"username\", \"domain\", \"password\", logon_flag, \"program\" [, \"workingdir\" [, show_flag [, opt_flag]]] )\r```"
	],
    "RunWait": [
		"Runs an external program and pauses script execution until the program finishes.",
		"```\rRunWait ( \"program\" [, \"workingdir\" [, show_flag [, opt_flag]]] )\r```"
	],
    "Send": [
		"Sends simulated keystrokes to the active window.",
		"```\rSend ( \"keys\" [, flag = 0] )\r```"
	],
    "SendKeepActive": [
		"Attempts to keep a specified window active during `Send()`.",
		"```\rSendKeepActive ( \"title\" [, \"text\"] )\r```"
	],
    "SetError": [
		"Manually set the value of the `@error` macro (and optionally @extended, and \"Return Value\").",
		"```\rSetError ( code [, extended = 0 [, return value]] )\r```"
	],
    "SetExtended": [
		"Manually set the value of the @extended macro.",
		"```\rSetExtended ( code [, return value] )\r```"
	],
    "ShellExecute": [
		"Runs an external program using the ShellExecute API.",
		"```\rShellExecute ( \"filename\" [, \"parameters\" [, \"workingdir\" [, \"verb\" [, showflag]]]] )\r```"
	],
    "ShellExecuteWait": [
		"Runs an external program using the ShellExecute API and pauses script execution until it finishes.",
		"```\rShellExecuteWait ( \"filename\" [, \"parameters\" [, \"workingdir\" [, \"verb\" [, showflag]]]] )\r```"
	],
    "Shutdown": [
		"Shuts down the system.",
		"```\rShutdown ( code )\r```"
	],
    "Sin": [
		"Calculates the sine of a number.",
		"```\rSin ( expression )\r```"
	],
    "Sleep": [
		"Pause script execution.",
		"```\rSleep ( delay )\r```"
	],
    "SoundPlay": [
		"Play a sound file.",
		"```\rSoundPlay ( \"filename\" [, wait = 0] )\r```"
	],
    "SoundSetWaveVolume": [
		"Sets the system wave volume by percent.",
		"```\rSoundSetWaveVolume ( percent )\r```"
	],
    "SplashImageOn": [
		"Creates a customizable image popup window.",
		"```\rSplashImageOn ( \"title\", \"file\" [, width [, height [, x pos [, y pos [, opt]]]]] )\r```"
	],
    "SplashOff": [
		"Turns `SplashText` or `SplashImage` off.",
		"```\rSplashOff ( )\r```"
	],
    "SplashTextOn": [
		"Creates a customizable text popup window.",
		"```\rSplashTextOn ( \"title\", \"text\" [, w = 500 [, h = 400 [, x pos [, y pos [, opt = 0 [, \"fontname\" [, fontsz = 12 [, fontwt]]]]]]]] )\r```"
	],
    "Sqrt": [
		"Calculates the square-root of a number.",
		"```\rSqrt ( expression )\r```"
	],
    "SRandom": [
		"Set Seed for random number generation.",
		"```\rSRandom ( Seed )\r```"
	],
    "StatusbarGetText": [
		"Retrieves the text from a standard status bar control.",
		"```\rStatusbarGetText ( \"title\" [, \"text\" [, part = 1]] )\r```"
	],
    "StderrRead": [
		"Reads from the STDERR stream of a previously run child process.",
		"```\rStderrRead ( process_id [, peek = False [, binary = False]] )\r```"
	],
    "StdinWrite": [
		"Writes a number of characters to the STDIN stream of a previously run child process.",
		"```\rStdinWrite ( process_id [, data] )\r```"
	],
    "StdioClose": [
		"Closes all resources associated with a process previously run with STDIO redirection.",
		"```\rStdioClose ( process_id )\r```"
	],
    "StdoutRead": [
		"Reads from the STDOUT stream of a previously run child process.",
		"```\rStdoutRead ( process_id [, peek = False [, binary = False]] )\r```"
	],
    "String": [
		"Returns the string representation of an expression.",
		"```\rString ( expression )\r```"
	],
    "StringAddCR": [
		"Takes a string and prefixes all linefeed characters ( `Chr(10)` ) with a carriage return character ( `Chr(13)` ).",
		"```\rStringAddCR ( \"string\" )\r```"
	],
    "StringCompare": [
		"Compares two strings with options.",
		"```\rStringCompare ( \"string1\", \"string2\" [, casesense = 0] )\r```"
	],
    "StringFormat": [
		"Returns a formatted string (similar to the C sprintf() function).",
		"```\rStringFormat ( \"format control\", var1 [, ... var32] )\r```"
	],
    "StringFromASCIIArray": [
		"Converts an array of ASCII codes to a string.",
		"```\rStringFromASCIIArray ( array,[start = 0 [, end = -1 [, encoding = 0]]] )\r```"
	],
    "StringInStr": [
		"Checks if a string contains a given substring.",
		"```\rStringInStr ( \"string\", \"substring\" [, casesense = 0 [, occurrence = 1 [, start = 1 [, count]]]] )\r```"
	],
    "StringIsAlNum": [
		"Checks if a string contains only alphanumeric characters.",
		"```\rStringIsAlNum ( \"string\" )\r```"
	],
    "StringIsAlpha": [
		"Checks if a string contains only alphabetic characters.",
		"```\rStringIsAlpha ( \"string\" )\r```"
	],
    "StringIsASCII": [
		"Checks if a string contains only ASCII characters in the range 0x00 - 0x7f (0 - 127).",
		"```\rStringIsASCII ( \"string\" )\r```"
	],
    "StringIsDigit": [
		"Checks if a string contains only digit (0-9) characters.",
		"```\rStringIsDigit ( \"string\" )\r```"
	],
    "StringIsFloat": [
		"Checks if a string is a floating point number.",
		"```\rStringIsFloat ( \"string\" )\r```"
	],
    "StringIsInt": [
		"Checks if a string is an integer.",
		"```\rStringIsInt ( \"string\" )\r```"
	],
    "StringIsLower": [
		"Checks if a string contains only lowercase characters.",
		"```\rStringIsLower ( \"string\" )\r```"
	],
    "StringIsSpace": [
		"Checks if a string contains only whitespace characters.",
		"```\rStringIsSpace ( \"string\" )\r```"
	],
    "StringIsUpper": [
		"Checks if a string contains only uppercase characters.",
		"```\rStringIsUpper ( \"string\" )\r```"
	],
    "StringIsXDigit": [
		"Checks if a string contains only hexadecimal digit (0-9, A-F) characters.",
		"```\rStringIsXDigit ( \"string\" )\r```"
	],
    "StringLeft": [
		"Returns a number of characters from the left-hand side of a string.",
		"```\rStringLeft ( \"string\", count )\r```"
	],
    "StringLen": [
		"Returns the number of characters in a string.",
		"```\rStringLen ( \"string\" )\r```"
	],
    "StringLower": [
		"Converts a string to lowercase.",
		"```\rStringLower ( \"string\" )\r```"
	],
    "StringMid": [
		"Extracts a number of characters from a string.",
		"```\rStringMid ( \"string\", start [, count = -1] )\r```"
	],
    "StringRegExp": [
		"Check if a string fits a given regular expression pattern.",
		"```\rStringRegExp ( \"test\", \"pattern\" [, flag = 0 [, offset = 1]] )\r```"
	],
    "StringRegExpReplace": [
		"Replace text in a string based on regular expressions.",
		"```\rStringRegExpReplace ( \"test\", \"pattern\", \"replace\" [, count = 0] )\r```"
	],
    "StringReplace": [
		"Replaces substrings in a string.",
		"```\rStringReplace ( \"string\", \"searchstring/start\", \"replacestring\" [, occurrence = 0 [, casesense = 0]] )\r```"
	],
    "StringReverse": [
		"Reverses the contents of the specified string.",
		"```\rStringReverse ( \"string\" [, flag = 0] )\r```"
	],
    "StringRight": [
		"Returns a number of characters from the right-hand side of a string.",
		"```\rStringRight ( \"string\", count )\r```"
	],
    "StringSplit": [
		"Splits up a string into substrings depending on the given delimiters.",
		"```\rStringSplit ( \"string\", \"delimiters\" [, flag = 0] )\r```"
	],
    "StringStripCR": [
		"Removes all carriage return values ( `Chr(13)` ) from a string.",
		"```\rStringStripCR ( \"string\" )\r```"
	],
    "StringStripWS": [
		"Strips the white space in a string.",
		"```\rStringStripWS ( \"string\", flag )\r```"
	],
    "StringToASCIIArray": [
		"Converts a string to an array containing the ASCII code of each character.",
		"```\rStringToASCIIArray ( \"string\",[start = 0 [, end [, encoding = 0]]] )\r```"
	],
    "StringToBinary": [
		"Converts a string into binary data.",
		"```\rStringToBinary ( expression [, flag = 1] )\r```"
	],
    "StringTrimLeft": [
		"Trims a number of characters from the left hand side of a string.",
		"```\rStringTrimLeft ( \"string\", count )\r```"
	],
    "StringTrimRight": [
		"Trims a number of characters from the right hand side of a string.",
		"```\rStringTrimRight ( \"string\", count )\r```"
	],
    "StringUpper": [
		"Converts a string to uppercase.",
		"```\rStringUpper ( \"string\" )\r```"
	],
    "Tan": [
		"Calculates the tangent of a number.",
		"```\rTan ( expression )\r```"
	],
    "TCPAccept": [
		"Permits an incoming connection attempt on a socket.",
		"```\rTCPAccept ( mainsocket )\r```"
	],
    "TCPCloseSocket": [
		"Closes a TCP socket.",
		"```\rTCPCloseSocket ( socket )\r```"
	],
    "TCPConnect": [
		"Create a socket connected to an existing server.",
		"```\rTCPConnect ( IPAddr, port )\r```"
	],
    "TCPListen": [
		"Creates a socket listening for an incoming connection.",
		"```\rTCPListen ( IPAddr, port [, MaxPendingConnection] )\r```"
	],
    "TCPNameToIP": [
		"Converts an Internet name to IP address.",
		"```\rTCPNameToIP ( name )\r```"
	],
    "TCPRecv": [
		"Receives data from a connected socket.",
		"```\rTCPRecv ( mainsocket, maxlen [, flag = 0] )\r```"
	],
    "TCPSend": [
		"Sends data on a connected socket.",
		"```\rTCPSend ( mainsocket, data )\r```"
	],
    "TCPShutdown": [
		"Stops TCP services.",
		"```\rTCPShutdown ( )\r```"
	],
    "TCPStartup": [
		"Starts TCP services.",
		"```\rTCPStartup ( )\r```"
	],
    "TimerDiff": [
		"Returns the difference in time from a previous call to `TimerInit()`.",
		"```\rTimerDiff ( handle )\r```"
	],
    "TimerInit": [
		"Returns a handle that can be passed to `TimerDiff()` to calculate the difference in milliseconds.",
		"```\rTimerInit ( )\r```"
	],
    "ToolTip": [
		"Creates a tooltip anywhere on the screen.",
		"```\rToolTip ( \"text\" [, x [, y [, \"title\" [, icon = 0 [, options]]]]] )\r```"
	],
    "TrayCreateItem": [
		"Creates a menuitem control for the tray.",
		"```\rTrayCreateItem ( \"text\" [, menuID = -1 [, menuentry = -1 [, menuradioitem = 0]]] )\r```"
	],
    "TrayCreateMenu": [
		"Creates a menu control for the tray menu.",
		"```\rTrayCreateMenu ( \"sub/menutext\" [, menuID = -1 [, menuentry = -1]] )\r```"
	],
    "TrayGetMsg": [
		"Polls the tray to see if any events have occurred.",
		"```\rTrayGetMsg ( )\r```"
	],
    "TrayItemDelete": [
		"Deletes a menu/item control from the tray menu.",
		"```\rTrayItemDelete ( controlID )\r```"
	],
    "TrayItemGetHandle": [
		"Returns the handle for a tray menu(item).",
		"```\rTrayItemGetHandle ( controlID )\r```"
	],
    "TrayItemGetState": [
		"Gets the current state of a control.",
		"```\rTrayItemGetState ( [controlID] )\r```"
	],
    "TrayItemGetText": [
		"Gets the itemtext of a tray menu/item control.",
		"```\rTrayItemGetText ( controlID )\r```"
	],
    "TrayItemSetOnEvent": [
		"Defines a user-defined function to be called when a tray item is clicked.",
		"```\rTrayItemSetOnEvent ( itemID, \"function\" )\r```"
	],
    "TrayItemSetState": [
		"Sets the state of a tray menu/item control.",
		"```\rTrayItemSetState ( controlID, state )\r```"
	],
    "TrayItemSetText": [
		"Sets the itemtext of a tray menu/item control.",
		"```\rTrayItemSetText ( controlID, text )\r```"
	],
    "TraySetClick": [
		"Sets the clickmode of the tray icon - what mouseclicks will display the tray menu.",
		"```\rTraySetClick ( flag )\r```"
	],
    "TraySetIcon": [
		"Loads/Sets a specified tray icon.",
		"```\rTraySetIcon ( [filename [, iconID]] )\r```"
	],
    "TraySetOnEvent": [
		"Defines a user function to be called when a special tray action happens.",
		"```\rTraySetOnEvent ( specialID, \"function\" )\r```"
	],
    "TraySetPauseIcon": [
		"Loads/Sets a specified tray pause icon.",
		"```\rTraySetPauseIcon ( [filename [, iconID]] )\r```"
	],
    "TraySetState": [
		"Sets the state of the tray icon.",
		"```\rTraySetState ( [flag = 1] )\r```"
	],
    "TraySetToolTip": [
		"(Re)Sets the tooltip text for the tray icon.",
		"```\rTraySetToolTip ( [text] )\r```"
	],
    "TrayTip": [
		"Displays a balloon tip from the AutoIt Icon.",
		"```\rTrayTip ( \"title\", \"text\", timeout [, option = 0] )\r```"
	],
    "UBound": [
		"Returns the size of array dimensions or the number of keys in a map.",
		"```\rUBound ( Variable [, Dimension = 1] )\r```"
	],
    "UDPBind": [
		"Create a socket bound to an incoming connection.",
		"```\rUDPBind ( IPAddr, port )\r```"
	],
    "UDPCloseSocket": [
		"Close a UDP socket.",
		"```\rUDPCloseSocket ( socketarray )\r```"
	],
    "UDPOpen": [
		"Open a socket connected to an existing server .",
		"```\rUDPOpen ( IPAddr, port [, flag = 0] )\r```"
	],
    "UDPRecv": [
		"Receives data from an opened socket.",
		"```\rUDPRecv ( socketarray, maxlen [, flag = 0] )\r```"
	],
    "UDPSend": [
		"Sends data on an opened socket.",
		"```\rUDPSend ( socketarray, data )\r```"
	],
    "UDPShutdown": [
		"Stops UDP services.",
		"```\rUDPShutdown ( )\r```"
	],
    "UDPStartup": [
		"Starts UDP services.",
		"```\rUDPStartup ( )\r```"
	],
    "VarGetType": [
		"Returns the internal type representation of a variant.",
		"```\rVarGetType ( expression )\r```"
	],
    "WinActivate": [
		"Activates (gives focus to) a window.",
		"```\rWinActivate ( \"title\" [, \"text\"] )\r```"
	],
    "WinActive": [
		"Checks to see if a specified window exists and is currently active.",
		"```\rWinActive ( \"title\" [, \"text\"] )\r```"
	],
    "WinClose": [
		"Closes a window.",
		"```\rWinClose ( \"title\" [, \"text\"] )\r```"
	],
    "WinExists": [
		"Checks to see if a specified window exists.",
		"```\rWinExists ( \"title\" [, \"text\"] )\r```"
	],
    "WinFlash": [
		"Flashes a window in the taskbar.",
		"```\rWinFlash ( \"title\" [, \"text\" [, flashes = 4 [, delay = 500]]] )\r```"
	],
    "WinGetCaretPos": [
		"Returns the coordinates of the caret in the foreground window.",
		"```\rWinGetCaretPos ( )\r```"
	],
    "WinGetClassList": [
		"Retrieves the classes from a window.",
		"```\rWinGetClassList ( \"title\" [, \"text\"] )\r```"
	],
    "WinGetClientSize": [
		"Retrieves the size of a given window's client area.",
		"```\rWinGetClientSize ( \"title\" [, \"text\"] )\r```"
	],
    "WinGetHandle": [
		"Retrieves the internal handle of a window.",
		"```\rWinGetHandle ( \"title\" [, \"text\"] )\r```"
	],
    "WinGetPos": [
		"Retrieves the position and size of a given window.",
		"```\rWinGetPos ( \"title\" [, \"text\"] )\r```"
	],
    "WinGetProcess": [
		"Retrieves the Process ID (PID) associated with a window.",
		"```\rWinGetProcess ( \"title\" [, \"text\"] )\r```"
	],
    "WinGetState": [
		"Retrieves the state of a given window.",
		"```\rWinGetState ( \"title\" [, \"text\"] )\r```"
	],
    "WinGetText": [
		"Retrieves the text from a window.",
		"```\rWinGetText ( \"title\" [, \"text\"] )\r```"
	],
    "WinGetTitle": [
		"Retrieves the full title from a window.",
		"```\rWinGetTitle ( \"title\" [, \"text\"] )\r```"
	],
    "WinKill": [
		"Forces a window to close.",
		"```\rWinKill ( \"title\" [, \"text\"] )\r```"
	],
    "WinList": [
		"Retrieves a list of windows.",
		"```\rWinList ( [\"title\" [, \"text\"]] )\r```"
	],
    "WinMenuSelectItem": [
		"Invokes a menu item of a window.",
		"```\rWinMenuSelectItem ( \"title\", \"text\", \"item\" [, \"item\" [, \"item\" [, \"item\" [, \"item\" [, \"item\" [, \"item\"]]]]]] )\r```"
	],
    "WinMinimizeAll": [
		"Minimizes all windows.",
		"```\rWinMinimizeAll ( )\r```"
	],
    "WinMinimizeAllUndo": [
		"Undoes a previous WinMinimizeAll function.",
		"```\rWinMinimizeAllUndo ( )\r```"
	],
    "WinMove": [
		"Moves and/or resizes a window.",
		"```\rWinMove ( \"title\", \"text\", x, y [, width [, height [, speed]]] )\r```"
	],
    "WinSetOnTop": [
		"Change a window's \"Always On Top\" attribute.",
		"```\rWinSetOnTop ( \"title\", \"text\", flag )\r```"
	],
    "WinSetState": [
		"Shows, hides, minimizes, maximizes, or restores a window.",
		"```\rWinSetState ( \"title\", \"text\", flag )\r```"
	],
    "WinSetTitle": [
		"Changes the title of a window.",
		"```\rWinSetTitle ( \"title\", \"text\", \"newtitle\" )\r```"
	],
    "WinSetTrans": [
		"Sets the transparency of a window.",
		"```\rWinSetTrans ( \"title\", \"text\", transparency )\r```"
	],
    "WinWait": [
		"Pauses execution of the script until the requested window exists.",
		"```\rWinWait ( \"title\" [, \"text\" [, timeout = 0]] )\r```"
	],
    "WinWaitActive": [
		"Pauses execution of the script until the requested window is active.",
		"```\rWinWaitActive ( \"title\" [, \"text\" [, timeout = 0]] )\r```"
	],
    "WinWaitClose": [
		"Pauses execution of the script until the requested window does not exist.",
		"```\rWinWaitClose ( \"title\" [, \"text\" [, timeout = 0]] )\r```"
	],
    "WinWaitNotActive": [
		"Pauses execution of the script until the requested window is not active.",
		"```\rWinWaitNotActive ( \"title\" [, \"text\" [, timeout = 0]] )\r```"
	]
}