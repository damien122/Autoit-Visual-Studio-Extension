{
    "_WinAPI_CommandLineToArgv": [
        "Parses a command-line string and returns an array of the command-line arguments",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_CommandLineToArgv ( $sCmd )\r```"
    ],
    "_WinAPI_IsNameInExpression": [
        "Determines whether a string matches the specified pattern",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_IsNameInExpression ( $sString, $sPattern [, $bCaseSensitive = False] )\r```"
    ],
    "_WinAPI_ParseURL": [
        "Performs rudimentary parsing of a URL",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_ParseURL ( $sUrl )\r```"
    ],
    "_WinAPI_ParseUserName": [
        "Extracts the domain and user account name from a fully qualified user name",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_ParseUserName ( $sUser )\r```"
    ],
    "_WinAPI_PathAddBackslash": [
        "Adds a backslash to the end of a string to create the correct syntax for a path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathAddBackslash ( $sFilePath )\r```"
    ],
    "_WinAPI_PathAddExtension": [
        "Adds a file name extension to a path string",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathAddExtension ( $sFilePath [, $sExt = ''] )\r```"
    ],
    "_WinAPI_PathAppend": [
        "Appends one path to the end of another",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathAppend ( $sFilePath, $sMore )\r```"
    ],
    "_WinAPI_PathBuildRoot": [
        "Creates a root path from a given drive number",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathBuildRoot ( $iDrive )\r```"
    ],
    "_WinAPI_PathCanonicalize": [
        "Removes elements of a file path according to special strings inserted into that path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathCanonicalize ( $sFilePath )\r```"
    ],
    "_WinAPI_PathCommonPrefix": [
        "Compares two paths to determine if they share a common prefix",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathCommonPrefix ( $sPath1, $sPath2 )\r```"
    ],
    "_WinAPI_PathCompactPath": [
        "Truncates a file path to fit within a given pixel width by replacing path components with ellipses",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathCompactPath ( $hWnd, $sFilePath [, $iWidth = 0] )\r```"
    ],
    "_WinAPI_PathCompactPathEx": [
        "Truncates a path to fit within a certain number of characters by replacing path components with ellipses",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathCompactPathEx ( $sFilePath, $iMax )\r```"
    ],
    "_WinAPI_PathCreateFromUrl": [
        "Converts a file URL to a Microsoft MS-DOS path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathCreateFromUrl ( $sUrl )\r```"
    ],
    "_WinAPI_PathFindExtension": [
        "Searches a path for an extension",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathFindExtension ( $sFilePath )\r```"
    ],
    "_WinAPI_PathFindFileName": [
        "Searches a path for a file name",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathFindFileName ( $sFilePath )\r```"
    ],
    "_WinAPI_PathFindNextComponent": [
        "Parses a path and returns the portion of that path that follows the first backslash",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathFindNextComponent ( $sFilePath )\r```"
    ],
    "_WinAPI_PathGetArgs": [
        "Finds the command-line arguments within a given path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathGetArgs ( $sFilePath )\r```"
    ],
    "_WinAPI_PathGetCharType": [
        "Determines the type of character in relation to a path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathGetCharType ( $sChar )\r```"
    ],
    "_WinAPI_PathGetDriveNumber": [
        "Searches a path for a drive letter within the range of 'A' to 'Z' and returns the corresponding drive number",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathGetDriveNumber ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsContentType": [
        "Determines if a file's registered content type matches the specified content type",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsContentType ( $sFilePath, $sType )\r```"
    ],
    "_WinAPI_PathIsExe": [
        "Determines whether a file is an executable by examining the file extension",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsExe ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsFileSpec": [
        "Searches a path for any path-delimiting characters",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsFileSpec ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsLFNFileSpec": [
        "Determines whether a file name is in long format",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsLFNFileSpec ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsRelative": [
        "Searches a path and determines if it is relative",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsRelative ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsRoot": [
        "Parses a path to determine if it is a directory root",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsRoot ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsSameRoot": [
        "Compares two paths to determine if they have a common root component",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsSameRoot ( $sPath1, $sPath2 )\r```"
    ],
    "_WinAPI_PathIsSystemFolder": [
        "Determines if an existing folder contains the attributes that make it a system folder",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsSystemFolder ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsUNC": [
        "Determines if the string is a valid Universal Naming Convention (UNC) for a server and share path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsUNC ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsUNCServer": [
        "Determines if a string is a valid Universal Naming Convention (UNC) for a server path only",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsUNCServer ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsUNCServerShare": [
        "Determines if a string is a valid Universal Naming Convention (UNC) share path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathIsUNCServerShare ( $sFilePath )\r```"
    ],
    "_WinAPI_PathMakeSystemFolder": [
        "Gives an existing folder the proper attributes to become a system folder",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathMakeSystemFolder ( $sFilePath )\r```"
    ],
    "_WinAPI_PathMatchSpec": [
        "Searches a string using a Microsoft MS-DOS wild card match type",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathMatchSpec ( $sFilePath, $sSpec )\r```"
    ],
    "_WinAPI_PathParseIconLocation": [
        "Parses a file location string that contains a file location and icon index",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathParseIconLocation ( $sFilePath )\r```"
    ],
    "_WinAPI_PathRelativePathTo": [
        "Creates a relative path from one file or folder to another",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathRelativePathTo ( $sPathFrom, $bDirFrom, $sPathTo, $bDirTo )\r```"
    ],
    "_WinAPI_PathRemoveArgs": [
        "Removes any arguments from a given path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathRemoveArgs ( $sFilePath )\r```"
    ],
    "_WinAPI_PathRemoveBackslash": [
        "Removes the trailing backslash from a given path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathRemoveBackslash ( $sFilePath )\r```"
    ],
    "_WinAPI_PathRemoveExtension": [
        "Removes the file name extension from a path, if one is present",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathRemoveExtension ( $sFilePath )\r```"
    ],
    "_WinAPI_PathRemoveFileSpec": [
        "Removes the trailing file name and backslash from a path, if they are present",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathRemoveFileSpec ( $sFilePath )\r```"
    ],
    "_WinAPI_PathRenameExtension": [
        "Replaces the extension of a file name with a new extension",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathRenameExtension ( $sFilePath, $sExt )\r```"
    ],
    "_WinAPI_PathSearchAndQualify": [
        "Formats a path to the fully qualified path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathSearchAndQualify ( $sFilePath [, $bExists = False] )\r```"
    ],
    "_WinAPI_PathSkipRoot": [
        "Parses a path, ignoring the drive letter or Universal Naming Convention (UNC) server/share path elements",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathSkipRoot ( $sFilePath )\r```"
    ],
    "_WinAPI_PathStripPath": [
        "Removes the path portion of a fully qualified path and file",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathStripPath ( $sFilePath )\r```"
    ],
    "_WinAPI_PathStripToRoot": [
        "Removes all parts of the path except for the root information",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathStripToRoot ( $sFilePath )\r```"
    ],
    "_WinAPI_PathUndecorate": [
        "Removes the decoration from a path string",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathUndecorate ( $sFilePath )\r```"
    ],
    "_WinAPI_PathUnExpandEnvStrings": [
        "Replaces folder names in a fully-qualified path with their associated environment string",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathUnExpandEnvStrings ( $sFilePath )\r```"
    ],
    "_WinAPI_PathUnmakeSystemFolder": [
        "Removes the attributes from a folder that make it a system folder",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathUnmakeSystemFolder ( $sFilePath )\r```"
    ],
    "_WinAPI_PathUnquoteSpaces": [
        "Removes quotes from the beginning and end of a path",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathUnquoteSpaces ( $sFilePath )\r```"
    ],
    "_WinAPI_PathYetAnotherMakeUniqueName": [
        "Creates a unique filename based on an existing filename",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_PathYetAnotherMakeUniqueName ( $sFilePath )\r```"
    ],
    "_WinAPI_ShellGetImageList": [
        "Retrieves the system image list for small or large icons",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_ShellGetImageList ( [$bSmall = False] )\r```"
    ],
    "_WinAPI_UrlApplyScheme": [
        "Determines a scheme for a specified URL string, and returns a string with an appropriate prefix",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_UrlApplyScheme ( $sUrl [, $iFlags = 1] )\r```"
    ],
    "_WinAPI_UrlCanonicalize": [
        "Converts a URL string into canonical form",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_UrlCanonicalize ( $sUrl, $iFlags )\r```"
    ],
    "_WinAPI_UrlCombine": [
        "Combines the base an relative URLs in canonical form",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_UrlCombine ( $sUrl, $sPart [, $iFlags = 0] )\r```"
    ],
    "_WinAPI_UrlCompare": [
        "Makes a case-sensitive comparison of two URL strings",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_UrlCompare ( $sUrl1, $sUrl2 [, $bIgnoreSlash = False] )\r```"
    ],
    "_WinAPI_UrlCreateFromPath": [
        "Converts a Microsoft MS-DOS path to a canonicalized URL",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_UrlCreateFromPath ( $sFilePath )\r```"
    ],
    "_WinAPI_UrlFixup": [
        "Attempts to correct a URL whose protocol identifier is incorrect",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_UrlFixup ( $sUrl )\r```"
    ],
    "_WinAPI_UrlGetPart": [
        "Retrieves a specified part from the URL",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_UrlGetPart ( $sUrl, $iPart )\r```"
    ],
    "_WinAPI_UrlHash": [
        "Hashes a URL string",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_UrlHash ( $sUrl [, $iLength = 32] )\r```"
    ],
    "_WinAPI_UrlIs": [
        "Tests whether or not a URL is a specified type",
        "```\r#include <WinAPIShPath.au3>\r_WinAPI_UrlIs ( $sUrl [, $iType = 0] )\r```"
    ]
}
