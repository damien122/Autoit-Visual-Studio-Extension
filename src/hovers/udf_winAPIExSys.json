{
    "_WinAPI_LockWorkStation": [
        "Locks the workstation's display",
        "```\r#include <WinAPISys.au3>\r_WinAPI_LockWorkStation ( )\r```"
    ],
    "_WinAPI_ShutdownBlockReasonCreate": [
        "Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated",
        "```\r#include <WinAPISys.au3>\r_WinAPI_ShutdownBlockReasonCreate ( $hWnd, $sText )\r```"
    ],
    "_WinAPI_ShutdownBlockReasonDestroy": [
        "Indicates that the system can be shut down and frees the reason string",
        "```\r#include <WinAPISys.au3>\r_WinAPI_ShutdownBlockReasonDestroy ( $hWnd )\r```"
    ],
    "_WinAPI_ShutdownBlockReasonQuery": [
        "Retrieves the reason string set by the _WinAPI_ShutdownBlockReasonCreate() function",
        "```\r#include <WinAPISys.au3>\r_WinAPI_ShutdownBlockReasonQuery ( $hWnd )\r```"
    ],
    "_WinAPI_SetWinEventHook": [
        "Sets an event hook function for a range of events",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetWinEventHook ( $iEventMin, $iEventMax, $pEventProc [, $iPID = 0 [, $iThreadId = 0 [, $iFlags = 0]]] )\r```"
    ],
    "_WinAPI_UnhookWinEvent": [
        "Removes an event hook function",
        "```\r#include <WinAPISys.au3>\r_WinAPI_UnhookWinEvent ( $hEventHook )\r```"
    ],
    "_WinAPI_AddClipboardFormatListener": [
        "Places the given window in the system-maintained clipboard format listener list",
        "```\r#include <WinAPISys.au3>\r_WinAPI_AddClipboardFormatListener ( $hWnd )\r```"
    ],
    "_WinAPI_GetClipboardSequenceNumber": [
        "Retrieves the clipboard sequence number for the current window station",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetClipboardSequenceNumber ( )\r```"
    ],
    "_WinAPI_RemoveClipboardFormatListener": [
        "Removes the given window from the system-maintained clipboard format listener list",
        "```\r#include <WinAPISys.au3>\r_WinAPI_RemoveClipboardFormatListener ( $hWnd )\r```"
    ],
    "_WinAPI_GetEffectiveClientRect": [
        "Calculates the dimensions of a rectangle in the client area that contains all the specified controls",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetEffectiveClientRect ( $hWnd, $aCtrl [, $iStart = 0 [, $iEnd = -1]] )\r```"
    ],
    "_WinAPI_GetMUILanguage": [
        "Gets the language currently in use by the common controls for a particular process",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetMUILanguage ( )\r```"
    ],
    "_WinAPI_InitMUILanguage": [
        "Enables an application to specify a language to be used with the common controls that is different from the system language",
        "```\r#include <WinAPISys.au3>\r_WinAPI_InitMUILanguage ( $iLanguage )\r```"
    ],
    "_WinAPI_LoadIconMetric": [
        "Loads a specified icon resource with a client-specified system metric",
        "```\r#include <WinAPISys.au3>\r_WinAPI_LoadIconMetric ( $hInstance, $sName, $iMetric )\r```"
    ],
    "_WinAPI_LoadIconWithScaleDown": [
        "Loads an icon and scales down a larger image instead of scaling up a smaller image",
        "```\r#include <WinAPISys.au3>\r_WinAPI_LoadIconWithScaleDown ( $hInstance, $sName, $iWidth, $iHeight )\r```"
    ],
    "_WinAPI_MirrorIcon": [
        "Reverses (mirrors) icons so that they are displayed correctly on a mirrored device context",
        "```\r#include <WinAPISys.au3>\r_WinAPI_MirrorIcon ( $hIcon [, $bDelete = False] )\r```"
    ],
    "_WinAPI_GetDllDirectory": [
        "Retrieves the application-specific portion of the search path used to locate DLLs for the application",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetDllDirectory ( )\r```"
    ],
    "_WinAPI_GetModuleHandleEx": [
        "Retrieves a module handle for the specified module",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetModuleHandleEx ( $sModule [, $iFlags = 0] )\r```"
    ],
    "_WinAPI_SetDllDirectory": [
        "Adds a directory to the search path used to locate DLLs for the application",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetDllDirectory ( [$sDirPath = Default] )\r```"
    ],
    "_WinAPI_CreateBuffer": [
        "Allocates a block of memory from the internal library heap",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CreateBuffer ( $iLength [, $pBuffer = 0 [, $bAbort = True]] )\r```"
    ],
    "_WinAPI_CreateBufferFromStruct": [
        "Allocates a block of memory from the internal library heap and initializes it with the structure's data",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CreateBufferFromStruct ( $tStruct [, $pBuffer = 0 [, $bAbort = True]] )\r```"
    ],
    "_WinAPI_CreateString": [
        "Copies a specified string to the newly allocated memory block and returns its pointer",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CreateString ( $sString [, $pString = 0 [, $iLength = -1 [, $bUnicode = True [, $bAbort = True]]]] )\r```"
    ],
    "_WinAPI_FreeMemory": [
        "Frees a memory block in the internal library heap",
        "```\r#include <WinAPISys.au3>\r_WinAPI_FreeMemory ( $pMemory )\r```"
    ],
    "_WinAPI_GetMemorySize": [
        "Retrieves the size of a memory block allocated from the internal library heap",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetMemorySize ( $pMemory )\r```"
    ],
    "_WinAPI_IsMemory": [
        "Determines whether the specified pointer points to the memory block in the internal library heap",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsMemory ( $pMemory )\r```"
    ],
    "_WinAPI_CompressBuffer": [
        "Compresses a buffer with specified compression format and engine type",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CompressBuffer ( $pUncompressedBuffer, $iUncompressedSize, $pCompressedBuffer, $iCompressedSize [, $iFormatAndEngine = 0x0002] )\r```"
    ],
    "_WinAPI_ComputeCrc32": [
        "Calculates the CRC32 checksum of a block of memory",
        "```\r#include <WinAPISys.au3>\r_WinAPI_ComputeCrc32 ( $pMemory, $iLength )\r```"
    ],
    "_WinAPI_DecompressBuffer": [
        "Decompresses an entire compressed buffer",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DecompressBuffer ( $pUncompressedBuffer, $iUncompressedSize, $pCompressedBuffer, $iCompressedSize [, $iFormat = 0x0002] )\r```"
    ],
    "_WinAPI_EqualMemory": [
        "Compares two blocks of memory to determine whether the specified number of bytes are identical",
        "```\r#include <WinAPISys.au3>\r_WinAPI_EqualMemory ( $pSource1, $pSource2, $iLength )\r```"
    ],
    "_WinAPI_FillMemory": [
        "Fills a block of memory with the given value",
        "```\r#include <WinAPISys.au3>\r_WinAPI_FillMemory ( $pMemory, $iLength [, $iValue = 0] )\r```"
    ],
    "_WinAPI_GetPhysicallyInstalledSystemMemory": [
        "Retrieves the amount of RAM that is physically installed on the computer",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetPhysicallyInstalledSystemMemory ( )\r```"
    ],
    "_WinAPI_GetSystemDEPPolicy": [
        "Gets the data execution prevention (DEP) policy setting for the system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetSystemDEPPolicy ( )\r```"
    ],
    "_WinAPI_IsBadCodePtr": [
        "Determines whether the calling process has read access to the memory at the specified address",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsBadCodePtr ( $pAddress )\r```"
    ],
    "_WinAPI_IsBadReadPtr": [
        "Verifies that the calling process has read access to the specified range of memory",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsBadReadPtr ( $pAddress, $iLength )\r```"
    ],
    "_WinAPI_IsBadStringPtr": [
        "Verifies that the calling process has read access to the specified range of memory",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsBadStringPtr ( $pAddress, $iLength )\r```"
    ],
    "_WinAPI_IsBadWritePtr": [
        "Verifies that the calling process has write access to the specified range of memory",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsBadWritePtr ( $pAddress, $iLength )\r```"
    ],
    "_WinAPI_MoveMemory": [
        "Moves a block of memory from one location to another",
        "```\r#include <WinAPISys.au3>\r_WinAPI_MoveMemory ( $pDestination, $pSource, $iLength )\r```"
    ],
    "_WinAPI_ZeroMemory": [
        "Fills a block of memory with zeros",
        "```\r#include <WinAPISys.au3>\r_WinAPI_ZeroMemory ( $pMemory, $iLength )\r```"
    ],
    "_WinAPI_GetDefaultPrinter": [
        "Retrieves the printer name of the default printer for the current user on the local computer",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetDefaultPrinter ( )\r```"
    ],
    "_WinAPI_GetPwrCapabilities": [
        "Retrieves information about the system power capabilities",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetPwrCapabilities ( )\r```"
    ],
    "_WinAPI_GetSystemPowerStatus": [
        "Retrieves the power status of the system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetSystemPowerStatus ( )\r```"
    ],
    "_WinAPI_RegisterPowerSettingNotification": [
        "Registers the application to receive power setting notifications for the specific power setting event",
        "```\r#include <WinAPISys.au3>\r_WinAPI_RegisterPowerSettingNotification ( $hWnd, $sGUID )\r```"
    ],
    "_WinAPI_UnregisterPowerSettingNotification": [
        "Unregisters the power setting notification",
        "```\r#include <WinAPISys.au3>\r_WinAPI_UnregisterPowerSettingNotification ( $hNotify )\r```"
    ],
    "_WinAPI_CloseDesktop": [
        "Closes an open handle to a desktop object",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CloseDesktop ( $hDesktop )\r```"
    ],
    "_WinAPI_CloseWindowStation": [
        "Closes an open window station handle",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CloseWindowStation ( $hStation )\r```"
    ],
    "_WinAPI_CreateDesktop": [
        "Creates a new desktop, associates it with the current window station of the calling process",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CreateDesktop ( $sName [, $iAccess = 0x0002 [, $iFlags = 0 [, $iHeap = 0 [, $tSecurity = 0]]]] )\r```"
    ],
    "_WinAPI_CreateWindowStation": [
        "Creates a window station object, associates it with the calling process, and assigns it to the current session",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CreateWindowStation ( [$sName = '' [, $iAccess = 0 [, $iFlags = 0 [, $tSecurity = 0]]]] )\r```"
    ],
    "_WinAPI_EnumDesktops": [
        "Enumerates all desktops associated with the specified window station of the calling process",
        "```\r#include <WinAPISys.au3>\r_WinAPI_EnumDesktops ( $hStation )\r```"
    ],
    "_WinAPI_EnumDesktopWindows": [
        "Enumerates all top-level windows associated with the specified desktop",
        "```\r#include <WinAPISys.au3>\r_WinAPI_EnumDesktopWindows ( $hDesktop [, $bVisible = True] )\r```"
    ],
    "_WinAPI_EnumWindowStations": [
        "Enumerates all window stations in the current session",
        "```\r#include <WinAPISys.au3>\r_WinAPI_EnumWindowStations ( )\r```"
    ],
    "_WinAPI_GetProcessWindowStation": [
        "Retrieves a handle to the current window station for the calling process",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetProcessWindowStation ( )\r```"
    ],
    "_WinAPI_GetUserObjectInformation": [
        "Retrieves information about the specified window station or desktop object",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetUserObjectInformation ( $hObject, $iIndex )\r```"
    ],
    "_WinAPI_OpenDesktop": [
        "Opens the specified desktop object",
        "```\r#include <WinAPISys.au3>\r_WinAPI_OpenDesktop ( $sName [, $iAccess = 0 [, $iFlags = 0 [, $bInherit = False]]] )\r```"
    ],
    "_WinAPI_OpenInputDesktop": [
        "Opens the desktop that receives user input",
        "```\r#include <WinAPISys.au3>\r_WinAPI_OpenInputDesktop ( [$iAccess = 0 [, $iFlags = 0 [, $bInherit = False]]] )\r```"
    ],
    "_WinAPI_OpenWindowStation": [
        "Opens the specified window station",
        "```\r#include <WinAPISys.au3>\r_WinAPI_OpenWindowStation ( $sName [, $iAccess = 0 [, $bInherit = False]] )\r```"
    ],
    "_WinAPI_SetProcessWindowStation": [
        "Assigns the specified window station to the calling process",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetProcessWindowStation ( $hStation )\r```"
    ],
    "_WinAPI_SetUserObjectInformation": [
        "Sets information about the specified window station or desktop object",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetUserObjectInformation ( $hObject, $iIndex, $tData )\r```"
    ],
    "_WinAPI_SwitchDesktop": [
        "Makes the specified desktop visible and activates it",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SwitchDesktop ( $hDesktop )\r```"
    ],
    "_WinAPI_EnumPageFiles": [
        "Retrieves information for each installed pagefile in the system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_EnumPageFiles ( )\r```"
    ],
    "_WinAPI_GetCurrentHwProfile": [
        "Retrieves information about the current hardware profile for the local computer",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetCurrentHwProfile ( )\r```"
    ],
    "_WinAPI_GetHandleInformation": [
        "Retrieves certain properties of an object handle",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetHandleInformation ( $hObject )\r```"
    ],
    "_WinAPI_GetPerformanceInfo": [
        "Retrieves the performance information",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetPerformanceInfo ( )\r```"
    ],
    "_WinAPI_GetProcessShutdownParameters": [
        "Retrieves the shutdown parameters for the currently calling process",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetProcessShutdownParameters ( )\r```"
    ],
    "_WinAPI_GetStartupInfo": [
        "Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetStartupInfo ( )\r```"
    ],
    "_WinAPI_GetSystemInfo": [
        "Retrieves information about the current system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetSystemInfo ( )\r```"
    ],
    "_WinAPI_GetSystemTimes": [
        "Retrieves system timing information",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetSystemTimes ( )\r```"
    ],
    "_WinAPI_GetSystemWow64Directory": [
        "Retrieves the path of the system directory used by WOW64",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetSystemWow64Directory ( )\r```"
    ],
    "_WinAPI_GetTickCount": [
        "Retrieves the number of milliseconds that have elapsed since the system was started",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetTickCount ( )\r```"
    ],
    "_WinAPI_GetTickCount64": [
        "Retrieves the number of milliseconds that have elapsed since the system was started",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetTickCount64 ( )\r```"
    ],
    "_WinAPI_GetVersion": [
        "Retrieves version of the current operating system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetVersion ( )\r```"
    ],
    "_WinAPI_GetVersionEx": [
        "Retrieves information about the current operating system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetVersionEx ( )\r```"
    ],
    "_WinAPI_IsProcessorFeaturePresent": [
        "Determines whether the specified processor feature is supported by the current computer",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsProcessorFeaturePresent ( $iFeature )\r```"
    ],
    "_WinAPI_QueryPerformanceCounter": [
        "Retrieves the current value of the high-resolution performance counter",
        "```\r#include <WinAPISys.au3>\r_WinAPI_QueryPerformanceCounter ( )\r```"
    ],
    "_WinAPI_QueryPerformanceFrequency": [
        "Retrieves the frequency of the high-resolution performance counter",
        "```\r#include <WinAPISys.au3>\r_WinAPI_QueryPerformanceFrequency ( )\r```"
    ],
    "_WinAPI_SetProcessShutdownParameters": [
        "Sets a shutdown order for a process relative to the other processes in the system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetProcessShutdownParameters ( $iLevel [, $bDialog = False] )\r```"
    ],
    "_WinAPI_ActivateKeyboardLayout": [
        "Sets the input locale identifier for the calling thread or the current process",
        "```\r#include <WinAPISys.au3>\r_WinAPI_ActivateKeyboardLayout ( $hLocale [, $iFlag = 0] )\r```"
    ],
    "_WinAPI_DefRawInputProc": [
        "Calls the default raw input procedure to process the raw input messages that an application does not process",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DefRawInputProc ( $paRawInput, $iInput )\r```"
    ],
    "_WinAPI_EnumRawInputDevices": [
        "Enumerates the raw input devices attached to the system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_EnumRawInputDevices ( )\r```"
    ],
    "_WinAPI_GetActiveWindow": [
        "Retrieves the window handle to the active window attached to the calling process's message queue",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetActiveWindow ( )\r```"
    ],
    "_WinAPI_GetIdleTime": [
        "Retrieves the time that has elapsed since the last input",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetIdleTime ( )\r```"
    ],
    "_WinAPI_GetKeyboardLayout": [
        "Retrieves the active input locale identifier for the specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetKeyboardLayout ( $hWnd )\r```"
    ],
    "_WinAPI_GetKeyboardLayoutList": [
        "Retrieves the all input locale identifiers corresponding to the current set of input locales in the system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetKeyboardLayoutList ( )\r```"
    ],
    "_WinAPI_GetKeyboardState": [
        "Copies the status of the 256 virtual keys to the specified buffer",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetKeyboardState ( )\r```"
    ],
    "_WinAPI_GetKeyboardType": [
        "Retrieves information about the current keyboard",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetKeyboardType ( $iType )\r```"
    ],
    "_WinAPI_GetKeyNameText": [
        "Retrieves a string that represents the name of a key",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetKeyNameText ( $lParam )\r```"
    ],
    "_WinAPI_GetKeyState": [
        "Retrieves the status of the specified virtual key",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetKeyState ( $vKey )\r```"
    ],
    "_WinAPI_GetRawInputBuffer": [
        "Performs a buffered read of the raw input data",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetRawInputBuffer ( $pBuffer, $iLength )\r```"
    ],
    "_WinAPI_GetRawInputBufferLength": [
        "Retrieves the required buffer size to call the _WinAPI_GetRawInputBuffer() function",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetRawInputBufferLength ( )\r```"
    ],
    "_WinAPI_GetRawInputData": [
        "Retrieves the raw input from the specified device",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetRawInputData ( $hRawInput, $pBuffer, $iLength, $iFlag )\r```"
    ],
    "_WinAPI_GetRawInputDeviceInfo": [
        "Retrieves information about the raw input device",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetRawInputDeviceInfo ( $hDevice, $pBuffer, $iLength, $iFlag )\r```"
    ],
    "_WinAPI_GetRegisteredRawInputDevices": [
        "Retrieves the information about the raw input devices for the current application",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetRegisteredRawInputDevices ( $pBuffer, $iLength )\r```"
    ],
    "_WinAPI_IsLoadKBLayout": [
        "Determines whether the specified input locale loaded into the system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsLoadKBLayout ( $iLanguage )\r```"
    ],
    "_WinAPI_IsWindowEnabled": [
        "Determines whether the specified window is enabled for mouse and keyboard input",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsWindowEnabled ( $hWnd )\r```"
    ],
    "_WinAPI_Keybd_Event": [
        "Synthesizes a keystroke",
        "```\r#include <WinAPISys.au3>\r_WinAPI_Keybd_Event ( $vKey, $iFlags [, $iScanCode = 0 [, $iExtraInfo = 0]] )\r```"
    ],
    "_WinAPI_LoadKeyboardLayout": [
        "Loads a new input locale identifier into the system",
        "```\r#include <WinAPISys.au3>\r_WinAPI_LoadKeyboardLayout ( $iLanguage [, $iFlag = 0] )\r```"
    ],
    "_WinAPI_MapVirtualKey": [
        "Translates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code",
        "```\r#include <WinAPISys.au3>\r_WinAPI_MapVirtualKey ( $iCode, $iType [, $hLocale = 0] )\r```"
    ],
    "_WinAPI_RegisterHotKey": [
        "Defines a system-wide hot key",
        "```\r#include <WinAPISys.au3>\r_WinAPI_RegisterHotKey ( $hWnd, $iID, $iModifiers, $vKey )\r```"
    ],
    "_WinAPI_RegisterRawInputDevices": [
        "Registers the devices that supply the raw input data",
        "```\r#include <WinAPISys.au3>\r_WinAPI_RegisterRawInputDevices ( $paDevice [, $iCount = 1] )\r```"
    ],
    "_WinAPI_SetActiveWindow": [
        "Activates the specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetActiveWindow ( $hWnd )\r```"
    ],
    "_WinAPI_SetKeyboardLayout": [
        "Sets an input locale identifier to the specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetKeyboardLayout ( $hWnd, $iLanguage [, $iFlags = 0] )\r```"
    ],
    "_WinAPI_SetKeyboardState": [
        "Copies a 256-byte array of keyboard key states into the calling process's keyboard input-state table",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetKeyboardState ( $tState )\r```"
    ],
    "_WinAPI_TrackMouseEvent": [
        "Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time",
        "```\r#include <WinAPISys.au3>\r_WinAPI_TrackMouseEvent ( $hWnd, $iFlags [, $iTime = -1] )\r```"
    ],
    "_WinAPI_UnloadKeyboardLayout": [
        "Unloads an input locale identifier",
        "```\r#include <WinAPISys.au3>\r_WinAPI_UnloadKeyboardLayout ( $hLocale )\r```"
    ],
    "_WinAPI_UnregisterHotKey": [
        "Frees a hot key previously registered by the calling thread",
        "```\r#include <WinAPISys.au3>\r_WinAPI_UnregisterHotKey ( $hWnd, $iID )\r```"
    ],
    "_WinAPI_AdjustWindowRectEx": [
        "Calculates the required size of the window rectangle, based on the desired size of the client rectangle",
        "```\r#include <WinAPISys.au3>\r_WinAPI_AdjustWindowRectEx ( ByRef $tRECT, $iStyle [, $iExStyle = 0 [, $bMenu = False]] )\r```"
    ],
    "_WinAPI_AnimateWindow": [
        "Enables you to produce special effects when showing or hiding windows",
        "```\r#include <WinAPISys.au3>\r_WinAPI_AnimateWindow ( $hWnd, $iFlags [, $iDuration = 1000] )\r```"
    ],
    "_WinAPI_BeginDeferWindowPos": [
        "Allocates memory for a multiple-window-position structure",
        "```\r#include <WinAPISys.au3>\r_WinAPI_BeginDeferWindowPos ( [$iAmount = 1] )\r```"
    ],
    "_WinAPI_BringWindowToTop": [
        "Brings the specified window to the top of the Z order",
        "```\r#include <WinAPISys.au3>\r_WinAPI_BringWindowToTop ( $hWnd )\r```"
    ],
    "_WinAPI_BroadcastSystemMessage": [
        "Sends a message to the specified recipients",
        "```\r#include <WinAPISys.au3>\r_WinAPI_BroadcastSystemMessage ( $iMsg [, $wParam = 0 [, $lParam = 0 [, $iFlags = 0 [, $iRecipients = 0]]]] )\r```"
    ],
    "_WinAPI_CallWindowProcW": [
        "Passes message information to the specified window procedure",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CallWindowProcW ( $pPrevWndProc, $hWnd, $iMsg, $wParam, $lParam )\r```"
    ],
    "_WinAPI_CascadeWindows": [
        "Cascades the specified child windows of the specified parent window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CascadeWindows ( $aWnds [, $tRECT = 0 [, $hParent = 0 [, $iFlags = 0 [, $iStart = 0 [, $iEnd = -1]]]]] )\r```"
    ],
    "_WinAPI_ChangeWindowMessageFilterEx": [
        "Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_ChangeWindowMessageFilterEx ( $hWnd, $iMsg, $iAction )\r```"
    ],
    "_WinAPI_ChildWindowFromPointEx": [
        "Determines which, if any, of the child windows belonging to the specified parent window contains the specified point",
        "```\r#include <WinAPISys.au3>\r_WinAPI_ChildWindowFromPointEx ( $hWnd, $tPOINT [, $iFlags = 0] )\r```"
    ],
    "_WinAPI_CloseWindow": [
        "Minimizes (but does not destroy) the specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_CloseWindow ( $hWnd )\r```"
    ],
    "_WinAPI_DeferWindowPos": [
        "Updates the specified multiple-window-position structure for the specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DeferWindowPos ( $hInfo, $hWnd, $hAfter, $iX, $iY, $iWidth, $iHeight, $iFlags )\r```"
    ],
    "_WinAPI_DefWindowProcW": [
        "Calls the default window procedure to provide default processing for any window messages",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DefWindowProcW ( $hWnd, $iMsg, $wParam, $lParam )\r```"
    ],
    "_WinAPI_DeregisterShellHookWindow": [
        "Unregisters a specified Shell window that is registered to receive Shell hook messages",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DeregisterShellHookWindow ( $hWnd )\r```"
    ],
    "_WinAPI_DragAcceptFiles": [
        "Registers whether a window accepts dropped files",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DragAcceptFiles ( $hWnd [, $bAccept = True] )\r```"
    ],
    "_WinAPI_DragFinish": [
        "Releases memory that the system allocated for use in transferring file names to the application",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DragFinish ( $hDrop )\r```"
    ],
    "_WinAPI_DragQueryFileEx": [
        "Retrieves the names of dropped files that result from a successful drag-and-drop operation",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DragQueryFileEx ( $hDrop [, $iFlag = 0] )\r```"
    ],
    "_WinAPI_DragQueryPoint": [
        "Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DragQueryPoint ( $hDrop )\r```"
    ],
    "_WinAPI_EndDeferWindowPos": [
        "Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle",
        "```\r#include <WinAPISys.au3>\r_WinAPI_EndDeferWindowPos ( $hInfo )\r```"
    ],
    "_WinAPI_EnumChildWindows": [
        "Enumerates a child windows that belong to the specified parent window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_EnumChildWindows ( $hWnd [, $bVisible = True] )\r```"
    ],
    "_WinAPI_GetClassInfoEx": [
        "Retrieves information about a window class",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetClassInfoEx ( $sClass [, $hInstance = 0] )\r```"
    ],
    "_WinAPI_GetClassLongEx": [
        "Retrieves the specified value associated with the specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetClassLongEx ( $hWnd, $iIndex )\r```"
    ],
    "_WinAPI_GetGUIThreadInfo": [
        "Retrieves information about the active window or a specified GUI thread",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetGUIThreadInfo ( $iThreadId )\r```"
    ],
    "_WinAPI_GetLastActivePopup": [
        "Determines which pop-up window owned by the specified window was most recently active",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetLastActivePopup ( $hWnd )\r```"
    ],
    "_WinAPI_GetMessageExtraInfo": [
        "Retrieves the extra message information for the current thread",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetMessageExtraInfo ( )\r```"
    ],
    "_WinAPI_GetMonitorInfo": [
        "Retrieves information about a display monitor",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetMonitorInfo ( $hMonitor )\r```"
    ],
    "_WinAPI_GetObjectInfoByHandle": [
        "Retrieves information about a specified object",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetObjectInfoByHandle ( $hObject )\r```"
    ],
    "_WinAPI_GetObjectNameByHandle": [
        "Retrieves a name of the specified object",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetObjectNameByHandle ( $hObject )\r```"
    ],
    "_WinAPI_GetShellWindow": [
        "Retrieves a handle to the Shell's desktop window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetShellWindow ( )\r```"
    ],
    "_WinAPI_GetTopWindow": [
        "Retrieves a handle to the child window at the top of the Z order",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetTopWindow ( $hWnd )\r```"
    ],
    "_WinAPI_GetWindowDisplayAffinity": [
        "Retrieves the current display affinity setting, from any process, for a given window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetWindowDisplayAffinity ( $hWnd )\r```"
    ],
    "_WinAPI_GetWindowInfo": [
        "Retrieves information about the specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetWindowInfo ( $hWnd )\r```"
    ],
    "_WinAPI_GetWorkArea": [
        "Retrieves the size of the working area on the primary display monitor",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetWorkArea ( )\r```"
    ],
    "_WinAPI_IsChild": [
        "Tests whether a window is a child window of a specified parent window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsChild ( $hWnd, $hWndParent )\r```"
    ],
    "_WinAPI_IsHungAppWindow": [
        "Determines whether the specified application is not responding",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsHungAppWindow ( $hWnd )\r```"
    ],
    "_WinAPI_IsIconic": [
        "Determines whether the specified window is minimized (iconic)",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsIconic ( $hWnd )\r```"
    ],
    "_WinAPI_IsWindowUnicode": [
        "Determines whether the specified window is a native Unicode window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsWindowUnicode ( $hWnd )\r```"
    ],
    "_WinAPI_IsZoomed": [
        "Determines whether a window is maximized",
        "```\r#include <WinAPISys.au3>\r_WinAPI_IsZoomed ( $hWnd )\r```"
    ],
    "_WinAPI_KillTimer": [
        "Destroys the specified timer",
        "```\r#include <WinAPISys.au3>\r_WinAPI_KillTimer ( $hWnd, $iTimerID )\r```"
    ],
    "_WinAPI_OpenIcon": [
        "Restores a minimized (iconic) window to its previous size and position and activates the window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_OpenIcon ( $hWnd )\r```"
    ],
    "_WinAPI_RegisterClass": [
        "Registers a window class",
        "```\r#include <WinAPISys.au3>\r_WinAPI_RegisterClass ( $tWNDCLASS )\r```"
    ],
    "_WinAPI_RegisterClassEx": [
        "Registers a window class",
        "```\r#include <WinAPISys.au3>\r_WinAPI_RegisterClassEx ( $tWNDCLASSEX )\r```"
    ],
    "_WinAPI_RegisterShellHookWindow": [
        "Registers a specified Shell window to receive certain messages for events or notifications",
        "```\r#include <WinAPISys.au3>\r_WinAPI_RegisterShellHookWindow ( $hWnd )\r```"
    ],
    "_WinAPI_SendMessageTimeout": [
        "Sends the specified message to one of more windows",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SendMessageTimeout ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iTimeout = 1000 [, $iFlags = 0]]]] )\r```"
    ],
    "_WinAPI_SetClassLongEx": [
        "Replaces the specified value into the specified window belongs",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetClassLongEx ( $hWnd, $iIndex, $iNewLong )\r```"
    ],
    "_WinAPI_SetForegroundWindow": [
        "Puts the specified window into the foreground and activates its",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetForegroundWindow ( $hWnd )\r```"
    ],
    "_WinAPI_SetMessageExtraInfo": [
        "Sets the extra message information for the current thread",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetMessageExtraInfo ( $lParam )\r```"
    ],
    "_WinAPI_SetTimer": [
        "Creates a timer with the specified time-out value",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetTimer ( $hWnd, $iTimerID, $iElapse, $pTimerFunc )\r```"
    ],
    "_WinAPI_SetWindowDisplayAffinity": [
        "Stores the display affinity setting in kernel mode on the specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetWindowDisplayAffinity ( $hWnd, $iAffinity )\r```"
    ],
    "_WinAPI_ShowOwnedPopups": [
        "Shows or hides all pop-up windows owned by the specified window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_ShowOwnedPopups ( $hWnd, $bShow )\r```"
    ],
    "_WinAPI_SwitchToThisWindow": [
        "Switches the focus to a specified window and bring it to the foreground",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SwitchToThisWindow ( $hWnd [, $bAltTab = False] )\r```"
    ],
    "_WinAPI_TileWindows": [
        "Tiles the specified child windows of the specified parent window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_TileWindows ( $aWnds [, $tRECT = 0 [, $hParent = 0 [, $iFlags = 0 [, $iStart = 0 [, $iEnd = -1]]]]] )\r```"
    ],
    "_WinAPI_UnregisterClass": [
        "Unregisters a window class, freeing the memory required for the class",
        "```\r#include <WinAPISys.au3>\r_WinAPI_UnregisterClass ( $sClass [, $hInstance = 0] )\r```"
    ],
    "_WinAPI_UpdateLayeredWindowEx": [
        "Updates a bitmap translucency of a layered window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_UpdateLayeredWindowEx ( $hWnd, $iX, $iY, $hBitmap [, $iOpacity = 255 [, $bDelete = False]] )\r```"
    ],
    "_WinAPI_UpdateLayeredWindowIndirect": [
        "Updates the position, size, shape, content, and translucency of a layered window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_UpdateLayeredWindowIndirect ( $hWnd, $tULWINFO )\r```"
    ],
    "_WinAPI_DefSubclassProc": [
        "Calls the next handler in a window's subclass chain",
        "```\r#include <WinAPISys.au3>\r_WinAPI_DefSubclassProc ( $hWnd, $iMsg, $wParam, $lParam )\r```"
    ],
    "_WinAPI_GetWindowSubclass": [
        "Retrieves the reference data for the specified window subclass callback",
        "```\r#include <WinAPISys.au3>\r_WinAPI_GetWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass )\r```"
    ],
    "_WinAPI_RemoveWindowSubclass": [
        "Removes a subclass callback from a window",
        "```\r#include <WinAPISys.au3>\r_WinAPI_RemoveWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass )\r```"
    ],
    "_WinAPI_SetWindowSubclass": [
        "Installs or updates a window subclass callback",
        "```\r#include <WinAPISys.au3>\r_WinAPI_SetWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass [, $pData = 0] )\r```"
    ]    
}
