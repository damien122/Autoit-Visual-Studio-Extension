{
    "_WinAPI_AdjustTokenPrivileges": [
        "Enables or disables privileges in the specified access token",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_AdjustTokenPrivileges ( $hToken, $aPrivileges, $iAttributes, ByRef $aAdjust )\r```"
    ],
    "_WinAPI_AssignProcessToJobObject": [
        "Assigns a process to an existing job object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_AssignProcessToJobObject ( $hJob, $hProcess )\r```"
    ],
    "_WinAPI_CreateJobObject": [
        "Creates or opens a job object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_CreateJobObject ( [$sName = '' [, $tSecurity = 0]] )\r```"
    ],
    "_WinAPI_CreateProcessWithToken": [
        "Creates a new process and its primary thread in the security context of the specified token",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_CreateProcessWithToken ( $sApp, $sCmd, $iFlags, $tStartupInfo, $tProcessInfo, $hToken [, $iLogon = 0 [, $pEnvironment = 0 [, $sDir = '']]] )\r```"
    ],
    "_WinAPI_DuplicateTokenEx": [
        "Creates a new primary or impersonation access token that duplicates an existing token",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_DuplicateTokenEx ( $hToken, $iAccess, $iLevel [, $iType = 1 [, $tSecurity = 0]] )\r```"
    ],
    "_WinAPI_EmptyWorkingSet": [
        "Removes as many pages as possible from the working set of the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_EmptyWorkingSet ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_EnumChildProcess": [
        "Enumerates a child processes that belong to the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_EnumChildProcess ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_EnumDeviceDrivers": [
        "Retrieves the load address for each device driver in the system",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_EnumDeviceDrivers ( )\r```"
    ],
    "_WinAPI_EnumProcessHandles": [
        "Enumerates a handles that belong to the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_EnumProcessHandles ( [$iPID = 0 [, $iType = 0]] )\r```"
    ],
    "_WinAPI_EnumProcessModules": [
        "Retrieves a handle and name for each module in the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_EnumProcessModules ( [$iPID = 0 [, $iFlag = 0]] )\r```"
    ],
    "_WinAPI_EnumProcessThreads": [
        "Enumerates a threads that belong to the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_EnumProcessThreads ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_EnumProcessWindows": [
        "Enumerates a windows that belong to the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_EnumProcessWindows ( [$iPID = 0 [, $bVisible = True]] )\r```"
    ],
    "_WinAPI_GetCurrentProcessExplicitAppUserModelID": [
        "Retrieves the application-defined, explicit Application User Model ID for the current process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetCurrentProcessExplicitAppUserModelID ( )\r```"
    ],
    "_WinAPI_GetDeviceDriverBaseName": [
        "Retrieves the base name of the specified device driver",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetDeviceDriverBaseName ( $pDriver )\r```"
    ],
    "_WinAPI_GetDeviceDriverFileName": [
        "Retrieves the path available for the specified device driver",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetDeviceDriverFileName ( $pDriver )\r```"
    ],
    "_WinAPI_GetExitCodeProcess": [
        "Retrieves the termination status of the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetExitCodeProcess ( $hProcess )\r```"
    ],
    "_WinAPI_GetModuleFileNameEx": [
        "Retrieves the fully-qualified path for the file containing the specified module",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetModuleFileNameEx ( $hProcess [, $hModule = 0] )\r```"
    ],
    "_WinAPI_GetModuleInformation": [
        "Retrieves information about the specified module",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetModuleInformation ( $hProcess [, $hModule = 0] )\r```"
    ],
    "_WinAPI_GetParentProcess": [
        "Retrieves the PID of the parent process for the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetParentProcess ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetPriorityClass": [
        "Retrieves the priority class for the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetPriorityClass ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetProcessCommandLine": [
        "Retrieves the command-line string for the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessCommandLine ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetProcessFileName": [
        "Retrieves the fully-qualified path of the executable file for the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessFileName ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetProcessHandleCount": [
        "Retrieves the number of open handles that belong to the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessHandleCount ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetProcessID": [
        "Retrieves the process identifier of the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessID ( $hProcess )\r```"
    ],
    "_WinAPI_GetProcessIoCounters": [
        "Retrieves accounting information for all I/O operations performed by the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessIoCounters ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetProcessMemoryInfo": [
        "Retrieves information about the memory usage of the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessMemoryInfo ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetProcessName": [
        "Retrieves the name for the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessName ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetProcessTimes": [
        "Retrieves timing information for the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessTimes ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetProcessUser": [
        "Retrieves the user and domain name for the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessUser ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetProcessWorkingDirectory": [
        "Retrieves the current working directory for the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetProcessWorkingDirectory ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_GetThreadDesktop": [
        "Retrieves a handle to the desktop assigned to the specified thread",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetThreadDesktop ( $iThreadId )\r```"
    ],
    "_WinAPI_GetThreadErrorMode": [
        "Retrieves the error mode for the calling thread",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetThreadErrorMode ( )\r```"
    ],
    "_WinAPI_GetWindowFileName": [
        "Retrieves the fully-qualified path of the module associated with the specified window handle",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_GetWindowFileName ( $hWnd )\r```"
    ],
    "_WinAPI_IsElevated": [
        "Determines whether the current process is elevated",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_IsElevated ( )\r```"
    ],
    "_WinAPI_IsProcessInJob": [
        "Determines whether the process is running in the specified job",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_IsProcessInJob ( $hProcess [, $hJob = 0] )\r```"
    ],
    "_WinAPI_IsWow64Process": [
        "Determines whether the specified process is running under WOW64",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_IsWow64Process ( [$iPID = 0] )\r```"
    ],
    "_WinAPI_OpenJobObject": [
        "Opens an existing job object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_OpenJobObject ( $sName [, $iAccess = $JOB_OBJECT_ALL_ACCESS [, $bInherit = False]] )\r```"
    ],
    "_WinAPI_OpenProcessToken": [
        "Opens the access token associated with a process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_OpenProcessToken ( $iAccess [, $hProcess = 0] )\r```"
    ],
    "_WinAPI_QueryInformationJobObject": [
        "Retrieves limit and job state information from the job object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_QueryInformationJobObject ( $hJob, $iJobObjectInfoClass, ByRef $tJobObjectInfo )\r```"
    ],
    "_WinAPI_SetInformationJobObject": [
        "Sets limits for a job object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_SetInformationJobObject ( $hJob, $iJobObjectInfoClass, $tJobObjectInfo )\r```"
    ],
    "_WinAPI_SetPriorityClass": [
        "Sets the priority class for the specified process",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_SetPriorityClass ( $iPriority [, $iPID = 0] )\r```"
    ],
    "_WinAPI_SetThreadDesktop": [
        "Assigns the specified desktop to the calling thread",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_SetThreadDesktop ( $hDesktop )\r```"
    ],
    "_WinAPI_SetThreadErrorMode": [
        "Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle them",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_SetThreadErrorMode ( $iMode )\r```"
    ],
    "_WinAPI_SetThreadExecutionState": [
        "Prevents the system from entering sleep or turning off the display while the current application is running",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_SetThreadExecutionState ( $iFlags )\r```"
    ],
    "_WinAPI_TerminateJobObject": [
        "Terminates all processes currently associated with the job",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_TerminateJobObject ( $hJob [, $iExitCode = 0] )\r```"
    ],
    "_WinAPI_TerminateProcess": [
        "Terminates the specified process and all of its threads",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_TerminateProcess ( $hProcess [, $iExitCode = 0] )\r```"
    ],
    "_WinAPI_UserHandleGrantAccess": [
        "Grants or denies access to a handle to a User object to a job that has a user-interface restriction",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_UserHandleGrantAccess ( $hObject, $hJob, $bGrant )\r```"
    ],
    "_WinAPI_CreateMutex": [
        "Creates or opens a named or unnamed mutex object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_CreateMutex ( $sMutex [, $bInitial = True [, $tSecurity = 0]] )\r```"
    ],
    "_WinAPI_CreateSemaphore": [
        "Creates or opens a named or unnamed semaphore object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_CreateSemaphore ( $sSemaphore, $iInitial, $iMaximum [, $tSecurity = 0] )\r```"
    ],
    "_WinAPI_OpenMutex": [
        "Opens an existing named mutex object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_OpenMutex ( $sMutex [, $iAccess = $MUTEX_ALL_ACCESS [, $bInherit = False]] )\r```"
    ],
    "_WinAPI_OpenSemaphore": [
        "Opens an existing named semaphore object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_OpenSemaphore ( $sSemaphore [, $iAccess = 0x001F0003 [, $bInherit = False]] )\r```"
    ],
    "_WinAPI_ReleaseMutex": [
        "Releases ownership of the specified mutex object",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_ReleaseMutex ( $hMutex )\r```"
    ],
    "_WinAPI_ReleaseSemaphore": [
        "Increases the count of the specified semaphore object by a specified amount",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_ReleaseSemaphore ( $hSemaphore [, $iIncrease = 1] )\r```"
    ],
    "_WinAPI_ResetEvent": [
        "Sets the specified event object to the nonsignaled state",
        "```\r#include <WinAPIProc.au3>\r_WinAPI_ResetEvent ( $hEvent )\r```"
    ]
}
