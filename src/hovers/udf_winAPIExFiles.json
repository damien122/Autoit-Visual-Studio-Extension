{
    "_WinAPI_BackupRead": [
        "Backs up a file or directory, including the security information",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_BackupRead ( $hFile, $pBuffer, $iLength, ByRef $iBytes, ByRef $pContext [, $bSecurity = False] )\r```"
    ],
    "_WinAPI_BackupReadAbort": [
        "Finishes the use of _WinAPI_BackupRead() on the handle",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_BackupReadAbort ( ByRef $pContext )\r```"
    ],
    "_WinAPI_BackupSeek": [
        "Seeks forward in a data stream initially accessed by using the _WinAPI_BackupRead() or _WinAPI_BackupWrite() function",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_BackupSeek ( $hFile, $iSeek, ByRef $iBytes, ByRef $pContext )\r```"
    ],
    "_WinAPI_BackupWrite": [
        "Restore a file or directory that was backed up using _WinAPI_BackupRead()",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_BackupWrite ( $hFile, $pBuffer, $iLength, ByRef $iBytes, ByRef $pContext [, $bSecurity = False] )\r```"
    ],
    "_WinAPI_BackupWriteAbort": [
        "Finishes the use of _WinAPI_BackupWrite() on the handle",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_BackupWriteAbort ( ByRef $pContext )\r```"
    ],
    "_WinAPI_DefineDosDevice": [
        "Defines, redefines, or deletes MS-DOS device names",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_DefineDosDevice ( $sDevice, $iFlags [, $sFilePath = ''] )\r```"
    ],
    "_WinAPI_GetDriveType": [
        "Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetDriveType ( [$sDrive = ''] )\r```"
    ],
    "_WinAPI_GetLogicalDrives": [
        "Retrieves a bitmask representing the currently available disk drives",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetLogicalDrives ( )\r```"
    ],
    "_WinAPI_GetPEType": [
        "Retrieves a type of the machine for the specified portable executable (PE)",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetPEType ( $sFilePath )\r```"
    ],
    "_WinAPI_QueryDosDevice": [
        "Retrieves the current mapping for a particular MS-DOS device name",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_QueryDosDevice ( $sDevice )\r```"
    ],
    "_WinAPI_Wow64EnableWow64FsRedirection": [
        "Enables or disables file system redirection for the calling thread",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_Wow64EnableWow64FsRedirection ( $bEnable )\r```"
    ],
    "_WinAPI_CreateObjectID": [
        "Creates or retrieves the object identifier for the specified file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_CreateObjectID ( $sFilePath )\r```"
    ],
    "_WinAPI_DeleteObjectID": [
        "Removes the object identifier from a specified file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_DeleteObjectID ( $sFilePath )\r```"
    ],
    "_WinAPI_DeviceIoControl": [
        "Sends a control code directly to a specified device driver",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_DeviceIoControl ( $hDevice, $iControlCode [, $pInBuffer = 0 [, $iInBufferSize = 0 [, $pOutBuffer = 0 [, $iOutBufferSize = 0]]]] )\r```"
    ],
    "_WinAPI_EjectMedia": [
        "Ejects media from a device",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_EjectMedia ( $sDrive )\r```"
    ],
    "_WinAPI_GetCDType": [
        "Retrieves a type of the media which is loaded into a specified CD-ROM device",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetCDType ( $sDrive )\r```"
    ],
    "_WinAPI_GetDriveBusType": [
        "Retrieves a bus type for the specified drive",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetDriveBusType ( $sDrive )\r```"
    ],
    "_WinAPI_GetDriveGeometryEx": [
        "Retrieves extended information about the disk's geometry",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetDriveGeometryEx ( $iDrive )\r```"
    ],
    "_WinAPI_GetDriveNumber": [
        "Retrieves a device type, device number, and partition number for the specified drive",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetDriveNumber ( $sDrive )\r```"
    ],
    "_WinAPI_GetObjectID": [
        "Retrieves the object identifier for the specified file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetObjectID ( $sFilePath )\r```"
    ],
    "_WinAPI_IOCTL": [
        "Create a unique system I/O control code (IOCTL)",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_IOCTL ( $iDeviceType, $iFunction, $iMethod, $iAccess )\r```"
    ],
    "_WinAPI_IsDoorOpen": [
        "Checks if a CD (DVD) tray is open",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_IsDoorOpen ( $sDrive )\r```"
    ],
    "_WinAPI_IsWritable": [
        "Determines whether a disk is writable",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_IsWritable ( $sDrive )\r```"
    ],
    "_WinAPI_LoadMedia": [
        "Loads media into a device",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_LoadMedia ( $sDrive )\r```"
    ],
    "_WinAPI_CopyFileEx": [
        "Copies an existing file to a new file, notifying the application of its progress through a callback function",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_CopyFileEx ( $sExistingFile, $sNewFile [, $iFlags = 0 [, $pProgressProc = 0 [, $pData = 0]]] )\r```"
    ],
    "_WinAPI_CreateDirectory": [
        "Creates a new directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_CreateDirectory ( $sDir [, $tSecurity = 0] )\r```"
    ],
    "_WinAPI_CreateDirectoryEx": [
        "Creates a new directory with the attributes of a specified template directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_CreateDirectoryEx ( $sNewDir, $sTemplateDir [, $tSecurity = 0] )\r```"
    ],
    "_WinAPI_CreateFileEx": [
        "Creates or opens a file or I/O device",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_CreateFileEx ( $sFilePath, $iCreation [, $iAccess = 0 [, $iShare = 0 [, $iFlagsAndAttributes = 0 [, $tSecurity = 0 [, $hTemplate = 0]]]]] )\r```"
    ],
    "_WinAPI_CreateFileMapping": [
        "Creates or opens a named or unnamed file mapping object for a specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_CreateFileMapping ( $hFile [, $iSize = 0 [, $sName = '' [, $iProtect = 0x0004 [, $tSecurity = 0]]]] )\r```"
    ],
    "_WinAPI_CreateHardLink": [
        "Establishes a hard link between an existing file and a new file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_CreateHardLink ( $sNewFile, $sExistingFile )\r```"
    ],
    "_WinAPI_CreateSymbolicLink": [
        "Creates a symbolic link",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_CreateSymbolicLink ( $sSymlink, $sTarget [, $bDirectory = False] )\r```"
    ],
    "_WinAPI_DecryptFile": [
        "Decrypts an encrypted file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_DecryptFile ( $sFilePath )\r```"
    ],
    "_WinAPI_DeleteFile": [
        "Deletes an existing file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_DeleteFile ( $sFilePath )\r```"
    ],
    "_WinAPI_DeleteVolumeMountPoint": [
        "Deletes a drive letter or mounted folder",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_DeleteVolumeMountPoint ( $sMountedPath )\r```"
    ],
    "_WinAPI_DuplicateEncryptionInfoFile": [
        "Copies the EFS metadata from one file or directory to another",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_DuplicateEncryptionInfoFile ( $sSrcFilePath, $sDestFilePath [, $iCreation = 2 [, $iAttributes = 0 [, $tSecurity = 0]]] )\r```"
    ],
    "_WinAPI_EncryptFile": [
        "Encrypts a file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_EncryptFile ( $sFilePath )\r```"
    ],
    "_WinAPI_EncryptionDisable": [
        "Disables or enables encryption of the specified directory and the files in it",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_EncryptionDisable ( $sDir, $bDisable )\r```"
    ],
    "_WinAPI_EnumFiles": [
        "Enumerates the files and subdirectories for the specified directory with a name that matches the template",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_EnumFiles ( $sDir [, $iFlag = 0 [, $sTemplate = '' [, $bExclude = False]]] )\r```"
    ],
    "_WinAPI_EnumFileStreams": [
        "Enumerates all streams with a ::$DATA stream type in the specified file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_EnumFileStreams ( $sFilePath )\r```"
    ],
    "_WinAPI_EnumHardLinks": [
        "Enumerates all the hard links to the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_EnumHardLinks ( $sFilePath )\r```"
    ],
    "_WinAPI_FileEncryptionStatus": [
        "Retrieves the encryption status of the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FileEncryptionStatus ( $sFilePath )\r```"
    ],
    "_WinAPI_FileExists": [
        "Tests whether the specified path is existing file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FileExists ( $sFilePath )\r```"
    ],
    "_WinAPI_FileInUse": [
        "Tests whether the specified file in use by another application",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FileInUse ( $sFilePath )\r```"
    ],
    "_WinAPI_FindClose": [
        "Closes a file search handle",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindClose ( $hSearch )\r```"
    ],
    "_WinAPI_FindCloseChangeNotification": [
        "Stops change notification handle monitoring",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindCloseChangeNotification ( $hChange )\r```"
    ],
    "_WinAPI_FindFirstChangeNotification": [
        "Creates a change notification handle and sets up initial change notification filter conditions",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindFirstChangeNotification ( $sDirectory, $iFlags [, $bSubtree = False] )\r```"
    ],
    "_WinAPI_FindFirstFile": [
        "Searches a directory for a file or subdirectory with a name that matches a specific name",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindFirstFile ( $sFilePath, $tData )\r```"
    ],
    "_WinAPI_FindFirstFileName": [
        "Creates an enumeration of all the hard links to the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindFirstFileName ( $sFilePath, ByRef $sLink )\r```"
    ],
    "_WinAPI_FindFirstStream": [
        "Enumerates the first stream with a ::$DATA stream type in the specified file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindFirstStream ( $sFilePath, $tData )\r```"
    ],
    "_WinAPI_FindNextChangeNotification": [
        "Requests that the operating system signal a change notification handle the next time it detects an appropriate change",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindNextChangeNotification ( $hChange )\r```"
    ],
    "_WinAPI_FindNextFile": [
        "Continues a file or directory search",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindNextFile ( $hSearch, $tData )\r```"
    ],
    "_WinAPI_FindNextFileName": [
        "Continues enumerating the hard links",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindNextFileName ( $hSearch, ByRef $sLink )\r```"
    ],
    "_WinAPI_FindNextStream": [
        "Continues a stream search",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FindNextStream ( $hSearch, $tData )\r```"
    ],
    "_WinAPI_FlushViewOfFile": [
        "Writes to the disk a byte range within a mapped view of a file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_FlushViewOfFile ( $pAddress [, $iBytes = 0] )\r```"
    ],
    "_WinAPI_GetBinaryType": [
        "Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetBinaryType ( $sFilePath )\r```"
    ],
    "_WinAPI_GetCompressedFileSize": [
        "Retrieves the actual number of bytes of disk storage used to store a specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetCompressedFileSize ( $sFilePath )\r```"
    ],
    "_WinAPI_GetCompression": [
        "Retrieves the current compression state of a file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetCompression ( $sFilePath )\r```"
    ],
    "_WinAPI_GetCurrentDirectory": [
        "Retrieves the current directory for the current process",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetCurrentDirectory ( )\r```"
    ],
    "_WinAPI_GetDiskFreeSpaceEx": [
        "Retrieves information about the amount of space that is available on a disk volume",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetDiskFreeSpaceEx ( $sDrive )\r```"
    ],
    "_WinAPI_GetFileAttributes": [
        "Retrieves file system attributes for a specified file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFileAttributes ( $sFilePath )\r```"
    ],
    "_WinAPI_GetFileID": [
        "Retrieves the file system's 8-byte file reference number for a file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFileID ( $hFile )\r```"
    ],
    "_WinAPI_GetFileInformationByHandle": [
        "Retrieves file information for the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFileInformationByHandle ( $hFile )\r```"
    ],
    "_WinAPI_GetFileInformationByHandleEx": [
        "Retrieves file information for the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFileInformationByHandleEx ( $hFile )\r```"
    ],
    "_WinAPI_GetFilePointerEx": [
        "Retrieves the file pointer of the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFilePointerEx ( $hFile )\r```"
    ],
    "_WinAPI_GetFileSizeOnDisk": [
        "Retrieves the file allocation size on disk",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFileSizeOnDisk ( $sFilePath )\r```"
    ],
    "_WinAPI_GetFileTitle": [
        "Retrieves the name of the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFileTitle ( $sFilePath )\r```"
    ],
    "_WinAPI_GetFileType": [
        "Retrieves the file type of the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFileType ( $hFile )\r```"
    ],
    "_WinAPI_GetFinalPathNameByHandle": [
        "Retrieves the final path of the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFinalPathNameByHandle ( $hFile )\r```"
    ],
    "_WinAPI_GetFinalPathNameByHandleEx": [
        "Retrieves the final path of the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFinalPathNameByHandleEx ( $hFile [, $iFlags = 0] )\r```"
    ],
    "_WinAPI_GetFullPathName": [
        "Retrieves the full path and file name of the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetFullPathName ( $sFilePath )\r```"
    ],
    "_WinAPI_GetProfilesDirectory": [
        "Retrieves the path to the root directory where user profiles are stored",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetProfilesDirectory ( )\r```"
    ],
    "_WinAPI_GetTempFileName": [
        "Creates a name for a temporary file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetTempFileName ( $sFilePath [, $sPrefix = ''] )\r```"
    ],
    "_WinAPI_GetVolumeInformation": [
        "Retrieves information about the file system and volume associated with the specified root directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetVolumeInformation ( [$sRoot = ''] )\r```"
    ],
    "_WinAPI_GetVolumeInformationByHandle": [
        "Retrieves information about the file system and volume associated with the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetVolumeInformationByHandle ( $hFile )\r```"
    ],
    "_WinAPI_GetVolumeNameForVolumeMountPoint": [
        "Retrieves a volume GUID path for the volume that is associated with the specified volume mount point",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_GetVolumeNameForVolumeMountPoint ( $sMountedPath )\r```"
    ],
    "_WinAPI_IsPathShared": [
        "Determines whether the path is shared",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_IsPathShared ( $sFilePath )\r```"
    ],
    "_WinAPI_LockDevice": [
        "Enables or disables the mechanism that ejects media, for those devices possessing that locking capability",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_LockDevice ( $sDrive, $bLock )\r```"
    ],
    "_WinAPI_LockFile": [
        "Locks the specified file for exclusive access by the calling process",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_LockFile ( $hFile, $iOffset, $iLength )\r```"
    ],
    "_WinAPI_MapViewOfFile": [
        "Maps a view of a file mapping into the address space of a calling process",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_MapViewOfFile ( $hMapping [, $iOffset = 0 [, $iBytes = 0 [, $iAccess = 0x0006]]] )\r```"
    ],
    "_WinAPI_MoveFileEx": [
        "Moves a file or directory, notifying the application of its progress through a callback function",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_MoveFileEx ( $sExistingFile, $sNewFile [, $iFlags = 0 [, $pProgressProc = 0 [, $pData = 0]]] )\r```"
    ],
    "_WinAPI_OpenFileById": [
        "Opens the file that matches the specified object identifier",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_OpenFileById ( $hFile, $vID [, $iAccess = 0 [, $iShare = 0 [, $iFlags = 0]]] )\r```"
    ],
    "_WinAPI_OpenFileMapping": [
        "Opens a named file mapping object",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_OpenFileMapping ( $sName [, $iAccess = 0x0006 [, $bInherit = False]] )\r```"
    ],
    "_WinAPI_PathIsDirectory": [
        "Verifies that a path is a valid directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_PathIsDirectory ( $sFilePath )\r```"
    ],
    "_WinAPI_PathIsDirectoryEmpty": [
        "Determines whether a specified path is an empty directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_PathIsDirectoryEmpty ( $sFilePath )\r```"
    ],
    "_WinAPI_ReadDirectoryChanges": [
        "Retrieves information that describes the changes within the specified directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_ReadDirectoryChanges ( $hDirectory, $iFilter, $pBuffer, $iLength [, $bSubtree = 0] )\r```"
    ],
    "_WinAPI_RemoveDirectory": [
        "Deletes an existing empty directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_RemoveDirectory ( $sDirPath )\r```"
    ],
    "_WinAPI_ReOpenFile": [
        "Reopens the specified file system object with different access rights, sharing mode, and flags",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_ReOpenFile ( $hFile, $iAccess, $iShare [, $iFlags = 0] )\r```"
    ],
    "_WinAPI_ReplaceFile": [
        "Replaces one file with another file, and creates a backup copy of the original file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_ReplaceFile ( $sReplacedFile, $sReplacementFile [, $sBackupFile = '' [, $iFlags = 0]] )\r```"
    ],
    "_WinAPI_SearchPath": [
        "Searches for a specified file in a specified path",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SearchPath ( $sFilePath [, $sSearchPath = ''] )\r```"
    ],
    "_WinAPI_SetCompression": [
        "Sets the compression state of a file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SetCompression ( $sFilePath, $iCompression )\r```"
    ],
    "_WinAPI_SetCurrentDirectory": [
        "Changes the current directory for the current process",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SetCurrentDirectory ( $sDir )\r```"
    ],
    "_WinAPI_SetFileAttributes": [
        "Sets the attributes for a file or directory",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SetFileAttributes ( $sFilePath, $iAttributes )\r```"
    ],
    "_WinAPI_SetFileInformationByHandleEx": [
        "Sets the file information for the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SetFileInformationByHandleEx ( $hFile, $tFILEINFO )\r```"
    ],
    "_WinAPI_SetFilePointerEx": [
        "Moves the file pointer of the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SetFilePointerEx ( $hFile, $iPos [, $iMethod = 0] )\r```"
    ],
    "_WinAPI_SetFileShortName": [
        "Sets the short name for the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SetFileShortName ( $hFile, $sShortName )\r```"
    ],
    "_WinAPI_SetFileValidData": [
        "Sets the valid data length of the specified file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SetFileValidData ( $hFile, $iLength )\r```"
    ],
    "_WinAPI_SetSearchPathMode": [
        "Sets the per-process mode that the _WinAPI_SearchPath() function uses when locating files",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SetSearchPathMode ( $iFlags )\r```"
    ],
    "_WinAPI_SetVolumeMountPoint": [
        "Associates a volume with a drive letter or a directory on another volume",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SetVolumeMountPoint ( $sFilePath, $sGUID )\r```"
    ],
    "_WinAPI_SfcIsFileProtected": [
        "Determines whether the specified file is protected",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_SfcIsFileProtected ( $sFilePath )\r```"
    ],
    "_WinAPI_UnlockFile": [
        "Unlocks a region in an open file",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_UnlockFile ( $hFile, $iOffset, $iLength )\r```"
    ],
    "_WinAPI_UnmapViewOfFile": [
        "Unmaps a mapped view of a file from the calling process's address space",
        "```\r#include <WinAPIFiles.au3>\r_WinAPI_UnmapViewOfFile ( $pAddress )\r```"
    ]   
}
