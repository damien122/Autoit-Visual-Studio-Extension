{
    "_ArrayColDelete": {
        "documentation": "Deletes a specified column from a 2D array",
        "label": "_ArrayColDelete ( ByRef $aArray, $iColumn [, $bConvert = False] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }, {
            "label": "$iColumn",
            "documentation": "Column to delete"
        }, {
            "label": "$bConvert",
            "documentation": "**[optional]** If True then if only one column remains the array is converted to 1D"
        }]
    },
    "_ArrayColInsert": {
        "documentation": "Inserts a specified column into a 1D or 2D array",
        "label": "_ArrayColInsert ( ByRef $aArray, $iColumn )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }, {
            "label": "$iColumn",
            "documentation": "Column to insert - if array is 1D it is automatically converted to 2D"
        }]
    },
    "_ArrayCombinations": {
        "documentation": "Returns an array of the combinations of a set of elements from a selected 1D array",
        "label": "_ArrayCombinations ( Const ByRef $aArray, $iSet [, $sDelimiter = \"\"] )",
        "params": [{
            "label": "$aArray",
            "documentation": "The Array to use"
        }, {
            "label": "$iSet",
            "documentation": "Size of the combinations set"
        }, {
            "label": "$sDelimiter",
            "documentation": "**[optional]** String result separator, default is \"\" for none"
        }]
    },
    "_ArrayConcatenate": {
        "documentation": "Concatenate two arrays - either 1D or 2D with the same number of columns",
        "label": "_ArrayConcatenate ( Const ByRef $aArrayTarget, ByRef $aArraySource [, $iStart = 0] )",
        "params": [{
            "label": "$aArrayTarget",
            "documentation": "The array to which the source array will be concatenated"
        }, {
            "label": "$aArraySource",
            "documentation": "The array to concatenate to the target array"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** index of the first Source array entry (Default = 0)"
        }]
    },
    "_ArrayDelete": {
        "documentation": "Deletes the specified element(s) from the specified 1D or 2D array",
        "label": "_ArrayDelete ( ByRef $aArray, $vRange )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }, {
            "label": "$vRange",
            "documentation": "Element(s) to delete - either a single index, a range string or a 1D array with a count in the [0] element (see example for details)"
        }]
    },
    "_ArrayDisplay": {
        "documentation": "Displays a 1D or 2D array in a ListView",
        "label": "_ArrayDisplay ( Const ByRef $aArray [, $sTitle = \"ArrayDisplay\" [, $sArrayRange = \"\" [, $iFlags = 0 [, $vUser_Separator = Default [, $sHeader = Default [, $iMax_ColWidth = Default [, $iAlt_Color = Default [, $hUser_Function = \"\"]]]]]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to display"
        }, {
            "label": "$sTitle",
            "documentation": "**[optional]** Title for dialog. Default = \"ArrayDisplay\"."
        }, {
            "label": "$sArrayRange",
            "documentation": "**[optional]** Range of rows/columns to display. Default (\"\") = entire array."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Determine UDF options. Add required values together  \n  0 = (default) Column text alignment - left  \n    1 = Transposes the array  \n  2 = Column text alignment - right  \n4 = Column text alignment - center  \n8 = Verbose - display MsgBox on error and splash screens during processing of large arrays  \n16 = Only 'Copy' buttons displayed  \n32 = No buttons displayed  \n64 = No 'Row' column displayed"
        }, {
            "label": "$vUser_Separator",
            "documentation": "**[optional]** Sets column display option when copying data to clipboard.  \n> Character = Delimiter between columns.  \n> Number = Fixed column width - longer items will be truncated.  \n> Default = Current separator character (usually \"|\")."
        }, {
            "label": "$sHeader",
            "documentation": "**[optional]** Column names in header (string of names separated by current separator character - usually \"|\")."
        }, {
            "label": "$iMax_ColWidth",
            "documentation": "**[optional]** Max width to which a ListView column will expand to show content. Default = 350 pixels."
        }, {
            "label": "$iAlt_Color",
            "documentation": "**[optional]** ListView alternate rows set to defined color. Default = all rows ListView background color."
        }, {
            "label": "$hUser_Function",
            "documentation": "**[optional]** A variable assigned to the user defined function to run. Default = none."
        }]
    },
    "_ArrayExtract": {
        "documentation": "Extracts an array from the specified element(s) of a 1D or 2D array",
        "label": "_ArrayExtract ( Const ByRef $aArray [, $iStart_Row = -1 [, $iEnd_Row = -1 [, $iStart_Col = -1 [, $iEnd_Col = -1]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array from which extraction should occur"
        }, {
            "label": "$iStart_Row",
            "documentation": "**[optional]** First row of the extracted array"
        }, {
            "label": "$iEnd_Row",
            "documentation": "**[optional]** Last row of the extracted array"
        }, {
            "label": "$iStart_Col",
            "documentation": "**[optional]** First column of the extracted array (2D only)"
        }, {
            "label": "$iEnd_Col",
            "documentation": "**[optional]** Last column of the extracted array (2D only)"
        }]
    },
    "_ArrayFindAll": {
        "documentation": "Find the indices of all ocurrences of a search query between two points in a 1D or 2D array using _ArraySearch()",
        "label": "_ArrayFindAll ( Const ByRef $aArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare = 0 [, $iSubItem = 0 [, $bRow = False]]]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "The array to search"
        }, {
            "label": "$vValue",
            "documentation": "What to search $aArray for"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of array to start search"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index of array to end search"
        }, {
            "label": "$iCase",
            "documentation": "**[optional]** If set to 1, search is case sensitive"
        }, {
            "label": "$iCompare",
            "documentation": "**[optional]**  \n0 Casting of variables to the same type (default), \"string\" = 0, \"\" = 0 or \"0\" = 0 match (If $iCase = 0)  \n1 executes a partial search  \n2 comparison match if variables have same type and same value  \n3 compares using a regular expression pattern provided as $vValue"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** Sub-index to search on in 2D arrays"
        }, {
            "label": "$bRow",
            "documentation": "**[optional]** If True then $iSubItem sets the row to search - False (default) searches columns"
        }]
    },
    "_ArrayInsert": {
        "documentation": "Insert a new value at the specified position of a 1D or 2D array",
        "label": "_ArrayInsert ( ByRef $aArray, $vRange [, $vValue = \"\" [, $iStart = 0 [, $sDelim_Item = \"|\" [, $sDelim_Row = @CRLF [, $iForce = $ARRAYFILL_FORCE_DEFAULT]]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }, {
            "label": "$vRange",
            "documentation": "Position(s) at which to insert item(s) - see Remarks for format"
        }, {
            "label": "$vValue",
            "documentation": "**[optional]** Value(s) to add - can be a single variable, a delimited string or a 1D array"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Column in which insert is to begin (2D array only)"
        }, {
            "label": "$sDelim_Item",
            "documentation": "**[optional]** Delimiter used if a string is to be split into items"
        }, {
            "label": "$sDelim_Row",
            "documentation": "**[optional]** Delimiter used if a string is to be split into rows (2D only)"
        }, {
            "label": "$iForce",
            "documentation": "**[optional]** Maintains default behaviour,  \n`$ARRAYFILL_FORCE_DEFAULT` (0)  \nForces $vValue addition as a single item,  \n`$ARRAYFILL_FORCE_SINGLEITEM` (1)  \nOr forces datatype for all added items  \n`$ARRAYFILL_FORCE_INT` (2)  \n`$ARRAYFILL_FORCE_NUMBER` (3)  \n`$ARRAYFILL_FORCE_PTR` (4)  \n`$ARRAYFILL_FORCE_HWND` (5)  \n`$ARRAYFILL_FORCE_STRING` (6)"
        }]
    },
    "_ArrayMax": {
        "documentation": "Returns the highest value held in a 1D or 2D array",
        "label": "_ArrayMax ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to search"
        }, {
            "label": "$iCompNumeric",
            "documentation": "**[optional]** Comparison method:  \n`0` - compare alphanumerically  \n`1` - compare numerically"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of array to start search"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index of array to end search"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** Column of array to search"
        }]
    },
    "_ArrayMaxIndex": {
        "documentation": "Returns the index where the highest value occurs in a 1D or 2D array",
        "label": "_ArrayMaxIndex ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to search"
        }, {
            "label": "$iCompNumeric",
            "documentation": "**[optional]** Comparison method:  \n`0` - compare alphanumerically  \n`1` - compare numerically"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of array to start search"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index of array to end search"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** Column of array to search"
        }]
    },
    "_ArrayMin": {
        "documentation": "Returns the lowest value held in a 1D or 2D array",
        "label": "_ArrayMin ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to search"
        }, {
            "label": "$iCompNumeric",
            "documentation": "**[optional]** Comparison method:  \n`0` - compare alphanumerically  \n`1` - compare numerically"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of array to start search"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index of array to end search"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** Column of array to search"
        }]
    },
    "_ArrayMinIndex": {
        "documentation": "Returns the index where the lowest value occurs in a 1D or 2D array",
        "label": "_ArrayMinIndex ( Const ByRef $aArray [, $iCompNumeric = 0 [, $iStart = -1 [, $iEnd = -1 [, $iSubItem = 0]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to search"
        }, {
            "label": "$iCompNumeric",
            "documentation": "**[optional]** Comparison method:  \n`0` - compare alphanumerically  \n`1` - compare numerically"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of array to start search"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index of array to end search"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** Column of array to search"
        }]
    },
    "_ArrayPermute": {
        "documentation": "Returns an array of the Permutations of all Elements in a 1D array",
        "label": "_ArrayPermute ( ByRef $aArray [, $sDelimiter = \"\"] )",
        "params": [{
            "label": "$aArray",
            "documentation": "The Array to get Permutations"
        }, {
            "label": "$sDelimiter",
            "documentation": "**[optional]** String result separator, default is \"\" for none"
        }]
    },
    "_ArrayPop": {
        "documentation": "Returns the last element of an array, deleting that element from the array at the same time",
        "label": "_ArrayPop ( ByRef $aArray )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }]
    },
    "_ArrayPush": {
        "documentation": "Add new values without increasing array size by inserting at the end the new value and deleting the first one or vice versa",
        "label": "_ArrayPush ( ByRef $aArray, $vValue [, $iDirection = 0] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }, {
            "label": "$vValue",
            "documentation": "Value(s) to add (can be in an array)"
        }, {
            "label": "$iDirection",
            "documentation": "**[optional]** Direction to push existing array elements:  \n`0` = Slide left (adding at the end)  \n`1` = Slide right (adding at the start)"
        }]
    },
    "_ArrayReverse": {
        "documentation": "Takes the given array and reverses the order in which the elements appear in a 1D array",
        "label": "_ArrayReverse ( ByRef $aArray [, $iStart = 0 [, $iEnd = 0]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of array to start modifying at"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index of array to stop modifying at"
        }]
    },
    "_ArraySearch": {
        "documentation": "Finds an entry within a 1D or 2D array. Similar to _ArrayBinarySearch(), except that the array does not need to be sorted",
        "label": "_ArraySearch ( Const ByRef $aArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare = 0 [, $iForward = 1 [, $iSubItem = -1 [, $bRow = False]]]]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "The array to search"
        }, {
            "label": "$vValue",
            "documentation": "What to search $aArray for"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of array to start searching at"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index of array to stop searching at"
        }, {
            "label": "$iCase",
            "documentation": "**[optional]** If set to 1, search is case sensitive"
        }, {
            "label": "$iCompare",
            "documentation": "**[optional]**  \n`0` Casting of variables to the same type (default), \"string\" = 0, \"\" = 0 or \"0\" = 0 match (If $iCase = 0)  \n`1` executes a partial search  \n`2` comparison match if variables have same type and same value  \n`3` compares using a regular expression pattern provided as `$vValue`"
        }, {
            "label": "$iForward",
            "documentation": "**[optional]** If set to 0, searches the array from end to beginning (instead of beginning to end)"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** Sub-index to search on in 2D arrays"
        }, {
            "label": "$bRow",
            "documentation": "**[optional]** If `True` then `$iSubItem` sets the row to search - `False` (default) searches columns"
        }]
    },
    "_ArrayShuffle": {
        "documentation": "Shuffles selected rows of 1D or 2D arrays - can be limited to a specific column in 2D arrays",
        "label": "_ArrayShuffle ( ByRef $aArray [, $iStart_Row = 0 [, $iEnd_Row = 0 [, $iCol = -1]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }, {
            "label": "$iStart_Row",
            "documentation": "**[optional]** Start row for shuffle - default first"
        }, {
            "label": "$iEnd_Row",
            "documentation": "**[optional]** End row for shuffle - default last"
        }, {
            "label": "$iCol",
            "documentation": "**[optional]** Specific column to shuffle (2D only)"
        }]
    },
    "_ArraySort": {
        "documentation": "Sort a 1D or 2D array on a specific index using the dualpivotsort/quicksort/insertionsort algorithms",
        "label": "_ArraySort ( ByRef $aArray [, $iDescending = 0 [, $iStart = 0 [, $iEnd = 0 [, $iSubItem = 0 [, $iPivot = 0]]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to sort"
        }, {
            "label": "$iDescending",
            "documentation": "**[optional]** If set to 1, sort in descending order"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of array to start sorting (default 0 = first element or row)"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index of array to stop sorting (default 0 = last element or row)"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** Sub-index to sort on in 2D arrays (default 0 = first column)"
        }, {
            "label": "$iPivot",
            "documentation": "**[optional]** Use pivot sort algorithm (default = quicksort)"
        }]
    },
    "_ArraySwap": {
        "documentation": "Swaps elements of a 1D array and full or part rows/columns of a 2D array",
        "label": "_ArraySwap ( ByRef $aArray, $iIndex_1, $iIndex_2 [, $bCol = False [, $iStart = -1 [, $iEnd = -1]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }, {
            "label": "$iIndex_1",
            "documentation": "Index of first element (1D) or row/column (2D) to swap"
        }, {
            "label": "$iIndex_2",
            "documentation": "Index of second element (1D) or row/column (2D) to swap"
        }, {
            "label": "$bCol",
            "documentation": "**[optional]** If True then for 2D array above parameters refer to rows; if False (default) above parameters refer to columns"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index in row/column to start swap (2D array only)"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index in row/column to end swap (2D array only)"
        }]
    },
    "_ArrayToClip": {
        "documentation": "Sends the contents of a 1D or 2D array to the clipboard, each element separated by a specified delimiter",
        "label": "_ArrayToClip ( Const ByRef $aArray [, $sDelim_Col = \"|\" [, $iStart_Row = -1 [, $iEnd_Row = -1 [, $sDelim_Row = @CRLF [, $iStart_Col = -1 [, $iEnd_Col = -1]]]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to copy to clipboard"
        }, {
            "label": "$sDelim_Col",
            "documentation": "**[optional]** Delimiter for elements of 1D array or columns of 2D array"
        }, {
            "label": "$iStart_Row",
            "documentation": "**[optional]** Index of array row to start copy"
        }, {
            "label": "$iEnd_Row",
            "documentation": "**[optional]** Index of array row to stop copy"
        }, {
            "label": "$sDelim_Row",
            "documentation": "**[optional]** Delimiter for rows of 2D array (2D only)"
        }, {
            "label": "$iStart_Col",
            "documentation": "**[optional]** Index of array column to start copy (2D only)"
        }, {
            "label": "$iEnd_Col",
            "documentation": "**[optional]** Index of array column to stop copy (2D only)"
        }]
    },
    "_ArrayToString": {
        "documentation": "Places the elements of a 1D or 2D array into a single string, separated by the specified delimiters",
        "label": "_ArrayToString ( Const ByRef $aArray [, $sDelim_Col = \"|\" [, $iStart_Row = -1 [, $iEnd_Row = -1 [, $sDelim_Row = @CRLF [, $iStart_Col = -1 [, $iEnd_Col = -1]]]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to convert to a string"
        }, {
            "label": "$sDelim_Col",
            "documentation": "**[optional]** Delimiter for elements of 1D array or columns of 2D array"
        }, {
            "label": "$iStart_Row",
            "documentation": "**[optional]** Index of array row to start copy"
        }, {
            "label": "$iEnd_Row",
            "documentation": "**[optional]** Index of array row to stop copy"
        }, {
            "label": "$sDelim_Row",
            "documentation": "**[optional]** Delimiter for rows of 2D array (2D only)"
        }, {
            "label": "$iStart_Col",
            "documentation": "**[optional]** Index of array column to start copy (2D only)"
        }, {
            "label": "$iEnd_Col",
            "documentation": "**[optional]** Index of array column to stop copy (2D only)"
        }]
    },
    "_ArrayTranspose": {
        "documentation": "Transposes a 1D or 2D array (swaps rows and columns)",
        "label": "_ArrayTranspose ( ByRef $aArray )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }]
    },
    "_ArrayTrim": {
        "documentation": "Trims a certain number of characters from all elements in a 1D or 2D array",
        "label": "_ArrayTrim ( ByRef $aArray, $iTrimNum [, $iDirection = 0 [, $iStart = 0 [, $iEnd = 0 [, $iSubItem = 0]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "Array to modify"
        }, {
            "label": "$iTrimNum",
            "documentation": "Number of characters to remove"
        }, {
            "label": "$iDirection",
            "documentation": "**[optional]** Direction to trim:  \n`0` - trim left  \n`1` - trim right"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of array to start trim"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Index of array to stop trim"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** Column to trim"
        }]
    },
    "_ArrayUnique": {
        "documentation": "Returns the Elements from a column of a 1D or 2D array, removing all duplicates",
        "label": "_ArrayUnique ( Const ByRef $aArray [, $iColumn = 0 [, $iBase = 0 [, $iCase = 0 [, $iCount = $ARRAYUNIQUE_COUNT [, $iIntType = $ARRAYUNIQUE_AUTO]]]]] )",
        "params": [{
            "label": "$aArray",
            "documentation": "The Array to use"
        }, {
            "label": "$iColumn",
            "documentation": "**[optional]** 0-based column to be used - default 0. (2D only)"
        }, {
            "label": "$iBase",
            "documentation": "**[optional]** The array is 0-based or 1-based. Default 0 : 0-based."
        }, {
            "label": "$iCase",
            "documentation": "**[optional]** Flag to indicate if the operations should be case sensitive. Default 0 : not case sensitive."
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** Flag to determine if [0] element holds the count of returned items (default)"
        }, {
            "label": "$iIntType",
            "documentation": "**[optional]** Flag to change function algorithm"
        }]
    },

    "_ChooseColor": {
        "documentation": "Creates a Color dialog box that enables the user to select a color",
        "label": "_ChooseColor ( [$iReturnType = 0 [, $iColorRef = 0 [, $iRefType = 0 [, $hWndOwnder = 0]]]] )",
        "params": [{
            "label": "$iReturnType",
            "documentation": "**[optional]** Determines return type, valid values:0 - COLORREF rgbcolor1 - BGR hex2 - RGB hex"
        }, {
            "label": "$iColorRef",
            "documentation": "**[optional]** Default selected Color"
        }, {
            "label": "$iRefType",
            "documentation": "**[optional]** Type of $iColorRef passed in, valid values:0 - COLORREF rgbcolor1 - BGR hex2 - RGB hex"
        }, {
            "label": "$hWndOwnder",
            "documentation": "**[optional]** Handle to the window that owns the dialog box"
        }]
    },
    "_ChooseFont": {
        "documentation": "Creates a Font dialog box that enables the user to choose attributes for a logical font",
        "label": "_ChooseFont ( [$sFontName = \"Courier New\" [, $iPointSize = 10 [, $iFontColorRef = 0 [, $iFontWeight = 0 [, $bItalic = False [, $bUnderline = False [, $bStrikethru = False [, $hWndOwner = 0]]]]]]]] )",
        "params": [{
            "label": "$sFontName",
            "documentation": "**[optional]** Default font name"
        }, {
            "label": "$iPointSize",
            "documentation": "**[optional]** Pointsize of font"
        }, {
            "label": "$iFontColorRef",
            "documentation": "**[optional]** COLORREF rgbColors"
        }, {
            "label": "$iFontWeight",
            "documentation": "**[optional]** Font Weight"
        }, {
            "label": "$bItalic",
            "documentation": "**[optional]** Italic"
        }, {
            "label": "$bUnderline",
            "documentation": "**[optional]** Underline"
        }, {
            "label": "$bStrikethru",
            "documentation": "**[optional]** Strikethru"
        }, {
            "label": "$hWndOwner",
            "documentation": "**[optional]** Handle to the window that owns the dialog box"
        }]
    },
    "_ClipBoard_ChangeChain": {
        "documentation": "Removes a specified window from the chain of clipboard viewers",
        "label": "_ClipBoard_ChangeChain ( $hRemove, $hNewNext )",
        "params": [{
            "label": "$hRemove",
            "documentation": "Handle to the window to be removed from the chain.The handle must have been passed to the _ClipBoard_SetViewer() function."
        }, {
            "label": "$hNewNext",
            "documentation": "Handle to the window that follows the $hRemove window in the clipboard viewer chain. This is the handle returned by _ClipBoard_SetViewer(), unless the sequence was changed in response to a $WM_CHANGECBCHAIN message."
        }]
    },
    "_ClipBoard_Close": {
        "documentation": "Closes the clipboard",
        "label": "_ClipBoard_Close (  )",
        "params": []
    },
    "_ClipBoard_CountFormats": {
        "documentation": "Retrieves the number of different data formats currently on the clipboard",
        "label": "_ClipBoard_CountFormats (  )",
        "params": []
    },
    "_ClipBoard_Empty": {
        "documentation": "Empties the clipboard and frees handles to data in the clipboard",
        "label": "_ClipBoard_Empty (  )",
        "params": []
    },
    "_ClipBoard_EnumFormats": {
        "documentation": "Enumerates the data formats currently available on the clipboard",
        "label": "_ClipBoard_EnumFormats ( $iFormat )",
        "params": [{
            "label": "$iFormat",
            "documentation": "Specifies a clipboard format that is known to be available. To start an enumeration of formats, set $iFormat to zero.  \nWhen $iFormat is zero, the function retrieves the first available clipboard format.  \nFor subsequent calls during an enumeration, set $iFormat to the result of the previous call."
        }]
    },
    "_ClipBoard_FormatStr": {
        "documentation": "Returns a string representation of a standard clipboard format",
        "label": "_ClipBoard_FormatStr ( $iFormat )",
        "params": [{
            "label": "$iFormat",
            "documentation": "Specifies a clipboard format"
        }]
    },
    "_ClipBoard_GetData": {
        "documentation": "Retrieves data from the clipboard in a specified format",
        "label": "_ClipBoard_GetData ( [$iFormat = 1] )",
        "params": [{
            "label": "$iFormat",
            "documentation": "**[optional]** Specifies a clipboard format"
        }]
    },
    "_ClipBoard_GetDataEx": {
        "documentation": "Retrieves data from the clipboard in a specified format",
        "label": "_ClipBoard_GetDataEx ( [$iFormat = 1] )",
        "params": [{
            "label": "$iFormat",
            "documentation": "**[optional]** Specifies a clipboard format"
        }]
    },
    "_ClipBoard_GetFormatName": {
        "documentation": "Retrieves the name of the specified registered format",
        "label": "_ClipBoard_GetFormatName ( $iFormat )",
        "params": [{
            "label": "$iFormat",
            "documentation": "Specifies the type of format to be retrieved"
        }]
    },
    "_ClipBoard_GetOpenWindow": {
        "documentation": "Retrieves the handle to the window that currently has the clipboard open",
        "label": "_ClipBoard_GetOpenWindow (  )",
        "params": []
    },
    "_ClipBoard_GetOwner": {
        "documentation": "Retrieves the window handle of the current owner of the clipboard",
        "label": "_ClipBoard_GetOwner (  )",
        "params": []
    },
    "_ClipBoard_GetPriorityFormat": {
        "documentation": "Retrieves the first available clipboard format in the specified list",
        "label": "_ClipBoard_GetPriorityFormat ( $aFormats )",
        "params": [{
            "label": "$aFormats",
            "documentation": "Array with the following format:  \n[0] - Number of formats (n)  \n[1] - Format 1  \n[2] - Format 2  \n[n] - Format n"
        }]
    },
    "_ClipBoard_GetSequenceNumber": {
        "documentation": "Retrieves the clipboard sequence number for the current window station",
        "label": "_ClipBoard_GetSequenceNumber (  )",
        "params": []
    },
    "_ClipBoard_GetViewer": {
        "documentation": "Retrieves the handle to the first window in the clipboard viewer chain",
        "label": "_ClipBoard_GetViewer (  )",
        "params": []
    },
    "_ClipBoard_IsFormatAvailable": {
        "documentation": "Determines whether the clipboard contains data in the specified format",
        "label": "_ClipBoard_IsFormatAvailable ( $iFormat )",
        "params": [{
            "label": "$iFormat",
            "documentation": "Specifies a standard or registered clipboard format"
        }]
    },
    "_ClipBoard_Open": {
        "documentation": "Opens the clipboard and prevents other applications from modifying the clipboard",
        "label": "_ClipBoard_Open ( $hOwner )",
        "params": [{
            "label": "$hOwner",
            "documentation": "Handle to the window to be associated with the open clipboard. If this parameter is 0, the open clipboard is associated with the current task."
        }]
    },
    "_ClipBoard_RegisterFormat": {
        "documentation": "Registers a new clipboard format",
        "label": "_ClipBoard_RegisterFormat ( $sFormat )",
        "params": [{
            "label": "$sFormat",
            "documentation": "The name of the new format"
        }]
    },
    "_ClipBoard_SetData": {
        "documentation": "Places data on the clipboard in a specified clipboard format",
        "label": "_ClipBoard_SetData ( $vData [, $iFormat = 1] )",
        "params": [{
            "label": "$vData",
            "documentation": "Data in Binary or String format, or optionally NULL (0) (owner must render, see below).  \nIMPORTANT: If a String is passed, and it is not of type $CF_TEXT, $CF_OEMTEXT, or $CF_UNICODETEXT, it will be treated as an ANSI string.  \nTo force Unicode strings for other types, you must pass the data in Binary format.  \nAlso, do NOT pass $CF_UNICODETEXT in Binary format (causes garbled data).  \nWhen $vData is NULL, it indicates that the window provides data in the specified clipboard format upon request.  \nIf a window delays rendering, it must process the $WM_RENDERFORMAT and $WM_RENDERALLFORMATS messages.  \nIf this function succeeds, the system owns the object identified by the $hMemory parameter.  \nThe application may not write to or free the data once ownership has been transferred to the system, but it can lock and read from the data until the _ClipBoard_Close() function is called.  \nThe memory must be unlocked before the clipboard is closed.  \nIf the $hMemory parameter identifies a memory object, the object must have been allocated using the function with the $GMEM_MOVEABLE flag."
        }, {
            "label": "$iFormat",
            "documentation": "**[optional]** Specifies a clipboard format"
        }]
    },
    "_ClipBoard_SetDataEx": {
        "documentation": "Places data on the clipboard in a specified clipboard format",
        "label": "_ClipBoard_SetDataEx ( ByRef $hMemory [, $iFormat = 1] )",
        "params": [{
            "label": "$hMemory",
            "documentation": "Handle to the data in the specified format. This parameter can be NULL, indicating that the window provides data in the specified clipboard format upon request.  \nIf a window delays rendering, it must process the $WM_RENDERFORMAT and $WM_RENDERALLFORMATS messages.  \nIf this function succeeds, the system owns the object identified by the $hMemory parameter.  \nThe application may not write to or free the data once ownership has been transferred to the system, but it can lock and read from the data until the _ClipBoard_Close() function is called.  \nThe memory must be unlocked before the clipboard is closed.  \nIf the $hMemory parameter identifies a memory object, the object must have been allocated using the function with the $GMEM_MOVEABLE flag."
        }, {
            "label": "$iFormat",
            "documentation": "**[optional]** Specifies a clipboard format"
        }]
    },
    "_ClipBoard_SetViewer": {
        "documentation": "Adds the specified window to the chain of clipboard viewers",
        "label": "_ClipBoard_SetViewer ( $hViewer )",
        "params": [{
            "label": "$hViewer",
            "documentation": "Handle to the window to be added to the clipboard chain"
        }]
    },
    "_ClipPutFile": {
        "documentation": "Copy Files to Clipboard Like Explorer does",
        "label": "_ClipPutFile ( $sFilePath [, $sDelimiter = \"|\"] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Full Path to File(s)"
        }, {
            "label": "$sDelimiter",
            "documentation": "**[optional]** Separator for multiple Files, Default = '|'"
        }]
    },
    "_ColorConvertHSLtoRGB": {
        "documentation": "Converts HSL to RGB",
        "label": "_ColorConvertHSLtoRGB ( $aArray )",
        "params": [{
            "label": "$aArray",
            "documentation": "An array containing HSL values in their respective positions"
        }]
    },
    "_ColorConvertRGBtoHSL": {
        "documentation": "Converts RGB to HSL",
        "label": "_ColorConvertRGBtoHSL ( $aArray )",
        "params": [{
            "label": "$aArray",
            "documentation": "An array containing RGB values in their respective positions"
        }]
    },
    "_ColorGetBlue": {
        "documentation": "Returns the blue component of a given color",
        "label": "_ColorGetBlue ( $iColor )",
        "params": [{
            "label": "$iColor",
            "documentation": "The RGB color to work with (0x00RRGGBB)."
        }]
    },
    "_ColorGetCOLORREF": {
        "documentation": "Returns the COLORREF color",
        "label": "_ColorGetCOLORREF ( $iColor )",
        "params": [{
            "label": "$iColor",
            "documentation": "the COLORREF color to work with (0x00BBGGRR)"
        }]
    },
    "_ColorGetGreen": {
        "documentation": "Returns the green component of a given color",
        "label": "_ColorGetGreen ( $iColor )",
        "params": [{
            "label": "$iColor",
            "documentation": "The RGB color to work with (0x00RRGGBB)."
        }]
    },
    "_ColorGetRed": {
        "documentation": "Returns the red component of a given color",
        "label": "_ColorGetRed ( $iColor )",
        "params": [{
            "label": "$iColor",
            "documentation": "The RGB color to work with (0x00RRGGBB)."
        }]
    },
    "_ColorGetRGB": {
        "documentation": "Returns an array containing RGB values in their respective positions",
        "label": "_ColorGetRGB ( $iColor )",
        "params": [{
            "label": "$iColor",
            "documentation": "The RGB color to work with (0x00RRGGBB)."
        }]
    },
    "_ColorSetCOLORREF": {
        "documentation": "Returns the COLORREF color",
        "label": "_ColorSetCOLORREF ( $aColor )",
        "params": [{
            "label": "$aColor",
            "documentation": "an array of values in the range 0-255:  \n[0] Red component color  \n[1] Green component color  \n[2] Blue component color"
        }]
    },
    "_ColorSetRGB": {
        "documentation": "Returns the RGB color",
        "label": "_ColorSetRGB ( $aColor )",
        "params": [{
            "label": "$aColor",
            "documentation": "an array of values in the range 0-255:  \n[0] Red component color  \n[1] Green component color  \n[2] Blue component color"
        }]
    },
    "_Crypt_DecryptData": {
        "documentation": "Decrypts data using the supplied key",
        "label": "_Crypt_DecryptData ( $vData, $vCryptKey, $iAlgID [, $bFinal = True] )",
        "params": [{
            "label": "$vData",
            "documentation": "Data to decrypt"
        }, {
            "label": "$vCryptKey",
            "documentation": "Password or handle to a key if the CALG_USERKEY flag is specified"
        }, {
            "label": "$iAlgID",
            "documentation": "The algorithm to use"
        }, {
            "label": "$bFinal",
            "documentation": "**[optional]** False if this is only a segment of the full data"
        }]
    },
    "_Crypt_DecryptFile": {
        "documentation": "Decrypts a file with specified key and algorithm",
        "label": "_Crypt_DecryptFile ( $sSourceFile, $sDestinationFile, $vCryptKey, $iAlgID )",
        "params": [{
            "label": "$sSourceFile",
            "documentation": "File to process"
        }, {
            "label": "$sDestinationFile",
            "documentation": "File to save the processed file"
        }, {
            "label": "$vCryptKey",
            "documentation": "Password or handle to a key if the CALG_USERKEY flag is specified"
        }, {
            "label": "$iAlgID",
            "documentation": "The algorithm to use"
        }]
    },
    "_Crypt_DeriveKey": {
        "documentation": "Creates a key from algorithm and password",
        "label": "_Crypt_DeriveKey ( $vPassword, $iAlgID [, $iHashAlgID = $CALG_MD5] )",
        "params": [{
            "label": "$vPassword",
            "documentation": "Password to use"
        }, {
            "label": "$iAlgID",
            "documentation": "Encryption ID of algorithm to be used with the key"
        }, {
            "label": "$iHashAlgID",
            "documentation": "**[optional]** Id of the algo to hash the password with"
        }]
    },
    "_Crypt_DestroyKey": {
        "documentation": "Frees the resources used by a key",
        "label": "_Crypt_DestroyKey ( $hCryptKey )",
        "params": [{
            "label": "$hCryptKey",
            "documentation": "Key to destroy"
        }]
    },
    "_Crypt_EncryptData": {
        "documentation": "Encrypts data using the supplied key",
        "label": "_Crypt_EncryptData ( $vData, $vCryptKey, $iAlgID [, $bFinal = True] )",
        "params": [{
            "label": "$vData",
            "documentation": "Data to encrypt/decrypt"
        }, {
            "label": "$vCryptKey",
            "documentation": "Password or handle to a key if the CALG_USERKEY flag is specified"
        }, {
            "label": "$iAlgID",
            "documentation": "The algorithm to use"
        }, {
            "label": "$bFinal",
            "documentation": "**[optional]** False if this is only a segment of the full data"
        }]
    },
    "_Crypt_EncryptFile": {
        "documentation": "Encrypts a file with specified key and algorithm",
        "label": "_Crypt_EncryptFile ( $sSourceFile, $sDestinationFile, $vCryptKey, $iAlgID )",
        "params": [{
            "label": "$sSourceFile",
            "documentation": "File to process"
        }, {
            "label": "$sDestinationFile",
            "documentation": "File to save the processed file"
        }, {
            "label": "$vCryptKey",
            "documentation": "Password or handle to a key if the CALG_USERKEY flag is specified"
        }, {
            "label": "$iAlgID",
            "documentation": "The algorithm to use"
        }]
    },
    "_Crypt_GenRandom": {
        "documentation": "Fill a buffer with cryptographically random data",
        "label": "_Crypt_GenRandom ( $pBuffer, $iSize )",
        "params": [{
            "label": "$pBuffer",
            "documentation": "Pointer to buffer to fill with random data."
        }, {
            "label": "$iSize",
            "documentation": "Size of the buffer pointed to by $pBuffer."
        }]
    },
    "_Crypt_HashData": {
        "documentation": "Hash data with specified algorithm",
        "label": "_Crypt_HashData ( $vData, $iAlgID [, $bFinal = True [, $hCryptHash = 0]] )",
        "params": [{
            "label": "$vData",
            "documentation": "Data to hash"
        }, {
            "label": "$iAlgID",
            "documentation": "Hash ID to use"
        }, {
            "label": "$bFinal",
            "documentation": "**[optional]** False if this is only a segment of the full data, also makes the function return a hash object instead of hash"
        }, {
            "label": "$hCryptHash",
            "documentation": "**[optional]** Hash object returned from a previous call to _Crypt_HashData()"
        }]
    },
    "_Crypt_HashFile": {
        "documentation": "Hash a string with specified algorithm",
        "label": "_Crypt_HashFile ( $sFilePath, $iAlgID )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Path to file to hash"
        }, {
            "label": "$iAlgID",
            "documentation": "Hash ID to use"
        }]
    },
    "_Crypt_Shutdown": {
        "documentation": "Uninitialize the Crypt library",
        "label": "_Crypt_Shutdown (  )",
        "params": []
    },
    "_Crypt_Startup": {
        "documentation": "Initialize the Crypt library",
        "label": "_Crypt_Startup (  )",
        "params": []
    },
    "_DateAdd": {
        "documentation": "Calculates a new date/time by adding/subtracting a specified number of time intervals from an initial date/time",
        "label": "_DateAdd ( $sType, $iNumber, $sDate )",
        "params": [{
            "label": "$sType",
            "documentation": "Time interval to be used:  \nD - Add/subtract days to/from the specified date  \nM - Add/subtract months to/from the specified date  \nY - Add/subtract years to/from the specified date  \nw - Add/subtract Weeks to/from the specified date  \nh - Add/subtract hours to/from the specified date  \nn - Add/subtract minutes to/from the specified en date  \ns - Add/subtract seconds to/from the specified date"
        }, {
            "label": "$iNumber",
            "documentation": "Number of intervals to be added/subtracted (use unary minus for subtraction)"
        }, {
            "label": "$sDate",
            "documentation": "Initial date in the format YYYY/MM/DD[ HH:MM:SS]"
        }]
    },
    "_DateDayOfWeek": {
        "documentation": "Returns the name of the weekday, based on the specified day",
        "label": "_DateDayOfWeek ( $iDayNum [, $iFormat = 0] )",
        "params": [{
            "label": "$iDayNum",
            "documentation": "Day number  \n1 = Sunday  \n2 = Monday  \n3 = Tuesday  \n4 = Wednesday  \n5 = Thursday  \n6 = Friday  \n7 = Saturday"
        }, {
            "label": "$iFormat",
            "documentation": "**[optional]** Format:  \n`$DMW_LOCALE_USER` (0) - Long name of the weekday (Default)  \n`$DMW_SHORTNAME` (1) - Short name of the weekday e.g. Mon  \n`$DMW_LOCALE_LONGNAME` (2) - Long name of the weekday in the user's default language  \n`$DMW_LOCALE_SHORTNAME` (3) - Short name of the weekday in the user's default language"
        }]
    },
    "_DateDaysInMonth": {
        "documentation": "Returns the number of days in a month, based on the specified month and year",
        "label": "_DateDaysInMonth ( $iYear, $iMonthNum )",
        "params": [{
            "label": "$iYear",
            "documentation": "4-digit year."
        }, {
            "label": "$iMonthNum",
            "documentation": "Month number (1 = January, 12 = December)."
        }]
    },
    "_DateDiff": {
        "documentation": "Returns the difference between 2 dates, expressed in the type requested",
        "label": "_DateDiff ( $sType, $sStartDate, $sEndDate )",
        "params": [{
            "label": "$sType",
            "documentation": "One of the following:  \nD = Difference in days between the given dates  \nM = Difference in months between the given dates  \nY = Difference in years between the given dates  \nw = Difference in Weeks between the given dates  \nh = Difference in hours between the given dates  \nn = Difference in minutes between the given dates  \ns = Difference in seconds between the given dates"
        }, {
            "label": "$sStartDate",
            "documentation": "Input Start date in the format \"YYYY/MM/DD[ HH:MM:SS]\""
        }, {
            "label": "$sEndDate",
            "documentation": "Input End date in the format \"YYYY/MM/DD[ HH:MM:SS]\""
        }]
    },
    "_DateIsLeapYear": {
        "documentation": "Checks a given year to see if it is a leap year",
        "label": "_DateIsLeapYear ( $iYear )",
        "params": [{
            "label": "$iYear",
            "documentation": "The 4-digit year to check."
        }]
    },
    "_DateIsValid": {
        "documentation": "Checks the given date to determine if it is a valid date",
        "label": "_DateIsValid ( $sDate )",
        "params": [{
            "label": "$sDate",
            "documentation": "The date to be checked."
        }]
    },
    "_DateTimeFormat": {
        "documentation": "Returns the date in the PC's regional settings format",
        "label": "_DateTimeFormat ( $sDate, $sType )",
        "params": [{
            "label": "$sDate",
            "documentation": "Input date in the format \"YYYY/MM/DD[ HH:MM:SS]\""
        }, {
            "label": "$sType",
            "documentation": "one the following:  \n0 - Display a date and/or time. If there is a date part, display it as a short date.  \nIf there is a time part, display it as a long time. If present, both parts are displayed.  \n1 - Display a date using the long date format specified in your computer's regional settings.  \n2 - Display a date using the short date format specified in your computer's regional settings.  \n3 - Display a time using the time format specified in your computer's regional settings.  \n4 - Display a time using the 24-hour format (hh:mm).  \n5 - Display a time using the 24-hour format (hh:mm:ss)."
        }]
    },
    "_DateTimeSplit": {
        "documentation": "Split a string containing Date and Time into two separate Arrays",
        "label": "_DateTimeSplit ( $sDate, ByRef $aDatePart, ByRef $iTimePart )",
        "params": [{
            "label": "$sDate",
            "documentation": "Any of these formats: \"yyyy/mm/dd[ hh:mm[:ss]]\"; \"yyyy/mm/dd[Thh:mm[:ss]]\"; \"yyyy-mm-dd[ hh:mm[:ss]]\"; \"yyyy-mm-dd[Thh:mm[:ss]]\"; \"yyyy.mm.dd[ hh:mm[:ss]]\"; \"yyyy.mm.dd[Thh:mm[:ss]]\""
        }, {
            "label": "$aDatePart",
            "documentation": "array that contains the Date. $aDatePart[0] number of values returned"
        }, {
            "label": "$iTimePart",
            "documentation": "array that contains the Time. $aTimePart[0] number of values returned"
        }]
    },
    "_DateToDayOfWeek": {
        "documentation": "Returns the weekday number for a given date",
        "label": "_DateToDayOfWeek ( $iYear, $iMonth, $iDay )",
        "params": [{
            "label": "$iYear",
            "documentation": "A valid year in format YYYY"
        }, {
            "label": "$iMonth",
            "documentation": "A valid month in format MM"
        }, {
            "label": "$iDay",
            "documentation": "A valid day in format DD"
        }]
    },
    "_DateToDayOfWeekISO": {
        "documentation": "Returns the ISO weekday number for a given date",
        "label": "_DateToDayOfWeekISO ( $iYear, $iMonth, $iDay )",
        "params": [{
            "label": "$iYear",
            "documentation": "A valid year in format YYYY"
        }, {
            "label": "$iMonth",
            "documentation": "A valid month in format MM"
        }, {
            "label": "$iDay",
            "documentation": "A valid day in format DD"
        }]
    },
    "_DateToDayValue": {
        "documentation": "Returns the day number since noon 4713 BC January 1 for a given Gregorian date",
        "label": "_DateToDayValue ( $iYear, $iMonth, $iDay )",
        "params": [{
            "label": "$iYear",
            "documentation": "A valid year in format YYYY"
        }, {
            "label": "$iMonth",
            "documentation": "A valid month in format MM"
        }, {
            "label": "$iDay",
            "documentation": "A valid day in format DD"
        }]
    },
    "_DateToMonth": {
        "documentation": "Returns the name of the month, based on the specified month",
        "label": "_DateToMonth ( $iMonNum [, $iFormat = 0] )",
        "params": [{
            "label": "$iMonNum",
            "documentation": "Month number (1-12)"
        }, {
            "label": "$iFormat",
            "documentation": "**[optional]** Format:  \n`$DMW_LOCALE_USER` (0) - Long name of the month (Default)  \n`$DMW_SHORTNAME` (1) - Short name of the month e.g. Jan  \n`$DMW_LOCALE_LONGNAME` (2) - Long name of the month in the user's default language           \n`$DMW_LOCALE_SHORTNAME` (3) - Short name of the month in the user's default language"
        }]
    },
    "_Date_Time_CompareFileTime": {
        "documentation": "Compares two file times",
        "label": "_Date_Time_CompareFileTime ( $tFileTime1, $tFileTime2 )",
        "params": [{
            "label": "$tFileTime1",
            "documentation": "first $tagFILETIME structure or a pointer to it"
        }, {
            "label": "$tFileTime2",
            "documentation": "second $tagFILETIME structure or a pointer to it"
        }]
    },
    "_Date_Time_DOSDateTimeToArray": {
        "documentation": "Decode a DOS date/time to an array",
        "label": "_Date_Time_DOSDateTimeToArray ( $iDosDate, $iDosTime )",
        "params": [{
            "label": "$iDosDate",
            "documentation": "MS-DOS date, packed as follows:  \nBits 0- 4 Day of the month (1–31)  \nBits 5- 8 Month (1 = January, 2 = February, and so on)  \nBits 9-15 Year offset from 1980 (add 1980 to get actual year)"
        }, {
            "label": "$iDosTime",
            "documentation": "MS-DOS date, packed as follows:  \nBits 0- 4 Second divided by 2  \nBits 5-10 Minute (0–59)  \nBits 11-15 Hour (0–23 on a 24-hour clock)"
        }]
    },
    "_Date_Time_DOSDateTimeToFileTime": {
        "documentation": "Converts MS-DOS date and time values to a file time",
        "label": "_Date_Time_DOSDateTimeToFileTime ( $iFatDate, $iFatTime )",
        "params": [{
            "label": "$iFatDate",
            "documentation": "The MS-DOS date, packed as follows:  \nBits 0- 4 Day of the month (1–31)  \nBits 5- 8 Month (1 = January, 2 = February, and so on)  \nBits 9-15 Year offset from 1980 (add 1980 to get actual year)"
        }, {
            "label": "$iFatTime",
            "documentation": "The MS-DOS date, packed as follows:  \nBits 0- 4 Second divided by 2  \nBits 5-10 Minute (0–59)  \nBits 11-15 Hour (0–23 on a 24-hour clock)"
        }]
    },
    "_Date_Time_DOSDateTimeToStr": {
        "documentation": "Decode a DOS date to a string",
        "label": "_Date_Time_DOSDateTimeToStr ( $iDosDate, $iDosTime )",
        "params": [{
            "label": "$iDosDate",
            "documentation": "MS-DOS date, packed as follows:  \nBits 0- 4 Day of the month (1–31)  \nBits 5- 8 Month (1 = January, 2 = February, and so on)  \nBits 9-15 Year offset from 1980 (add 1980 to get actual year)"
        }, {
            "label": "$iDosTime",
            "documentation": "MS-DOS date, packed as follows:  \nBits 0- 4 Second divided by 2  \nBits 5-10 Minute (0–59)  \nBits 11-15 Hour (0–23 on a 24-hour clock)"
        }]
    },
    "_Date_Time_DOSDateToArray": {
        "documentation": "Decode a DOS date to an array",
        "label": "_Date_Time_DOSDateToArray ( $iDosDate )",
        "params": [{
            "label": "$iDosDate",
            "documentation": "MS-DOS date, packed as follows:  \nBits 0- 4 Day of the month (1–31)  \nBits 5- 8 Month (1 = January, 2 = February, and so on)  \nBits 9-15 Year offset from 1980 (add 1980 to get actual year)"
        }]
    },
    "_Date_Time_DOSDateToStr": {
        "documentation": "Decode a DOS date to a string",
        "label": "_Date_Time_DOSDateToStr ( $iDosDate )",
        "params": [{
            "label": "$iDosDate",
            "documentation": "MS-DOS date, packed as follows:  \nBits 0- 4 Day of the month (1–31)  \nBits 5- 8 Month (1 = January, 2 = February, and so on)  \nBits 9-15 Year offset from 1980 (add 1980 to get actual year)"
        }]
    },
    "_Date_Time_DOSTimeToArray": {
        "documentation": "Decode a DOS time to an array",
        "label": "_Date_Time_DOSTimeToArray ( $iDosTime )",
        "params": [{
            "label": "$iDosTime",
            "documentation": "MS-DOS date, packed as follows:  \nBits 0- 4 Second divided by 2  \nBits 5-10 Minute (0–59)  \nBits 11-15 Hour (0–23 on a 24-hour clock)"
        }]
    },
    "_Date_Time_DOSTimeToStr": {
        "documentation": "Decode a DOS time to a string",
        "label": "_Date_Time_DOSTimeToStr ( $iDosTime )",
        "params": [{
            "label": "$iDosTime",
            "documentation": "MS-DOS date, packed as follows:  \nBits 0- 4 Second divided by 2  \nBits 5-10 Minute (0–59)  \nBits 11-15 Hour (0–23 on a 24-hour clock)"
        }]
    },
    "_Date_Time_EncodeFileTime": {
        "documentation": "Encodes and returns a $tagFILETIME structure",
        "label": "_Date_Time_EncodeFileTime ( $iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]] )",
        "params": [{
            "label": "$iMonth",
            "documentation": "Month"
        }, {
            "label": "$iDay",
            "documentation": "Day"
        }, {
            "label": "$iYear",
            "documentation": "Year"
        }, {
            "label": "$iHour",
            "documentation": "**[optional]** Hour"
        }, {
            "label": "$iMinute",
            "documentation": "**[optional]** Minute"
        }, {
            "label": "$iSecond",
            "documentation": "**[optional]** Second"
        }, {
            "label": "$iMSeconds",
            "documentation": "**[optional]** Milliseconds"
        }]
    },
    "_Date_Time_EncodeSystemTime": {
        "documentation": "Encodes and returns a $tagSYSTEMTIME structure",
        "label": "_Date_Time_EncodeSystemTime ( $iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]] )",
        "params": [{
            "label": "$iMonth",
            "documentation": "Month"
        }, {
            "label": "$iDay",
            "documentation": "Day"
        }, {
            "label": "$iYear",
            "documentation": "Year"
        }, {
            "label": "$iHour",
            "documentation": "**[optional]** Hour"
        }, {
            "label": "$iMinute",
            "documentation": "**[optional]** Minute"
        }, {
            "label": "$iSecond",
            "documentation": "**[optional]** Second"
        }, {
            "label": "$iMSeconds",
            "documentation": "**[optional]** Milliseconds"
        }]
    },
    "_Date_Time_FileTimeToArray": {
        "documentation": "Decode a file time to an array",
        "label": "_Date_Time_FileTimeToArray ( ByRef $tFileTime )",
        "params": [{
            "label": "$tFileTime",
            "documentation": "$tagFILETIME structure"
        }]
    },
    "_Date_Time_FileTimeToDOSDateTime": {
        "documentation": "Converts MS-DOS date and time values to a file time",
        "label": "_Date_Time_FileTimeToDOSDateTime ( $tFileTime )",
        "params": [{
            "label": "$tFileTime",
            "documentation": "a $tagFILETIME structure containing the file time to convert to MS-DOS format or a pointer to it"
        }]
    },
    "_Date_Time_FileTimeToLocalFileTime": {
        "documentation": "Converts a file time based on the Coordinated Universal Time to a local file time",
        "label": "_Date_Time_FileTimeToLocalFileTime ( $tFileTime )",
        "params": [{
            "label": "$tFileTime",
            "documentation": "a $tagFILETIME structure containing the UTC based file time to be converted into a local file time or a pointer to it."
        }]
    },
    "_Date_Time_FileTimeToStr": {
        "documentation": "Decode a file time to a date/time string",
        "label": "_Date_Time_FileTimeToStr ( ByRef $tFileTime [, $iFmt = 0] )",
        "params": [{
            "label": "$tFileTime",
            "documentation": "$tagFILETIME structure"
        }, {
            "label": "$iFmt",
            "documentation": "**[optional]** 0 returns mm/dd/yyyy hh:mm:ss (Default)  \n1 returns yyyy/mm/dd hh:mm:ss"
        }]
    },
    "_Date_Time_FileTimeToSystemTime": {
        "documentation": "Converts a file time to system time format",
        "label": "_Date_Time_FileTimeToSystemTime ( $tFileTime )",
        "params": [{
            "label": "$tFileTime",
            "documentation": "a $tagFILETIME structure containing the file time to convert to system date and time format or a pointer to it."
        }]
    },
    "_Date_Time_GetFileTime": {
        "documentation": "Retrieves the date and time that a file was created, accessed and modified",
        "label": "_Date_Time_GetFileTime ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file for which dates and times are to be retrieved. The file handle must have been created using the CreateFile function with the GENERIC_READ access right."
        }]
    },
    "_Date_Time_GetLocalTime": {
        "documentation": "Retrieves the current local date and time",
        "label": "_Date_Time_GetLocalTime (  )",
        "params": []
    },
    "_Date_Time_GetSystemTime": {
        "documentation": "Retrieves the current system date and time expressed in UTC",
        "label": "_Date_Time_GetSystemTime (  )",
        "params": []
    },
    "_Date_Time_GetSystemTimeAdjustment": {
        "documentation": "Determines whether the system is applying periodic time adjustments",
        "label": "_Date_Time_GetSystemTimeAdjustment (  )",
        "params": []
    },
    "_Date_Time_GetSystemTimeAsFileTime": {
        "documentation": "Retrieves the current system date and time expressed in UTC",
        "label": "_Date_Time_GetSystemTimeAsFileTime (  )",
        "params": []
    },
    "_Date_Time_GetSystemTimes": {
        "documentation": "Retrieves system timing information",
        "label": "_Date_Time_GetSystemTimes (  )",
        "params": []
    },
    "_Date_Time_GetTickCount": {
        "documentation": "Retrieves the number of milliseconds that have elapsed since Windows was started",
        "label": "_Date_Time_GetTickCount (  )",
        "params": []
    },
    "_Date_Time_GetTimeZoneInformation": {
        "documentation": "Retrieves the current time zone settings",
        "label": "_Date_Time_GetTimeZoneInformation (  )",
        "params": []
    },
    "_Date_Time_LocalFileTimeToFileTime": {
        "documentation": "Converts a local file time to a file time based on UTC",
        "label": "_Date_Time_LocalFileTimeToFileTime ( $tLocalTime )",
        "params": [{
            "label": "$tLocalTime",
            "documentation": "a $tagFILETIME structure that specifies the local file time to be converted into a UTC based file time or a pointer to it."
        }]
    },
    "_Date_Time_SetFileTime": {
        "documentation": "Sets the date and time that a file was created, accessed and modified",
        "label": "_Date_Time_SetFileTime ( $hFile, $tCreateTime, $tLastAccess, $tLastWrite )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file. The file handle must have been created using the CreateFile function with the FILE_WRITE_ATTRIBUTES access right."
        }, {
            "label": "$tCreateTime",
            "documentation": "a $tagFILETIME structure that contains the new date and time the file was created.  \nThis can be 0 if the application does not need to set this information."
        }, {
            "label": "$tLastAccess",
            "documentation": "a $tagFILETIME structure that contains the new date and time the file was last accessed.  \nThe last access time includes the last time the file was written to, read from, or (in the case of executable files) run.  \nThis can be 0 if the application does not need to set this information.  \nTo preserve the existing last access time for a file even after accessing a file, call SetFileTime with this parameter set to -1 before closing the file handle."
        }, {
            "label": "$tLastWrite",
            "documentation": "a $tagFILETIME structure that contains the new date and time the file was last written to.  \nThis can be 0 if the application does not want to set this information."
        }]
    },
    "_Date_Time_SetLocalTime": {
        "documentation": "Sets the current local date and time",
        "label": "_Date_Time_SetLocalTime ( $tSYSTEMTIME )",
        "params": [{
            "label": "$tSYSTEMTIME",
            "documentation": "a $tagSYSTEMTIME structure that contains the new local date and time or a pointer to it"
        }]
    },
    "_Date_Time_SetSystemTime": {
        "documentation": "Sets the current system time and date, expressed in UTC",
        "label": "_Date_Time_SetSystemTime ( $tSYSTEMTIME )",
        "params": [{
            "label": "$tSYSTEMTIME",
            "documentation": "a $tagSYSTEMTIME structure that contains the new system date and time or a pointer to it"
        }]
    },
    "_Date_Time_SetSystemTimeAdjustment": {
        "documentation": "Enables or disables periodic time adjustments to the system's time of day clock",
        "label": "_Date_Time_SetSystemTimeAdjustment ( $iAdjustment, $bDisabled )",
        "params": [{
            "label": "$iAdjustment",
            "documentation": "The number of 100 nanosecond units added to the time of day clock at each clock interrupt if periodic time adjustment is enabled."
        }, {
            "label": "$bDisabled",
            "documentation": "A value of True specifies that periodic time adjustment is to be disabled. The system is free to adjust time of day using its own internal mechanisms. The system's internal adjustment mechanisms may cause the time-of-day clock to jump noticeably when adjustments are made. A value of False specifies that periodic time adjustment is to be enabled, and will be used to adjust the time of day clock. The system will not interfere with the time adjustment scheme, and will not attempt to synchronize time of day on its own.The system will add the value of $iAdjustment to the time of day at each clock interrupt."
        }]
    },
    "_Date_Time_SetTimeZoneInformation": {
        "documentation": "Sets the current time zone settings",
        "label": "_Date_Time_SetTimeZoneInformation ( $iBias, $sStdName, $tStdDate, $iStdBias, $sDayName, $tDayDate, $iDayBias )",
        "params": [{
            "label": "$iBias",
            "documentation": "The current bias for local time translation on this computer. The bias is the difference in minutes between Coordinated Universal Time (UTC) and local time.  \nAll translations between UTC and local time use the following formula: UTC = local time + bias"
        }, {
            "label": "$sStdName",
            "documentation": "The description for standard time"
        }, {
            "label": "$tStdDate",
            "documentation": "A $tagSYSTEMTIME structure that contains a date and local time when the transition from daylight saving time to standard time occurs."
        }, {
            "label": "$iStdBias",
            "documentation": "The bias value to be used during local time translations that occur during standard time. This value is added to the value of the Bias to form the bias used during standard time. In most time zones, this value is zero."
        }, {
            "label": "$sDayName",
            "documentation": "The description for daylight saving time"
        }, {
            "label": "$tDayDate",
            "documentation": "A $tagSYSTEMTIME structure that contains a date and local time when the transition from standard time to daylight saving time occurs."
        }, {
            "label": "$iDayBias",
            "documentation": "The bias value to be used during local time translation that occur during daylight saving time. This value is added to the value of the Bias member to form the bias used during daylight saving time. In most time zones this value is –60."
        }]
    },
    "_Date_Time_SystemTimeToArray": {
        "documentation": "Decode a system time to an array",
        "label": "_Date_Time_SystemTimeToArray ( ByRef $tSYSTEMTIME )",
        "params": [{
            "label": "$tSYSTEMTIME",
            "documentation": "$tagSYSTEMTIME structure"
        }]
    },
    "_Date_Time_SystemTimeToDateStr": {
        "documentation": "Decode a system time to a date string",
        "label": "_Date_Time_SystemTimeToDateStr ( ByRef $tSYSTEMTIME [, $iFmt = 0] )",
        "params": [{
            "label": "$tSYSTEMTIME",
            "documentation": "$tagSYSTEMTIME structure"
        }, {
            "label": "$iFmt",
            "documentation": "**[optional]** 0 returns mm/dd/yyyy (Default)  \n1 returns yyyy/mm/dd"
        }]
    },
    "_Date_Time_SystemTimeToDateTimeStr": {
        "documentation": "Decode a system time to a date/time string",
        "label": "_Date_Time_SystemTimeToDateTimeStr ( ByRef $tSYSTEMTIME [, $iFmt = 0] )",
        "params": [{
            "label": "$tSYSTEMTIME",
            "documentation": "$tagSYSTEMTIME structure"
        }, {
            "label": "$iFmt",
            "documentation": "**[optional]** 0 returns mm/dd/yyyy hh:mm:ss (Default)  \n1 returns yyyy/mm/dd hh:mm:ss"
        }]
    },
    "_Date_Time_SystemTimeToFileTime": {
        "documentation": "Converts a system time to file time format",
        "label": "_Date_Time_SystemTimeToFileTime ( $tSYSTEMTIME )",
        "params": [{
            "label": "$tSYSTEMTIME",
            "documentation": "a $tagSYSTEMTIME structure to be converted or a pointer to it."
        }]
    },
    "_Date_Time_SystemTimeToTimeStr": {
        "documentation": "Decode a system time to a time string",
        "label": "_Date_Time_SystemTimeToTimeStr ( ByRef $tSYSTEMTIME )",
        "params": [{
            "label": "$tSYSTEMTIME",
            "documentation": "$tagSYSTEMTIME structure"
        }]
    },
    "_Date_Time_SystemTimeToTzSpecificLocalTime": {
        "documentation": "Converts a UTC time to a specified time zone's corresponding local time",
        "label": "_Date_Time_SystemTimeToTzSpecificLocalTime ( $tUTC [, $tTimeZone = 0] )",
        "params": [{
            "label": "$tUTC",
            "documentation": "a $tagSYSTEMTIME structure that specifies a time in UTC or a pointer to it. The function converts this time to the specified time zone's local time."
        }, {
            "label": "$tTimeZone",
            "documentation": "**[optional]** a $tagTIME_ZONE_INFORMATION structure that specifies the time zone of interest or a pointer to it.  \nIf 0, the function uses the currently active time zone."
        }]
    },
    "_Date_Time_TzSpecificLocalTimeToSystemTime": {
        "documentation": "Converts a local time to a time in UTC",
        "label": "_Date_Time_TzSpecificLocalTimeToSystemTime ( $tLocalTime [, $tTimeZone = 0] )",
        "params": [{
            "label": "$tLocalTime",
            "documentation": "a $tagSYSTEMTIME structure that specifies a local time or a pointer to it. The function converts this time to the corresponding UTC time."
        }, {
            "label": "$tTimeZone",
            "documentation": "**[optional]** a $tagTIME_ZONE_INFORMATION structure that specifies the time zone of interest or a pointer to it.  \nIf 0, the function uses the currently active time zone."
        }]
    },
    "_DayValueToDate": {
        "documentation": "Add the given days since noon 4713 BC January 1 and returns the Gregorian date",
        "label": "_DayValueToDate ( $iJulianDate, ByRef $iYear, ByRef $iMonth, ByRef $iDay )",
        "params": [{
            "label": "$iJulianDate",
            "documentation": "A valid number of days."
        }, {
            "label": "$iYear",
            "documentation": "will return the year in format YYYY"
        }, {
            "label": "$iMonth",
            "documentation": "will return the month in format MM"
        }, {
            "label": "$iDay",
            "documentation": "will return the day in format DD"
        }]
    },
    "_Degree": {
        "documentation": "Converts radians to degrees",
        "label": "_Degree ( $iRadians )",
        "params": [{
            "label": "$iRadians",
            "documentation": "Radians to be converted into degrees."
        }]
    },
    "_EventLog__Backup": {
        "documentation": "Saves the event log to a backup file",
        "label": "_EventLog__Backup ( $hEventLog, $sFileName )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "Handle to the event log"
        }, {
            "label": "$sFileName",
            "documentation": "The name of the backup file"
        }]
    },
    "_EventLog__Clear": {
        "documentation": "Clears the event log",
        "label": "_EventLog__Clear ( $hEventLog, $sFileName )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "Handle to the event log"
        }, {
            "label": "$sFileName",
            "documentation": "The name of the backup file. If the name is blank, the current event log is not backed up."
        }]
    },
    "_EventLog__Close": {
        "documentation": "Closes a read handle to the event log",
        "label": "_EventLog__Close ( $hEventLog )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "Handle to the event log"
        }]
    },
    "_EventLog__Count": {
        "documentation": "Retrieves the number of records in the event log",
        "label": "_EventLog__Count ( $hEventLog )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "A handle to the event log"
        }]
    },
    "_EventLog__DeregisterSource": {
        "documentation": "Closes a write handle to the event log",
        "label": "_EventLog__DeregisterSource ( $hEventLog )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "A handle to the event log"
        }]
    },
    "_EventLog__Full": {
        "documentation": "Retrieves whether the event log is full",
        "label": "_EventLog__Full ( $hEventLog )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "A handle to the event log"
        }]
    },
    "_EventLog__Notify": {
        "documentation": "Enables an application to receive event notifications",
        "label": "_EventLog__Notify ( $hEventLog, $hEvent )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "A handle to the event log"
        }, {
            "label": "$hEvent",
            "documentation": "A handle to a manual-reset event object"
        }]
    },
    "_EventLog__Oldest": {
        "documentation": "Retrieves the absolute record number of the oldest record in the event log",
        "label": "_EventLog__Oldest ( $hEventLog )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "A handle to the event log"
        }]
    },
    "_EventLog__Open": {
        "documentation": "Opens a handle to the event log",
        "label": "_EventLog__Open ( $sServerName, $sSourceName )",
        "params": [{
            "label": "$sServerName",
            "documentation": "The UNC name of the server on where the event log will be opened. If blank, the operation is performed on the local computer."
        }, {
            "label": "$sSourceName",
            "documentation": "The name of the log"
        }]
    },
    "_EventLog__OpenBackup": {
        "documentation": "Opens a handle to a backup event log",
        "label": "_EventLog__OpenBackup ( $sServerName, $sFileName )",
        "params": [{
            "label": "$sServerName",
            "documentation": "The UNC name of the server on where the event log will be opened.If blank, the operation is performed on the local computer."
        }, {
            "label": "$sFileName",
            "documentation": "The name of the backup file"
        }]
    },
    "_EventLog__Read": {
        "documentation": "Reads an entry from the event log",
        "label": "_EventLog__Read ( $hEventLog [, $bRead = True [, $bForward = True [, $iOffset = 0]]] )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "A handle to the event log"
        }, {
            "label": "$bRead",
            "documentation": "**[optional]** If True, operation proceeds sequentially from the last call to this function using this handle.  \nIf False, the read will operation proceeds from the record specified by the `$iOffset` parameter."
        }, {
            "label": "$bForward",
            "documentation": "**[optional]** If True, the log is read in date order. If False, the log is read in reverse date order."
        }, {
            "label": "$iOffset",
            "documentation": "**[optional]** The number of the event record at which the read operation should start.  \nThis parameter is ignored if `$bRead` is True."
        }]
    },
    "_EventLog__RegisterSource": {
        "documentation": "Retrieves a registered handle to the specified event log",
        "label": "_EventLog__RegisterSource ( $sServerName, $sSourceName )",
        "params": [{
            "label": "$sServerName",
            "documentation": "The UNC name of the server on where the event log will be opened. If blank, the operation is performed on the local computer."
        }, {
            "label": "$sSourceName",
            "documentation": "The name of the event source whose handle is to be retrieved. The source name must be a subkey of a log under the Eventlog registry key."
        }]
    },
    "_EventLog__Report": {
        "documentation": "Writes an entry at the end of the specified event log",
        "label": "_EventLog__Report ( $hEventLog, $iType, $iCategory, $iEventID, $sUserName, $sDesc, $aData )",
        "params": [{
            "label": "$hEventLog",
            "documentation": "A handle to the event log. As of Windows XP SP2, this cannot be a handle to the Security log."
        }, {
            "label": "$iType",
            "documentation": "Event type. This can be one of the following values:  \n0 - Success event    \n1 - Error event    \n2 - Warning event    \n4 - Information event    \n8 - Success audit event    \n16 - Failue audit event"
        }, {
            "label": "$iCategory",
            "documentation": "The event category. This is source specific information the category can have any value."
        }, {
            "label": "$iEventID",
            "documentation": "The event identifier. The event identifier specifies the entry in the message file associated with the event source."
        }, {
            "label": "$sUserName",
            "documentation": "User name for the event. This can be blank to indicate that no name is required."
        }, {
            "label": "$sDesc",
            "documentation": "Event description"
        }, {
            "label": "$aData",
            "documentation": "Data array formated as follows:    \n[0] - Number of bytes in array    \n[1] - Byte 1    \n[2] - Byte 2    \n[n] - Byte n"
        }]
    },
    "_Excel_BookAttach": {
        "documentation": "Attaches to the first instance of a workbook where the search string matches based on the selected mode",
        "label": "_Excel_BookAttach ( $sString [, $sMode = \"FilePath\" [, $oInstance = Default]] )",
        "params": [{
            "label": "$sString",
            "documentation": "String to search for"
        }, {
            "label": "$sMode",
            "documentation": "**[optional]** specifies search mode:    \nFileName - Name of the open workbook    \nFilePath - Full path to the open workbook (default)    \nTitle - Title of the Excel window"
        }, {
            "label": "$oInstance",
            "documentation": "**[optional]** Object of the Excel instance to be searched (default = keyword Default = all instances)"
        }]
    },
    "_Excel_BookClose": {
        "documentation": "Closes the specified workbook",
        "label": "_Excel_BookClose ( $oWorkbook [, $bSave = True] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Workbook object"
        }, {
            "label": "$bSave",
            "documentation": "**[optional]** If True the workbook will be saved before closing (default = True)"
        }]
    },
    "_Excel_BookList": {
        "documentation": "Returns a list of workbooks of a specified or all Excel instances",
        "label": "_Excel_BookList ( [$oExcel = Default] )",
        "params": [{
            "label": "$oExcel",
            "documentation": "**[optional]** An Excel application object (default = keyword Default = process all Excel instances)"
        }]
    },
    "_Excel_BookNew": {
        "documentation": "Creates a new workbook",
        "label": "_Excel_BookNew ( $oExcel [, $iSheets = Default] )",
        "params": [{
            "label": "$oExcel",
            "documentation": "Excel application object where you want to create the new workbook"
        }, {
            "label": "$iSheets",
            "documentation": "**[optional]** Number of sheets to create in the new workbook (default = keyword Default = Excel default value). Maximum is 255"
        }]
    },
    "_Excel_BookOpen": {
        "documentation": "Opens an existing workbook",
        "label": "_Excel_BookOpen ( $oExcel, $sFilePath [, $bReadOnly = False [, $bVisible = True [, $sPassword = Default [, $sWritePassword = Default [, $bUpdateLinks = Default]]]]] )",
        "params": [{
            "label": "$oExcel",
            "documentation": "Excel application object where you want to open the workbook"
        }, {
            "label": "$sFilePath",
            "documentation": "Path and filename of the file to be opened"
        }, {
            "label": "$bReadOnly",
            "documentation": "**[optional]** True opens the workbook as read-only (default = False)"
        }, {
            "label": "$bVisible",
            "documentation": "**[optional]** True specifies that the workbook window will be visible (default = True)"
        }, {
            "label": "$sPassword",
            "documentation": "**[optional]** The password that was used to read-protect the workbook, if any (default is none)"
        }, {
            "label": "$sWritePassword",
            "documentation": "**[optional]** The password that was used to write-protect the workbook, if any (default is none)"
        }, {
            "label": "$bUpdateLinks",
            "documentation": "**[optional]** Specifies the way external references (links) in the file are updated (default = keyword Default) Valid values are:  \nDefault: Excel prompts the user to decide how to update links.  \n0: Excel doesn't update links.  \n3: Excel updates all links."
        }]
    },
    "_Excel_BookOpenText": {
        "documentation": "Opens a text file and parses the content to a new workbook with a single sheet",
        "label": "_Excel_BookOpenText ( $oExcel, $sFilePath [, $iStartRow = 1 [, $iDataType = Default [, $sTextQualifier = $xlTextQualifierDoubleQuote [, $bConsecutiveDelimiter = False [, $sDelimiter = \",\" [, $aFieldInfo = \"\" [, $sDecimalSeparator = Default [, $sThousandsSeparator = Default [, $bTrailingMinusNumbers = True [, $iOrigin = Default]]]]]]]]]] )",
        "params": [{
            "label": "$oExcel",
            "documentation": "Excel application object where you want to open the new workbook"
        }, {
            "label": "$sFilePath",
            "documentation": "Path and filename of the file to be opened"
        }, {
            "label": "$iStartRow",
            "documentation": "**[optional]** The row at which to start parsing the file (default = 1)"
        }, {
            "label": "$iDataType",
            "documentation": "**[optional]** Specifies the column format of the data in the file. Can be any of the XlTextParsingType enumeration.  \nIf set to keyword Default Excel attempts to determine the column format (default = keyword Default)"
        }, {
            "label": "$sTextQualifier",
            "documentation": "**[optional]** Specifies the text qualifier (default = $xlTextQualifierDoubleQuote)"
        }, {
            "label": "$bConsecutiveDelimiter",
            "documentation": "**[optional]** True will consider consecutive delimiters as one delimiter (default = False)"
        }, {
            "label": "$sDelimiter",
            "documentation": "**[optional]** One or multiple characters to be used as delimiter (default = \",\")"
        }, {
            "label": "$aFieldInfo",
            "documentation": "**[optional]** An array containing parse information for individual columns of data.  \nThe interpretation depends on the value of DataType.  \nWhen the data is delimited, this argument is an array of two-element arrays, with each two-element array specifying the conversion options for a particular column.  \nThe first element is the column number (1-based), and the second element is one of the XlColumnDataType constants specifying how the column is parsed (default = keyword Default)"
        }, {
            "label": "$sDecimalSeparator",
            "documentation": "**[optional]** Decimal separator that Excel uses when recognizing numbers.  \nDefault setting is the system setting (default = keyword Default)"
        }, {
            "label": "$sThousandsSeparator",
            "documentation": "**[optional]** Thousands separator that Excel uses when recognizing numbers.  \nDefault setting is the system setting (default = keyword Default)"
        }, {
            "label": "$bTrailingMinusNumbers",
            "documentation": "**[optional]** True treats numbers with a minus character at the end as negative numbers.  \nFalse treats such numbers as text (default = True)"
        }, {
            "label": "$iOrigin",
            "documentation": "**[optional]** Origin of the text file. Can be one of the XlPlatform constants.  \nAdditionally, this could be an integer representing the code page number of the desired code page.  \nFor example, \"1256\" would specify that the encoding is Arabic (Windows).  \nIf this argument is omitted, the method uses the current setting of the File Origin option in the Text Import Wizard."
        }]
    },
    "_Excel_BookSave": {
        "documentation": "Saves the specified workbook",
        "label": "_Excel_BookSave ( $oWorkbook )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Object of the workbook to save"
        }]
    },
    "_Excel_BookSaveAs": {
        "documentation": "Saves the specified workbook with a new filename and/or type",
        "label": "_Excel_BookSaveAs ( $oWorkbook, $sFilePath [, $iFormat = $xlWorkbookDefault [, $bOverWrite = False [, $sPassword = Default [, $sWritePassword = Default [, $bReadOnlyRecommended = False]]]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Workbook object to be saved"
        }, {
            "label": "$sFilePath",
            "documentation": "Path and filename of the file to be read"
        }, {
            "label": "$iFormat",
            "documentation": "**[optional]** Excel writeable filetype. Can be any value of the XlFileFormat enumeration."
        }, {
            "label": "$bOverWrite",
            "documentation": "**[optional]** True overwrites an already existing file (default = False)"
        }, {
            "label": "$sPassword",
            "documentation": "**[optional]** The string password to protect the sheet with. If set to keyword Default no password will be used (default = keyword Default)"
        }, {
            "label": "$sWritePassword",
            "documentation": "**[optional]** The string write-access password to protect the sheet with. If set to keyword Default no password will be used (default = keyword Default)"
        }, {
            "label": "$bReadOnlyRecommended",
            "documentation": "**[optional]** True displays a message when the file is opened, recommending that the file be opened as read-only (default = False)"
        }]
    },
    "_Excel_Close": {
        "documentation": "Closes all worksheets and the instance of the Excel application",
        "label": "_Excel_Close ( $oExcel [, $bSaveChanges = True [, $bForceClose = False]] )",
        "params": [{
            "label": "$oExcel",
            "documentation": "Excel application object as returned by `_Excel_Open()`"
        }, {
            "label": "$bSaveChanges",
            "documentation": "**[optional]** Specifies whether changed worksheets should be saved before closing (default = True)"
        }, {
            "label": "$bForceClose",
            "documentation": "**[optional]** If True the Excel application is closed even when it was not started by `_Excel_Open()` (default = False)"
        }]
    },
    "_Excel_ColumnToLetter": {
        "documentation": "Converts the column number to letter(s)",
        "label": "_Excel_ColumnToLetter ( $iColumn )",
        "params": [{
            "label": "$iColumn",
            "documentation": "The column number which you want to turn into letter(s)"
        }]
    },
    "_Excel_ColumnToNumber": {
        "documentation": "Converts the column letter(s) to a number",
        "label": "_Excel_ColumnToNumber ( $sColumn )",
        "params": [{
            "label": "$sColumn",
            "documentation": "The column letter(s) which you want to turn into a number (e.g. \"ZZ\" to 702)"
        }]
    },
    "_Excel_ConvertFormula": {
        "documentation": "Converts cell references in a formula between A1 and R1C1 reference styles, relative and absolute reference type, or both",
        "label": "_Excel_ConvertFormula ( $oExcel, $sFormula, $iFromStyle [, $iToStyle = Default [, $iToAbsolute = Default [, $vRelativeTo = Default]]] )",
        "params": [{
            "label": "$oExcel",
            "documentation": "Excel application object"
        }, {
            "label": "$sFormula",
            "documentation": "String containing the formula to convert"
        }, {
            "label": "$iFromStyle",
            "documentation": "The reference style of the formula. Can be any of the XlReferenceStyle enumeration"
        }, {
            "label": "$iToStyle",
            "documentation": "**[optional]** A XlReferenceStyle enumeration specifying the reference style to be returned. If omitted, the reference style isn't changed"
        }, {
            "label": "$iToAbsolute",
            "documentation": "**[optional]** A XlReferenceType which specifies the converted reference type. If this argument is omitted, the reference type isn't changed"
        }, {
            "label": "$vRelativeTo",
            "documentation": "**[optional]** A Range object or a A1 range that contains one cell. Relative references relate to this cell. If omitted A1 is used"
        }]
    },
    "_Excel_Export": {
        "documentation": "Exports a workbook, worksheet, chart or range as PDF or XPS",
        "label": "_Excel_Export ( $oExcel, $vObject, $sFileName [, $iType = $xlTypePDF [, $iQuality = $xlQualityStandard [, $bIncludeProperties = True [, $iFrom = Default [, $iTo = Default [, $bOpenAfterPublish = Default]]]]]] )",
        "params": [{
            "label": "$oExcel",
            "documentation": "Excel application object"
        }, {
            "label": "$vObject",
            "documentation": "Workbook, worksheet, chart or range object to export as PDF or XPS. Range can be specified as A1 range too"
        }, {
            "label": "$sFileName",
            "documentation": "Path/name of the exported file"
        }, {
            "label": "$iType",
            "documentation": "**[optional]** Can be either $xlTypePDF or $xlTypeXPS of the XlFixedFormatType enumeration (default = $xlTypePDF)"
        }, {
            "label": "$iQuality",
            "documentation": "**[optional]** Can be any of the XlFixedFormatQuality enumeration (default = $xlQualityStandard)"
        }, {
            "label": "$bIncludeProperties",
            "documentation": "**[optional]** True indicates that document properties should be included (default = True)"
        }, {
            "label": "$iFrom",
            "documentation": "**[optional]** The page number at which to start publishing (default = keyword Default = start at the beginning)"
        }, {
            "label": "$iTo",
            "documentation": "**[optional]** The page number at which to end publishing (default = keyword Default = end at the last page)"
        }, {
            "label": "$bOpenAfterPublish",
            "documentation": "**[optional]** True displays the file in viewer after it is published (default = False)"
        }]
    },
    "_Excel_FilterGet": {
        "documentation": "Returns a list of set filters",
        "label": "_Excel_FilterGet ( $oWorkbook [, $vWorksheet = Default] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Excel workbook object"
        }, {
            "label": "$vWorksheet",
            "documentation": "**[optional]** Name, index or worksheet object to be filtered. If set to keyword Default the active sheet will be filtered"
        }]
    },
    "_Excel_FilterSet": {
        "documentation": "Sets/unsets filter definitions and filters the range",
        "label": "_Excel_FilterSet ( $oWorkbook, $vWorksheet, $vRange, $iField [, $sCriteria1 = Default [, $iOperator = Default [, $sCriteria2 = Default]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Excel workbook object"
        }, {
            "label": "$vWorksheet",
            "documentation": "Name, index or worksheet object to be filtered. If set to keyword Default the active sheet will be filtered"
        }, {
            "label": "$vRange",
            "documentation": "A range object or an A1 range to specify the columns to filter on.  \nUse keyword Default to filter on all used columns of the specified worksheet"
        }, {
            "label": "$iField",
            "documentation": "Integer offset of the field on which you want to base the filter (the leftmost field is field one).  \nIf set to 0 all Autofilters on the worksheet will be removed"
        }, {
            "label": "$sCriteria1",
            "documentation": "**[optional]** The criteria (a string or an array of strings). Use \"=\" to find blank fields, or use \"<>\" to find nonblank fields.  \nIf this argument is omitted, the criteria is All.  \nIf Operator is xlTop10Items, Criteria1 specifies the number of items (for example, \"10\")"
        }, {
            "label": "$iOperator",
            "documentation": "**[optional]** One of the constants of the XlAutoFilterOperator enumeration specifying the type of filter"
        }, {
            "label": "$sCriteria2",
            "documentation": "**[optional]** The second criteria (a string). Used with Criteria1 and Operator to construct compound criteria"
        }]
    },
    "_Excel_Open": {
        "documentation": "Connects to an existing Excel instance or creates a new one",
        "label": "_Excel_Open ( [$bVisible = True [, $bDisplayAlerts = False [, $bScreenUpdating = True [, $bInteractive = True [, $bForceNew = False]]]]] )",
        "params": [{
            "label": "$bVisible",
            "documentation": "**[optional]** True specifies that the application will be visible (default = True)"
        }, {
            "label": "$bDisplayAlerts",
            "documentation": "**[optional]** False suppresses all prompts and alert messages while opening a workbook (default = False)"
        }, {
            "label": "$bScreenUpdating",
            "documentation": "**[optional]** False suppresses screen updating to speed up your script (default = True)"
        }, {
            "label": "$bInteractive",
            "documentation": "**[optional]** If False, Excel blocks all keyboard and mouse input by the user (except input to dialog boxes) (default = True)"
        }, {
            "label": "$bForceNew",
            "documentation": "**[optional]** True forces to create a new Excel instance even if there is already a running instance (default = False)"
        }]
    },
    "_Excel_PictureAdd": {
        "documentation": "Adds a picture on the specified workbook and worksheet",
        "label": "_Excel_PictureAdd ( $oWorkbook, $vWorksheet, $sFile, $vRangeOrLeft [, $iTop = Default [, $iWidth = Default [, $iHeight = Default [, $bKeepRatio = True]]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Excel workbook object"
        }, {
            "label": "$vWorksheet",
            "documentation": "Name, index or worksheet object to be written to. If set to keyword Default the active sheet will be used"
        }, {
            "label": "$sFile",
            "documentation": "Full path to picture file being added"
        }, {
            "label": "$vRangeOrLeft",
            "documentation": "Either an A1 range, a range object or an integer denoting the left position of the pictures upper left corner"
        }, {
            "label": "$iTop",
            "documentation": "**[optional]** If `$vRangeOrLeft` is an integer then `$iTop` is the top position of the pictures upper left corner."
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** If specified, sets the width of the picture. If not specified, width will adjust automatically (default = Automatic)"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** If specified, sets the height of the picture. If not specified, height will adjust automatically (default = Automatic)"
        }, {
            "label": "$bKeepRatio",
            "documentation": "**[optional]** Only used if `$vRangeOrLeft` is a multi-cell range (default = True)    \nTrue will maintain image aspect ratio while staying within the bounds of `$vRangeOrLeft`.    \nFalse will fill the `$vRangeOrLeft` regardless of original aspect ratio."
        }]
    },
    "_Excel_Print": {
        "documentation": "Prints a workbook, worksheet, chart or range",
        "label": "_Excel_Print ( $oExcel, $vObject [, $iCopies = Default [, $sPrinter = Default [, $bPreview = Default [, $iFrom = Default [, $iTo = Default [, $bPrintToFile = Default [, $bCollate = Default [, $sPrToFileName = \"\"]]]]]]]] )",
        "params": [{
            "label": "$oExcel",
            "documentation": "Excel application object"
        }, {
            "label": "$vObject",
            "documentation": "Workbook, worksheet, chart or range object to print. Range can be specified as A1 range too"
        }, {
            "label": "$iCopies",
            "documentation": "**[optional]** Number of copies to print (default = keyword Default = 1)"
        }, {
            "label": "$sPrinter",
            "documentation": "**[optional]** Name of the printer to be used. Defaults to active printer (default = keyword Default)"
        }, {
            "label": "$bPreview",
            "documentation": "**[optional]** True to invoke print preview before printing (default = keyword Default = False)"
        }, {
            "label": "$iFrom",
            "documentation": "**[optional]** Page number where to start printing (default = keyword Default = first page)"
        }, {
            "label": "$iTo",
            "documentation": "**[optional]** Page number where to stop printing (default = keyword Default = last page)"
        }, {
            "label": "$bPrintToFile",
            "documentation": "**[optional]** True to print to a file. See parameter `$sPrToFileName` (default = keyword Default = False)"
        }, {
            "label": "$bCollate",
            "documentation": "**[optional]** True to collate multiple copies (default = keyword Default = False)"
        }, {
            "label": "$sPrToFileName",
            "documentation": "**[optional]** If `$bPrintToFile` is set to True, this argument specifies the name of the file you want to print to."
        }]
    },
    "_Excel_RangeCopyPaste": {
        "documentation": "Cuts or copies one or multiple cells, rows or columns to a range or from/to the clipboard",
        "label": "_Excel_RangeCopyPaste ( $oWorksheet, $vSourceRange [, $vTargetRange = Default [, $bCut = False [, $iPaste = Default [, $iOperation = Default [, $bSkipBlanks = False [, $bTranspose = False]]]]]] )",
        "params": [{
            "label": "$oWorksheet",
            "documentation": "Object of the source worksheet"
        }, {
            "label": "$vSourceRange",
            "documentation": "Source range to copy/cut from. Can be a range object or an A1 range.  \nIf set to keyword Default then the range will be copied from the clipboard."
        }, {
            "label": "$vTargetRange",
            "documentation": "**[optional]** Target range to copy/cut to. Can be a range object or an A1 range.  \nIf set to keyword Default then the range will be copied to the clipboard (default = keyword Default)"
        }, {
            "label": "$bCut",
            "documentation": "**[optional]** If set to True the source range isn't copied but cut out (default = False)  \nThis parameter is ignored when `$vSourceRange` is set to keyword Default."
        }, {
            "label": "$iPaste",
            "documentation": "**[optional]** The part of the range to be pasted from the clipboard (formulas, formats ...). Must be a value of the XlPasteType enumeration  \n(default = keyword Default)"
        }, {
            "label": "$iOperation",
            "documentation": "**[optional]** The paste operation (add, divide, multiply ...). Must be a value of the XlPasteSpecialOperation enunmeration  \n(default = keyword Default)"
        }, {
            "label": "$bSkipBlanks",
            "documentation": "**[optional]** If set to True blank cells from the clipboard will not be pasted into the target range (default = False)"
        }, {
            "label": "$bTranspose",
            "documentation": "**[optional]** Set to True to transpose rows and columns when the range is pasted (default = False)"
        }]
    },
    "_Excel_RangeDelete": {
        "documentation": "Deletes one or multiple cells, rows or columns from the specified worksheet",
        "label": "_Excel_RangeDelete ( $oWorksheet, $vRange [, $iShift = Default [, $iEntireRowCol = Default]] )",
        "params": [{
            "label": "$oWorksheet",
            "documentation": "Excel worksheet object"
        }, {
            "label": "$vRange",
            "documentation": "Range can be a range object, an A1 range (e.g. \"A1:B2\", \"1:2\" (row 1 to 2), \"D:G\" (columns D to G) etc."
        }, {
            "label": "$iShift",
            "documentation": "**[optional]** Specifies which way to shift the cells. Can be xlShiftToLeft or xlShiftUp of the XlDeleteShiftDirection enumeration.  \nIf set to keyword Default, Excel decides based on the shape of the range (default = keyword Default)"
        }, {
            "label": "$iEntireRowCol",
            "documentation": "**[optional]** If set to 1 the entire row is deleted, if set to 2 the entire column is deleted (default = keyword Default = only delete specified range)"
        }]
    },
    "_Excel_RangeFind": {
        "documentation": "Finds matching cells in a range or workbook and returns an array with information about the found cells",
        "label": "_Excel_RangeFind ( $oWorkbook, $sSearch [, $vRange = Default [, $iLookIn = $xlValues [, $iLookAt = $xlPart [, $bMatchcase = False]]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Workbook object"
        }, {
            "label": "$sSearch",
            "documentation": "Search string. Can be a string (wildcards - *?~ - can be used) or any Excel data type. See Remarks"
        }, {
            "label": "$vRange",
            "documentation": "**[optional]** A range object, an A1 range (string) or keyword Default to search all sheets of the workbook (default = keyword Default)"
        }, {
            "label": "$iLookIn",
            "documentation": "**[optional]** Specifies where to search. Can be any of the XLFindLookIn enumeration (default = $xlValues)"
        }, {
            "label": "$iLookAt",
            "documentation": "**[optional]** Specifies whether the search text must match as a whole or any part. Can be any of the XLLookAt enumeration (default = $xlPart)"
        }, {
            "label": "$bMatchcase",
            "documentation": "**[optional]** True = case sensitive, False = case insensitive (default = False)"
        }]
    },
    "_Excel_RangeInsert": {
        "documentation": "Inserts one or multiple empty cells, rows or columns into the specified worksheet",
        "label": "_Excel_RangeInsert ( $oWorksheet, $vRange [, $iShift = Default [, $iCopyOrigin = Default]] )",
        "params": [{
            "label": "$oWorksheet",
            "documentation": "Excel worksheet object"
        }, {
            "label": "$vRange",
            "documentation": "Range can be a range object, an A1 range (e.g. \"A1:B2\", \"1:2\" (row 1 to 2), \"\"D:G\" (columns D to G) etc."
        }, {
            "label": "$iShift",
            "documentation": "**[optional]** Specifies which way to shift the cells. Can be xlShiftToRight or xlShiftDown of the XlInsertShiftDirection enumeration.  \nIf set to keyword Default, Excel decides based on the shape of the range (default = keyword Default)"
        }, {
            "label": "$iCopyOrigin",
            "documentation": "**[optional]** Specifies which formatting option to copy. Can be any of the XlInsertFormatOrigin enumeration (default = keyword Default)"
        }]
    },
    "_Excel_RangeLinkAddRemove": {
        "documentation": "Adds or removes a hyperlink to/from a specified range",
        "label": "_Excel_RangeLinkAddRemove ( $oWorkbook, $vWorksheet, $vRange, $sAddress [, $sSubAddress = Default [, $sScreenTip = Default [, $sTextToDisplay = Default]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Excel workbook object"
        }, {
            "label": "$vWorksheet",
            "documentation": "Name, index or worksheet object to be used. If set to keyword Default the active sheet will be used"
        }, {
            "label": "$vRange",
            "documentation": "Either a range object or an A1 range to be set to a hyperlink"
        }, {
            "label": "$sAddress",
            "documentation": "The address for the specified link. The address can be an E-mail address, an Internet address or a file name. \"\" removes an existing hyperlink"
        }, {
            "label": "$sSubAddress",
            "documentation": "**[optional]** The name of a location within the destination file, such as a bookmark, named range or slide number (default = keyword Default = None)"
        }, {
            "label": "$sScreenTip",
            "documentation": "**[optional]** The text that appears as a ScreenTip when the mouse pointer is positioned over the specified hyperlink (default = keyword Default = Uses value of `$sAddress`)"
        }, {
            "label": "$sTextToDisplay",
            "documentation": "**[optional]** The text to be displayed for the hyperlink (default = keyword Default = None)"
        }]
    },
    "_Excel_RangeRead": {
        "documentation": "Reads the value, formula or displayed text from a cell or range of cells of the specified workbook and worksheet",
        "label": "_Excel_RangeRead ( $oWorkbook [, $vWorksheet = Default [, $vRange = Default [, $iReturn = 1 [, $bForceFunc = False]]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Excel workbook object"
        }, {
            "label": "$vWorksheet",
            "documentation": "**[optional]** Name, index or worksheet object to be read. If set to keyword Default the active sheet will be used (default = keyword Default)"
        }, {
            "label": "$vRange",
            "documentation": "**[optional]** Either a range object or an A1 range. If set to Default all used cells will be processed (default = keyword Default)"
        }, {
            "label": "$iReturn",
            "documentation": "**[optional]** What to return from the specified cell:    \n1 - Value (default)    \n2 - Formula    \n3 - The displayed text    \n4 - Value2. The only difference between Value and Value2 is that the Value2 property doesn’t use the Currency and Date data types"
        }, {
            "label": "$bForceFunc",
            "documentation": "**[optional]** True forces to use the `_ArrayTranspose` function instead of the Excel transpose method (default = False)."
        }]
    },
    "_Excel_RangeReplace": {
        "documentation": "Finds and replaces matching strings in a range or worksheet",
        "label": "_Excel_RangeReplace ( $oWorkbook, $vWorksheet, $vRange, $sSearch, $sReplace [, $iLookAt = $xlPart [, $bMatchcase = False]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Excel workbook object"
        }, {
            "label": "$vWorksheet",
            "documentation": "Name, index or worksheet object to be searched. If set to keyword Default the active sheet will be used"
        }, {
            "label": "$vRange",
            "documentation": "A range object, an A1 range or keyword Default to search all cells in the specified worksheet"
        }, {
            "label": "$sSearch",
            "documentation": "Search string"
        }, {
            "label": "$sReplace",
            "documentation": "Replace string"
        }, {
            "label": "$iLookAt",
            "documentation": "**[optional]** Specifies whether the search text must match as a whole or any part. Can be any of the XLLookAt enumeration (default = $xlPart)"
        }, {
            "label": "$bMatchcase",
            "documentation": "**[optional]** True = case sensitive, False = case insensitive (default = False)"
        }]
    },
    "_Excel_RangeSort": {
        "documentation": "Sorts a cell range",
        "label": "_Excel_RangeSort ( $oWorkbook, $vWorksheet, $vRange, $vKey1 [, $iOrder1 = $xlAscending [, $iSortText = $xlSortNormal [, $iHeader = $xlNo [, $bMatchcase = False [, $iOrientation = $xlSortRows [, $vKey2 = Default [, $iOrder2 = Default [, $vKey3 = Default [, $iOrder3 = Default]]]]]]]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Excel workbook object"
        }, {
            "label": "$vWorksheet",
            "documentation": "Name, index or worksheet object to be sorted. If set to keyword Default the active sheet will be used"
        }, {
            "label": "$vRange",
            "documentation": "A range object, an A1 range or keyword Default to sort the whole worksheet (default = keyword Default)"
        }, {
            "label": "$vKey1",
            "documentation": "Specifies the first sort field, either as an A1 range or range object"
        }, {
            "label": "$iOrder1",
            "documentation": "**[optional]** Determines the sort order. Can be any of the XlSortOrder enumeration (default = $xlAscending)"
        }, {
            "label": "$iSortText",
            "documentation": "**[optional]** Specifies how to sort text in $vKey1, $vKey2 and $vKey3. Can be any of the XlSortDataOption enumeration (default = $xlSortNormal)"
        }, {
            "label": "$iHeader",
            "documentation": "**[optional]** Specifies whether the first row contains header information. Can be any of the XlYesNoGuess enumeration (default = $xlNo)"
        }, {
            "label": "$bMatchCase",
            "documentation": "**[optional]** True to perform a case-sensitive sort, False to perform non-case sensitive sort (default = False)"
        }, {
            "label": "$iOrientation",
            "documentation": "**[optional]** Specifies the sort orientation. Can be any of the XlSortOrientation enumeration (default = $xlSortColumns)"
        }, {
            "label": "$vKey2",
            "documentation": "**[optional]** See $vKey1"
        }, {
            "label": "$iOrder2",
            "documentation": "**[optional]** See $iOrder1"
        }, {
            "label": "$vKey3",
            "documentation": "**[optional]** See $vKey1"
        }, {
            "label": "$iOrder3",
            "documentation": "**[optional]** See $iOrder1"
        }]
    },
    "_Excel_RangeValidate": {
        "documentation": "Adds data validation to the specified range",
        "label": "_Excel_RangeValidate ( $oWorkbook, $vWorksheet, $vRange, $iType, $sFormula1 [, $iOperator = Default [, $sFormula2 = Default [, $bIgnoreBlank = True [, $iAlertStyle = $xlValidAlertStop [, $sErrorMessage = Default [, $sInputMessage = Default]]]]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Excel workbook object"
        }, {
            "label": "$vWorksheet",
            "documentation": "Name, index or worksheet object. If set to keyword Default the active sheet will be used"
        }, {
            "label": "$vRange",
            "documentation": "A range object, an A1 range or keyword Default to validate all cells in the specified worksheet"
        }, {
            "label": "$iType",
            "documentation": "The validation type. Can be any of the XlDVType enumeration"
        }, {
            "label": "$sFormula1",
            "documentation": "The first part of the data validation equation"
        }, {
            "label": "$iOperator",
            "documentation": "**[optional]** The data validation operator. Can be any of the XlFormatConditionOperator enumeration (default = keyword Default)"
        }, {
            "label": "$sFormula2",
            "documentation": "**[optional]** The second part of the data validation when $iOperator is $xlBetween or $xlNotBetween. Otherwise it is ignored (default = keyword Default)"
        }, {
            "label": "$bIgnoreBlank",
            "documentation": "**[optional]** If set to True, cell data is considered valid if the cell is blank (default = True)"
        }, {
            "label": "$iAlertStyle",
            "documentation": "**[optional]** The validation alert style. Can be any of the XlDVAlertStyle enumeration (default = $xlValidAlertStop)"
        }, {
            "label": "$sErrorMessage",
            "documentation": "**[optional]** Message to be displayed in a MsgBox when invalid data has been entered (default = keyword Default)"
        }, {
            "label": "$sInputMessage",
            "documentation": "**[optional]** Message to be displayed in a Tooltip when you begin to enter data (default = keyword Default)"
        }]
    },
    "_Excel_RangeWrite": {
        "documentation": "Writes value(s) or formula(s) to a cell or a cell range on the specified workbook and worksheet",
        "label": "_Excel_RangeWrite ( $oWorkbook, $vWorksheet, $vValue [, $vRange = \"A1\" [, $bValue = True [, $bForceFunc = False]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "Excel workbook object"
        }, {
            "label": "$vWorksheet",
            "documentation": "Name, index or worksheet object to be written to. If set to keyword Default the active sheet will be used"
        }, {
            "label": "$vValue",
            "documentation": "Can be a string, a 1D or 2D zero based array containing the data to be written to the worksheet"
        }, {
            "label": "$vRange",
            "documentation": "**[optional]** Either an A1 range or a range object (default = \"A1\")"
        }, {
            "label": "$bValue",
            "documentation": "**[optional]** If True the $vValue will be written to the value property. If False $vValue will be written to the formula property (default = True)"
        }, {
            "label": "$bForceFunc",
            "documentation": "**[optional]** True forces to use the `_ArrayTranspose` function instead of the Excel transpose method (default = False)."
        }]
    },
    "_Excel_SheetAdd": {
        "documentation": "Adds new sheet(s) to a workbook and sets their names",
        "label": "_Excel_SheetAdd ( $oWorkbook [, $vSheet = Default [, $bBefore = True [, $iCount = 1 [, $sName = \"\"]]]] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "A workbook object"
        }, {
            "label": "$vSheet",
            "documentation": "**[optional]** Object, index or name of the sheet before/after which the new sheet is inserted.    -1 = insert before/after the last worksheet (default = keyword Default = active worksheet)"
        }, {
            "label": "$bBefore",
            "documentation": "**[optional]** The new sheet will be inserted before $vSheet if True, after $vSheet if False (default = True)"
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** Number of worksheets to be inserted (default = 1). Maximum is 255"
        }, {
            "label": "$sName",
            "documentation": "**[optional]** Name(s) of the sheet(s) to create (default = \"\" = follows standard Excel new sheet convention).    When $iCount > 1 multiple names can be provided separated by | (pipe character). Sheets are named from left to right"
        }]
    },
    "_Excel_SheetCopyMove": {
        "documentation": "Copies or moves the specified sheet before or after a specified sheet in the same or a different workbook",
        "label": "_Excel_SheetCopyMove ( $oSourceBook [, $vSourceSheet = Default [, $oTargetBook = $oSourceBook [, $vTargetSheet = 1 [, $bBefore = True [, $bCopy = True]]]]] )",
        "params": [{
            "label": "$oSourceBook",
            "documentation": "Object of the source workbook where the sheet should be copied/moved from"
        }, {
            "label": "$vSourceSheet",
            "documentation": "**[optional]** Name, index or object of the sheet to copy/move (default = keyword Default = active sheet)"
        }, {
            "label": "$oTargetBook",
            "documentation": "**[optional]** Object of the target workbook where the sheet should be copied/moved to (default = keyword Default = $oSourceBook)"
        }, {
            "label": "$vTargetSheet",
            "documentation": "**[optional]** The copied/moved sheet will be placed before or after this sheet (name, index or object) (default = keyword Default = first sheet)"
        }, {
            "label": "$bBefore",
            "documentation": "**[optional]** The copied/moved sheet will be placed before $vTargetSheet if True, after it if False (default = True)"
        }, {
            "label": "$bCopy",
            "documentation": "**[optional]** Copy the specified sheet if True, move the sheet if False (default = True)"
        }]
    },
    "_Excel_SheetDelete": {
        "documentation": "Deletes the specified sheet by object, string name or by number",
        "label": "_Excel_SheetDelete ( $oWorkbook [, $vSheet = Default] )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "A workbook object"
        }, {
            "label": "$vSheet",
            "documentation": "**[optional]** The sheet to delete, either by object, string name or number (default = keyword Default = active Worksheet)"
        }]
    },
    "_Excel_SheetList": {
        "documentation": "Returns a list of all sheets in the specified workbook",
        "label": "_Excel_SheetList ( $oWorkbook )",
        "params": [{
            "label": "$oWorkbook",
            "documentation": "A workbook object"
        }]
    },
    "_FileCountLines": {
        "documentation": "Returns the number of lines in the specified file",
        "label": "_FileCountLines ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Path and filename of the file to be read"
        }]
    },
    "_FileCreate": {
        "documentation": "Creates or zero's out the length of the file specified",
        "label": "_FileCreate ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Path and filename of the file to be created."
        }]
    },
    "_FileListToArray": {
        "documentation": "Lists files and\\or folders in a specified folder (Similar to using Dir with the /B Switch)",
        "label": "_FileListToArray ( $sFilePath [, $sFilter = \"*\" [, $iFlag = $FLTA_FILESFOLDERS [, $bReturnPath = False]]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Folder to generate filelist for."
        }, {
            "label": "$sFilter",
            "documentation": "**[optional]** the filter to use, default is *. (* and ? wildcards accepted - See Remarks)"
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** specifies whether to return files folders or both    $FLTA_FILESFOLDERS (0) = (Default) Return both files and folders    $FLTA_FILES (1) = Return files only    $FLTA_FOLDERS (2) = Return Folders only    Constants are defined in FileConstants.au3"
        }, {
            "label": "$bReturnPath",
            "documentation": "**[optional]** If True the full path is appended to the file\\folder path, otherwise it is relative to the $sFilePath folder. Default is False."
        }]
    },
    "_FileListToArrayRec": {
        "documentation": "Lists files and\\or folders in specified path with optional recursion to defined level and result sorting",
        "label": "_FileListToArrayRec ( $sFilePath [, $sMask = \"*\" [, $iReturn = $FLTAR_FILESFOLDERS [, $iRecur = $FLTAR_NORECUR [, $iSort = $FLTAR_NOSORT [, $iReturnPath = $FLTAR_RELPATH]]]]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Initial path used to generate filelist.If path ends in \\ then folders will be returned with an ending \\If path lengths > 260 chars, prefix path with \"\\\\?\\\" - return paths are not affected"
        }, {
            "label": "$sMask",
            "documentation": "**[optional]** Filter for result. Multiple filters must be separated by \";\"Use \"|\" to separate 3 possible sets of filters: \"Include|Exclude|Exclude_Folders\"    Include = Files/Folders to include (default = \"*\" [all])    Exclude = Files/Folders to exclude (default = \"\" [none])    Exclude_Folders = only used if $iRecur = 1 AND $iReturn <> 2 to exclude defined folders (default = \"\" [none])"
        }, {
            "label": "$iReturn",
            "documentation": "**[optional]** Specifies whether to return files, folders or both and omit those with certain attributes    $FLTAR_FILESFOLDERS (0) - (Default) Return both files and folders    $FLTAR_FILES (1) - Return files only    $FLTAR_FOLDERS (2) - Return Folders onlyAdd one or more of the following to $iReturn to omit files/folders with that attribute    + $FLTAR_NOHIDDEN (4) - Hidden files and folders    + $FLTAR_NOSYSTEM (8) - System files and folders    + $FLTAR_NOLINK (16) - Link/junction folders"
        }, {
            "label": "$iRecur",
            "documentation": "**[optional]** Specifies whether to search recursively in subfolders and to what level    $FLTAR_NORECUR (0) - Do not search in subfolders (Default)    $FLTAR_RECUR (1) - Search in all subfolders (unlimited recursion)Negative integer - Search in subfolders to specified depth"
        }, {
            "label": "$iSort",
            "documentation": "**[optional]** Sort results in alphabetical and depth order    $FLTAR_NOSORT (0) - Not sorted (Default)    $FLTAR_SORT (1) - Sorted    $FLTAR_FASTSORT (2) - Sorted with faster algorithm (assumes files in folder returned sorted - requires NTFS and not guaranteed)"
        }, {
            "label": "$iReturnPath",
            "documentation": "**[optional]** Specifies displayed path of results    $FLTAR_NOPATH (0) - File/folder name only    $FLTAR_RELPATH (1) - Relative to initial path (Default)    $FLTAR_FULLPATH (2) - Full path included"
        }]
    },
    "_FilePrint": {
        "documentation": "Prints a plain text file",
        "label": "_FilePrint ( $sFilePath [, $iShow = @SW_HIDE] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The file to print."
        }, {
            "label": "$iShow",
            "documentation": "**[optional]** The state of the window. (default = @SW_HIDE)"
        }]
    },
    "_FileReadToArray": {
        "documentation": "Reads the specified file into a 1D or 2D array",
        "label": "_FileReadToArray ( $sFilePath, ByRef $vReturn [, $iFlags = $FRTA_COUNT [, $sDelimiter = \"\"]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Path and filename of the file to be read."
        }, {
            "label": "$vReturn",
            "documentation": "Variable to hold returned data - does not need to be an array."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Add multiple values together as required"
        }, {
            "label": "$sDelimiter",
            "documentation": "**[optional]** Used to further split each line of the file - e.g. reading CSV files into a 2D array"
        }]
    },
    "_FileWriteFromArray": {
        "documentation": "Writes an array to a specified file",
        "label": "_FileWriteFromArray ( $sFilePath, Const ByRef $aArray [, $iBase = Default [, $iUBound = Default [, $sDelimiter = \"|\"]]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Path of the file to write to, or a file handle returned by FileOpen()."
        }, {
            "label": "$aArray",
            "documentation": "The array to be written to the specified file."
        }, {
            "label": "$iBase",
            "documentation": "**[optional]** Start array index to read, normally set to 0 or 1. Default is 0."
        }, {
            "label": "$iUbound",
            "documentation": "**[optional]** Set to the last record you want to write to the File. Default is the whole array."
        }, {
            "label": "$sDelimiter",
            "documentation": "**[optional]** Delimiter character(s) for 2-dimension arrays. Default is \"|\"."
        }]
    },
    "_FileWriteLog": {
        "documentation": "Writes current date, time and the specified text to a log file",
        "label": "_FileWriteLog ( $sLogPath, $sLogMsg [, $iFlag = -1] )",
        "params": [{
            "label": "$sLogPath",
            "documentation": "Path of the file to write to, or a file handle returned from FileOpen()."
        }, {
            "label": "$sLogMsg",
            "documentation": "Message to be written to the log file"
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** Flag that defines if $sLogMsg will be written to the end of file, or to the beginning.If $iFlag = -1 (default) $sLogMsg will be written to the end of file.Otherwise $sLogMsg will be written to beginning of file."
        }]
    },
    "_FileWriteToLine": {
        "documentation": "Writes text to a specific line in a file",
        "label": "_FileWriteToLine ( $sFilePath, $iLine, $sText [, $bOverWrite = False] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The file to write to"
        }, {
            "label": "$iLine",
            "documentation": "The line number to write to"
        }, {
            "label": "$sText",
            "documentation": "The text to write"
        }, {
            "label": "$bOverWrite",
            "documentation": "**[optional]**    True - will overwrite the old line    False - (default) will not overwrite"
        }]
    },
    "_FTP_Close": {
        "documentation": "Closes the _FTP_Open or _FTP_Connect session",
        "label": "_FTP_Close ( $hSession )",
        "params": [{
            "label": "$hSession",
            "documentation": "as returned by _FTP_Open() or _FTP_Connect()"
        }]
    },
    "_FTP_Command": {
        "documentation": "Sends a command to an FTP server",
        "label": "_FTP_Command ( $hFTPSession, $sFTPCommand [, $iFlags = $FTP_TRANSFER_TYPE_ASCII [, $iExpectResponse = 0 [, $iContext = 0]]] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()"
        }, {
            "label": "$sFTPCommand",
            "documentation": "Command string to send to FTP Server"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** $FTP_TRANSFER_TYPE_ASCII or $FTP_TRANSFER_TYPE_BINARY"
        }, {
            "label": "$iExpectResponse",
            "documentation": "**[optional]** Data socket for response in Async mode. See remarks."
        }, {
            "label": "$iContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_Connect": {
        "documentation": "Connects to an FTP server",
        "label": "_FTP_Connect ( $hInternetSession, $sServerName, $sUsername, $sPassword [, $iPassive = 0 [, $iServerPort = 0 [, $iService = $INTERNET_SERVICE_FTP [, $iFlags = 0 [, $fuContext = 0]]]]] )",
        "params": [{
            "label": "$hInternetSession",
            "documentation": "as returned by _FTP_Open()"
        }, {
            "label": "$sServerName",
            "documentation": "Server name/ip."
        }, {
            "label": "$sUsername",
            "documentation": "Username."
        }, {
            "label": "$sPassword",
            "documentation": "Password."
        }, {
            "label": "$iPassive",
            "documentation": "**[optional]** Passive mode."
        }, {
            "label": "$iServerPort",
            "documentation": "**[optional]** Server port ( 0 is default (21) )"
        }, {
            "label": "$iService",
            "documentation": "**[optional]** This can be one of the following constant values:    $INTERNET_SERVICE_FTP - FTP service.    $INTERNET_SERVICE_GOPHER - Gopher service. Available only on Windows XP, Windows Server 2003 R2 or earlier.    $INTERNET_SERVICE_HTTP - HTTP service."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Special flags.    $INTERNET_FLAG_PASSIVE    $INTERNET_FLAG_TRANSFER_ASCII    $INTERNET_FLAG_TRANSFER_BINARY"
        }, {
            "label": "$fuContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_DecodeInternetStatus": {
        "documentation": "Decode a received Internet Status",
        "label": "_FTP_DecodeInternetStatus ( $iInternetStatus )",
        "params": [{
            "label": "$iInternetStatus",
            "documentation": "Internet status"
        }]
    },
    "_FTP_DirCreate": {
        "documentation": "Makes an Directory on an FTP server",
        "label": "_FTP_DirCreate ( $hFTPSession, $sRemote )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sRemote",
            "documentation": "The Directory to Create."
        }]
    },
    "_FTP_DirDelete": {
        "documentation": "Delete's an Directory on an FTP server",
        "label": "_FTP_DirDelete ( $hFTPSession, $sRemote )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sRemote",
            "documentation": "The Directory to deleted."
        }]
    },
    "_FTP_DirGetCurrent": {
        "documentation": "Get Current Directory on an FTP server",
        "label": "_FTP_DirGetCurrent ( $hFTPSession )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }]
    },
    "_FTP_DirPutContents": {
        "documentation": "Puts an folder on an FTP server. Recursivley if selected",
        "label": "_FTP_DirPutContents ( $hFTPSession, $sLocalFolder, $sRemoteFolder, $bRecursivePut [, $iContext = 0] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sLocalFolder",
            "documentation": "The local folder i.e. \"c:\\temp\"."
        }, {
            "label": "$sRemoteFolder",
            "documentation": "The remote folder i.e. '/website/home'."
        }, {
            "label": "$bRecursivePut",
            "documentation": "Recurse through sub-dirs. 0=Non recursive, 1=Recursive"
        }, {
            "label": "$iContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_DirSetCurrent": {
        "documentation": "Set Current Directory on an FTP server",
        "label": "_FTP_DirSetCurrent ( $hFTPSession, $sRemote )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sRemote",
            "documentation": "The Directory to be set."
        }]
    },
    "_FTP_FileClose": {
        "documentation": "Closes the Handle returned by _FTP_FileOpen",
        "label": "_FTP_FileClose ( $hFTPFile )",
        "params": [{
            "label": "$hFTPFile",
            "documentation": "as returned by _FTP_FileOpen()"
        }]
    },
    "_FTP_FileDelete": {
        "documentation": "Delete an file from an FTP server",
        "label": "_FTP_FileDelete ( $hFTPSession, $sRemoteFile )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()"
        }, {
            "label": "$sRemoteFile",
            "documentation": "The remote Location for the file."
        }]
    },
    "_FTP_FileGet": {
        "documentation": "Get file from a FTP server",
        "label": "_FTP_FileGet ( $hFTPSession, $sRemoteFile, $sLocalFile [, $bFailIfExists = False [, $iFlagsAndAttributes = 0 [, $iFlags = $FTP_TRANSFER_TYPE_UNKNOWN [, $iContext = 0]]]] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()"
        }, {
            "label": "$sRemoteFile",
            "documentation": "The remote Location for the file."
        }, {
            "label": "$sLocalFile",
            "documentation": "The local file."
        }, {
            "label": "$bFailIfExists",
            "documentation": "**[optional]** True: do not overwrite existing (default = False)."
        }, {
            "label": "$iFlagsAndAttributes",
            "documentation": "**[optional]** File attributes for the new file."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** as in _FTP_FileOpen()."
        }, {
            "label": "$iContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_FileGetSize": {
        "documentation": "Gets filesize of a file on the FTP server",
        "label": "_FTP_FileGetSize ( $hFTPSession, $sFileName )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sFileName",
            "documentation": "The file name."
        }]
    },
    "_FTP_FileOpen": {
        "documentation": "Initiates access to a remote file on an FTP server for reading or writing",
        "label": "_FTP_FileOpen ( $hConnect, $sFileName [, $iAccess = $GENERIC_READ [, $iFlags = $INTERNET_FLAG_TRANSFER_BINARY [, $iContext = 0]]] )",
        "params": [{
            "label": "$hConnect",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sFileName",
            "documentation": "String of the ftp file to open."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The Local attribute (default $GENERIC_READ)."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Specify the conditions under which the transfers occur. The application should select one transfer type and any of the flags that indicate how the caching of the file will be controlled.The transfer type can be one of the following values:    $FTP_TRANSFER_TYPE_ASCII - Transfers the file using FTP's ASCII (Type A) transfer method. Control and formatting information is converted to local equivalents.    $FTP_TRANSFER_TYPE_BINARY - Transfers the file using FTP's Image (Type I) transfer method. The file is transferred exactly as it exists with no changes. This is the default transfer method.    $FTP_TRANSFER_TYPE_UNKNOWN - Defaults to $FTP_TRANSFER_TYPE_BINARY.    $INTERNET_FLAG_TRANSFER_ASCII - Transfers the file as ASCII.    $INTERNET_FLAG_TRANSFER_BINARY - Transfers the file as binary.The following values are used to control the caching of the file. The application can use one or more of these values:    $INTERNET_FLAG_HYPERLINK - Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.    $INTERNET_FLAG_NEED_FILE - Causes a temporary file to be created if the file cannot be cached.    $INTERNET_FLAG_RELOAD - Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.    $INTERNET_FLAG_RESYNCHRONIZE - Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP and Gopher resources are reloaded."
        }, {
            "label": "$iContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_FilePut": {
        "documentation": "Puts an file on an FTP server",
        "label": "_FTP_FilePut ( $hFTPSession, $sLocalFile, $sRemoteFile [, $iFlags = 0 [, $iContext = 0]] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()"
        }, {
            "label": "$sLocalFile",
            "documentation": "The local file."
        }, {
            "label": "$sRemoteFile",
            "documentation": "The remote Location for the file."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Specify the conditions under which the transfers occur. The application should select one transfer type and any of the flags that indicate how the caching of the file will be controlled.The transfer type can be one of the following values:    $FTP_TRANSFER_TYPE_ASCII - Transfers the file using FTP's ASCII (Type A) transfer method. Control and formatting information is converted to local equivalents.    $FTP_TRANSFER_TYPE_BINARY - Transfers the file using FTP's Image (Type I) transfer method. The file is transferred exactly as it exists with no changes. This is the default transfer method.    $FTP_TRANSFER_TYPE_UNKNOWN - Defaults to $FTP_TRANSFER_TYPE_BINARY.    $INTERNET_FLAG_TRANSFER_ASCII - Transfers the file as ASCII.    $INTERNET_FLAG_TRANSFER_BINARY - Transfers the file as binary.The following values are used to control the caching of the file. The application can use one or more of these values:    $INTERNET_FLAG_HYPERLINK - Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.    $INTERNET_FLAG_NEED_FILE - Causes a temporary file to be created if the file cannot be cached.    $INTERNET_FLAG_RELOAD - Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.    $INTERNET_FLAG_RESYNCHRONIZE - Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP and Gopher resources are reloaded."
        }, {
            "label": "$iContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_FileRead": {
        "documentation": "Reads data from a handle opened by _FTP_FileOpen()",
        "label": "_FTP_FileRead ( $hFTPFile, $iNumberOfBytesToRead )",
        "params": [{
            "label": "$hFTPFile",
            "documentation": "Handle returned by _FTP_FileOpen() to the ftp file."
        }, {
            "label": "$iNumberOfBytesToRead",
            "documentation": "Number of bytes to read."
        }]
    },
    "_FTP_FileRename": {
        "documentation": "Renames an file on an FTP server",
        "label": "_FTP_FileRename ( $hFTPSession, $sExisting, $sNew )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sExisting",
            "documentation": "The old file name."
        }, {
            "label": "$sNew",
            "documentation": "The new file name."
        }]
    },
    "_FTP_FileTimeLoHiToStr": {
        "documentation": "Converts filetime Loword and Hiword to a string",
        "label": "_FTP_FileTimeLoHiToStr ( $iLoDWORD, $iHiDWORD [, $bFmt = 0] )",
        "params": [{
            "label": "$iLoDWORD",
            "documentation": "FileTime Low"
        }, {
            "label": "$iHiDWORD",
            "documentation": "File Time Hi"
        }, {
            "label": "$bFmt",
            "documentation": "**[optional]**    0 returns mm/dd/yyyy hh:mm:ss (Default)    1 returns yyyy/mm/dd hh:mm:ss"
        }]
    },
    "_FTP_FindFileClose": {
        "documentation": "Delete FindFile Handle",
        "label": "_FTP_FindFileClose ( $hFTPFind )",
        "params": [{
            "label": "$hFTPFind",
            "documentation": "as returned by _FTP_FindFileFirst()"
        }]
    },
    "_FTP_FindFileFirst": {
        "documentation": "Find First File on an FTP server",
        "label": "_FTP_FindFileFirst ( $hFTPSession, $sRemotePath, ByRef $hFTPFind [, $iFlags = 0 [, $iContext = 0]] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sRemotePath",
            "documentation": "path to be used when searching the file."
        }, {
            "label": "$hFTPFind",
            "documentation": "returns Handle to be used in _FTP_FindFileNext() or _FTP_FindFileClose()."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** $iFlags can be a combination of :    $INTERNET_FLAG_HYPERLINK    $INTERNET_FLAG_NEED_FILE    $INTERNET_FLAG_NO_CACHE_WRITE    $INTERNET_FLAG_RELOAD    $INTERNET_FLAG_RESYNCHRONIZE"
        }, {
            "label": "$iContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_FindFileNext": {
        "documentation": "Find Next File on an FTP server",
        "label": "_FTP_FindFileNext ( $hFTPFind )",
        "params": [{
            "label": "$hFTPFind",
            "documentation": "Handle as returned by _FTP_FindFileFirst()."
        }]
    },
    "_FTP_GetLastResponseInfo": {
        "documentation": "Retrieves the last error description or server response on the thread calling this function",
        "label": "_FTP_GetLastResponseInfo ( ByRef $iError, ByRef $sMessage )",
        "params": [{
            "label": "$iError",
            "documentation": "returns an error message pertaining to the operation that failed."
        }, {
            "label": "$sMessage",
            "documentation": "returns the error text."
        }]
    },
    "_FTP_ListToArray": {
        "documentation": "Get Filenames, Directories or Both of current remote directory",
        "label": "_FTP_ListToArray ( $hFTPSession [, $iReturnType = 0 [, $iFlags = $INTERNET_FLAG_NO_CACHE_WRITE [, $iContext = 0]]] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$iReturntype",
            "documentation": "**[optional]** 0 = Both Files and Directories, 1 = Directories, 2 = Files."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** default = $INTERNET_FLAG_NO_CACHE_WRITE. See _FTP_FindFileFirst()."
        }, {
            "label": "$iContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_ListToArray2D": {
        "documentation": "Get Filenames and filesizes of current remote directory",
        "label": "_FTP_ListToArray2D ( $hFTPSession [, $iReturnType = 0 [, $iFlags = $INTERNET_FLAG_NO_CACHE_WRITE [, $iContext = 0]]] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$iReturntype",
            "documentation": "**[optional]** 0 = Both Files and Directories, 1 = Directories, 2 = Files."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** default = $INTERNET_FLAG_NO_CACHE_WRITE. See _FTP_FindFileFirst()."
        }, {
            "label": "$iContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_ListToArrayEx": {
        "documentation": "Get names, sizes, attributes and times of files/dir of current remote directory",
        "label": "_FTP_ListToArrayEx ( $hFTPSession [, $iReturnType = 0 [, $iFlags = $INTERNET_FLAG_NO_CACHE_WRITE [, $iFmt = 1 [, $iContext = 0]]]] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$iReturntype",
            "documentation": "**[optional]** 0 = Both Files and Directories, 1 = Directories, 2 = Files."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** default = $INTERNET_FLAG_NO_CACHE_WRITE. See _FTP_FindFileFirst()."
        }, {
            "label": "$iFmt",
            "documentation": "**[optional]** type on the date strings:    1 = yyyy/mm/dd    0 = mm/dd/yyyy"
        }, {
            "label": "$iContext",
            "documentation": "**[optional]** A variable that contains the application-defined value that associates this search with any application data.This is only used if the application has already called _FTP_SetStatusCallback() to set up a status callback function."
        }]
    },
    "_FTP_Open": {
        "documentation": "Opens an FTP session",
        "label": "_FTP_Open ( $sAgent [, $iAccessType = $INTERNET_OPEN_TYPE_DIRECT [, $sProxyName = '' [, $sProxyBypass = '' [, $iFlags = 0]]]] )",
        "params": [{
            "label": "$sAgent",
            "documentation": "Random name. ( like \"myftp\" )"
        }, {
            "label": "$iAccessType",
            "documentation": "**[optional]** Set if proxy is used:    $INTERNET_OPEN_TYPE_DIRECT -> no proxy (Default)    $INTERNET_OPEN_TYPE_PRECONFIG -> Retrieves the proxy or direct configuration from the registry.    $INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY -> Retrieves the proxy or direct configuration from the registry and prevents the use of a startup Microsoft JScript or Internet Setup (INS) file.    $INTERNET_OPEN_TYPE_PROXY -> Passes requests to the proxy unless a proxy bypass list is supplied and the name to be resolved bypasses the proxy. Then no proxy is used."
        }, {
            "label": "$sProxyName",
            "documentation": "**[optional]** ProxyName."
        }, {
            "label": "$sProxyBypass",
            "documentation": "**[optional]** ProxyByPasses's."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]**    $INTERNET_FLAG_ASYNC -> Makes only asynchronous requests on handles descended from the handle returned from this function.    $INTERNET_FLAG_FROM_CACHE -> Does not make network requests. All entities are returned from the cache. If the requested item is not in the cache, a suitable error, such as ERROR_FILE_NOT_FOUND, is returned."
        }]
    },
    "_FTP_ProgressDownload": {
        "documentation": "Downloads a file in Binary Mode and shows a Progress window or by Calling a User defined Function",
        "label": "_FTP_ProgressDownload ( $hFTPSession, $sLocalFile, $sRemoteFile [, $hFunctionToCall = 0] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sLocalFile",
            "documentation": "The local file to create."
        }, {
            "label": "$sRemoteFile",
            "documentation": "The remote source file."
        }, {
            "label": "$hFunctionToCall",
            "documentation": "**[optional]** A variable assigned to the user defined function to update a progress bar or react on user interation, such as aborting or exiting the process. Default = none. See remarks."
        }]
    },
    "_FTP_ProgressUpload": {
        "documentation": "Uploads a file in Binary Mode and shows a Progress window or by Calling a User defined Function",
        "label": "_FTP_ProgressUpload ( $hFTPSession, $sLocalFile, $sRemoteFile [, $hFunctionToCall = 0] )",
        "params": [{
            "label": "$hFTPSession",
            "documentation": "as returned by _FTP_Connect()."
        }, {
            "label": "$sLocalFile",
            "documentation": "The local file to create."
        }, {
            "label": "$sRemoteFile",
            "documentation": "The remote source file."
        }, {
            "label": "$hFunctionToCall",
            "documentation": "**[optional]** A variable assigned to the user defined function to update a progress bar or react on user interation, such as aborting or exiting the process. Default = none. See remarks."
        }]
    },
    "_FTP_SetStatusCallback": {
        "documentation": "Registers callback function that WinINet functions can call as progress is made during an operation",
        "label": "_FTP_SetStatusCallback ( $hInternetSession, $sFunctionName )",
        "params": [{
            "label": "$hInternetSession",
            "documentation": "as returned by _FTP_Open()"
        }, {
            "label": "$sFunctionName",
            "documentation": "the name of the User Defined Function to call."
        }]
    },
    "_GDIPlus_ArrowCapCreate": {
        "documentation": "Creates an adjustable arrow line cap with the specified height and width",
        "label": "_GDIPlus_ArrowCapCreate ( $fHeight, $fWidth [, $bFilled = True] )",
        "params": [{
            "label": "$fHeight",
            "documentation": "Specifies the length, in units, of the arrow from its base to its point"
        }, {
            "label": "$fWidth",
            "documentation": "Specifies the distance, in units, between the corners of the base of the arrow"
        }, {
            "label": "$bFilled",
            "documentation": "**[optional]** Fill flag:    True - Arrow will be filled    False - Arrow will not be filled"
        }]
    },
    "_GDIPlus_ArrowCapDispose": {
        "documentation": "Release an adjustable arrow line cap object",
        "label": "_GDIPlus_ArrowCapDispose ( $hCap )",
        "params": [{
            "label": "$hCap",
            "documentation": "Handle to an adjustable arrow line cap object"
        }]
    },
    "_GDIPlus_ArrowCapGetFillState": {
        "documentation": "Determines whether the arrow cap is filled",
        "label": "_GDIPlus_ArrowCapGetFillState ( $hArrowCap )",
        "params": [{
            "label": "$hArrowCap",
            "documentation": "Handle to a ArrowCap object"
        }]
    },
    "_GDIPlus_ArrowCapGetHeight": {
        "documentation": "Gets the height of the arrow cap",
        "label": "_GDIPlus_ArrowCapGetHeight ( $hArrowCap )",
        "params": [{
            "label": "$hArrowCap",
            "documentation": "Handle to a ArrowCap object"
        }]
    },
    "_GDIPlus_ArrowCapGetMiddleInset": {
        "documentation": "Gets the value of the inset",
        "label": "_GDIPlus_ArrowCapGetMiddleInset ( $hArrowCap )",
        "params": [{
            "label": "$hArrowCap",
            "documentation": "Handle to a ArrowCap object"
        }]
    },
    "_GDIPlus_ArrowCapGetWidth": {
        "documentation": "Gets the width of the arrow cap",
        "label": "_GDIPlus_ArrowCapGetWidth ( $hArrowCap )",
        "params": [{
            "label": "$hArrowCap",
            "documentation": "Handle to a ArrowCap object"
        }]
    },
    "_GDIPlus_ArrowCapSetFillState": {
        "documentation": "Sets whether the arrow cap is filled",
        "label": "_GDIPlus_ArrowCapSetFillState ( $hArrowCap [, $bFilled = True] )",
        "params": [{
            "label": "$hArrowCap",
            "documentation": "Handle to a ArrowCap object"
        }, {
            "label": "$bFilled",
            "documentation": "**[optional]** Fill state:    True - Arrow cap is filled    False - Arrow cap is not filled"
        }]
    },
    "_GDIPlus_ArrowCapSetHeight": {
        "documentation": "Sets the height of the arrow cap",
        "label": "_GDIPlus_ArrowCapSetHeight ( $hArrowCap, $fHeight )",
        "params": [{
            "label": "$hArrowCap",
            "documentation": "Handle to a ArrowCap object"
        }, {
            "label": "$fHeight",
            "documentation": "Specifies the length, in units, of the arrow from its base to its point"
        }]
    },
    "_GDIPlus_ArrowCapSetMiddleInset": {
        "documentation": "Gets the value of the inset",
        "label": "_GDIPlus_ArrowCapSetMiddleInset ( $hArrowCap, $fInset )",
        "params": [{
            "label": "$hArrowCap",
            "documentation": "Handle to a ArrowCap object"
        }, {
            "label": "$fInset",
            "documentation": "Inset value"
        }]
    },
    "_GDIPlus_ArrowCapSetWidth": {
        "documentation": "Sets the width of the arrow cap",
        "label": "_GDIPlus_ArrowCapSetWidth ( $hArrowCap, $fWidth )",
        "params": [{
            "label": "$hArrowCap",
            "documentation": "Handle to a ArrowCap object"
        }, {
            "label": "$fWidth",
            "documentation": "Specifies the width, in units, of the arrow between the endpoints of the base of the arrow"
        }]
    },
    "_GDIPlus_BitmapApplyEffect": {
        "documentation": "Alters a Bitmap by applying a specified effect",
        "label": "_GDIPlus_BitmapApplyEffect ( $hBitmap, $hEffect [, $tRECT = Null] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a Bitmap to which the effect is applied."
        }, {
            "label": "$hEffect",
            "documentation": "Handle to an Effect to be applied."
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** a $tagRECT structure that specifies the portion of the input bitmap to which the effect is applied."
        }]
    },
    "_GDIPlus_BitmapApplyEffectEx": {
        "documentation": "Alters a Bitmap by applying a specified effect",
        "label": "_GDIPlus_BitmapApplyEffectEx ( $hBitmap, $hEffect [, $iX = 0 [, $iY = 0 [, $iW = 0 [, $iH = 0]]]] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a Bitmap to which the effect is applied."
        }, {
            "label": "$hEffect",
            "documentation": "Handle to an Effect to be applied."
        }, {
            "label": "$iX",
            "documentation": "**[optional]** The X coordinate of the upper left corner of the portion to which the effect is applied."
        }, {
            "label": "$iY",
            "documentation": "**[optional]** The Y coordinate of the upper left corner of the portion to which the effect is applied."
        }, {
            "label": "$iW",
            "documentation": "**[optional]** Specifies the width of the portion to which the effect is applied."
        }, {
            "label": "$iH",
            "documentation": "**[optional]** Specifies the height of the portion to which the effect is applied."
        }]
    },
    "_GDIPlus_BitmapCloneArea": {
        "documentation": "Create a clone of a Bitmap object from the coordinates and format specified",
        "label": "_GDIPlus_BitmapCloneArea ( $hBitmap, $nLeft, $nTop, $nWidth, $nHeight [, $iFormat = 0x00021808] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a Bitmap object"
        }, {
            "label": "$nLeft",
            "documentation": "X coordinate of upper left corner of the rectangle to copy"
        }, {
            "label": "$nTop",
            "documentation": "Y coordinate of upper left corner of the rectangle to copy"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle that specifies the portion of this bitmap to copy"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle that specifies the portion of this bitmap to copy"
        }, {
            "label": "$iFormat",
            "documentation": "**[optional]** Pixel format for the new bitmap:    $GDIP_PXF01INDEXED = 1 bit per pixel, indexed    $GDIP_PXF04INDEXED = 4 bits per pixel, indexed    $GDIP_PXF08INDEXED = 8 bits per pixel, indexed    $GDIP_PXF16GRAYSCALE = 16 bits per pixel, grayscale    $GDIP_PXF16RGB555 = 16 bits per pixel; 5 bits for each RGB component    $GDIP_PXF16RGB565 = 16 bits per pixel; 5 bits for red, 6 bits for green and 5 bits blue    $GDIP_PXF16ARGB1555 = 16 bits per pixel; 1 bit for alpha and 5 bits for each RGB component    $GDIP_PXF24RGB = 24 bits per pixel; 8 bits for each RGB component    $GDIP_PXF32RGB = 32 bits per pixel; 8 bits for each RGB component. No alpha component.    $GDIP_PXF32ARGB = 32 bits per pixel; 8 bits for each RGB and alpha component    $GDIP_PXF32PARGB = 32 bits per pixel; 8 bits for each RGB and alpha component, pre-multiplied    $GDIP_PXF48RGB = 48 bits per pixel; 16 bits for each RGB component    $GDIP_PXF64ARGB = 64 bits per pixel; 16 bits for each RGB and alpha component    $GDIP_PXF64PARGB = 64 bits per pixel; 16 bits for each RGB and alpha component, pre-multiplied"
        }]
    },
    "_GDIPlus_BitmapConvertFormat": {
        "documentation": "Converts a bitmap to a specified pixel format",
        "label": "_GDIPlus_BitmapConvertFormat ( $hBitmap, $iPixelFormat, $iDitherType, $iPaletteType, $tPalette [, $fAlphaThresholdPercent = 0.0] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a Bitmap to which the effect is applied."
        }, {
            "label": "$iPixelFormat",
            "documentation": "Pixel format constant that specifies the new pixel format ($GDIP_PXF*)."
        }, {
            "label": "$iDitherType",
            "documentation": "DitherType constant that specifies the dithering algorithm ($GDIP_DitherType*)."
        }, {
            "label": "$iPaletteType",
            "documentation": "PaletteType constant that specifies a standard palette to be used for dithering ($GDIP_PaletteType*)."
        }, {
            "label": "$tPalette",
            "documentation": "Structure that specifies the palette whose indexes are stored in the pixel data of the converted bitmap."
        }, {
            "label": "$fAlphaThresholdPercent",
            "documentation": "**[optional]** Real number in the range 0.0 through 100.0 that specifies which pixels in the source bitmap will map to the transparent color in the converted bitmap."
        }]
    },
    "_GDIPlus_BitmapCreateApplyEffect": {
        "documentation": "Creates a new Bitmap by applying a specified effect to an existing Bitmap",
        "label": "_GDIPlus_BitmapCreateApplyEffect ( $hBitmap, $hEffect [, $tRECT = Null [, $tOutRECT = Null]] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a Bitmap to which the effect is applied."
        }, {
            "label": "$hEffect",
            "documentation": "Handle to an Effect to be applied."
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** a $tagRECT structure that specifies the portion of the input bitmap that is used."
        }, {
            "label": "$tOutRECT",
            "documentation": "**[optional]** a $tagRECT structure that receives the portion of the input bitmap that was used."
        }]
    },
    "_GDIPlus_BitmapCreateApplyEffectEx": {
        "documentation": "Creates a new Bitmap by applying a specified effect to an existing Bitmap",
        "label": "_GDIPlus_BitmapCreateApplyEffectEx ( $hBitmap, $hEffect [, $iX = 0 [, $iY = 0 [, $iW = 0 [, $iH = 0]]]] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a Bitmap to which the effect is applied."
        }, {
            "label": "$hEffect",
            "documentation": "Handle to an Effect to be applied."
        }, {
            "label": "$iX",
            "documentation": "**[optional]** The X coordinate of the upper left corner of the portion to which the effect is applied."
        }, {
            "label": "$iY",
            "documentation": "**[optional]** The Y coordinate of the upper left corner of the portion to which the effect is applied."
        }, {
            "label": "$iW",
            "documentation": "**[optional]** Specifies the width of the portion to which the effect is applied."
        }, {
            "label": "$iH",
            "documentation": "**[optional]** Specifies the height of the portion to which the effect is applied."
        }]
    },
    "_GDIPlus_BitmapCreateDIBFromBitmap": {
        "documentation": "Creates a DIB Section",
        "label": "_GDIPlus_BitmapCreateDIBFromBitmap ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "A handle to a GDI+ bitmap"
        }]
    },
    "_GDIPlus_BitmapCreateFromFile": {
        "documentation": "Create a Bitmap object from file",
        "label": "_GDIPlus_BitmapCreateFromFile ( $sFileName )",
        "params": [{
            "label": "$sFileName",
            "documentation": "Path to a bitmap file"
        }]
    },
    "_GDIPlus_BitmapCreateFromGraphics": {
        "documentation": "Creates a Bitmap object based on a Graphics object, a width, and a height",
        "label": "_GDIPlus_BitmapCreateFromGraphics ( $iWidth, $iHeight, $hGraphics )",
        "params": [{
            "label": "$iWidth",
            "documentation": "Specifies the width, in pixels, of the bitmap"
        }, {
            "label": "$iHeight",
            "documentation": "Specifies the height, in pixels, of the bitmap"
        }, {
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }]
    },
    "_GDIPlus_BitmapCreateFromHBITMAP": {
        "documentation": "Create a Bitmap object from a bitmap handle",
        "label": "_GDIPlus_BitmapCreateFromHBITMAP ( $hBitmap [, $hPal = 0] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a HBITMAP"
        }, {
            "label": "$hPal",
            "documentation": "**[optional]** Handle to a HPALETTE"
        }]
    },
    "_GDIPlus_BitmapCreateFromHICON": {
        "documentation": "Creates a Bitmap object based on an icon",
        "label": "_GDIPlus_BitmapCreateFromHICON ( $hIcon )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to an icon"
        }]
    },
    "_GDIPlus_BitmapCreateFromHICON32": {
        "documentation": "Creates a Bitmap object based on a 32bit icon",
        "label": "_GDIPlus_BitmapCreateFromHICON32 ( $hIcon )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to an icon"
        }]
    },
    "_GDIPlus_BitmapCreateFromMemory": {
        "documentation": "Loads an image (JPG, BMP, PNG, etc.) which is saved as a binary string and converts it to a bitmap (GDI+) or hbitmap (GDI)",
        "label": "_GDIPlus_BitmapCreateFromMemory ( $dImage [, $bHBITMAP = False] )",
        "params": [{
            "label": "$dImage",
            "documentation": "The binary string which contains any valid image which is supported by GDI+"
        }, {
            "label": "$bHBITMAP",
            "documentation": "**[optional]** If False a bitmap will be created, if True a hbitmap (GDI) will be created"
        }]
    },
    "_GDIPlus_BitmapCreateFromResource": {
        "documentation": "Creates a Bitmap object based on an icon",
        "label": "_GDIPlus_BitmapCreateFromResource ( $hInst, $vResourceName )",
        "params": [{
            "label": "$hInst",
            "documentation": "Handle to an instance of a module whose executable file contains a bitmap resource"
        }, {
            "label": "$vResourceName",
            "documentation": "The resource name string or identifier"
        }]
    },
    "_GDIPlus_BitmapCreateFromScan0": {
        "documentation": "Creates a Bitmap object based on an array of bytes along with size and format information",
        "label": "_GDIPlus_BitmapCreateFromScan0 ( $iWidth, $iHeight [, $iPixelFormat = $GDIP_PXF32ARGB [, $iStride = 0 [, $pScan0 = 0]]] )",
        "params": [{
            "label": "$iWidth",
            "documentation": "The bitmap width, in pixels."
        }, {
            "label": "$iHeight",
            "documentation": "The bitmap height, in pixels."
        }, {
            "label": "$iPixelFormat",
            "documentation": "**[optional]** Specifies the format of the pixel data.    $GDIP_PXF01INDEXED = 1 bit per pixel, indexed    $GDIP_PXF04INDEXED = 4 bits per pixel, indexed    $GDIP_PXF08INDEXED = 8 bits per pixel, indexed    $GDIP_PXF16GRAYSCALE = 16 bits per pixel, grayscale    $GDIP_PXF16RGB555 = 16 bits per pixel; 5 bits for each RGB component    $GDIP_PXF16RGB565 = 16 bits per pixel; 5 bits for red, 6 bits for green and 5 bits blue    $GDIP_PXF16ARGB1555 = 16 bits per pixel; 1 bit for alpha and 5 bits for each RGB component    $GDIP_PXF24RGB = 24 bits per pixel; 8 bits for each RGB component    $GDIP_PXF32RGB = 32 bits per pixel; 8 bits for each RGB component. No alpha component.    $GDIP_PXF32ARGB = 32 bits per pixel; 8 bits for each RGB and alpha component    $GDIP_PXF32PARGB = 32 bits per pixel; 8 bits for each RGB and alpha component, pre-multiplied"
        }, {
            "label": "$iStride",
            "documentation": "**[optional]** Integer that specifies the byte offset between the beginning of one scan line and the next."
        }, {
            "label": "$pScan0",
            "documentation": "**[optional]** Pointer to an array of bytes that contains the pixel data."
        }]
    },
    "_GDIPlus_BitmapCreateFromStream": {
        "documentation": "Creates a Bitmap object based on an IStream COM interface",
        "label": "_GDIPlus_BitmapCreateFromStream ( $pStream )",
        "params": [{
            "label": "$pStream",
            "documentation": "Pointer to an IStream COM interface"
        }]
    },
    "_GDIPlus_BitmapCreateHBITMAPFromBitmap": {
        "documentation": "Create a handle to a bitmap from a bitmap object",
        "label": "_GDIPlus_BitmapCreateHBITMAPFromBitmap ( $hBitmap [, $iARGB = 0xFF000000] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a bitmap object"
        }, {
            "label": "$iARGB",
            "documentation": "**[optional]** Color object that specifies the background color"
        }]
    },
    "_GDIPlus_BitmapDispose": {
        "documentation": "Release a bitmap object",
        "label": "_GDIPlus_BitmapDispose ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a bitmap object"
        }]
    },
    "_GDIPlus_BitmapGetHistogram": {
        "documentation": "Returns one or more histograms for specified color channels of the specified Bitmap",
        "label": "_GDIPlus_BitmapGetHistogram ( $hBitmap, $iHistogramFormat, $iHistogramSize, $tChannel_0 [, $tChannel_1 = 0 [, $tChannel_2 = 0 [, $tChannel_3 = 0]]] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a Bitmap to which the effect is applied."
        }, {
            "label": "$iHistogramFormat",
            "documentation": "HistogramFormat constant that specifies the channels for which histograms will be created ($GDIP_HistogramFormat*)."
        }, {
            "label": "$iHistogramSize",
            "documentation": "Number of elements in each of the arrays pointed to by $tChannel_0, $tChannel_1, $tChannel_2, and $tChannel_3?"
        }, {
            "label": "$tChannel_0",
            "documentation": "A DLL struct array of UINTs that receives the first histogram."
        }, {
            "label": "$tChannel_1",
            "documentation": "**[optional]** A DLL struct array of UINTs that receives the second histogram if there is a second histogram.Pass NULL if there is no second histogram."
        }, {
            "label": "$tChannel_2",
            "documentation": "**[optional]** A DLL struct array of UINTs that receives the third histogram if there is a third histogram.Pass NULL if there is no third histogram."
        }, {
            "label": "$tChannel_3",
            "documentation": "**[optional]** A DLL struct array of UINTs that receives the fourth histogram if there is a fourth histogram.Pass NULL if there is no fourth histogram."
        }]
    },
    "_GDIPlus_BitmapGetHistogramEx": {
        "documentation": "Returns histograms for the Bitmap´s color channels: Red, Green, Blue, Alpha and Grey",
        "label": "_GDIPlus_BitmapGetHistogramEx ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a Bitmap to which the effect is applied."
        }]
    },
    "_GDIPlus_BitmapGetHistogramSize": {
        "documentation": "Returns the number of elements for allocation by _GDIPlus_BitmapGetHistogramEx()",
        "label": "_GDIPlus_BitmapGetHistogramSize ( $iFormat )",
        "params": [{
            "label": "$iFormat",
            "documentation": "HistogramFormat constant ($GDIP_HistogramFormat*)"
        }]
    },
    "_GDIPlus_BitmapGetPixel": {
        "documentation": "Gets the color of a specified pixel in this bitmap",
        "label": "_GDIPlus_BitmapGetPixel ( $hBitmap, $iX, $iY )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Pointer to the Bitmap object"
        }, {
            "label": "$iX",
            "documentation": "The X coordinate of the pixel"
        }, {
            "label": "$iY",
            "documentation": "The Y coordinate of the pixel"
        }]
    },
    "_GDIPlus_BitmapLockBits": {
        "documentation": "Locks a portion of a bitmap for reading or writing",
        "label": "_GDIPlus_BitmapLockBits ( $hBitmap, $iLeft, $iTop, $iWidth, $iHeight [, $iFlags = $GDIP_ILMREAD [, $iFormat = $GDIP_PXF32RGB]] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a bitmap object"
        }, {
            "label": "$iLeft",
            "documentation": "X coordinate of the upper-left corner of the rectangle to lock"
        }, {
            "label": "$iTop",
            "documentation": "Y coordinate of the upper-left corner of the rectangle to lock"
        }, {
            "label": "$iWidth",
            "documentation": "The width of the rectangle to lock"
        }, {
            "label": "$iHeight",
            "documentation": "The height of the rectangle to lock"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Set of flags that specify whether the locked portion of the bitmap is available for reading or for writing and whether the caller has already allocated a buffer. Can be a combination of the following:    $GDIP_ILMREAD - A portion of the image is locked for reading    $GDIP_ILMWRITE - A portion of the image is locked for writing    $GDIP_ILMUSERINPUTBUF - The buffer is allocated by the user"
        }, {
            "label": "$iFormat",
            "documentation": "**[optional]** Specifies the format of the pixel data in the temporary buffer. Can be one of the following:    $GDIP_PXF01INDEXED - 1 bpp, indexed    $GDIP_PXF04INDEXED - 4 bpp, indexed    $GDIP_PXF08INDEXED - 8 bpp, indexed    $GDIP_PXF16GRAYSCALE - 16 bpp, grayscale    $GDIP_PXF16RGB555 - 16 bpp; 5 bits for each RGB    $GDIP_PXF16RGB565 - 16 bpp; 5 bits red, 6 bits green, and 5 bits blue    $GDIP_PXF16ARGB1555 - 16 bpp; 1 bit for alpha and 5 bits for each RGB component    $GDIP_PXF24RGB - 24 bpp; 8 bits for each RGB    $GDIP_PXF32RGB - 32 bpp; 8 bits for each RGB. No alpha.    $GDIP_PXF32ARGB - 32 bpp; 8 bits for each RGB and alpha    $GDIP_PXF32PARGB - 32 bpp; 8 bits for each RGB and alpha, pre-multiplied"
        }]
    },
    "_GDIPlus_BitmapSetPixel": {
        "documentation": "Sets the color of a specified pixel in this bitmap",
        "label": "_GDIPlus_BitmapSetPixel ( $hBitmap, $iX, $iY, $iARGB )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Pointer to the Bitmap object"
        }, {
            "label": "$iX",
            "documentation": "The X coordinate of the pixel"
        }, {
            "label": "$iY",
            "documentation": "The Y coordinate of the pixel"
        }, {
            "label": "$iARGB",
            "documentation": "The new color of the pixel"
        }]
    },
    "_GDIPlus_BitmapUnlockBits": {
        "documentation": "Unlocks a portion of a bitmap that was locked by _GDIPlus_BitmapLockBits",
        "label": "_GDIPlus_BitmapUnlockBits ( $hBitmap, $tBitmapData )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a bitmap object"
        }, {
            "label": "$tBitmapData",
            "documentation": "$tagGDIPBITMAPDATA structure previously passed to _GDIPlus_BitmapLockBits()"
        }]
    },
    "_GDIPlus_BrushClone": {
        "documentation": "Clone a Brush object",
        "label": "_GDIPlus_BrushClone ( $hBrush )",
        "params": [{
            "label": "$hBrush",
            "documentation": "Handle to a Brush object"
        }]
    },
    "_GDIPlus_BrushCreateSolid": {
        "documentation": "Create a solid Brush object",
        "label": "_GDIPlus_BrushCreateSolid ( [$iARGB = 0xFF000000] )",
        "params": [{
            "label": "$iARGB",
            "documentation": "**[optional]** Alpha, Red, Green and Blue components of brush"
        }]
    },
    "_GDIPlus_BrushDispose": {
        "documentation": "Release a Brush object",
        "label": "_GDIPlus_BrushDispose ( $hBrush )",
        "params": [{
            "label": "$hBrush",
            "documentation": "Handle to a Brush object"
        }]
    },
    "_GDIPlus_BrushGetSolidColor": {
        "documentation": "Get the color of a Solid Brush object",
        "label": "_GDIPlus_BrushGetSolidColor ( $hBrush )",
        "params": [{
            "label": "$hBrush",
            "documentation": "Handle to a Brush object"
        }]
    },
    "_GDIPlus_BrushGetType": {
        "documentation": "Retrieve the type of Brush object",
        "label": "_GDIPlus_BrushGetType ( $hBrush )",
        "params": [{
            "label": "$hBrush",
            "documentation": "Handle to a Brush object"
        }]
    },
    "_GDIPlus_BrushSetSolidColor": {
        "documentation": "Set the color of a Solid Brush object",
        "label": "_GDIPlus_BrushSetSolidColor ( $hBrush [, $iARGB = 0xFF000000] )",
        "params": [{
            "label": "$hBrush",
            "documentation": "Handle to a Brush object"
        }, {
            "label": "$iARGB",
            "documentation": "**[optional]** Alpha, Red, Green and Blue components of brush"
        }]
    },
    "_GDIPlus_ColorMatrixCreate": {
        "documentation": "Creates and initializes an identity color matrix",
        "label": "_GDIPlus_ColorMatrixCreate (  )",
        "params": []
    },
    "_GDIPlus_ColorMatrixCreateGrayScale": {
        "documentation": "Creates and initializes a gray-scaling color matrix",
        "label": "_GDIPlus_ColorMatrixCreateGrayScale (  )",
        "params": []
    },
    "_GDIPlus_ColorMatrixCreateNegative": {
        "documentation": "Creates and initializes a negative color matrix",
        "label": "_GDIPlus_ColorMatrixCreateNegative (  )",
        "params": []
    },
    "_GDIPlus_ColorMatrixCreateSaturation": {
        "documentation": "Creates and initializes a saturation color matrix",
        "label": "_GDIPlus_ColorMatrixCreateSaturation ( $fSat )",
        "params": [{
            "label": "$fSat",
            "documentation": "Color saturation factor"
        }]
    },
    "_GDIPlus_ColorMatrixCreateScale": {
        "documentation": "Creates and initializes a scaling color matrix",
        "label": "_GDIPlus_ColorMatrixCreateScale ( $fRed, $fGreen, $fBlue [, $fAlpha = 1] )",
        "params": [{
            "label": "$fRed",
            "documentation": "Red component scaling factor"
        }, {
            "label": "$fGreen",
            "documentation": "Green component scaling factor"
        }, {
            "label": "$fBlue",
            "documentation": "Blue component scaling factor"
        }, {
            "label": "$fAlpha",
            "documentation": "**[optional]** Alpha component scaling factor"
        }]
    },
    "_GDIPlus_ColorMatrixCreateTranslate": {
        "documentation": "Creates and initializes a translation color matrix",
        "label": "_GDIPlus_ColorMatrixCreateTranslate ( $fRed, $fGreen, $fBlue [, $fAlpha = 0] )",
        "params": [{
            "label": "$fRed",
            "documentation": "Red component translation factor"
        }, {
            "label": "$fGreen",
            "documentation": "Green component translation factor"
        }, {
            "label": "$fBlue",
            "documentation": "Blue component translation factor"
        }, {
            "label": "$fAlpha",
            "documentation": "**[optional]** Alpha component translation factor"
        }]
    },
    "_GDIPlus_CustomLineCapClone": {
        "documentation": "Clones a CustomLineCap object",
        "label": "_GDIPlus_CustomLineCapClone ( $hCustomLineCap )",
        "params": [{
            "label": "$hCustomLineCap",
            "documentation": "Pointer to a CustomLineCap object"
        }]
    },
    "_GDIPlus_CustomLineCapCreate": {
        "documentation": "Creates a CustomLineCap object",
        "label": "_GDIPlus_CustomLineCapCreate ( $hPathFill, $hPathStroke [, $iLineCap = 0 [, $nBaseInset = 0]] )",
        "params": [{
            "label": "$hPathFill",
            "documentation": "Pointer to a Path object that defines the fill for the custom tip."
        }, {
            "label": "$hPathStroke",
            "documentation": "Pointer to a Path object that defines the contour of the nozzle custom."
        }, {
            "label": "$iLineCap",
            "documentation": "**[optional]** The line cap that will be used.    $GDIP_LINECAPFLAT = Specifies a flat cap    $GDIP_LINECAPSQUARE = Specifies a square cap    $GDIP_LINECAPROUND = Specifies a circular cap    $GDIP_LINECAPTRIANGLE = Specifies a triangular cap    $GDIP_LINECAPNOANCHOR = Specifies that the line ends are not anchored    $GDIP_LINECAPSQUAREANCHOR = Specifies that the line ends are anchored with a square    $GDIP_LINECAPROUNDANCHOR = Specifies that the line ends are anchored with a circle    $GDIP_LINECAPDIAMONDANCHOR = Specifies that the line ends are anchored with a diamond    $GDIP_LINECAPARROWANCHOR = Specifies that the line ends are anchored with arrowheads    $GDIP_LINECAPCUSTOM = Specifies that the line ends are made from a CustomLineCap"
        }, {
            "label": "$nBaseInset",
            "documentation": "**[optional]** Distance between the tip and the line. This distance is expressed in units."
        }]
    },
    "_GDIPlus_CustomLineCapDispose": {
        "documentation": "Release a custom line cap object",
        "label": "_GDIPlus_CustomLineCapDispose ( $hCap )",
        "params": [{
            "label": "$hCap",
            "documentation": "Handle to a custom line cap object"
        }]
    },
    "_GDIPlus_CustomLineCapGetStrokeCaps": {
        "documentation": "Gets the end cap styles for both the start line cap and the end line cap",
        "label": "_GDIPlus_CustomLineCapGetStrokeCaps ( $hCustomLineCap )",
        "params": [{
            "label": "$hCustomLineCap",
            "documentation": "Pointer to a CustomLineCap object"
        }]
    },
    "_GDIPlus_CustomLineCapSetStrokeCaps": {
        "documentation": "Sets the distance between the base cap to the start of the line",
        "label": "_GDIPlus_CustomLineCapSetStrokeCaps ( $hCustomLineCap, $iStartCap, $iEndCap )",
        "params": [{
            "label": "$hCustomLineCap",
            "documentation": "Pointer to a CustomLineCap object"
        }, {
            "label": "$iStartCap",
            "documentation": "Line cap that will be used for the start of the line to be drawn"
        }, {
            "label": "$iEndCap",
            "documentation": "Line cap that will be used for the end of the line to be drawn"
        }]
    },
    "_GDIPlus_Decoders": {
        "documentation": "Get an array of information about the available image decoders",
        "label": "_GDIPlus_Decoders (  )",
        "params": []
    },
    "_GDIPlus_DecodersGetCount": {
        "documentation": "Get the number of available image decoders",
        "label": "_GDIPlus_DecodersGetCount (  )",
        "params": []
    },
    "_GDIPlus_DecodersGetSize": {
        "documentation": "Get the total size of the structure that is returned by _GDIPlus_GetImageDecoders",
        "label": "_GDIPlus_DecodersGetSize (  )",
        "params": []
    },
    "_GDIPlus_DrawImageFX": {
        "documentation": "Draws a portion of an image after applying a specified effect",
        "label": "_GDIPlus_DrawImageFX ( $hGraphics, $hImage, $hEffect [, $tRECTF = 0 [, $hMatrix = 0 [, $hImgAttributes = 0 [, $iUnit = 2]]]] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object."
        }, {
            "label": "$hImage",
            "documentation": "Handle to an Image object."
        }, {
            "label": "$hEffect",
            "documentation": "Handle to an Effect that is applied to the image before rendering. The image is not permanently altered by the effect."
        }, {
            "label": "$tRECTF",
            "documentation": "**[optional]** $tagGDIPRECTF structure that specifies the portion of the image to be drawn."
        }, {
            "label": "$hMatrix",
            "documentation": "**[optional]** Handle to a Matrix object that specifies the parallelogram in which the image portion is rendered."
        }, {
            "label": "$hImgAttributes",
            "documentation": "**[optional]** Handle to an ImageAttributes object that specifies color adjustments to be applied when the image is rendered."
        }, {
            "label": "$iUnit",
            "documentation": "**[optional]** Specifies the unit of measure for the image."
        }]
    },
    "_GDIPlus_DrawImageFXEx": {
        "documentation": "Draws a portion of an image after applying a specified effect",
        "label": "_GDIPlus_DrawImageFXEx ( $hGraphics, $hImage, $hEffect [, $nX = 0 [, $nY = 0 [, $nW = 0 [, $nH = 0 [, $hMatrix = 0 [, $hImgAttributes = 0 [, $iUnit = 2]]]]]]] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object."
        }, {
            "label": "$hImage",
            "documentation": "Handle to an Image object."
        }, {
            "label": "$hEffect",
            "documentation": "Handle to an Effect that is applied to the image before rendering. The image is not permanently altered by the effect."
        }, {
            "label": "$nX",
            "documentation": "**[optional]** X coordinate of upper left hand corner of the portion of the image to be drawn."
        }, {
            "label": "$nY",
            "documentation": "**[optional]** X coordinate of upper left hand corner of the portion of the image to be drawn."
        }, {
            "label": "$nW",
            "documentation": "**[optional]** Width of the portion rectangle of the image to be drawn."
        }, {
            "label": "$nH",
            "documentation": "**[optional]** Height of the portion rectangle of the image to be drawn."
        }, {
            "label": "$hMatrix",
            "documentation": "**[optional]** Handle to a Matrix object that specifies the parallelogram in which the image portion is rendered."
        }, {
            "label": "$hImgAttributes",
            "documentation": "**[optional]** Handle to an ImageAttributes object that specifies color adjustments to be applied when the image is rendered."
        }, {
            "label": "$iUnit",
            "documentation": "**[optional]** Specifies the unit of measure for the image."
        }]
    },
    "_GDIPlus_DrawImagePoints": {
        "documentation": "Draws an image at a specified location",
        "label": "_GDIPlus_DrawImagePoints ( $hGraphic, $hImage, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY [, $iCount = 3] )",
        "params": [{
            "label": "$hGraphic",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$hImage",
            "documentation": "Handle to an Image object"
        }, {
            "label": "$nULX",
            "documentation": "The X coordinate of the upper left corner of the source image"
        }, {
            "label": "$nULY",
            "documentation": "The Y coordinate of the upper left corner of the source image"
        }, {
            "label": "$nURX",
            "documentation": "The X coordinate of the upper right corner of the source image"
        }, {
            "label": "$nURY",
            "documentation": "The Y coordinate of the upper right corner of the source image"
        }, {
            "label": "$nLLX",
            "documentation": "The X coordinate of the lower left corner of the source image"
        }, {
            "label": "$nLLY",
            "documentation": "The Y coordinate of the lower left corner of the source image"
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** Specifies the number of points (x,y)'s in the structure."
        }]
    },
    "_GDIPlus_EffectCreate": {
        "documentation": "Creates an Effect object of the type specified by the guid parameter",
        "label": "_GDIPlus_EffectCreate ( $sEffectGUID )",
        "params": [{
            "label": "$sEffectGUID",
            "documentation": "Effect Guid constant that specifies the kind of effect to create."
        }]
    },
    "_GDIPlus_EffectCreateBlur": {
        "documentation": "Creates a Blur class effect object",
        "label": "_GDIPlus_EffectCreateBlur ( [$fRadius = 10.0 [, $bExpandEdge = False]] )",
        "params": [{
            "label": "$fRadius",
            "documentation": "**[optional]** Real number that specifies the blur radius (the radius of the Gaussian convolution kernel) in pixels.The radius must be in the range 0.0 through 255.0."
        }, {
            "label": "$bExpandEdge",
            "documentation": "**[optional]** Boolean value that specifies whether the bitmap expands by an amount equal to the blur radius.If TRUE, the bitmap expands by an amount equal to the radius so that it can have soft edges.If FALSE, the bitmap remains the same size and the soft edges are clipped."
        }]
    },
    "_GDIPlus_EffectCreateBrightnessContrast": {
        "documentation": "Creates a BrightnessContrast class effect object",
        "label": "_GDIPlus_EffectCreateBrightnessContrast ( [$iBrightnessLevel = 0 [, $iContrastLevel = 0]] )",
        "params": [{
            "label": "$iBrightnessLevel",
            "documentation": "**[optional]** Integer in the range -255 through 255 that specifies the brightness level."
        }, {
            "label": "$iContrastLevel",
            "documentation": "**[optional]** Integer in the range -100 through 100 that specifies the contrast level."
        }]
    },
    "_GDIPlus_EffectCreateColorBalance": {
        "documentation": "Creates a ColorBalance class effect object",
        "label": "_GDIPlus_EffectCreateColorBalance ( [$iCyanRed = 0 [, $iMagentaGreen = 0 [, $iYellowBlue = 0]]] )",
        "params": [{
            "label": "$iCyanRed",
            "documentation": "**[optional]** Integer in the range -100 through 100 that specifies a change in the amount of red in the image."
        }, {
            "label": "$iMagentaGreen",
            "documentation": "**[optional]** Integer in the range -100 through 100 that specifies a change in the amount of green in the image."
        }, {
            "label": "$iYellowBlue",
            "documentation": "**[optional]** Integer in the range -100 through 100 that specifies a change in the amount of blue in the image."
        }]
    },
    "_GDIPlus_EffectCreateColorCurve": {
        "documentation": "Creates a ColorBalance class effect object",
        "label": "_GDIPlus_EffectCreateColorCurve ( $iAdjustment, $iChannel, $iAdjustValue )",
        "params": [{
            "label": "$iAdjustment",
            "documentation": "CurveAdjustments constant that specifies the adjustment to be applied ($GDIP_Adjust*)."
        }, {
            "label": "$iChannel",
            "documentation": "CurveChannel constant that specifies the color channel to which the adjustment applies ($GDIP_CurveChannel*)."
        }, {
            "label": "$iAdjustValue",
            "documentation": "Integer that specifies the intensity of the adjustment.The range of acceptable values depends on which adjustment is being applied (see $GDIP_Adjust* constants)."
        }]
    },
    "_GDIPlus_EffectCreateColorLUT": {
        "documentation": "Creates a ColorLUT class effect object",
        "label": "_GDIPlus_EffectCreateColorLUT ( $aColorLUT )",
        "params": [{
            "label": "$aColorLUT",
            "documentation": "An array[256][4] of a color lookup table for the color channels, alpha, red, green, and blue:    [0][0] - first adjustment value for the alpha channel    [0][1] - first adjustment value for the red channel    [0][2] - first adjustment value for the green channel    [0][3] - first adjustment value for the blue channel    [1][0] - second adjustment value for the alpha channel    [1][1] - second adjustment value for the red channel    [1][2] - second adjustment value for the green channel    [1][3] - second adjustment value for the blue channel    ...    255][0] - last adjustment value for the alpha channel    [255][1] - last adjustment value for the red channel    [255][2] - last adjustment value for the green channel    [255][3] - last adjustment value for the blue channel"
        }]
    },
    "_GDIPlus_EffectCreateColorMatrix": {
        "documentation": "Creates a ColorMatrixEffect class effect object",
        "label": "_GDIPlus_EffectCreateColorMatrix ( $tColorMatrix )",
        "params": [{
            "label": "$tColorMatrix",
            "documentation": "ColorMatrix structure."
        }]
    },
    "_GDIPlus_EffectCreateHueSaturationLightness": {
        "documentation": "Creates a HueSaturationLightness class effect object",
        "label": "_GDIPlus_EffectCreateHueSaturationLightness ( [$iHueLevel = 0 [, $iSaturationLevel = 0 [, $iLightnessLevel = 0]]] )",
        "params": [{
            "label": "$iHueLevel",
            "documentation": "**[optional]** Integer in the range -180 through 180 that specifies the change in hue."
        }, {
            "label": "$iSaturationLevel",
            "documentation": "**[optional]** Integer in the range -100 through 100 that specifies the change in saturation."
        }, {
            "label": "$iLightnessLevel",
            "documentation": "**[optional]** Integer in the range -100 through 100 that specifies the change in lightness."
        }]
    },
    "_GDIPlus_EffectCreateLevels": {
        "documentation": "Creates a Levels class effect object",
        "label": "_GDIPlus_EffectCreateLevels ( [$iHighlight = 100 [, $iMidtone = 0 [, $iShadow = 0]]] )",
        "params": [{
            "label": "$iHighlight",
            "documentation": "**[optional]** Integer in the range 0 through 100 that specifies which pixels should be lightened."
        }, {
            "label": "$iMidtone",
            "documentation": "**[optional]** Integer in the range -100 through 100 that specifies how much to lighten or darken an image."
        }, {
            "label": "$iShadow",
            "documentation": "**[optional]** Integer in the range 0 through 100 that specifies which pixels should be darkened."
        }]
    },
    "_GDIPlus_EffectCreateRedEyeCorrection": {
        "documentation": "Creates a RedEyeCorrection class effect object",
        "label": "_GDIPlus_EffectCreateRedEyeCorrection ( $aAreas )",
        "params": [{
            "label": "$aAreas",
            "documentation": "An array of areas of the bitmap to which red eye correction should be applied:    [0][0] - Number of Area rectangles    [1][0] - X coordinate of the upper-left corner of the first rectangle    [1][1] - Y coordinate of the upper-left corner of the first rectangle    [1][2] - Width of the first rectangle    [1][3] - Height of the first rectangle    ...    [n][0] - X coordinate of the upper-left corner of the nth rectangle    [n][1] - Y coordinate of the upper-left corner of the nth rectangle    [n][2] - Width of the nth rectangle    [n][3] - Height of the nth rectangle"
        }]
    },
    "_GDIPlus_EffectCreateSharpen": {
        "documentation": "Creates a Sharpen class effect object",
        "label": "_GDIPlus_EffectCreateSharpen ( [$fRadius = 10.0 [, $fAmount = 50.0]] )",
        "params": [{
            "label": "$fRadius",
            "documentation": "**[optional]** Real number that specifies the sharpening radius (the radius of the convolution kernel) in pixels.The radius must be in the range 0.0 through 255.0"
        }, {
            "label": "$fAmount",
            "documentation": "**[optional]** Real number in the range 0.0 through 100.0 that specifies the amount of sharpening to be applied"
        }]
    },
    "_GDIPlus_EffectCreateTint": {
        "documentation": "Creates a Tint class effect object",
        "label": "_GDIPlus_EffectCreateTint ( [$iHue = 0 [, $iAmount = 0]] )",
        "params": [{
            "label": "$iHue",
            "documentation": "**[optional]** Integer in the range -180 through 180 that specifies the hue to be strengthened or weakened."
        }, {
            "label": "$iAmount",
            "documentation": "**[optional]** Integer in the range -100 through 100 that specifies how much the hue (given by the hue parameter) is strengthened or weakened."
        }]
    },
    "_GDIPlus_EffectDispose": {
        "documentation": "Deletes the specified Effect object",
        "label": "_GDIPlus_EffectDispose ( $hEffect )",
        "params": [{
            "label": "$hEffect",
            "documentation": "Handle to an Effect object."
        }]
    },
    "_GDIPlus_EffectGetParameters": {
        "documentation": "Returns the parameters for the specified Effect object",
        "label": "_GDIPlus_EffectGetParameters ( $hEffect, $tEffectParameters )",
        "params": [{
            "label": "$hEffect",
            "documentation": "Handle to an Effect object."
        }, {
            "label": "$tEffectParameters",
            "documentation": "A DLL structure that receives the effect parameters."
        }]
    },
    "_GDIPlus_EffectSetParameters": {
        "documentation": "Sets the parameters for the specified Effect object",
        "label": "_GDIPlus_EffectSetParameters ( $hEffect, $tEffectParameters [, $iSizeAdjust = 1] )",
        "params": [{
            "label": "$hEffect",
            "documentation": "Handle to an Effect object."
        }, {
            "label": "$tEffectParameters",
            "documentation": "A DLL structure that specifies the parameters."
        }, {
            "label": "$iSizeAdjust",
            "documentation": "**[optional]** An integer value. Default is 1."
        }]
    },
    "_GDIPlus_Encoders": {
        "documentation": "Get an array of information about the available image encoders",
        "label": "_GDIPlus_Encoders (  )",
        "params": []
    },
    "_GDIPlus_EncodersGetCLSID": {
        "documentation": "Return the encoder CLSID for a specific image file type",
        "label": "_GDIPlus_EncodersGetCLSID ( $sFileExtension )",
        "params": [{
            "label": "$sFileExtension",
            "documentation": "File extension to search for (BMP, JPG, TIF, etc.)"
        }]
    },
    "_GDIPlus_EncodersGetCount": {
        "documentation": "Get the number of available image encoders",
        "label": "_GDIPlus_EncodersGetCount (  )",
        "params": []
    },
    "_GDIPlus_EncodersGetParamList": {
        "documentation": "Get the parameter list for a specified image encoder",
        "label": "_GDIPlus_EncodersGetParamList ( $hImage, $sEncoder )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }, {
            "label": "$sEncoder",
            "documentation": "GUID string of encoder to be used"
        }]
    },
    "_GDIPlus_EncodersGetParamListSize": {
        "documentation": "Get the size of the parameter list for a specified image encoder",
        "label": "_GDIPlus_EncodersGetParamListSize ( $hImage, $sEncoder )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }, {
            "label": "$sEncoder",
            "documentation": "GUID string of encoder to be used"
        }]
    },
    "_GDIPlus_EncodersGetSize": {
        "documentation": "Get the total size of the structure that is returned by _GDIPlus_GetImageEncoders",
        "label": "_GDIPlus_EncodersGetSize (  )",
        "params": []
    },
    "_GDIPlus_FontCreate": {
        "documentation": "Create a Font object",
        "label": "_GDIPlus_FontCreate ( $hFamily, $fSize [, $iStyle = 0 [, $iUnit = 3]] )",
        "params": [{
            "label": "$hFamily",
            "documentation": "Handle to a Font Family object"
        }, {
            "label": "$fSize",
            "documentation": "The size of the font measured in the units specified in the $iUnit parameter"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** The style of the typeface. Can be a combination of the following:    0 - Normal weight or thickness of the typeface    1 - Bold typeface    2 - Italic typeface    4 - Underline    8 - Strikethrough"
        }, {
            "label": "$iUnit",
            "documentation": "**[optional]** Unit of measurement for the font size:    0 - World coordinates, a nonphysical unit    1 - Display units    2 - A unit is 1 pixel    3 - A unit is 1 point or 1/72 inch    4 - A unit is 1 inch    5 - A unit is 1/300 inch    6 - A unit is 1 millimeter"
        }]
    },
    "_GDIPlus_FontDispose": {
        "documentation": "Release a Font object",
        "label": "_GDIPlus_FontDispose ( $hFont )",
        "params": [{
            "label": "$hFont",
            "documentation": "Handle to a Font object"
        }]
    },
    "_GDIPlus_FontFamilyCreate": {
        "documentation": "Create a Font Family object",
        "label": "_GDIPlus_FontFamilyCreate ( $sFamily [, $pCollection = 0] )",
        "params": [{
            "label": "$sFamily",
            "documentation": "Name of the Font Family"
        }, {
            "label": "$pCollection",
            "documentation": "**[optional]** Pointer to a FontCollection object that specifies the collection that the font family belongs to."
        }]
    },
    "_GDIPlus_FontFamilyCreateFromCollection": {
        "documentation": "Creates a FontFamily object based on a specified font family",
        "label": "_GDIPlus_FontFamilyCreateFromCollection ( $sFontName, $hFontCollection )",
        "params": [{
            "label": "$sFontName",
            "documentation": " A string value that specifies the internal name of a font, e.g. Times.ttf has as internal name 'Times New Roman'"
        }, {
            "label": "$hFontCollection",
            "documentation": " A handle to the font collection object"
        }]
    },
    "_GDIPlus_FontFamilyDispose": {
        "documentation": "Release a Font Family object",
        "label": "_GDIPlus_FontFamilyDispose ( $hFamily )",
        "params": [{
            "label": "$hFamily",
            "documentation": "Handle to a Font Family object"
        }]
    },
    "_GDIPlus_FontFamilyGetCellAscent": {
        "documentation": "Gets the cell ascent, in design units, of a font family for the specified style or style combination",
        "label": "_GDIPlus_FontFamilyGetCellAscent ( $hFontFamily [, $iStyle = 0] )",
        "params": [{
            "label": "$hFontFamily",
            "documentation": "Pointer to a FontFamily object"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** The style of the typeface. Can be a combination of the following:    0 - Normal weight or thickness of the typeface    1 - Bold typeface    2 - Italic typeface    4 - Underline    8 - Strikethrough"
        }]
    },
    "_GDIPlus_FontFamilyGetCellDescent": {
        "documentation": "Gets the cell descent, in design units, of a font family for the specified style or style combination",
        "label": "_GDIPlus_FontFamilyGetCellDescent ( $hFontFamily [, $iStyle = 0] )",
        "params": [{
            "label": "$hFontFamily",
            "documentation": "Pointer to a FontFamily object"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** The style of the typeface. Can be a combination of the following:    0 - Normal weight or thickness of the typeface    1 - Bold typeface    2 - Italic typeface    4 - Underline    8 - Strikethrough"
        }]
    },
    "_GDIPlus_FontFamilyGetEmHeight": {
        "documentation": "Gets the size (commonly called em size or em height), in design units, of a font family",
        "label": "_GDIPlus_FontFamilyGetEmHeight ( $hFontFamily [, $iStyle = 0] )",
        "params": [{
            "label": "$hFontFamily",
            "documentation": "Pointer to a FontFamily object"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** The style of the typeface. Can be a combination of the following:    0 - Normal weight or thickness of the typeface    1 - Bold typeface    2 - Italic typeface    4 - Underline    8 - Strikethrough"
        }]
    },
    "_GDIPlus_FontFamilyGetLineSpacing": {
        "documentation": "Gets the line spacing, in design units, of this font family for the specified style or style combination",
        "label": "_GDIPlus_FontFamilyGetLineSpacing ( $hFontFamily [, $iStyle = 0] )",
        "params": [{
            "label": "$hFontFamily",
            "documentation": "Pointer to a FontFamily object"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** The style of the typeface. Can be a combination of the following:    0 - Normal weight or thickness of the typeface    1 - Bold typeface    2 - Italic typeface    4 - Underline    8 - Strikethrough"
        }]
    },
    "_GDIPlus_FontGetHeight": {
        "documentation": "Gets the line spacing of a font in the current unit of a specified Graphics object",
        "label": "_GDIPlus_FontGetHeight ( $hFont, $hGraphics )",
        "params": [{
            "label": "$hFont",
            "documentation": "Pointer to a Font object"
        }, {
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }]
    },
    "_GDIPlus_FontPrivateAddFont": {
        "documentation": "Adds a font file to the private font collection",
        "label": "_GDIPlus_FontPrivateAddFont ( $hFontCollection, $sFontFile )",
        "params": [{
            "label": "$hFontCollection",
            "documentation": " A handle to the font collection object"
        }, {
            "label": "$sFontFile",
            "documentation": " A string value that specifies the name of a font file"
        }]
    },
    "_GDIPlus_FontPrivateAddMemoryFont": {
        "documentation": "Adds a font that is contained in system memory to a Microsoft® Windows® GDI+ font collection",
        "label": "_GDIPlus_FontPrivateAddMemoryFont ( $hFontCollection, $tFont )",
        "params": [{
            "label": "$hFontCollection",
            "documentation": " A handle to the font collection object"
        }, {
            "label": "$tFont",
            "documentation": " A dll struct value filled with binary ttf font data"
        }]
    },
    "_GDIPlus_FontPrivateCollectionDispose": {
        "documentation": "Deletes the specified PrivateFontCollection object",
        "label": "_GDIPlus_FontPrivateCollectionDispose ( $hFontCollection )",
        "params": [{
            "label": "$hFontCollection",
            "documentation": " A handle to the font collection object to delete"
        }]
    },
    "_GDIPlus_FontPrivateCreateCollection": {
        "documentation": "Creates a PrivateFont Collection object",
        "label": "_GDIPlus_FontPrivateCreateCollection (  )",
        "params": []
    },
    "_GDIPlus_GraphicsClear": {
        "documentation": "Clears a Graphics object to a specified color",
        "label": "_GDIPlus_GraphicsClear ( $hGraphics [, $iARGB = 0xFF000000] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$iARGB",
            "documentation": "**[optional]** Alpha, Red, Green and Blue components of color"
        }]
    },
    "_GDIPlus_GraphicsCreateFromHDC": {
        "documentation": "Create a Graphics object from a device context (DC)",
        "label": "_GDIPlus_GraphicsCreateFromHDC ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Device context"
        }]
    },
    "_GDIPlus_GraphicsCreateFromHWND": {
        "documentation": "Create a Graphics object from a window handle",
        "label": "_GDIPlus_GraphicsCreateFromHWND ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to a window"
        }]
    },
    "_GDIPlus_GraphicsDispose": {
        "documentation": "Release a Graphics object",
        "label": "_GDIPlus_GraphicsDispose ( $hGraphics )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }]
    },
    "_GDIPlus_GraphicsDrawArc": {
        "documentation": "Draw an arc",
        "label": "_GDIPlus_GraphicsDrawArc ( $hGraphics, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle that bounds the ellipse in which to draw the arc"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle that bounds the ellipse in which to draw the arc"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle that bounds the ellipse in which to draw the arc"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle that bounds the ellipse in which to draw the arc"
        }, {
            "label": "$fStartAngle",
            "documentation": "The angle between the X axis and the starting point of the arc"
        }, {
            "label": "$fSweepAngle",
            "documentation": "The angle between the starting and ending points of the arc"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the arc. If 0, a solid black pen with a width of 1 will be used."
        }]
    },
    "_GDIPlus_GraphicsDrawBezier": {
        "documentation": "Draw a bezier spline",
        "label": "_GDIPlus_GraphicsDrawBezier ( $hGraphics, $nX1, $nY1, $nX2, $nY2, $nX3, $nY3, $nX4, $nY4 [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$nX1",
            "documentation": "X coordinate of the starting point"
        }, {
            "label": "$nY1",
            "documentation": "Y coordinate of the starting point"
        }, {
            "label": "$nX2",
            "documentation": "X coordinate of the first control point"
        }, {
            "label": "$nY2",
            "documentation": "Y coordinate of the first control point"
        }, {
            "label": "$nX3",
            "documentation": "X coordinate of the second control point"
        }, {
            "label": "$nY3",
            "documentation": "Y coordinate of the second control point"
        }, {
            "label": "$nX4",
            "documentation": "X coordinate of the ending point"
        }, {
            "label": "$nY4",
            "documentation": "Y coordinate of the ending point"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the bezier. If 0, a solid black pen with a width of 1 will be used."
        }]
    },
    "_GDIPlus_GraphicsDrawClosedCurve": {
        "documentation": "Draw a closed cardinal spline",
        "label": "_GDIPlus_GraphicsDrawClosedCurve ( $hGraphics, $aPoints [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$aPoints",
            "documentation": "Array that specifies the points of the curve:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the spline. If 0, a solid black pen with a width of 1 will be used."
        }]
    },
    "_GDIPlus_GraphicsDrawClosedCurve2": {
        "documentation": "Draws a closed cardinal spline",
        "label": "_GDIPlus_GraphicsDrawClosedCurve2 ( $hGraphics, $aPoints, $nTension [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that specify the coordinates of the closed cardinal spline. The array must    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$nTension",
            "documentation": "Number that specifies how tightly the curve bends through the coordinates of the closed cardinal spline"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the splines. If 0, a solid black pen with a width of"
        }]
    },
    "_GDIPlus_GraphicsDrawCurve": {
        "documentation": "Draw a cardinal spline",
        "label": "_GDIPlus_GraphicsDrawCurve ( $hGraphics, $aPoints [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$aPoints",
            "documentation": "Array that specifies the points of the curve:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the spline. If 0, a solid black pen with a width of 1 will be used."
        }]
    },
    "_GDIPlus_GraphicsDrawCurve2": {
        "documentation": "Draws a cardinal spline",
        "label": "_GDIPlus_GraphicsDrawCurve2 ( $hGraphics, $aPoints, $nTension [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that specify the coordinates that the cardinal spline passes through:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$nTension",
            "documentation": "Number that specifies how tightly the curve bends through the coordinates of the closed cardinal spline"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the splines. If 0, a solid black pen with a width of"
        }]
    },
    "_GDIPlus_GraphicsDrawEllipse": {
        "documentation": "Draw an ellipse",
        "label": "_GDIPlus_GraphicsDrawEllipse ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle that bounds the ellipse"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle that bounds the ellipse"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle that bounds the ellipse"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle that bounds the ellipse"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the arc. If 0, a solid black pen with a width of 1 will be used."
        }]
    },
    "_GDIPlus_GraphicsDrawImage": {
        "documentation": "Draw an Image object",
        "label": "_GDIPlus_GraphicsDrawImage ( $hGraphics, $hImage, $nX, $nY )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$hImage",
            "documentation": "Handle to an Image object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rendered image"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rendered image"
        }]
    },
    "_GDIPlus_GraphicsDrawImagePointsRect": {
        "documentation": "Draws an image",
        "label": "_GDIPlus_GraphicsDrawImagePointsRect ( $hGraphics, $hImage, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY, $nSrcX, $nSrcY, $nSrcWidth, $nSrcHeight [, $hImageAttributes = 0 [, $iUnit = 2]] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$hImage",
            "documentation": "Pointer to an Image object"
        }, {
            "label": "$nULX",
            "documentation": "The X coordinate of the upper left corner of the source image"
        }, {
            "label": "$nULY",
            "documentation": "The Y coordinate of the upper left corner of the source image"
        }, {
            "label": "$nURX",
            "documentation": "The X coordinate of the upper right corner of the source image"
        }, {
            "label": "$nURY",
            "documentation": "The Y coordinate of the upper right corner of the source image"
        }, {
            "label": "$nLLX",
            "documentation": "The X coordinate of the lower left corner of the source image"
        }, {
            "label": "$nLLY",
            "documentation": "The Y coordinate of the lower left corner of the source image"
        }, {
            "label": "$nSrcX",
            "documentation": "The X coordinate of the upper-left corner of the portion of the source image to be drawn"
        }, {
            "label": "$nSrcY",
            "documentation": "The Y coordinate of the upper-left corner of the portion of the source image to be drawn"
        }, {
            "label": "$nSrcWidth",
            "documentation": "The width of the portion of the source image to be drawn"
        }, {
            "label": "$nSrcHeight",
            "documentation": "The height of the portion of the source image to be drawn"
        }, {
            "label": "$hImageAttributes",
            "documentation": "**[optional]** Pointer to an ImageAttributes object that specifies the color and size attributes of the image to be drawn"
        }, {
            "label": "$iUnit",
            "documentation": "**[optional]** Unit of measurement:    0 - World coordinates, a nonphysical unit    1 - Display units    2 - A unit is 1 pixel    3 - A unit is 1 point or 1/72 inch    4 - A unit is 1 inch    5 - A unit is 1/300 inch    6 - A unit is 1 millimeter"
        }]
    },
    "_GDIPlus_GraphicsDrawImageRect": {
        "documentation": "Draws an image at a specified location",
        "label": "_GDIPlus_GraphicsDrawImageRect ( $hGraphics, $hImage, $nX, $nY, $nW, $nH )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$hImage",
            "documentation": "Handle to an Image object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rendered image"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rendered image"
        }, {
            "label": "$nW",
            "documentation": "Specifies the width of the destination rectangle at which to draw the image"
        }, {
            "label": "$nH",
            "documentation": "Specifies the height of the destination rectangle at which to draw the image"
        }]
    },
    "_GDIPlus_GraphicsDrawImageRectRect": {
        "documentation": "Draw an Image object",
        "label": "_GDIPlus_GraphicsDrawImageRectRect ( $hGraphics, $hImage, $nSrcX, $nSrcY, $nSrcWidth, $nSrcHeight, $nDstX, $nDstY, $nDstWidth, $nDstHeight [, $pAttributes = 0 [, $iUnit = 2]] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$hImage",
            "documentation": "Handle to an Image object"
        }, {
            "label": "$nSrcX",
            "documentation": "The X coordinate of the upper left corner of the source image"
        }, {
            "label": "$nSrcY",
            "documentation": "The Y coordinate of the upper left corner of the source image"
        }, {
            "label": "$nSrcWidth",
            "documentation": "Width of the source image"
        }, {
            "label": "$nSrcHeight",
            "documentation": "Height of the source image"
        }, {
            "label": "$nDstX",
            "documentation": "The X coordinate of the upper left corner of the destination image"
        }, {
            "label": "$nDstY",
            "documentation": "The Y coordinate of the upper left corner of the destination image"
        }, {
            "label": "$nDstWidth",
            "documentation": "Width of the destination image"
        }, {
            "label": "$nDstHeight",
            "documentation": "Height of the destination image"
        }, {
            "label": "$pAttributes",
            "documentation": "**[optional]** Pointer to an ImageAttributes structure that specifies the color and size attributes of the image to be drawn. The default value is NULL."
        }, {
            "label": "$iUnit",
            "documentation": "**[optional]** Specifies the unit of measure for the image"
        }]
    },
    "_GDIPlus_GraphicsDrawLine": {
        "documentation": "Draw a line",
        "label": "_GDIPlus_GraphicsDrawLine ( $hGraphics, $nX1, $nY1, $nX2, $nY2 [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$nX1",
            "documentation": "The X coordinate of the starting point of the line"
        }, {
            "label": "$nY1",
            "documentation": "The Y coordinate of the starting point of the line"
        }, {
            "label": "$nX2",
            "documentation": "The X coordinate of the ending point of the line"
        }, {
            "label": "$nY2",
            "documentation": "The Y coordinate of the ending point of the line"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the arc. If 0, a solid black pen with a width of 1 will be used."
        }]
    },
    "_GDIPlus_GraphicsDrawPath": {
        "documentation": "Draws a sequence of lines and curves defined by a GraphicsPath object",
        "label": "_GDIPlus_GraphicsDrawPath ( $hGraphics, $hPath [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object that specifies the sequence of lines and curves that make up thepath"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the splines. If 0, a solid black pen with a width of 1 will be used."
        }]
    },
    "_GDIPlus_GraphicsDrawPie": {
        "documentation": "Draw a pie",
        "label": "_GDIPlus_GraphicsDrawPie ( $hGraphics, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle that bounds the ellipse in which to draw the pie"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle that bounds the ellipse in which to draw the pie"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle that bounds the ellipse in which to draw the pie"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle that bounds the ellipse in which to draw the pie"
        }, {
            "label": "$fStartAngle",
            "documentation": "The angle, in degrees, between the X axis and the starting point of the arc that defines the pie.A positive value specifies clockwise rotation."
        }, {
            "label": "$fSweepAngle",
            "documentation": "The angle, in degrees, between the starting and ending points of the arc that defines the pie.A positive value specifies clockwise rotation."
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the arc. If 0, a solid black pen with a width of 1 will be used."
        }]
    },
    "_GDIPlus_GraphicsDrawPolygon": {
        "documentation": "Draw a polygon",
        "label": "_GDIPlus_GraphicsDrawPolygon ( $hGraphics, $aPoints [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$aPoints",
            "documentation": "Array that specify the vertices of the polygon:    [0][0] - Number of vertices    [1][0] - Vertice 1 X position    [1][1] - Vertice 1 Y position    [2][0] - Vertice 2 X position    [2][1] - Vertice 2 Y position    [n][0] - Vertice n X position    [n][1] - Vertice n Y position"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the polygon. If 0, a solid black pen with a width of 1 will be used."
        }]
    },
    "_GDIPlus_GraphicsDrawRect": {
        "documentation": "Draw a rectangle",
        "label": "_GDIPlus_GraphicsDrawRect ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hPen = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Handle to a pen object that is used to draw the rectangle. If 0, a solid black pen with a width of 1 will be used"
        }]
    },
    "_GDIPlus_GraphicsDrawString": {
        "documentation": "Draw a string",
        "label": "_GDIPlus_GraphicsDrawString ( $hGraphics, $sString, $nX, $nY [, $sFont = \"Arial\" [, $fSize = 10 [, $iFormat = 0]]] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$sString",
            "documentation": "String to be drawn"
        }, {
            "label": "$nX",
            "documentation": "X coordinate where the string will be drawn"
        }, {
            "label": "$nY",
            "documentation": "Y coordinate where the string will be drawn"
        }, {
            "label": "$sFont",
            "documentation": "**[optional]** Name of the font to use for drawing"
        }, {
            "label": "$fSize",
            "documentation": "**[optional]** Font size to use for drawing"
        }, {
            "label": "$iFormat",
            "documentation": "**[optional]** Format flags. Can be one or more of the following:    0x0001 - Specifies that reading order is right to left    0x0002 - Specifies that individual lines of text are drawn vertically on the display device    0x0004 - Specifies that parts of characters are allowed to overhang the string's layout rectangle    0x0020 - Specifies that Unicode layout control characters are displayed with a representative character    0x0400 - Specifies that an alternate font is used for characters that are not supported in the requested font    0x0800 - Specifies that the space at the end of each line is included in a string measurement    0x1000 - Specifies that the wrapping of text to the next line is disabled    0x2000 - Specifies that only entire lines are laid out in the layout rectangle    0x4000 - Specifies that characters overhanging the layout rectangle and text extending outside the layout rectangle are allowed to show"
        }]
    },
    "_GDIPlus_GraphicsDrawStringEx": {
        "documentation": "Draw a string",
        "label": "_GDIPlus_GraphicsDrawStringEx ( $hGraphics, $sString, $hFont, $tLayout, $hFormat, $hBrush )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$sString",
            "documentation": "String to be drawn"
        }, {
            "label": "$hFont",
            "documentation": "Handle to the font to use to draw the string"
        }, {
            "label": "$tLayout",
            "documentation": "$tagGDIPRECTF structure that bounds the string"
        }, {
            "label": "$hFormat",
            "documentation": "Handle to the string format to draw the string"
        }, {
            "label": "$hBrush",
            "documentation": "Handle to the brush to draw the string"
        }]
    },
    "_GDIPlus_GraphicsFillClosedCurve": {
        "documentation": "Fill a closed cardinal spline",
        "label": "_GDIPlus_GraphicsFillClosedCurve ( $hGraphics, $aPoints [, $hBrush = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$aPoints",
            "documentation": "Array that specifies the points of the curve:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$hBrush",
            "documentation": "**[optional]** Handle to a brush object that is used to fill the ellipse. If 0, a black brush will be used."
        }]
    },
    "_GDIPlus_GraphicsFillClosedCurve2": {
        "documentation": "Creates a closed cardinal spline from an array of points and uses a brush to fill the interior of the spline",
        "label": "_GDIPlus_GraphicsFillClosedCurve2 ( $hGraphics, $aPoints, $nTension [, $hBrush = 0 [, $iFillMode = 0]] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that specify the coordinates of the closed cardinal spline:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$nTension",
            "documentation": "Number that specifies how tightly the spline bends as it passes through the points"
        }, {
            "label": "$hBrush",
            "documentation": "**[optional]** Handle to a brush object that is used to fill the cardinal spline. If 0, a black brush will be used."
        }, {
            "label": "$iFillMode",
            "documentation": "**[optional]** Fill mode of the interior of the spline:    0 - The areas are filled according to the even-odd parity rule    1 - The areas are filled according to the nonzero winding rule"
        }]
    },
    "_GDIPlus_GraphicsFillEllipse": {
        "documentation": "Fill an ellipse",
        "label": "_GDIPlus_GraphicsFillEllipse ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hBrush = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle that bounds the ellipse"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle that bounds the ellipse"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle that bounds the ellipse"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle that bounds the ellipse"
        }, {
            "label": "$hBrush",
            "documentation": "**[optional]** Handle to a brush object that is used to fill the ellipse. If 0, a black brush will be used."
        }]
    },
    "_GDIPlus_GraphicsFillPath": {
        "documentation": "Uses a brush to fill the interior of a path",
        "label": "_GDIPlus_GraphicsFillPath ( $hGraphics, $hPath [, $hBrush = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object that specifies the path"
        }, {
            "label": "$hBrush",
            "documentation": "**[optional]** Handle to a Brush object that is used to paint the interior of the path. If 0, a black brush will be used."
        }]
    },
    "_GDIPlus_GraphicsFillPie": {
        "documentation": "Fill a pie",
        "label": "_GDIPlus_GraphicsFillPie ( $hGraphics, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle [, $hBrush = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle that bounds the ellipse in which to draw the pie"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle that bounds the ellipse in which to draw the pie"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle that bounds the ellipse in which to draw the pie"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle that bounds the ellipse in which to draw the pie"
        }, {
            "label": "$fStartAngle",
            "documentation": "The angle, in degrees, between the X axis and the starting point of the arc that defines the pie.A positive value specifies clockwise rotation."
        }, {
            "label": "$fSweepAngle",
            "documentation": "The angle, in degrees, between the starting and ending points of the arc that defines the pie.A positive value specifies clockwise rotation."
        }, {
            "label": "$hBrush",
            "documentation": "**[optional]** Handle to a brush object that is used to fill the pie. If 0, a black brush will be used."
        }]
    },
    "_GDIPlus_GraphicsFillPolygon": {
        "documentation": "Fill a polygon",
        "label": "_GDIPlus_GraphicsFillPolygon ( $hGraphics, $aPoints [, $hBrush = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$aPoints",
            "documentation": "Array that specify the vertices of the polygon:    [0][0] - Number of vertices    [1][0] - Vertex 1 X position    [1][1] - Vertex 1 Y position    [2][0] - Vertex 2 X position    [2][1] - Vertex 2 Y position    [n][0] - Vertex n X position    [n][1] - Vertex n Y position"
        }, {
            "label": "$hBrush",
            "documentation": "**[optional]** Handle to a brush object that is used to fill the polygon."
        }]
    },
    "_GDIPlus_GraphicsFillRect": {
        "documentation": "Fill a rectangle",
        "label": "_GDIPlus_GraphicsFillRect ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $hBrush = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle"
        }, {
            "label": "$hBrush",
            "documentation": "**[optional]** Handle to a brush object that is used to fill the rectangle. If 0, a black brush will be used."
        }]
    },
    "_GDIPlus_GraphicsFillRegion": {
        "documentation": "Uses a brush to fill a specified region",
        "label": "_GDIPlus_GraphicsFillRegion ( $hGraphics, $hRegion [, $hBrush = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$hRegion",
            "documentation": "Pointer to a region to be filled"
        }, {
            "label": "$hBrush",
            "documentation": "**[optional]** Pointer to a brush that is used to paint the region. If 0, a black brush will be used."
        }]
    },
    "_GDIPlus_GraphicsGetCompositingMode": {
        "documentation": "Gets the compositing mode currently set for a Graphics object",
        "label": "_GDIPlus_GraphicsGetCompositingMode ( $hGraphics )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }]
    },
    "_GDIPlus_GraphicsGetCompositingQuality": {
        "documentation": "Gets the compositing quality currently set for a Graphics object",
        "label": "_GDIPlus_GraphicsGetCompositingQuality ( $hGraphics )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }]
    },
    "_GDIPlus_GraphicsGetDC": {
        "documentation": "Gets a handle to the device context of the Graphics object",
        "label": "_GDIPlus_GraphicsGetDC ( $hGraphics )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }]
    },
    "_GDIPlus_GraphicsGetInterpolationMode": {
        "documentation": "Gets the interpolation mode currently set for a Graphics object",
        "label": "_GDIPlus_GraphicsGetInterpolationMode ( $hGraphics )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }]
    },
    "_GDIPlus_GraphicsGetSmoothingMode": {
        "documentation": "Gets the graphics object rendering quality",
        "label": "_GDIPlus_GraphicsGetSmoothingMode ( $hGraphics )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }]
    },
    "_GDIPlus_GraphicsGetTransform": {
        "documentation": "Gets the world transformation matrix of a Graphics object",
        "label": "_GDIPlus_GraphicsGetTransform ( $hGraphics, $hMatrix )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object that receives the transformation matrix"
        }]
    },
    "_GDIPlus_GraphicsMeasureCharacterRanges": {
        "documentation": "Gets a set of region objects each of which bounds a range of character positions within a string",
        "label": "_GDIPlus_GraphicsMeasureCharacterRanges ( $hGraphics, $sString, $hFont, $tLayout, $hStringFormat )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$sString",
            "documentation": "The string to measure"
        }, {
            "label": "$hFont",
            "documentation": "Pointer to a Font object that specifies the font characteristics"
        }, {
            "label": "$tLayout",
            "documentation": "$tagGDIPRECTF structure that defines the string boundaries"
        }, {
            "label": "$hStringFormat",
            "documentation": "Pointer to a StringFormat object that specifies the character ranges and layout information, such as alignment, trimming, tab stops, and so forth"
        }]
    },
    "_GDIPlus_GraphicsMeasureString": {
        "documentation": "Measures the size of a string",
        "label": "_GDIPlus_GraphicsMeasureString ( $hGraphics, $sString, $hFont, $tLayout, $hFormat )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$sString",
            "documentation": "String to be drawn"
        }, {
            "label": "$hFont",
            "documentation": "Handle to the font to use to draw the string"
        }, {
            "label": "$tLayout",
            "documentation": "$tagGDIPRECTF structure that bounds the string"
        }, {
            "label": "$hFormat",
            "documentation": "Handle to the string format to draw the string"
        }]
    },
    "_GDIPlus_GraphicsReleaseDC": {
        "documentation": "Releases the device context of the Graphics object",
        "label": "_GDIPlus_GraphicsReleaseDC ( $hGraphics, $hDC )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$hDC",
            "documentation": "Handle to the Graphics device context"
        }]
    },
    "_GDIPlus_GraphicsResetClip": {
        "documentation": "Sets the clipping region of a Graphics object to an infinite region",
        "label": "_GDIPlus_GraphicsResetClip ( $hGraphics )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }]
    },
    "_GDIPlus_GraphicsResetTransform": {
        "documentation": "Sets the world transformation matrix of a Graphics object to the identity matrix",
        "label": "_GDIPlus_GraphicsResetTransform ( $hGraphics )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }]
    },
    "_GDIPlus_GraphicsRestore": {
        "documentation": "Restores the state of a Graphics object to the state stored by a previous call to the _GDIPlus_GraphicsSave method of the Graphics object",
        "label": "_GDIPlus_GraphicsRestore ( $hGraphics, $iState )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$iState",
            "documentation": "Value identifying the block of saved state previously returned by _GDIPlus_GraphicsSave()."
        }]
    },
    "_GDIPlus_GraphicsRotateTransform": {
        "documentation": "Updates the world transformation matrix of a Graphics object with the product of itself and a rotation matrix",
        "label": "_GDIPlus_GraphicsRotateTransform ( $hGraphics, $fAngle [, $iOrder = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$fAngle",
            "documentation": "The angle, in degrees, of rotation"
        }, {
            "label": "$iOrder",
            "documentation": "**[optional]** Order of matrices multiplication:    0 - The rotation matrix is on the left    1 - The rotation matrix is on the right"
        }]
    },
    "_GDIPlus_GraphicsSave": {
        "documentation": "Saves the current state (transformations, clipping region, and quality settings) of a Graphics object",
        "label": "_GDIPlus_GraphicsSave ( $hGraphics )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }]
    },
    "_GDIPlus_GraphicsScaleTransform": {
        "documentation": "Updates a Graphics object's world transformation matrix with the product of itself and a scaling matrix",
        "label": "_GDIPlus_GraphicsScaleTransform ( $hGraphics, $fScaleX, $fScaleY [, $iOrder = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$fScaleX",
            "documentation": "The horizontal scaling factor in the scaling matrix"
        }, {
            "label": "$fScaleY",
            "documentation": "The vertical scaling factor in the scaling matrix"
        }, {
            "label": "$iOrder",
            "documentation": "**[optional]** Order of matrices multiplication:    0 - The scaling matrix is on the left    1 - The scaling matrix is on the right"
        }]
    },
    "_GDIPlus_GraphicsSetClipPath": {
        "documentation": "Updates the clipping region of this Graphics object to a region that is the combination of itself and the region specified by a graphics path",
        "label": "_GDIPlus_GraphicsSetClipPath ( $hGraphics, $hPath [, $iCombineMode = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object that specifies the region to be combined with the clipping region of the Graphics object"
        }, {
            "label": "$iCombineMode",
            "documentation": "**[optional]** Regions combination mode:    0 - The existing region is replaced by the new region    1 - The existing region is replaced by the intersection of itself and the new region    2 - The existing region is replaced by the union of itself and the new region    3 - The existing region is replaced by the result of performing an XOR on the two regions    4 - The existing region is replaced by the portion of itself that is outside of the new region    5 - The existing region is replaced by the portion of the new region that is outside of the existing region"
        }]
    },
    "_GDIPlus_GraphicsSetClipRect": {
        "documentation": "Updates the clipping region of a Graphics object to a region that is the combination of itself and a rectangle",
        "label": "_GDIPlus_GraphicsSetClipRect ( $hGraphics, $nX, $nY, $nWidth, $nHeight [, $iCombineMode = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$nX",
            "documentation": "X coordinate of the upper-left corner of the rectangle"
        }, {
            "label": "$nY",
            "documentation": "Y coordinate of the upper-left corner of the rectangle"
        }, {
            "label": "$nWidth",
            "documentation": "Width of the rectangle"
        }, {
            "label": "$nHeight",
            "documentation": "Height of the rectangle"
        }, {
            "label": "$iCombineMode",
            "documentation": "**[optional]** Regions combination mode:    0 - The existing region is replaced by the new region    1 - The existing region is replaced by the intersection of itself and the new region    2 - The existing region is replaced by the union of itself and the new region    3 - The existing region is replaced by the result of performing an XOR on the two regions    4 - The existing region is replaced by the portion of itself that is outside of the new region    5 - The existing region is replaced by the portion of the new region that is outside of the existing region"
        }]
    },
    "_GDIPlus_GraphicsSetClipRegion": {
        "documentation": "Updates the clipping region of a Graphics object to a region that is the combination of itself and the region specified by a Region object",
        "label": "_GDIPlus_GraphicsSetClipRegion ( $hGraphics, $hRegion [, $iCombineMode = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$hRegion",
            "documentation": "Pointer to a Region object to be combined with the clipping region of the Graphics object"
        }, {
            "label": "$iCombineMode",
            "documentation": "**[optional]** Regions combination mode:    0 - The existing region is replaced by the new region    1 - The existing region is replaced by the intersection of itself and the new region    2 - The existing region is replaced by the union of itself and the new region    3 - The existing region is replaced by the result of performing an XOR on the two regions    4 - The existing region is replaced by the portion of itself that is outside of the new region    5 - The existing region is replaced by the portion of the new region that is outside of the existing region"
        }]
    },
    "_GDIPlus_GraphicsSetCompositingMode": {
        "documentation": "Sets the compositing mode of a Graphics object",
        "label": "_GDIPlus_GraphicsSetCompositingMode ( $hGraphics, $iCompositionMode )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$iCompositionMode",
            "documentation": "Compositing mode:    0 - Specifies that when a color is rendered, it is blended with the background color.    1 - Specifies that when a color is rendered, it overwrites the background color."
        }]
    },
    "_GDIPlus_GraphicsSetCompositingQuality": {
        "documentation": "Sets the compositing quality of a Graphics object",
        "label": "_GDIPlus_GraphicsSetCompositingQuality ( $hGraphics, $iCompositionQuality )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$iCompositionQuality",
            "documentation": "Compositing quality:    0 - Gamma correction is not applied.    1 - Gamma correction is not applied. High speed, low quality.    2 - Gamma correction is applied. Composition of high quality and speed.    3 - Gamma correction is applied.    4 - Gamma correction is not applied. Linear values are used."
        }]
    },
    "_GDIPlus_GraphicsSetInterpolationMode": {
        "documentation": "Sets the interpolation mode of a Graphics object",
        "label": "_GDIPlus_GraphicsSetInterpolationMode ( $hGraphics, $iInterpolationMode )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$iInterpolationMode",
            "documentation": "Interpolation mode:    0 - Default interpolation mode    1 - Low-quality mode    2 - High-quality mode    3 - Bilinear interpolation. No prefiltering is done    4 - Bicubic interpolation. No prefiltering is done    5 - Nearest-neighbor interpolation    6 - High-quality, bilinear interpolation. Prefiltering is performed to ensure high-quality shrinking    7 - High-quality, bicubic interpolation. Prefiltering is performed to ensure high-quality shrinking"
        }]
    },
    "_GDIPlus_GraphicsSetPixelOffsetMode": {
        "documentation": "Sets the pixel offset mode of a Graphics object",
        "label": "_GDIPlus_GraphicsSetPixelOffsetMode ( $hGraphics, $iPixelOffsetMode )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$iPixelOffsetMode",
            "documentation": "Pixel offset mode:\t0,1,3 - Pixel centers have integer coordinates\t2,4 - Pixel centers have coordinates that are half way between integer values (i.e. 0.5, 20, 105.5, etc...)"
        }]
    },
    "_GDIPlus_GraphicsSetSmoothingMode": {
        "documentation": "Sets the graphics object rendering quality",
        "label": "_GDIPlus_GraphicsSetSmoothingMode ( $hGraphics, $iSmooth )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$iSmooth",
            "documentation": "Smoothing mode:    0 - Smoothing is not applied    1 - Smoothing is applied using an 8 X 4 box filter    2 - Smoothing is applied using an 8 X 8 box filter"
        }]
    },
    "_GDIPlus_GraphicsSetTextRenderingHint": {
        "documentation": "Sets the contrast value of a Graphics object",
        "label": "_GDIPlus_GraphicsSetTextRenderingHint ( $hGraphics, $iTextRenderingHint )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$iTextRenderingHint",
            "documentation": "Text rendering mode:    0 - Character is drawn using the currently selected system font smoothing mode (also called a rendering hint)    1 - Character is drawn using its glyph bitmap and hinting to improve character appearance on stems and    2 - Character is drawn using its glyph bitmap and no hinting. This results in better performance at the    3 - Character is drawn using its antialiased glyph bitmap and hinting. This results in much better quality    4 - Character is drawn using its antialiased glyph bitmap and no hinting. Stem width differences may be    5 - Character is drawn using its glyph Microsoft ClearType bitmap and hinting. This type of text rendering"
        }]
    },
    "_GDIPlus_GraphicsSetTransform": {
        "documentation": "Sets the world transformation for a graphics object",
        "label": "_GDIPlus_GraphicsSetTransform ( $hGraphics, $hMatrix )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Handle to a Graphics object"
        }, {
            "label": "$hMatrix",
            "documentation": "Handle to a Matrix object that specifies the world transformation"
        }]
    },
    "_GDIPlus_GraphicsTransformPoints": {
        "documentation": "Converts an array of points from one coordinate space to another",
        "label": "_GDIPlus_GraphicsTransformPoints ( $hGraphics, ByRef $aPoints [, $iCoordSpaceTo = 0 [, $iCoordSpaceFrom = 1]] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points to be converted:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$iCoordSpaceTo",
            "documentation": "**[optional]** Destination coordinate space"
        }, {
            "label": "$iCoordSpaceFrom",
            "documentation": "**[optional]** Source coordinate space:    0 - World coordinate space, not physical coordinates    1 - Page coordinate space, read-world coordinates    2 - Device coordinate space, physical coordinates"
        }]
    },
    "_GDIPlus_GraphicsTranslateTransform": {
        "documentation": "Updates a Graphics object's world transformation matrix with the product of itself and a translation matrix",
        "label": "_GDIPlus_GraphicsTranslateTransform ( $hGraphics, $nDX, $nDY [, $iOrder = 0] )",
        "params": [{
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object"
        }, {
            "label": "$nDX",
            "documentation": "Horizontal component of the translation"
        }, {
            "label": "$nDY",
            "documentation": "Vertical component of the translation"
        }, {
            "label": "$iOrder",
            "documentation": "**[optional]** Order of matrices multiplication:    0 - The translation matrix is on the left    1 - The translation matrix is on the right"
        }]
    },
    "_GDIPlus_HatchBrushCreate": {
        "documentation": "Creates a HatchBrush object based on a hatch style, a foreground color, and a background color",
        "label": "_GDIPlus_HatchBrushCreate ( [$iHatchStyle = 0 [, $iARGBForeground = 0xFFFFFFFF [, $iARGBBackground = 0xFFFFFFFF]]] )",
        "params": [{
            "label": "$iHatchStyle",
            "documentation": "**[optional]** Pattern of hatch lines that will be used, see remarks. Default = $GDIP_HATCHSTYLE_HORIZONTAL (0)."
        }, {
            "label": "$iARGBForeground",
            "documentation": "**[optional]** Alpha, Red, Green and Blue components of the hatch lines"
        }, {
            "label": "$iARGBBackground",
            "documentation": "**[optional]** Alpha, Red, Green and Blue components of the hatch background"
        }]
    },
    "_GDIPlus_HICONCreateFromBitmap": {
        "documentation": "Creates an icon handle from a bitmap object",
        "label": "_GDIPlus_HICONCreateFromBitmap ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Pointer to the Bitmap object"
        }]
    },
    "_GDIPlus_ImageAttributesCreate": {
        "documentation": "Creates an ImageAttributes object",
        "label": "_GDIPlus_ImageAttributesCreate (  )",
        "params": []
    },
    "_GDIPlus_ImageAttributesDispose": {
        "documentation": "Releases an ImageAttributes object",
        "label": "_GDIPlus_ImageAttributesDispose ( $hImageAttributes )",
        "params": [{
            "label": "$hImageAttributes",
            "documentation": "Pointer to an ImageAttribute object"
        }]
    },
    "_GDIPlus_ImageAttributesSetColorKeys": {
        "documentation": "Sets or clears the color key (transparency range) for a specified category",
        "label": "_GDIPlus_ImageAttributesSetColorKeys ( $hImageAttributes [, $iColorAdjustType = 0 [, $bEnable = False [, $iARGBLow = 0 [, $iARGBHigh = 0]]]] )",
        "params": [{
            "label": "$hImageAttributes",
            "documentation": "Pointer to an ImageAttribute object"
        }, {
            "label": "$iColorAdjustType",
            "documentation": "**[optional]** The category for which the color key is set or cleared:    0 - Color adjustment applies to all categories that do not have adjustment settings of their own    1 - Color adjustment applies to bitmapped images    2 - Color adjustment applies to brush operations in metafiles    3 - Color adjustment applies to pen operations in metafiles    4 - Color adjustment applies to text drawn in metafiles"
        }, {
            "label": "$bEnable",
            "documentation": "**[optional]** If True, transparency range for the specified category is applied; otherwise, transparency"
        }, {
            "label": "$iARGBLow",
            "documentation": "**[optional]** Alpha, Red, Green and Blue components of a color that specifies the low color-key value"
        }, {
            "label": "$iARGBHigh",
            "documentation": "**[optional]** Alpha, Red, Green and Blue components of a color that specifies the high color-key value"
        }]
    },
    "_GDIPlus_ImageAttributesSetColorMatrix": {
        "documentation": "Sets or clears the color- and grayscale-adjustment matrices for a specified category",
        "label": "_GDIPlus_ImageAttributesSetColorMatrix ( $hImageAttributes [, $iColorAdjustType = 0 [, $bEnable = False [, $tClrMatrix = 0 [, $tGrayMatrix = 0 [, $iColorMatrixFlags = 0]]]]] )",
        "params": [{
            "label": "$hImageAttributes",
            "documentation": "Pointer to an ImageAttribute object"
        }, {
            "label": "$iColorAdjustType",
            "documentation": "**[optional]** The category for which the color- and grayscale-adjustment matrices are set or cleared:    0 - Color or grayscale adjustment applies to all categories that do not have adjustment settings of their own    1 - Color or grayscale adjustment applies to bitmapped images    2 - Color or grayscale adjustment applies to brush operations in metafiles    3 - Color or grayscale adjustment applies to pen operations in metafiles    4 - Color or grayscale adjustment applies to text drawn in metafiles"
        }, {
            "label": "$bEnable",
            "documentation": "**[optional]** If True, the specified matrices (color, grayscale or both) adjustments for the specified"
        }, {
            "label": "$tClrMatrix",
            "documentation": "**[optional]** $tagGDIPCOLORMATRIX structure that specifies a color-adjustment matrix"
        }, {
            "label": "$tGrayMatrix",
            "documentation": "**[optional]** $tagGDIPCOLORMATRIX structure that specifies a grayscale-adjustment matrix"
        }, {
            "label": "$iColorMatrixFlags",
            "documentation": "**[optional]** Type of image and color that will be affected by the adjustment matrices:    0 - All color values (including grays) are adjusted by the same color-adjustment matrix    1 - Colors are adjusted but gray shades are not adjusted.    2 - Colors are adjusted by one matrix and gray shades are adjusted by another matrix"
        }]
    },
    "_GDIPlus_ImageDispose": {
        "documentation": "Release an image object",
        "label": "_GDIPlus_ImageDispose ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageGetDimension": {
        "documentation": "Gets the width and height of an image which is supported by GDIPlus",
        "label": "_GDIPlus_ImageGetDimension ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": " A handle to image object"
        }]
    },
    "_GDIPlus_ImageGetFlags": {
        "documentation": "Returns enumeration of pixel data attributes contained in an image",
        "label": "_GDIPlus_ImageGetFlags ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageGetGraphicsContext": {
        "documentation": "Get the graphics context of the image",
        "label": "_GDIPlus_ImageGetGraphicsContext ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageGetHeight": {
        "documentation": "Get the image height",
        "label": "_GDIPlus_ImageGetHeight ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageGetHorizontalResolution": {
        "documentation": "Returns horizontal resolution in DPI (pixels per inch) of an image",
        "label": "_GDIPlus_ImageGetHorizontalResolution ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageGetPixelFormat": {
        "documentation": "Returns pixel format of an image: Bits per pixel, Alpha channels, RGB, Grayscale, Indexed etc",
        "label": "_GDIPlus_ImageGetPixelFormat ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageGetRawFormat": {
        "documentation": "Returns file format GUID and image format name of an image",
        "label": "_GDIPlus_ImageGetRawFormat ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageGetThumbnail": {
        "documentation": "Gets a thumbnail image from this Image object",
        "label": "_GDIPlus_ImageGetThumbnail ( $hImage [, $iWidth = 0 [, $iHeight = 0 [, $bKeepRatio = True [, $hCallback = Null [, $hCallbackData = Null]]]]] )",
        "params": [{
            "label": "$hImage",
            "documentation": " A handle to image object"
        }, {
            "label": "$iWidth",
            "documentation": " **[optional]** Width, in pixels, of the requested thumbnail image. Default is 0."
        }, {
            "label": "$iHeight",
            "documentation": " **[optional]** Height, in pixels, of the requested thumbnail image. Default is 0."
        }, {
            "label": "$bKeepRatio",
            "documentation": " **[optional]** If true destination width and height of the image will be recalculated to keep image aspect ratio. Default is True."
        }, {
            "label": "$hCallback",
            "documentation": " **[optional]** Callback function that you provide. During the process of creating or retrieving the thumbnail image, Microsoft Windows GDI+ calls this function to give you the opportunity to abort the process. The default value is NULL."
        }, {
            "label": "$hCallbackData",
            "documentation": " **[optional]** Pointer to a block of memory that contains data to be used by the callback function. The default value is NULL."
        }]
    },
    "_GDIPlus_ImageGetType": {
        "documentation": "Returns type (bitmap or metafile) of an image",
        "label": "_GDIPlus_ImageGetType ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageGetVerticalResolution": {
        "documentation": "Returns vertical resolution in DPI (pixels per inch) of an image",
        "label": "_GDIPlus_ImageGetVerticalResolution ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageGetWidth": {
        "documentation": "Get the image width",
        "label": "_GDIPlus_ImageGetWidth ( $hImage )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }]
    },
    "_GDIPlus_ImageLoadFromFile": {
        "documentation": "Create an image object based on a file",
        "label": "_GDIPlus_ImageLoadFromFile ( $sFileName )",
        "params": [{
            "label": "$sFileName",
            "documentation": "Fully qualified image file name"
        }]
    },
    "_GDIPlus_ImageLoadFromStream": {
        "documentation": "Creates an Image object based on a stream",
        "label": "_GDIPlus_ImageLoadFromStream ( $pStream )",
        "params": [{
            "label": "$pStream",
            "documentation": "Pointer to an IStream interface"
        }]
    },
    "_GDIPlus_ImageResize": {
        "documentation": "Resize an image to a new given size",
        "label": "_GDIPlus_ImageResize ( $hImage, $iNewWidth, $iNewHeight [, $iInterpolationMode = $GDIP_INTERPOLATIONMODE_HIGHQUALITYBICUBIC] )",
        "params": [{
            "label": "$hImage",
            "documentation": "A handle value"
        }, {
            "label": "$iNewWidth",
            "documentation": "An integer value"
        }, {
            "label": "$iNewHeight",
            "documentation": "An integer value"
        }, {
            "label": "$iInterpolationMode",
            "documentation": "**[optional]** An integer value. Default is $GDIP_INTERPOLATIONMODE_HIGHQUALITYBICUBIC."
        }]
    },
    "_GDIPlus_ImageRotateFlip": {
        "documentation": "Rotates and flips an image",
        "label": "_GDIPlus_ImageRotateFlip ( $hImage, $iRotateFlipType )",
        "params": [{
            "label": "$hImage",
            "documentation": "Pointer to an Image object"
        }, {
            "label": "$iRotateFlipType",
            "documentation": "Type of rotation and flip:    0 - No rotation and no flipping (A 180-degree rotation, a horizontal flip and then a vertical flip)    1 - A 90-degree rotation without flipping (A 270-degree rotation, a horizontal flip and then a vertical flip)    2 - A 180-degree rotation without flipping (No rotation, a horizontal flip followed by a vertical flip)    3 - A 270-degree rotation without flipping (A 90-degree rotation, a horizontal flip and then a vertical flip)    4 - No rotation and a horizontal flip (A 180-degree rotation followed by a vertical flip)    5 - A 90-degree rotation followed by a horizontal flip (A 270-degree rotation followed by a vertical flip)    6 - A 180-degree rotation followed by a horizontal flip (No rotation and a vertical flip)    7 - A 270-degree rotation followed by a horizontal flip (A 90-degree rotation followed by a vertical flip)"
        }]
    },
    "_GDIPlus_ImageSaveToFile": {
        "documentation": "Save an image to file",
        "label": "_GDIPlus_ImageSaveToFile ( $hImage, $sFileName )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }, {
            "label": "$sFileName",
            "documentation": "Fully qualified image file name"
        }]
    },
    "_GDIPlus_ImageSaveToFileEx": {
        "documentation": "Save an image to file",
        "label": "_GDIPlus_ImageSaveToFileEx ( $hImage, $sFileName, $sEncoder [, $tParams = 0] )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to an image object"
        }, {
            "label": "$sFileName",
            "documentation": "Fully qualified image file name"
        }, {
            "label": "$sEncoder",
            "documentation": "GUID string of encoder to be used"
        }, {
            "label": "$tParams",
            "documentation": "**[optional]** a $tagGDIPENCODERPARAMS structure or a pointer to it"
        }]
    },
    "_GDIPlus_ImageSaveToStream": {
        "documentation": "Saves an Image object to a stream",
        "label": "_GDIPlus_ImageSaveToStream ( $hImage, $pStream, $tEncoder [, $tParams = 0] )",
        "params": [{
            "label": "$hImage",
            "documentation": "Pointer to an Image object"
        }, {
            "label": "$pStream",
            "documentation": "Pointer to an IStream interface"
        }, {
            "label": "$tEncoder",
            "documentation": "a $tagGUID structure that defines the image encoder GUID"
        }, {
            "label": "$tParams",
            "documentation": "**[optional]** a $tagGDIPENCODERPARAMS structure or a pointer to it"
        }]
    },
    "_GDIPlus_ImageScale": {
        "documentation": "Scales an image by a given factor",
        "label": "_GDIPlus_ImageScale ( $hImage, $iScaleW, $iScaleH [, $iInterpolationMode = $GDIP_INTERPOLATIONMODE_HIGHQUALITYBICUBIC] )",
        "params": [{
            "label": "$hImage",
            "documentation": "A handle value"
        }, {
            "label": "$iScaleW",
            "documentation": "A floating point value"
        }, {
            "label": "$iScaleH",
            "documentation": "A floating point value"
        }, {
            "label": "$iInterpolationMode",
            "documentation": "**[optional]** An integer value. Default is $GDIP_INTERPOLATIONMODE_HIGHQUALITYBICUBIC."
        }]
    },
    "_GDIPlus_LineBrushCreate": {
        "documentation": "Creates a LinearGradientBrush object from a set of boundary points and boundary colors",
        "label": "_GDIPlus_LineBrushCreate ( $nX1, $nY1, $nX2, $nY2, $iARGBClr1, $iARGBClr2 [, $iWrapMode = 0] )",
        "params": [{
            "label": "$nX1",
            "documentation": "X coordinate of the starting point of the gradient. The starting boundary line passes through the"
        }, {
            "label": "$nY1",
            "documentation": "Y coordinate of the starting point of the gradient. The starting boundary line passes through the"
        }, {
            "label": "$nX2",
            "documentation": "X coordinate of the ending point of the gradient. The ending boundary line passes through the"
        }, {
            "label": "$nY2",
            "documentation": "Y coordinate of the ending point of the gradient. The ending boundary line passes through the"
        }, {
            "label": "$iARGBClr1",
            "documentation": "Alpha, Red, Green and Blue components of the starting color of the line"
        }, {
            "label": "$iARGBClr2",
            "documentation": "Alpha, Red, Green and Blue components of the ending color of the line"
        }, {
            "label": "$iWrapMode",
            "documentation": "**[optional]** Wrap mode that specifies how areas filled with the brush are tiled:    0 - Tiling without flipping    1 - Tiles are flipped horizontally as you move from one tile to the next in a row    2 - Tiles are flipped vertically as you move from one tile to the next in a column    3 - Tiles are flipped horizontally as you move along a row and flipped vertically as you move along a column    4 - No tiling takes place"
        }]
    },
    "_GDIPlus_LineBrushCreateFromRect": {
        "documentation": "Creates a LinearGradientBrush object from a rectangle and boundary colors",
        "label": "_GDIPlus_LineBrushCreateFromRect ( $tRECTF, $iARGBClr1, $iARGBClr2 [, $iGradientMode = 0 [, $iWrapMode = 0]] )",
        "params": [{
            "label": "$tRECTF",
            "documentation": "$tagGDIPRECTF that specifies the starting and ending points of the gradient"
        }, {
            "label": "$iARGBClr1",
            "documentation": "Alpha, Red, Green and Blue components of the starting color of the line"
        }, {
            "label": "$iARGBClr2",
            "documentation": "Alpha, Red, Green and Blue components of the ending color of the line"
        }, {
            "label": "$iGradientMode",
            "documentation": "**[optional]** The direction of the gradient:    0 - Horizontal direction from the left of the display to the right of the display    1 - Vertical direction from the top of the display to the bottom of the display    2 - Forward diagonal direction from the upper-left corner to the lower-right corner of the display    3 - Backward diagonal direction from the upper-right corner to the lower-left corner of the display"
        }, {
            "label": "$iWrapMode",
            "documentation": "**[optional]** Specifies how areas filled with the brush are tiled:    0 - Tiling without flipping    1 - Tiles are flipped horizontally as you move from one tile to the next in a row    2 - Tiles are flipped vertically as you move from one tile to the next in a column    3 - Tiles are flipped horizontally as you move along a row and flipped vertically as you move along a column    4 - No tiling takes place"
        }]
    },
    "_GDIPlus_LineBrushCreateFromRectWithAngle": {
        "documentation": "Creates a LinearGradientBrush object from a rectangle, boundary colors and angle of direction",
        "label": "_GDIPlus_LineBrushCreateFromRectWithAngle ( $tRECTF, $iARGBClr1, $iARGBClr2, $fAngle [, $bIsAngleScalable = True [, $iWrapMode = 0]] )",
        "params": [{
            "label": "$tRECTF",
            "documentation": "$tagGDIPRECTF that specifies the starting and ending points of the gradient"
        }, {
            "label": "$iARGBClr1",
            "documentation": "Alpha, Red, Green and Blue components of the starting color of the line"
        }, {
            "label": "$iARGBClr2",
            "documentation": "Alpha, Red, Green and Blue components of the ending color of the line"
        }, {
            "label": "$fAngle",
            "documentation": "Depending the value of $fIsAngleScalable, this is the angle, in degrees (see remarks)"
        }, {
            "label": "$bIsAngleScalable",
            "documentation": "**[optional]** If True, the angle of the directional line is scalable. Not scalable otherwise"
        }, {
            "label": "$iWrapMode",
            "documentation": "**[optional]** Specifies how areas filled with the brush are tiled:    0 - Tiling without flipping    1 - Tiles are flipped horizontally as you move from one tile to the next in a row    2 - Tiles are flipped vertically as you move from one tile to the next in a column    3 - Tiles are flipped horizontally as you move along a row and flipped vertically as you move along a column    4 - No tiling takes place"
        }]
    },
    "_GDIPlus_LineBrushGetColors": {
        "documentation": "Gets the starting color and ending color of a linear gradient brush",
        "label": "_GDIPlus_LineBrushGetColors ( $hLineGradientBrush )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }]
    },
    "_GDIPlus_LineBrushGetRect": {
        "documentation": "Gets the rectangle that defines the boundaries of a linear gradient brush",
        "label": "_GDIPlus_LineBrushGetRect ( $hLineGradientBrush )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }]
    },
    "_GDIPlus_LineBrushMultiplyTransform": {
        "documentation": "Updates a brush's transformation matrix with the product of itself and another matrix",
        "label": "_GDIPlus_LineBrushMultiplyTransform ( $hLineGradientBrush, $hMatrix [, $iOrder = 0] )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }, {
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object that specifies the transformation matrix"
        }, {
            "label": "$iOrder",
            "documentation": "**[optional]** Order of matrices multiplication:    0 - The passed matrix is on the left    1 - The passed matrix is on the right"
        }]
    },
    "_GDIPlus_LineBrushResetTransform": {
        "documentation": "Resets the transformation matrix of a linear gradient brush to the identity matrix",
        "label": "_GDIPlus_LineBrushResetTransform ( $hLineGradientBrush )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }]
    },
    "_GDIPlus_LineBrushSetBlend": {
        "documentation": "Sets the blend factors and the blend positions of a linear gradient brush to create a custom blend",
        "label": "_GDIPlus_LineBrushSetBlend ( $hLineGradientBrush, $aBlends )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }, {
            "label": "$aBlends",
            "documentation": "Array of blend factors and blend positions:    [0][0] - Number of blend factors and blend positions, must be at least 2    [1][0] - Factor 1    [1][1] - Position 1    [2][0] - Factor 2    [2][1] - Position 2    [n][0] - Factor n    [n][1] - Position n"
        }]
    },
    "_GDIPlus_LineBrushSetColors": {
        "documentation": "Sets the starting color and ending color of a linear gradient brush",
        "label": "_GDIPlus_LineBrushSetColors ( $hLineGradientBrush, $iARGBStart, $iARGBEnd )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }, {
            "label": "$iARGBStart",
            "documentation": "Alpha, Red, Green and Blue components of the starting color"
        }, {
            "label": "$iARGBEnd",
            "documentation": "Alpha, Red, Green and Blue components of the ending color"
        }]
    },
    "_GDIPlus_LineBrushSetGammaCorrection": {
        "documentation": "Specifies whether gamma correction is enabled for a linear gradient brush",
        "label": "_GDIPlus_LineBrushSetGammaCorrection ( $hLineGradientBrush [, $bUseGammaCorrection = True] )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }, {
            "label": "$bUseGammaCorrection",
            "documentation": "**[optional]** If True, gamma correction is enabled; otherwise gamma correction is disabled"
        }]
    },
    "_GDIPlus_LineBrushSetLinearBlend": {
        "documentation": "Sets the blend shape of a linear gradient brush to create a custom blend based on a triangular shape",
        "label": "_GDIPlus_LineBrushSetLinearBlend ( $hLineGradientBrush, $fFocus [, $fScale = 1] )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }, {
            "label": "$fFocus",
            "documentation": "Number in the range 0.0 to 1.0 that specifies the position of the ending color"
        }, {
            "label": "$fScale",
            "documentation": "**[optional]** Number in the range 0.0 to 1.0 that specifies the percentage of the gradient's ending color that gets blended, at the focus position, with the gradient's starting color. The default value is 1, which specifies that the ending color is at full intensity"
        }]
    },
    "_GDIPlus_LineBrushSetPresetBlend": {
        "documentation": "Sets the colors to be interpolated for a linear gradient brush and their corresponding blend positions",
        "label": "_GDIPlus_LineBrushSetPresetBlend ( $hLineGradientBrush, $aInterpolations )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }, {
            "label": "$aInterpolations",
            "documentation": "Array of blend colors and blend positions:    [0][0] - Number of blend colors and blend positions, must be at least 2    [1][0] - Color 1    [1][1] - Position 1    [2][0] - Color 2    [2][1] - Position 2    [n][0] - Color n    [n][1] - Position n"
        }]
    },
    "_GDIPlus_LineBrushSetSigmaBlend": {
        "documentation": "Sets the blend shape of a linear gradient brush to create a custom blend based on a bell-shaped curve",
        "label": "_GDIPlus_LineBrushSetSigmaBlend ( $hLineGradientBrush, $fFocus [, $fScale = 1] )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }, {
            "label": "$fFocus",
            "documentation": "Number in the range 0.0 to 1.0 that specifies the position of the ending color"
        }, {
            "label": "$fScale",
            "documentation": "**[optional]** Number in the range 0.0 to 1.0 that specifies the percentage of the gradient's ending"
        }]
    },
    "_GDIPlus_LineBrushSetTransform": {
        "documentation": "Sets the transformation matrix of a linear gradient brush",
        "label": "_GDIPlus_LineBrushSetTransform ( $hLineGradientBrush, $hMatrix )",
        "params": [{
            "label": "$hLineGradientBrush",
            "documentation": "Pointer to a LinearGradientBrush object"
        }, {
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object that specifies the transformation matrix"
        }]
    },
    "_GDIPlus_MatrixClone": {
        "documentation": "Clones a Matrix object",
        "label": "_GDIPlus_MatrixClone ( $hMatrix )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object"
        }]
    },
    "_GDIPlus_MatrixCreate": {
        "documentation": "Creates and initializes a Matrix object that represents the identity matrix",
        "label": "_GDIPlus_MatrixCreate (  )",
        "params": []
    },
    "_GDIPlus_MatrixDispose": {
        "documentation": "Release a matrix object",
        "label": "_GDIPlus_MatrixDispose ( $hMatrix )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "Handle to a Matrix object"
        }]
    },
    "_GDIPlus_MatrixGetElements": {
        "documentation": "Gets the elements of a matrix",
        "label": "_GDIPlus_MatrixGetElements ( $hMatrix )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object"
        }]
    },
    "_GDIPlus_MatrixInvert": {
        "documentation": "Replaces the elements of a matrix with the elements of its inverse",
        "label": "_GDIPlus_MatrixInvert ( $hMatrix )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object"
        }]
    },
    "_GDIPlus_MatrixMultiply": {
        "documentation": "Updates a matrix with the product of itself and another matrix",
        "label": "_GDIPlus_MatrixMultiply ( $hMatrix1, $hMatrix2 [, $iOrder = 0] )",
        "params": [{
            "label": "$hMatrix1",
            "documentation": "Pointer to a Matrix object"
        }, {
            "label": "$hMatrix2",
            "documentation": "Pointer to a Matrix object that will be multiplied by the first matrix"
        }, {
            "label": "$iOrder",
            "documentation": "**[optional]** Order of matrices multiplication:    0 - The second matrix is on the left    1 - The second matrix is on the right"
        }]
    },
    "_GDIPlus_MatrixRotate": {
        "documentation": "Updates a matrix with the product of itself and a rotation matrix",
        "label": "_GDIPlus_MatrixRotate ( $hMatrix, $fAngle [, $bAppend = False] )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "Handle to a Matrix object"
        }, {
            "label": "$fAngle",
            "documentation": "The angle of rotation in degrees. Positive values specify clockwise rotation."
        }, {
            "label": "$bAppend",
            "documentation": "**[optional]** Specifies the order of the multiplication:    True - Specifies that the rotation matrix is on the left    False - Specifies that the rotation matrix is on the right"
        }]
    },
    "_GDIPlus_MatrixScale": {
        "documentation": "Updates a matrix with the product of itself and a scaling matrix",
        "label": "_GDIPlus_MatrixScale ( $hMatrix, $fScaleX, $fScaleY [, $bOrder = False] )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "Handle to a Matrix object"
        }, {
            "label": "$fScaleX",
            "documentation": "Multiplier to scale the x-axis"
        }, {
            "label": "$fScaleY",
            "documentation": "Multiplier to scale the y-axis"
        }, {
            "label": "$bOrder",
            "documentation": "**[optional]** Specifies the order of the multiplication:    True - Specifies that the scaling matrix is on the left    False - Specifies that the scaling matrix is on the right"
        }]
    },
    "_GDIPlus_MatrixSetElements": {
        "documentation": "Sets the elements of a matrix",
        "label": "_GDIPlus_MatrixSetElements ( $hMatrix [, $nM11 = 1 [, $nM12 = 0 [, $nM21 = 0 [, $nM22 = 1 [, $nDX = 0 [, $nDY = 0]]]]]] )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "A handle value"
        }, {
            "label": "$nM11",
            "documentation": "**[optional]** A floating point number value. Default is 1"
        }, {
            "label": "$nM12",
            "documentation": "**[optional]** A floating point number value. Default is 0"
        }, {
            "label": "$nM21",
            "documentation": "**[optional]** A floating point number value. Default is 0"
        }, {
            "label": "$nM22",
            "documentation": "**[optional]** A floating point number value. Default is 1"
        }, {
            "label": "$nDX",
            "documentation": "**[optional]** A floating point number value. Default is 0"
        }, {
            "label": "$nDY",
            "documentation": "**[optional]** A floating point number value. Default is 0"
        }]
    },
    "_GDIPlus_MatrixShear": {
        "documentation": "Updates a matrix with the product of itself and another matrix",
        "label": "_GDIPlus_MatrixShear ( $hMatrix, $fShearX, $fShearY [, $iOrder = 0] )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object"
        }, {
            "label": "$fShearX",
            "documentation": "Real number that specifies the horizontal shear factor"
        }, {
            "label": "$fShearY",
            "documentation": "Real number that specifies the vertical shear factor"
        }, {
            "label": "$iOrder",
            "documentation": "**[optional]** Order of matrices multiplication:    0 - The passed matrix is on the left    1 - The passed matrix is on the right"
        }]
    },
    "_GDIPlus_MatrixTransformPoints": {
        "documentation": "Multiplies each point in an array by a matrix",
        "label": "_GDIPlus_MatrixTransformPoints ( $hMatrix, ByRef $aPoints )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points to be transformed:    [0][0] - Number of points    [1][0] - Point 1 X coordinate    [1][1] - Point 1 Y coordinate    [2][0] - Point 2 X coordinate    [2][1] - Point 2 Y coordinate    [n][0] - Point n X coordinate    [n][1] - Point n Y coordinate"
        }]
    },
    "_GDIPlus_MatrixTranslate": {
        "documentation": "Updates a matrix with the product of itself and a translation matrix",
        "label": "_GDIPlus_MatrixTranslate ( $hMatrix, $fOffsetX, $fOffsetY [, $bAppend = False] )",
        "params": [{
            "label": "$hMatrix",
            "documentation": "Handle to a Matrix object"
        }, {
            "label": "$fOffsetX",
            "documentation": "Amount of pixels to add along the x-axis"
        }, {
            "label": "$fOffsetY",
            "documentation": "Amount of pixels to add along the y-axis"
        }, {
            "label": "$bAppend",
            "documentation": "**[optional]** Specifies the order of the multiplication:    True - Specifies that the translation matrix is on the left    False - Specifies that the translation matrix is on the right"
        }]
    },
    "_GDIPlus_PaletteInitialize": {
        "documentation": "Initializes a standard, optimal, or custom color palette",
        "label": "_GDIPlus_PaletteInitialize ( $iEntries [, $iPaletteType = $GDIP_PaletteTypeOptimal [, $iOptimalColors = 0 [, $bUseTransparentColor = True [, $hBitmap = Null]]]] )",
        "params": [{
            "label": "$iEntries",
            "documentation": "Number of Entries."
        }, {
            "label": "$iPaletteType",
            "documentation": "**[optional]** PaletteType constant that specifies the palette type ($GDIP_PaletteType*)."
        }, {
            "label": "$iOptimalColors",
            "documentation": "**[optional]** Integer that specifies the number of colors you want to have in an optimal palette based on a specified bitmap.If this parameter is greater than 0, the palettetype parameter must be set to PaletteTypeOptimal and the bitmap parameter must point to a Bitmap object."
        }, {
            "label": "$bUseTransparentColor",
            "documentation": "**[optional]** Boolean value that specifies whether to include the transparent color in the palette.Set to TRUE to include the transparent color; otherwise FALSE."
        }, {
            "label": "$hBitmap",
            "documentation": "**[optional]** Handle of a Bitmap object for which an optimal palette will be created."
        }]
    },
    "_GDIPlus_ParamAdd": {
        "documentation": "Add a value to an encoder parameter list",
        "label": "_GDIPlus_ParamAdd ( ByRef $tParams, $sGUID, $iNbOfValues, $iType, $pValues )",
        "params": [{
            "label": "$tParams",
            "documentation": "$tagGDIPENCODERPARAMS structure returned from _GDIPlus_ParamInit()"
        }, {
            "label": "$sGUID",
            "documentation": "Encoder parameter GUID. Can be one of the following:    $GDIP_EPGCHROMINANCETABLE - Chrominance table settings    $GDIP_EPGCOLORDEPTH - Color depth settings    $GDIP_EPGCOMPRESSION - Compression settings    $GDIP_EPGLUMINANCETABLE - Luminance table settings    $GDIP_EPGQUALITY - Quality settings    $GDIP_EPGRENDERMETHOD - Render method settings    $GDIP_EPGSAVEFLAG - Save flag settings    $GDIP_EPGSCANMETHOD - Scan mode settings    $GDIP_EPGTRANSFORMATION - Transformation settings    $GDIP_EPGVERSION - Software version settings"
        }, {
            "label": "$iNbOfValues",
            "documentation": "Number of elements in the $pValues array"
        }, {
            "label": "$iType",
            "documentation": "Encoder parameter value type. Can be one of the following:    $GDIP_EPTBYTE - 8 bit unsigned integer    $GDIP_EPTASCII - Null terminated character string    $GDIP_EPTSHORT - 16 bit unsigned integer    $GDIP_EPTLONG - 32 bit unsigned integer    $GDIP_EPTRATIONAL - Two longs (numerator, denominator)    $GDIP_EPTLONGRANGE - Two longs (low, high)    $GDIP_EPTUNDEFINED - Array of bytes of any type    $GDIP_EPTRATIONALRANGE - Two longs (low, high)"
        }, {
            "label": "$pValues",
            "documentation": "Pointer to an array of values. Each value has the type specified by the $iType data member."
        }]
    },
    "_GDIPlus_ParamInit": {
        "documentation": "Allocate an empty encoder parameter list",
        "label": "_GDIPlus_ParamInit ( $iCount )",
        "params": [{
            "label": "$iCount",
            "documentation": "The total number of $tagGDIPENCODERPARAM that the list can contain"
        }]
    },
    "_GDIPlus_ParamSize": {
        "documentation": "Get an encoder parameter size",
        "label": "_GDIPlus_ParamSize (  )",
        "params": []
    },
    "_GDIPlus_PathAddArc": {
        "documentation": "Adds an elliptical arc to the current figure of a path",
        "label": "_GDIPlus_PathAddArc ( $hPath, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$nX",
            "documentation": "X coordinate of the upper-left corner of the ellipse that contains the arc"
        }, {
            "label": "$nY",
            "documentation": "Y coordinate of the upper-left corner of the ellipse that contains the arc"
        }, {
            "label": "$nWidth",
            "documentation": "Width of the bounding rectangle for the ellipse that contains the arc"
        }, {
            "label": "$nHeight",
            "documentation": "Height of the bounding rectangle for the ellipse that contains the arc"
        }, {
            "label": "$fStartAngle",
            "documentation": "The angle, in degrees, between the X axis and the starting point of the arc"
        }, {
            "label": "$fSweepAngle",
            "documentation": "The angle, in degrees, between the starting and ending points of the arc"
        }]
    },
    "_GDIPlus_PathAddBezier": {
        "documentation": "Adds a bezier spline to the current figure of a path",
        "label": "_GDIPlus_PathAddBezier ( $hPath, $nX1, $nY1, $nX2, $nY2, $nX3, $nY3, $nX4, $nY4 )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$nX1",
            "documentation": "X coordinate of the starting point"
        }, {
            "label": "$nY1",
            "documentation": "Y coordinate of the starting point"
        }, {
            "label": "$nX2",
            "documentation": "X coordinate of the first control point"
        }, {
            "label": "$nY2",
            "documentation": "Y coordinate of the first control point"
        }, {
            "label": "$nX3",
            "documentation": "X coordinate of the second control point"
        }, {
            "label": "$nY3",
            "documentation": "Y coordinate of the second control point"
        }, {
            "label": "$nX4",
            "documentation": "X coordinate of the ending point"
        }, {
            "label": "$nY4",
            "documentation": "Y coordinate of the ending point"
        }]
    },
    "_GDIPlus_PathAddClosedCurve": {
        "documentation": "Adds a closed cardinal spline to a path",
        "label": "_GDIPlus_PathAddClosedCurve ( $hPath, $aPoints )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that define the cardinal spline:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }]
    },
    "_GDIPlus_PathAddClosedCurve2": {
        "documentation": "Adds a closed cardinal spline to a path",
        "label": "_GDIPlus_PathAddClosedCurve2 ( $hPath, $aPoints [, $nTension = 0.5] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that define the cardinal spline:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$nTension",
            "documentation": "**[optional]** Nonnegative real number that controls the length of the curve and how the curve bends.A value of 0 specifies that the spline is a sequence of straight lines.As the value increases, the curve becomes fuller."
        }]
    },
    "_GDIPlus_PathAddCurve": {
        "documentation": "Adds a cardinal spline to the current figure of a path",
        "label": "_GDIPlus_PathAddCurve ( $hPath, $aPoints )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that define the cardinal spline:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }]
    },
    "_GDIPlus_PathAddCurve2": {
        "documentation": "Adds a cardinal spline to the current figure of a path",
        "label": "_GDIPlus_PathAddCurve2 ( $hPath, $aPoints [, $nTension = 0.5] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that define the cardinal spline:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$nTension",
            "documentation": "**[optional]** Nonnegative real number that controls the length of the curve and how the curve bends.A value of 0 specifies that the spline is a sequence of straight lines.As the value increases, the curve becomes fuller."
        }]
    },
    "_GDIPlus_PathAddCurve3": {
        "documentation": "Adds a cardinal spline to the current figure of a path",
        "label": "_GDIPlus_PathAddCurve3 ( $hPath, $aPoints, $iOffset, $iNumOfSegments [, $nTension = 0.5] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that define the cardinal spline:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }, {
            "label": "$iOffset",
            "documentation": "The index of the array element that is used as the first point of the cardinal spline, this is the index of the specific point in the array minus 1"
        }, {
            "label": "$iNumOfSegments",
            "documentation": "Number of segments in the cardinal spline. Segments are the curves that connect consecutive points in the array"
        }, {
            "label": "$nTension",
            "documentation": "**[optional]** Nonnegative real number that controls the length of the curve and how the curve bends.As the value increases, the curve becomes fuller."
        }]
    },
    "_GDIPlus_PathAddEllipse": {
        "documentation": "Adds an ellipse to the current figure a path",
        "label": "_GDIPlus_PathAddEllipse ( $hPath, $nX, $nY, $nWidth, $nHeight )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle that bounds the ellipse"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle that bounds the ellipse"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle that bounds the ellipse"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle that bounds the ellipse"
        }]
    },
    "_GDIPlus_PathAddLine": {
        "documentation": "Adds a line to the current figure of a path",
        "label": "_GDIPlus_PathAddLine ( $hPath, $nX1, $nY1, $nX2, $nY2 )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$nX1",
            "documentation": "The X coordinate of the starting point of the line"
        }, {
            "label": "$nY1",
            "documentation": "The Y coordinate of the starting point of the line"
        }, {
            "label": "$nX2",
            "documentation": "The X coordinate of the ending point of the line"
        }, {
            "label": "$nY2",
            "documentation": "The Y coordinate of the ending point of the line"
        }]
    },
    "_GDIPlus_PathAddLine2": {
        "documentation": "Adds a sequence of lines to the current figure of a path",
        "label": "_GDIPlus_PathAddLine2 ( $hPath, $aPoints )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that define the lines:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }]
    },
    "_GDIPlus_PathAddPath": {
        "documentation": "Adds a path to another path",
        "label": "_GDIPlus_PathAddPath ( $hPath1, $hPath2 [, $bConnect = True] )",
        "params": [{
            "label": "$hPath1",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$hPath2",
            "documentation": "Pointer to a GraphicsPath object to be added to $hPath1"
        }, {
            "label": "$bConnect",
            "documentation": "**[optional]** Specifies whether the first figure in the added path is part of the last figure in this path:    True - The first figure in the added $hPath2 is part of the last figure in the $hPath1 path    False - The first figure in the added $hPath2 is separated from the last figure in the $hPath1 path"
        }]
    },
    "_GDIPlus_PathAddPie": {
        "documentation": "Adds a pie to a path",
        "label": "_GDIPlus_PathAddPie ( $hPath, $nX, $nY, $nWidth, $nHeight, $fStartAngle, $fSweepAngle )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle that bounds the ellipse that bounds the pie"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle that bounds the ellipse that bounds the pie"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle that bounds the ellipse that bounds the pie"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle that bounds the ellipse that bounds the pie"
        }, {
            "label": "$fStartAngle",
            "documentation": "The angle, in degrees, between the X axis and the starting point of the arc that defines the pie.A positive value specifies clockwise rotation."
        }, {
            "label": "$fSweepAngle",
            "documentation": "The angle, in degrees, between the starting and ending points of the arc that defines the pie.A positive value specifies clockwise rotation."
        }]
    },
    "_GDIPlus_PathAddPolygon": {
        "documentation": "Adds a polygon to a path",
        "label": "_GDIPlus_PathAddPolygon ( $hPath, $aPoints )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$aPoints",
            "documentation": "Array of points that define the vertices of the polygon:    [0][0] - Number of points    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [2][0] - Point 2 X position    [2][1] - Point 2 Y position    [n][0] - Point n X position    [n][1] - Point n Y position"
        }]
    },
    "_GDIPlus_PathAddRectangle": {
        "documentation": "Adds a rectangle to a path",
        "label": "_GDIPlus_PathAddRectangle ( $hPath, $nX, $nY, $nWidth, $nHeight )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$nX",
            "documentation": "X coordinate of the upper-left corner of the rectangle"
        }, {
            "label": "$nY",
            "documentation": "Y coordinate of the upper-left corner of the rectangle"
        }, {
            "label": "$nWidth",
            "documentation": "Width of the rectangle"
        }, {
            "label": "$nHeight",
            "documentation": "Height of the rectangle"
        }]
    },
    "_GDIPlus_PathAddString": {
        "documentation": "Adds the outline of a string to a path",
        "label": "_GDIPlus_PathAddString ( $hPath, $sString, $tLayout, $hFamily [, $iStyle = 0 [, $fSize = 8.5 [, $hFormat = 0]]] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$sString",
            "documentation": "String to be drawn"
        }, {
            "label": "$tLayout",
            "documentation": "$tagGDIPRECTF structure that bounds the string"
        }, {
            "label": "$hFamily",
            "documentation": "Pointer to a FontFamily object that specifies the font family for the string"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** The style of the typeface. Can be a combination of the following:    0 - Normal weight or thickness of the typeface    1 - Bold typeface    2 - Italic typeface    4 - Underline    8 - Strikethrough"
        }, {
            "label": "$fSize",
            "documentation": "**[optional]** The em size, in world units, of the string characters"
        }, {
            "label": "$hFormat",
            "documentation": "**[optional]** Pointer to a StringFormat object that specifies layout information for the string"
        }]
    },
    "_GDIPlus_PathBrushCreate": {
        "documentation": "Creates a PathGradientBrush object based on an array of points and initializes the wrap mode of the brush",
        "label": "_GDIPlus_PathBrushCreate ( $aPoints [, $iWrapMode = 0] )",
        "params": [{
            "label": "$aPoints",
            "documentation": "Array of points that specify the boundary path of the path gradient brush    [0][0] - Number of points    [1][0] - Point 1 X coordinate    [1][1] - Point 1 Y coordinate    [2][0] - Point 2 X coordinate    [2][1] - Point 2 Y coordinate    [n][0] - Point n X coordinate    [n][1] - Point n Y coordinate"
        }, {
            "label": "$iWrapMode",
            "documentation": "**[optional]** Wrap mode that specifies how areas filled with the brush are tiled:    0 - Tiling without flipping    1 - Tiles are flipped horizontally as you move from one tile to the next in a row    2 - Tiles are flipped vertically as you move from one tile to the next in a column    3 - Tiles are flipped horizontally as you move along a row and flipped vertically as you move along a column    4 - No tiling takes place"
        }]
    },
    "_GDIPlus_PathBrushCreateFromPath": {
        "documentation": "Creates a PathGradientBrush object based on a GraphicsPath object",
        "label": "_GDIPlus_PathBrushCreateFromPath ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object that specifies the boundary path of the path gradient brush"
        }]
    },
    "_GDIPlus_PathBrushGetCenterPoint": {
        "documentation": "Gets the center point of a path gradient brush",
        "label": "_GDIPlus_PathBrushGetCenterPoint ( $hPathGradientBrush )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }]
    },
    "_GDIPlus_PathBrushGetFocusScales": {
        "documentation": "Gets the focus scales of a path gradient brush",
        "label": "_GDIPlus_PathBrushGetFocusScales ( $hPathGradientBrush )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }]
    },
    "_GDIPlus_PathBrushGetPointCount": {
        "documentation": "Gets the number of points in the array of points that defines a brush's boundary path",
        "label": "_GDIPlus_PathBrushGetPointCount ( $hPathGradientBrush )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }]
    },
    "_GDIPlus_PathBrushGetRect": {
        "documentation": "Gets the smallest rectangle that encloses the boundary path of a path gradient brush",
        "label": "_GDIPlus_PathBrushGetRect ( $hPathGradientBrush )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }]
    },
    "_GDIPlus_PathBrushGetWrapMode": {
        "documentation": "Gets the wrap mode currently set for a path gradient brush",
        "label": "_GDIPlus_PathBrushGetWrapMode ( $hPathGradientBrush )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }]
    },
    "_GDIPlus_PathBrushMultiplyTransform": {
        "documentation": "Updates a brush's transformation matrix with the product of itself and another matrix",
        "label": "_GDIPlus_PathBrushMultiplyTransform ( $hPathGradientBrush, $hMatrix [, $iOrder = 0] )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$hMatrix",
            "documentation": "Pointer to a matrix to be multiplied by the brush's current transformation matrix"
        }, {
            "label": "$iOrder",
            "documentation": "**[optional]** Order of matrices multiplication:    0 - The passed matrix is on the left    1 - The passed matrix is on the right"
        }]
    },
    "_GDIPlus_PathBrushResetTransform": {
        "documentation": "Resets the transformation matrix of a path gradient brush to the identity matrix",
        "label": "_GDIPlus_PathBrushResetTransform ( $hPathGradientBrush )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }]
    },
    "_GDIPlus_PathBrushSetBlend": {
        "documentation": "Sets the blend factors and the blend positions of a path gradient brush",
        "label": "_GDIPlus_PathBrushSetBlend ( $hPathGradientBrush, $aBlends )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$aBlends",
            "documentation": "Array of blend factors and blend positions:    [0][0] - Number of blend factors and blend positions    [1][0] - Factor 1    [1][1] - Position 1    [2][0] - Factor 2    [2][1] - Position 2    [n][0] - Factor n    [n][1] - Position n"
        }]
    },
    "_GDIPlus_PathBrushSetCenterColor": {
        "documentation": "Sets the color of the center point of a path gradient brush",
        "label": "_GDIPlus_PathBrushSetCenterColor ( $hPathGradientBrush, $iARGB )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$iARGB",
            "documentation": "Alpha, Red, Green and Blue components of the new center color"
        }]
    },
    "_GDIPlus_PathBrushSetCenterPoint": {
        "documentation": "Sets the center point of a path gradient brush",
        "label": "_GDIPlus_PathBrushSetCenterPoint ( $hPathGradientBrush, $nX, $nY )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$nX",
            "documentation": "X coordinate of the new center point"
        }, {
            "label": "$nY",
            "documentation": "Y coordinate of the new center point"
        }]
    },
    "_GDIPlus_PathBrushSetFocusScales": {
        "documentation": "Sets the focus scales of a path gradient brush",
        "label": "_GDIPlus_PathBrushSetFocusScales ( $hPathGradientBrush, $fScaleX, $fScaleY )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$fScaleX",
            "documentation": "Real number that specifies the X focus scale"
        }, {
            "label": "$fScaleY",
            "documentation": "Real number that specifies the Y focus scale"
        }]
    },
    "_GDIPlus_PathBrushSetGammaCorrection": {
        "documentation": "Specifies whether gamma correction is enabled for a path gradient brush",
        "label": "_GDIPlus_PathBrushSetGammaCorrection ( $hPathGradientBrush, $bUseGammaCorrection )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$bUseGammaCorrection",
            "documentation": "If True, gamma correction is enabled; otherwise, gamma correction is disabled"
        }]
    },
    "_GDIPlus_PathBrushSetLinearBlend": {
        "documentation": "Sets the blend shape of a path gradient brush to create a custom blend based on a triangular shape",
        "label": "_GDIPlus_PathBrushSetLinearBlend ( $hPathGradientBrush, $fFocus [, $fScale = 1] )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$fFocus",
            "documentation": "Number in the range 0.0 to 1.0 that specifies where the center color will be at its highest intensity"
        }, {
            "label": "$fScale",
            "documentation": "**[optional]** Number in the range 0.0 to 1.0 that specifies the maximum intensity of center color that gets blended with the boundary color"
        }]
    },
    "_GDIPlus_PathBrushSetPresetBlend": {
        "documentation": "Sets the preset colors and the blend positions of a path gradient brush",
        "label": "_GDIPlus_PathBrushSetPresetBlend ( $hPathGradientBrush, $aInterpolations )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$aInterpolations",
            "documentation": "Array of blend colors and blend positions:    [0][0] - Number of preset colors and blend positions    [1][0] - Color 1    [1][1] - Position 1    [2][0] - Color 2    [2][1] - Position 2    [n][0] - Color n    [n][1] - Position n"
        }]
    },
    "_GDIPlus_PathBrushSetSigmaBlend": {
        "documentation": "Sets the blend shape of a path gradient brush to create a custom blend based on a bell-shaped curve",
        "label": "_GDIPlus_PathBrushSetSigmaBlend ( $hPathGradientBrush, $fFocus [, $fScale = 1] )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$fFocus",
            "documentation": "Number in the range 0.0 to 1.0 that specifies where the center color will be at its highest intensity"
        }, {
            "label": "$fScale",
            "documentation": "**[optional]** Number in the range 0.0 to 1.0 that specifies the maximum intensity of center color that gets blended with the boundary color"
        }]
    },
    "_GDIPlus_PathBrushSetSurroundColor": {
        "documentation": "Sets the surround color for a path gradient brush",
        "label": "_GDIPlus_PathBrushSetSurroundColor ( $hPathGradientBrush, $iARGB )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$iARGB",
            "documentation": "Alpha, Red, Green and Blue components of the new surrounding colors"
        }]
    },
    "_GDIPlus_PathBrushSetSurroundColorsWithCount": {
        "documentation": "Sets the surround colors currently specified for a path gradient brush",
        "label": "_GDIPlus_PathBrushSetSurroundColorsWithCount ( $hPathGradientBrush, $aColors )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$aColors",
            "documentation": "Array containing the surrounding colors:    [0] - Number of colors    [1] - Color 1    [2] - Color 2    [n] - Color n"
        }]
    },
    "_GDIPlus_PathBrushSetTransform": {
        "documentation": "Sets the transformation matrix of a path gradient brush",
        "label": "_GDIPlus_PathBrushSetTransform ( $hPathGradientBrush, $hMatrix )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object that specifies the transformation matrix"
        }]
    },
    "_GDIPlus_PathBrushSetWrapMode": {
        "documentation": "Sets the wrap mode of a path gradient brush",
        "label": "_GDIPlus_PathBrushSetWrapMode ( $hPathGradientBrush, $iWrapMode )",
        "params": [{
            "label": "$hPathGradientBrush",
            "documentation": "Pointer to a PathGradientBrush object"
        }, {
            "label": "$iWrapMode",
            "documentation": "Wrap mode that specifies how an area is tiled when it is painted with a brush:    0 - Tiling without flipping    1 - Tiles are flipped horizontally as you move from one tile to the next in a row    2 - Tiles are flipped vertically as you move from one tile to the next in a column    3 - Tiles are flipped horizontally as you move along a row and flipped vertically as you move along a column"
        }]
    },
    "_GDIPlus_PathClone": {
        "documentation": "Clones a path",
        "label": "_GDIPlus_PathClone ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object to be cloned"
        }]
    },
    "_GDIPlus_PathCloseFigure": {
        "documentation": "Closes the current figure of a path",
        "label": "_GDIPlus_PathCloseFigure ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathCreate": {
        "documentation": "Creates a GraphicsPath object and initializes the fill mode",
        "label": "_GDIPlus_PathCreate ( [$iFillMode = 0] )",
        "params": [{
            "label": "$iFillMode",
            "documentation": "**[optional]** Fill mode of the interior of the path figures:    0 - The areas are filled according to the even-odd parity rule    1 - The areas are filled according to the nonzero winding rule"
        }]
    },
    "_GDIPlus_PathCreate2": {
        "documentation": "Creates a GraphicsPath object based on an array of points, an array of types, and a fill mode",
        "label": "_GDIPlus_PathCreate2 ( $aPathData [, $iFillMode = 0] )",
        "params": [{
            "label": "$aPathData",
            "documentation": "Array of points and types that specifies the endpoints and control points of the lines and bezier splines that are used to draw the path and the points types:    [0][0] - Number of points and types    [1][0] - Point 1 X position    [1][1] - Point 1 Y position    [1][2] - Point 1 type    [n][0] - Point n X position    [n][1] - Point n Y position    [1][2] - Point n typeEach point type is one of the following values:    0x00 - The point is the start of a figure    0x01 - The point is one of the two endpoints of a line    0x03 - The point is an endpoint or control point of a cubic bezier spline    0x20 - The point is a marker    0x80 - The point is the last point in a closed subpath (figure)"
        }, {
            "label": "$iFillMode",
            "documentation": "**[optional]** Fill mode of the interior of the path figures:    0 - The areas are filled according to the even-odd parity rule    1 - The areas are filled according to the nonzero winding rule"
        }]
    },
    "_GDIPlus_PathDispose": {
        "documentation": "Releases a GraphicsPath object",
        "label": "_GDIPlus_PathDispose ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathFlatten": {
        "documentation": "Applies a transformation to a path and converts each curve in the path to a sequence of connected lines",
        "label": "_GDIPlus_PathFlatten ( $hPath [, $fFlatness = 0.25 [, $hMatrix = 0]] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$fFlatness",
            "documentation": "**[optional]** Real number that specifies the maximum error between the path and its flattened approximation.Reducing the flatness increases the number of line segments in the approximation"
        }, {
            "label": "$hMatrix",
            "documentation": "**[optional]** Pointer to a Matrix object that specifies the transformation to be applied to the path's data points"
        }]
    },
    "_GDIPlus_PathGetData": {
        "documentation": "Gets an array of points and types from a path",
        "label": "_GDIPlus_PathGetData ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathGetFillMode": {
        "documentation": "Gets the fill mode of a path",
        "label": "_GDIPlus_PathGetFillMode ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathGetLastPoint": {
        "documentation": "Gets the ending point of the last figure in a path",
        "label": "_GDIPlus_PathGetLastPoint ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathGetPointCount": {
        "documentation": "Gets the number of points in a path's array of data points",
        "label": "_GDIPlus_PathGetPointCount ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathGetPoints": {
        "documentation": "Gets an array of points from a path",
        "label": "_GDIPlus_PathGetPoints ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathGetWorldBounds": {
        "documentation": "Gets the bounding rectangle for a path",
        "label": "_GDIPlus_PathGetWorldBounds ( $hPath [, $hMatrix = 0 [, $hPen = 0]] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$hMatrix",
            "documentation": "**[optional]** Pointer to a Matrix object that specifies a transformation to be applied to this path before the bounding rectangle is calculated. The path is not permanently transformed"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Pointer to a Pen object that influences the size of the bounding rectangle.The bounding rectangle bounds will be large enough to enclose the path when the path is drawn with the specified pen."
        }]
    },
    "_GDIPlus_PathIsOutlineVisiblePoint": {
        "documentation": "Determines whether a specified point touches the outline of a path with the specified Graphics and Pen",
        "label": "_GDIPlus_PathIsOutlineVisiblePoint ( $hPath, $nX, $nY [, $hPen = 0 [, $hGraphics = 0]] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$nX",
            "documentation": "X coordinate of the point to test"
        }, {
            "label": "$nY",
            "documentation": "Y coordinate of the point to test"
        }, {
            "label": "$hPen",
            "documentation": "**[optional]** Pointer to a Pen object that define the width of point to test. If 0, a solid black pen with a width of 1 will be used"
        }, {
            "label": "$hGraphics",
            "documentation": "**[optional]** Pointer to a Graphics object that specifies a world-to-device transformation. If 0, the test is done in world coordinates; otherwise, the test is done in device coordinates."
        }]
    },
    "_GDIPlus_PathIsVisiblePoint": {
        "documentation": "Determines whether a specified point lies in the area that is filled when a path is filled by a specified Graphics object",
        "label": "_GDIPlus_PathIsVisiblePoint ( $hPath, $nX, $nY [, $hGraphics = 0] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$nX",
            "documentation": "X coordinate of the point to test"
        }, {
            "label": "$nY",
            "documentation": "Y coordinate of the point to test"
        }, {
            "label": "$hGraphics",
            "documentation": "**[optional]** Pointer to a Graphics object that specifies a world-to-device transformation. If 0, the test is done in world coordinates; otherwise, the test is done in device coordinates."
        }]
    },
    "_GDIPlus_PathIterCreate": {
        "documentation": "Creates a new GraphicsPathIterator object and associates it with a GraphicsPath object",
        "label": "_GDIPlus_PathIterCreate ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object that will be associated with this GraphicsPathIterator object"
        }]
    },
    "_GDIPlus_PathIterDispose": {
        "documentation": "Releases a GraphicsPathIterator object",
        "label": "_GDIPlus_PathIterDispose ( $hPathIter )",
        "params": [{
            "label": "$hPathIter",
            "documentation": "Pointer to a GraphicsPath object that will be associated with this GraphicsPathIterator object"
        }]
    },
    "_GDIPlus_PathIterGetSubpathCount": {
        "documentation": "Gets the number of subpaths (also called figures) in the path",
        "label": "_GDIPlus_PathIterGetSubpathCount ( $hPathIter )",
        "params": [{
            "label": "$hPathIter",
            "documentation": "Pointer to a GraphicsPathIterator object"
        }]
    },
    "_GDIPlus_PathIterNextMarkerPath": {
        "documentation": "Gets the next marker-delimited section of an iterator's associated path",
        "label": "_GDIPlus_PathIterNextMarkerPath ( $hPathIter, $hPath )",
        "params": [{
            "label": "$hPathIter",
            "documentation": "Pointer to a GraphicsPathIterator object"
        }, {
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathIterNextSubpathPath": {
        "documentation": "Gets the next figure (subpath) from an iterator's associated path",
        "label": "_GDIPlus_PathIterNextSubpathPath ( $hPathIter, $hPath )",
        "params": [{
            "label": "$hPathIter",
            "documentation": "Pointer to a GraphicsPathIterator object"
        }, {
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathIterRewind": {
        "documentation": "Rewinds an iterator to the beginning of its associated path",
        "label": "_GDIPlus_PathIterRewind ( $hPathIter )",
        "params": [{
            "label": "$hPathIter",
            "documentation": "Pointer to a GraphicsPathIterator object"
        }]
    },
    "_GDIPlus_PathReset": {
        "documentation": "Empties a path and sets the fill mode to alternate (0)",
        "label": "_GDIPlus_PathReset ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathReverse": {
        "documentation": "Reverses the order of the points that define a path's lines and curves",
        "label": "_GDIPlus_PathReverse ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathSetFillMode": {
        "documentation": "Sets the fill mode of a path",
        "label": "_GDIPlus_PathSetFillMode ( $hPath, $iFillMode )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$iFillMode",
            "documentation": "Path fill mode:    0 - The areas are filled according to the even-odd parity rule    1 - The areas are filled according to the nonzero winding rule"
        }]
    },
    "_GDIPlus_PathSetMarker": {
        "documentation": "Designates the last point in a path as a marker point",
        "label": "_GDIPlus_PathSetMarker ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathStartFigure": {
        "documentation": "Starts a new figure without closing the current figure. Subsequent points added to a path are added to the new figure",
        "label": "_GDIPlus_PathStartFigure ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }]
    },
    "_GDIPlus_PathTransform": {
        "documentation": "Multiplies each of a path's data points by a specified matrix",
        "label": "_GDIPlus_PathTransform ( $hPath, $hMatrix )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object that specifies the transformation"
        }]
    },
    "_GDIPlus_PathWarp": {
        "documentation": "Applies a warp transformation to a path. The function also flattens (converts to a sequence of straight lines) the path",
        "label": "_GDIPlus_PathWarp ( $hPath, $hMatrix, $aPoints, $nX, $nY, $nWidth, $nHeight [, $iWarpMode = 0 [, $fFlatness = 0.25]] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$hMatrix",
            "documentation": "Pointer to a Matrix object that represents a transformation to be applied along with the warp."
        }, {
            "label": "$aPoints",
            "documentation": "Array of parallelogram points that, along with the rectangle parameters, define the wrap mode:    [0][0] - Number of points. This number must be 3 or 4    [1][0] - Point 1 X coordinate    [1][1] - Point 1 Y coordinate    [2][0] - Point 2 X coordinate    [2][1] - Point 2 Y coordinate    [n][0] - Point n X coordinate    [n][1] - Point n Y coordinate"
        }, {
            "label": "$nX",
            "documentation": "X coordinate of the upper left corner of the rectangle to be transformed into a parallelogram defined by $aPoints"
        }, {
            "label": "$nY",
            "documentation": "Y coordinate of the upper left corner of the rectangle to be transformed into a parallelogram defined by $aPoints"
        }, {
            "label": "$nWidth",
            "documentation": "Width of the rectangle to be transformed into a parallelogram defined by $aPoints"
        }, {
            "label": "$nHeight",
            "documentation": "Height of the rectangle to be transformed into a parallelogram defined by $aPoints"
        }, {
            "label": "$iWarpMode",
            "documentation": "**[optional]** Kind of warp to be applied:    0 - Specifies the perspective warp mode    1 - Specifies the bilinear warp mode"
        }, {
            "label": "$fFlatness",
            "documentation": "**[optional]** Real number that influences the number of line segments that are used to approximate the original path.Small values specify that many line segments are used, and large values specify that few line segments are used."
        }]
    },
    "_GDIPlus_PathWiden": {
        "documentation": "Replaces a path with curves that enclose the area that is filled when the path is drawn by a specified pen. The function also flattens the path",
        "label": "_GDIPlus_PathWiden ( $hPath, $hPen [, $hMatrix = 0 [, $fFlatness = 0.25]] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$hPen",
            "documentation": "Pointer to a Pen object. The path is made as wide as it would be when drawn by this pen. If 0, a solid black pen with a width of 1 will be used"
        }, {
            "label": "$hMatrix",
            "documentation": "**[optional]** Pointer to a Matrix object that represents a transformation to be applied along with the widening. If 0, no transformation is applied"
        }, {
            "label": "$fFlatness",
            "documentation": "**[optional]** Real number that specifies the maximum error between the path and its flattened approximation.Reducing the flatness increases the number of line segments in the approximation"
        }]
    },
    "_GDIPlus_PathWindingModeOutline": {
        "documentation": "Transforms and flattens a path, and then converts the path's data points so that they represent only the outline of the path",
        "label": "_GDIPlus_PathWindingModeOutline ( $hPath [, $hMatrix = 0 [, $fFlatness = 0.25]] )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object"
        }, {
            "label": "$hMatrix",
            "documentation": "**[optional]** Pointer to a Matrix object that specifies the transformation. If 0, no transformation is applied"
        }, {
            "label": "$fFlatness",
            "documentation": "**[optional]** Real number that specifies the maximum error between the path and its flattened approximation.Reducing the flatness increases the number of line segments in the approximation."
        }]
    },
    "_GDIPlus_PenCreate": {
        "documentation": "Create a pen object",
        "label": "_GDIPlus_PenCreate ( [$iARGB = 0xFF000000 [, $nWidth = 1 [, $iUnit = 2]]] )",
        "params": [{
            "label": "$iARGB",
            "documentation": "**[optional]** Alpha, Red, Green and Blue components of pen color"
        }, {
            "label": "$nWidth",
            "documentation": "**[optional]** The width of the pen measured in the units specified in the $iUnit parameter"
        }, {
            "label": "$iUnit",
            "documentation": "**[optional]** Unit of measurement for the pen size:    0 - World coordinates, a nonphysical unit    1 - Display units    2 - A unit is 1 pixel    3 - A unit is 1 point or 1/72 inch    4 - A unit is 1 inch    5 - A unit is 1/300 inch    6 - A unit is 1 millimeter"
        }]
    },
    "_GDIPlus_PenCreate2": {
        "documentation": "Creates a Pen object that uses the attributes of a brush",
        "label": "_GDIPlus_PenCreate2 ( $hBrush [, $nWidth = 1 [, $iUnit = 2]] )",
        "params": [{
            "label": "$hBrush",
            "documentation": "Pointer to a brush object to base this pen on"
        }, {
            "label": "$nWidth",
            "documentation": "**[optional]** The width of the pen measured in the units specified in the $iUnit parameter"
        }, {
            "label": "$iUnit",
            "documentation": "**[optional]** Unit of measurement for the pen size:    0 - World coordinates, a nonphysical unit    1 - Display units    2 - A unit is 1 pixel    3 - A unit is 1 point or 1/72 inch    4 - A unit is 1 inch    5 - A unit is 1/300 inch    6 - A unit is 1 millimeter"
        }]
    },
    "_GDIPlus_PenDispose": {
        "documentation": "Release a pen object",
        "label": "_GDIPlus_PenDispose ( $hPen )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }]
    },
    "_GDIPlus_PenGetAlignment": {
        "documentation": "Gets the pen alignment",
        "label": "_GDIPlus_PenGetAlignment ( $hPen )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }]
    },
    "_GDIPlus_PenGetColor": {
        "documentation": "Gets the pen color",
        "label": "_GDIPlus_PenGetColor ( $hPen )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }]
    },
    "_GDIPlus_PenGetCustomEndCap": {
        "documentation": "Gets the custom end cap for the pen",
        "label": "_GDIPlus_PenGetCustomEndCap ( $hPen )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }]
    },
    "_GDIPlus_PenGetDashCap": {
        "documentation": "Gets the pen dash cap style",
        "label": "_GDIPlus_PenGetDashCap ( $hPen )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }]
    },
    "_GDIPlus_PenGetDashStyle": {
        "documentation": "Gets the pen dash style",
        "label": "_GDIPlus_PenGetDashStyle ( $hPen )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }]
    },
    "_GDIPlus_PenGetEndCap": {
        "documentation": "Gets the pen end cap",
        "label": "_GDIPlus_PenGetEndCap ( $hPen )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }]
    },
    "_GDIPlus_PenGetMiterLimit": {
        "documentation": "Gets the miter length currently set for a Pen object",
        "label": "_GDIPlus_PenGetMiterLimit ( $hPen )",
        "params": [{
            "label": "$hPen",
            "documentation": "Pointer to a Pen object"
        }]
    },
    "_GDIPlus_PenGetWidth": {
        "documentation": "Retrieve the width of a pen",
        "label": "_GDIPlus_PenGetWidth ( $hPen )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }]
    },
    "_GDIPlus_PenSetAlignment": {
        "documentation": "Sets the pen alignment",
        "label": "_GDIPlus_PenSetAlignment ( $hPen [, $iAlignment = 0] )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }, {
            "label": "$iAlignment",
            "documentation": "**[optional]** Pen alignment. Can be one of the following:    0 - Specifies that the pen is aligned on the center of the line that is drawn    1 - Specifies, when drawing a polygon, that the pen is aligned on the inside of the edge of the polygon"
        }]
    },
    "_GDIPlus_PenSetColor": {
        "documentation": "Sets the pen color",
        "label": "_GDIPlus_PenSetColor ( $hPen, $iARGB )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }, {
            "label": "$iARGB",
            "documentation": "Alpha, Red, Green and Blue components of pen color"
        }]
    },
    "_GDIPlus_PenSetCustomEndCap": {
        "documentation": "Sets the custom end cap for the pen",
        "label": "_GDIPlus_PenSetCustomEndCap ( $hPen, $hEndCap )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }, {
            "label": "$hEndCap",
            "documentation": "Handle to a CustomLineCap object that specifies the pen custom end cap"
        }]
    },
    "_GDIPlus_PenSetDashCap": {
        "documentation": "Sets the pen dash cap style",
        "label": "_GDIPlus_PenSetDashCap ( $hPen [, $iDash = 0] )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }, {
            "label": "$iDash",
            "documentation": "**[optional]** Dash cap style. Can be one of the following:    $GDIP_DASHCAPFLAT - A square cap that squares off both ends of each dash    $GDIP_DASHCAPROUND - A circular cap that rounds off both ends of each dash    $GDIP_DASHCAPTRIANGLE - A triangular cap that points both ends of each dash"
        }]
    },
    "_GDIPlus_PenSetDashStyle": {
        "documentation": "Sets the pen dash style",
        "label": "_GDIPlus_PenSetDashStyle ( $hPen [, $iStyle = 0] )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Dash style. Can be one of the following:    $GDIP_DASHSTYLESOLID - A solid line    $GDIP_DASHSTYLEDASH - A dashed line    $GDIP_DASHSTYLEDOT - A dotted line    $GDIP_DASHSTYLEDASHDOT - An alternating dash-dot line    $GDIP_DASHSTYLEDASHDOTDOT - An alternating dash-dot-dot line    $GDIP_DASHSTYLECUSTOM - A a user-defined, custom dashed line"
        }]
    },
    "_GDIPlus_PenSetEndCap": {
        "documentation": "Sets the pen end cap",
        "label": "_GDIPlus_PenSetEndCap ( $hPen, $iEndCap )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }, {
            "label": "$iEndCap",
            "documentation": "End cap type. Can be one of the following:    $GDIP_LINECAPFLAT - Specifies a flat cap    $GDIP_LINECAPSQUARE - Specifies a square cap    $GDIP_LINECAPROUND - Specifies a circular cap    $GDIP_LINECAPTRIANGLE - Specifies a triangular cap    $GDIP_LINECAPNOANCHOR - Specifies that the line ends are not anchored    $GDIP_LINECAPSQUAREANCHOR - Specifies that the line ends are anchored with a square    $GDIP_LINECAPROUNDANCHOR - Specifies that the line ends are anchored with a circle    $GDIP_LINECAPDIAMONDANCHOR - Specifies that the line ends are anchored with a diamond    $GDIP_LINECAPARROWANCHOR - Specifies that the line ends are anchored with arrowheads    $GDIP_LINECAPCUSTOM - Specifies that the line ends are made from a CustomLineCap"
        }]
    },
    "_GDIPlus_PenSetLineCap": {
        "documentation": "Sets the cap styles for the start, end, and dashes in a line drawn with the pen",
        "label": "_GDIPlus_PenSetLineCap ( $hPen, $iStartCap, $iEndCap, $iDashCap )",
        "params": [{
            "label": "$hPen",
            "documentation": "Pointer to a Pen object"
        }, {
            "label": "$iStartCap",
            "documentation": "Line cap style for the start cap:    0x00 - Line ends at the last point. The end is squared off    0x01 - Square cap. The center of the square is the last point in the line.        The height and width of the square are the line width.    0x02 - Circular cap. The center of the circle is the last point in the line.        The diameter of the circle is the line width.    0x03 - Triangular cap.        The base of the triangle is the last point in the line.        The base of the triangle is the line width.    0x10 - Line ends are not anchored.    0x11 - Line ends are anchored with a square.        The center of the square is the last point in the line.        The height and width of the square are the line width.    0x12 - Line ends are anchored with a circle.        The center of the circle is at the last point in the line.        The circle is wider than the line.    0x13 - Line ends are anchored with a diamond (a square turned at 45 degrees).        The center of the diamond is at the last point in the line.        The diamond is wider than the line.    0x14 - Line ends are anchored with arrowheads.        The arrowhead point is located at the last point in the line.        The arrowhead is wider than the line.    0xff - Line ends are made from a CustomLineCap object"
        }, {
            "label": "$iEndCap",
            "documentation": "Line cap style for the end cap (same values as $iStartCap)"
        }, {
            "label": "$iDashCap",
            "documentation": "Start and end caps for a dashed line:    0 - A square cap that squares off both ends of each dash    2 - A circular cap that rounds off both ends of each dash    3 - A triangular cap that points both ends of each dash"
        }]
    },
    "_GDIPlus_PenSetLineJoin": {
        "documentation": "Sets the line join for a Pen object",
        "label": "_GDIPlus_PenSetLineJoin ( $hPen, $iLineJoin )",
        "params": [{
            "label": "$hPen",
            "documentation": "Pointer to a Pen object"
        }, {
            "label": "$iLineJoin",
            "documentation": "Line join style:    0 - Line join produces a sharp corner or a clipped corner    1 - Line join produces a diagonal corner.    2 - Line join produces a smooth, circular arc between the lines.    3 - Line join produces a sharp corner or a clipped corner"
        }]
    },
    "_GDIPlus_PenSetMiterLimit": {
        "documentation": "Sets the miter limit of a Pen object",
        "label": "_GDIPlus_PenSetMiterLimit ( $hPen, $fMiterLimit )",
        "params": [{
            "label": "$hPen",
            "documentation": "Pointer to a Pen object"
        }, {
            "label": "$fMiterLimit",
            "documentation": "Real number that specifies the miter limit of the Pen object.A real number value that is less than 1.0 will be replaced with 1.0."
        }]
    },
    "_GDIPlus_PenSetStartCap": {
        "documentation": "Sets the start cap for a Pen object",
        "label": "_GDIPlus_PenSetStartCap ( $hPen, $iLineCap )",
        "params": [{
            "label": "$hPen",
            "documentation": "Pointer to a Pen object"
        }, {
            "label": "$iLineCap",
            "documentation": "Line cap style:    0x00 - Line ends at the last point. The end is squared off    0x01 - Square cap. The center of the square is the last point in the line. The height and width of the square are the line width.    0x02 - Circular cap. The center of the circle is the last point in the line. The diameter of the circle is the line width.    0x03 - Triangular cap. The base of the triangle is the last point in the line. The base of the triangle is the line width.    0x10 - Line ends are not anchored.    0x11 - Line ends are anchored with a square. The center of the square is the last point in the line. The height and width of the square are the line width.    0x12 - Line ends are anchored with a circle. The center of the circle is at the last point in the line. The circle is wider than the line.    0x13 - Line ends are anchored with a diamond (a square turned at 45 degrees). The center of the diamond is at the last point in the line. The diamond is wider than the line.    0x14 - Line ends are anchored with arrowheads. The arrowhead point is located at the last point in the line. The arrowhead is wider than the line.    0xff - Line ends are made from a CustomLineCap object."
        }]
    },
    "_GDIPlus_PenSetWidth": {
        "documentation": "Sets the width of a pen",
        "label": "_GDIPlus_PenSetWidth ( $hPen, $fWidth )",
        "params": [{
            "label": "$hPen",
            "documentation": "Handle to a pen object"
        }, {
            "label": "$fWidth",
            "documentation": "Width of pen"
        }]
    },
    "_GDIPlus_RectFCreate": {
        "documentation": "Create a $tagGDIPRECTF structure",
        "label": "_GDIPlus_RectFCreate ( [$nX = 0 [, $nY = 0 [, $nWidth = 0 [, $nHeight = 0]]]] )",
        "params": [{
            "label": "$nX",
            "documentation": "**[optional]** X coordinate of upper left hand corner of rectangle"
        }, {
            "label": "$nY",
            "documentation": "**[optional]** Y coordinate of upper left hand corner of rectangle"
        }, {
            "label": "$nWidth",
            "documentation": "**[optional]** Rectangle width"
        }, {
            "label": "$nHeight",
            "documentation": "**[optional]** Rectangle height"
        }]
    },
    "_GDIPlus_RegionClone": {
        "documentation": "Clones a Region object",
        "label": "_GDIPlus_RegionClone ( $hRegion )",
        "params": [{
            "label": "$hRegion",
            "documentation": "Pointer to a Region object to be cloned"
        }]
    },
    "_GDIPlus_RegionCombinePath": {
        "documentation": "Updates a region to the portion of itself that intersects the specified path's interior",
        "label": "_GDIPlus_RegionCombinePath ( $hRegion, $hPath [, $iCombineMode = 2] )",
        "params": [{
            "label": "$hRegion",
            "documentation": "Pointer to a Region object"
        }, {
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object that specifies the path to use to update the region"
        }, {
            "label": "$iCombineMode",
            "documentation": "**[optional]** Combine mode that specifies how the region is combined with the path:    0 - The existing region is replaced by the new region    1 - The existing region is replaced by the intersection of itself and the new region    2 - The existing region is replaced by the union of itself and the new region    3 - The existing region is replaced by the result of performing an XOR on the two regions.A point is in the XOR of two regions if it is in one region or the other but not in both regions    4 - The existing region is replaced by the portion of itself that is outside of the new region    5 - The existing region is replaced by the portion of the new region that is outside of the existing region"
        }]
    },
    "_GDIPlus_RegionCombineRect": {
        "documentation": "Updates a region to the portion of itself that intersects the specified rectangle's interior",
        "label": "_GDIPlus_RegionCombineRect ( $hRegion, $nX, $nY, $nWidth, $nHeight [, $iCombineMode = 2] )",
        "params": [{
            "label": "$hRegion",
            "documentation": "Pointer to a Region object"
        }, {
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle"
        }, {
            "label": "$iCombineMode",
            "documentation": "**[optional]** Combine mode that specifies how the region is combined with the rectangle:    0 - The existing region is replaced by the new region    1 - The existing region is replaced by the intersection of itself and the new region    2 - The existing region is replaced by the union of itself and the new region    3 - The existing region is replaced by the result of performing an XOR on the two regions.A point is in the XOR of two regions if it is in one region or the other but not in both regions    4 - The existing region is replaced by the portion of itself that is outside of the new region    5 - The existing region is replaced by the portion of the new region that is outside of the existing region"
        }]
    },
    "_GDIPlus_RegionCombineRegion": {
        "documentation": "Updates a region to the portion of itself that intersects another region",
        "label": "_GDIPlus_RegionCombineRegion ( $hRegionDst, $hRegionSrc [, $iCombineMode = 2] )",
        "params": [{
            "label": "$hRegionDst",
            "documentation": "Pointer to a Region object"
        }, {
            "label": "$hRegionSrc",
            "documentation": "Pointer to a Region object to use to update the $hRegionDst Region object"
        }, {
            "label": "$iCombineMode",
            "documentation": "**[optional]** Combine mode that specifies how the regions are combined:    0 - The existing region is replaced by the new region    1 - The existing region is replaced by the intersection of itself and the new region    2 - The existing region is replaced by the union of itself and the new region    3 - The existing region is replaced by the result of performing an XOR on the two regions.A point is in the XOR of two regions if it is in one region or the other but not in both regions    4 - The existing region is replaced by the portion of itself that is outside of the new region    5 - The existing region is replaced by the portion of the new region that is outside of the existing region"
        }]
    },
    "_GDIPlus_RegionCreate": {
        "documentation": "Creates a region that is infinite",
        "label": "_GDIPlus_RegionCreate (  )",
        "params": []
    },
    "_GDIPlus_RegionCreateFromPath": {
        "documentation": "Creates a region that is defined by a path object and has a fill mode that is contained in the path object",
        "label": "_GDIPlus_RegionCreateFromPath ( $hPath )",
        "params": [{
            "label": "$hPath",
            "documentation": "Pointer to a GraphicsPath object that specifies the path"
        }]
    },
    "_GDIPlus_RegionCreateFromRect": {
        "documentation": "Creates a region that is defined by a rectangle",
        "label": "_GDIPlus_RegionCreateFromRect ( $nX, $nY, $nWidth, $nHeight )",
        "params": [{
            "label": "$nX",
            "documentation": "The X coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$nY",
            "documentation": "The Y coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$nWidth",
            "documentation": "The width of the rectangle"
        }, {
            "label": "$nHeight",
            "documentation": "The height of the rectangle"
        }]
    },
    "_GDIPlus_RegionDispose": {
        "documentation": "Releases a Region object",
        "label": "_GDIPlus_RegionDispose ( $hRegion )",
        "params": [{
            "label": "$hRegion",
            "documentation": "Pointer to a Region object"
        }]
    },
    "_GDIPlus_RegionGetBounds": {
        "documentation": "Gets a rectangle that encloses a region",
        "label": "_GDIPlus_RegionGetBounds ( $hRegion, $hGraphics )",
        "params": [{
            "label": "$hRegion",
            "documentation": "Pointer to a Region object"
        }, {
            "label": "$hGraphics",
            "documentation": "Pointer to a Graphics object that contains the world and page transformations required to calculate the device coordinates of the region and the rectangle"
        }]
    },
    "_GDIPlus_RegionGetHRgn": {
        "documentation": "Creates a GDI region from a GDI+ Region object",
        "label": "_GDIPlus_RegionGetHRgn ( $hRegion [, $hGraphics = 0] )",
        "params": [{
            "label": "$hRegion",
            "documentation": "Pointer to a Region object"
        }, {
            "label": "$hGraphics",
            "documentation": "**[optional]** Pointer to a Graphics object that contains the world and page transformations required to calculate the device coordinates of the region"
        }]
    },
    "_GDIPlus_RegionTransform": {
        "documentation": "Tansforms a region by multiplying each of its data points by a specified matrix",
        "label": "_GDIPlus_RegionTransform ( $hRegion, $hMatrix )",
        "params": [{
            "label": "$hRegion",
            "documentation": "Pointer to a Region object"
        }, {
            "label": "$hMatrix",
            "documentation": "Pointer to a matrix that specifies the transformation"
        }]
    },
    "_GDIPlus_RegionTranslate": {
        "documentation": "Offsets a region by specified amounts in the horizontal and vertical directions",
        "label": "_GDIPlus_RegionTranslate ( $hRegion, $nDX, $nDY )",
        "params": [{
            "label": "$hRegion",
            "documentation": "Pointer to a Region object"
        }, {
            "label": "$nDX",
            "documentation": "Real number that specifies the amount to shift the region in the X direction"
        }, {
            "label": "$nDY",
            "documentation": "Real number that specifies the amount to shift the region in the Y direction"
        }]
    },
    "_GDIPlus_Shutdown": {
        "documentation": "Clean up resources used by Microsoft Windows GDI+",
        "label": "_GDIPlus_Shutdown (  )",
        "params": []
    },
    "_GDIPlus_Startup": {
        "documentation": "Initialize Microsoft Windows GDI+",
        "label": "_GDIPlus_Startup ( [$sGDIPDLL = Default [, $bRetDllHandle = False]] )",
        "params": [{
            "label": "$sGDIPDLL",
            "documentation": "**[optional]** the filename of the dll to be used. Default is the installed GDI Dll."
        }, {
            "label": "$bRetDllHandle",
            "documentation": "**[optional]** True if the handle to opened GDI Dll is to be returned. Default is False."
        }]
    },
    "_GDIPlus_StringFormatCreate": {
        "documentation": "Create a String Format object",
        "label": "_GDIPlus_StringFormatCreate ( [$iFormat = 0 [, $iLangID = 0]] )",
        "params": [{
            "label": "$iFormat",
            "documentation": "**[optional]** Format flags. Can be one or more of the following:    0x0001 - Specifies that reading order is right to left    0x0002 - Specifies that individual lines of text are drawn vertically on the display device    0x0004 - Specifies that parts of characters are allowed to overhang the string's layout rectangle    0x0020 - Specifies that Unicode layout control characters are displayed with a representative character    0x0400 - Specifies that an alternate font is used for characters that are not supported in the requested font    0x0800 - Specifies that the space at the end of each line is included in a string measurement    0x1000 - Specifies that the wrapping of text to the next line is disabled    0x2000 - Specifies that only entire lines are laid out in the layout rectangle    0x4000 - Specifies that characters overhanging the layout rectangle and text extending outside the layout rectangle are allowed to show"
        }, {
            "label": "$iLangID",
            "documentation": "**[optional]** The language to use"
        }]
    },
    "_GDIPlus_StringFormatDispose": {
        "documentation": "Release a String Format object",
        "label": "_GDIPlus_StringFormatDispose ( $hFormat )",
        "params": [{
            "label": "$hFormat",
            "documentation": "Handle to a String Format object"
        }]
    },
    "_GDIPlus_StringFormatGetMeasurableCharacterRangeCount": {
        "documentation": "Gets the number of measurable character ranges that are currently set for a StringFormat object",
        "label": "_GDIPlus_StringFormatGetMeasurableCharacterRangeCount ( $hStringFormat )",
        "params": [{
            "label": "$hStringFormat",
            "documentation": "Pointer to a StringFormat object"
        }]
    },
    "_GDIPlus_StringFormatSetAlign": {
        "documentation": "Sets the text alignment of a string format object",
        "label": "_GDIPlus_StringFormatSetAlign ( $hStringFormat, $iFlag )",
        "params": [{
            "label": "$hStringFormat",
            "documentation": "The string format object which is aligned"
        }, {
            "label": "$iFlag",
            "documentation": "The alignment can be one of the following:    0 - The text is aligned to the left    1 - The text is centered    2 - The text is aligned to the right"
        }]
    },
    "_GDIPlus_StringFormatSetLineAlign": {
        "documentation": "Sets the line alignment of a StringFormat object in relation to the origin of a layout rectangle",
        "label": "_GDIPlus_StringFormatSetLineAlign ( $hStringFormat, $iStringAlign )",
        "params": [{
            "label": "$hStringFormat",
            "documentation": "Pointer to a StringFormat object"
        }, {
            "label": "$iStringAlign",
            "documentation": "Type of line alignment to use:    0 - Alignment is towards the origin of the bounding rectangle    1 - Alignment is centered between origin and the height of the formatting rectangle    2 - Alignment is to the far extent (right side) of the formatting rectangle"
        }]
    },
    "_GDIPlus_StringFormatSetMeasurableCharacterRanges": {
        "documentation": "Sets a series of character ranges for a StringFormat object that, when in a string, can be measured",
        "label": "_GDIPlus_StringFormatSetMeasurableCharacterRanges ( $hStringFormat, $aRanges )",
        "params": [{
            "label": "$hStringFormat",
            "documentation": "Pointer to a StringFormat object"
        }, {
            "label": "$aRanges",
            "documentation": "Array of character ranges:    [0][0] - Number of character ranges    [1][0] - Character range 1 specifying the first position of range 1    [1][1] - Character range 1 specifying the number of positions in range 1    [2][0] - Character range 2 specifying the first position of range 2    [2][1] - Character range 2 specifying the number of positions in range 2    [n][0] - Character range n specifying the first position of range n    [n][1] - Character range n specifying the number of positions in range n"
        }]
    },
    "_GDIPlus_TextureCreate": {
        "documentation": "Creates a TextureBrush object based on an image and a wrap mode",
        "label": "_GDIPlus_TextureCreate ( $hImage [, $iWrapMode = 0] )",
        "params": [{
            "label": "$hImage",
            "documentation": "Pointer to an Image object"
        }, {
            "label": "$iWrapMode",
            "documentation": "**[optional]** Wrap mode that specifies how repeated copies of an image are used to tile an area when it is    0 - Tiling without flipping    1 - Tiles are flipped horizontally as you move from one tile to the next in a row    2 - Tiles are flipped vertically as you move from one tile to the next in a column    3 - Tiles are flipped horizontally as you move along a row and flipped vertically as you move along a column    4 - No tiling takes place"
        }]
    },
    "_GDIPlus_TextureCreate2": {
        "documentation": "Creates a TextureBrush object based on an image, a wrap mode and a defining rectangle",
        "label": "_GDIPlus_TextureCreate2 ( $hImage, $nX, $nY, $nWidth, $nHeight [, $iWrapMode = 0] )",
        "params": [{
            "label": "$hImage",
            "documentation": "Pointer to an Image object"
        }, {
            "label": "$nX",
            "documentation": "Leftmost coordinate of the image portion to be used by this brush"
        }, {
            "label": "$nY",
            "documentation": "Uppermost coordinate of the image portion to be used by this brush"
        }, {
            "label": "$nWidth",
            "documentation": "Width of the brush and width of the image portion to be used by the brush"
        }, {
            "label": "$nHeight",
            "documentation": "Height of the brush and height of the image portion to be used by the brush"
        }, {
            "label": "$iWrapMode",
            "documentation": "**[optional]** Wrap mode that specifies how repeated copies of an image are used to tile an area when it is    0 - Tiling without flipping    1 - Tiles are flipped horizontally as you move from one tile to the next in a row    2 - Tiles are flipped vertically as you move from one tile to the next in a column    3 - Tiles are flipped horizontally as you move along a row and flipped vertically as you move along a column    4 - No tiling takes place"
        }]
    },
    "_GDIPlus_TextureCreateIA": {
        "documentation": "Creates a TextureBrush object based on an image, a defining rectangle, and a set of image properties",
        "label": "_GDIPlus_TextureCreateIA ( $hImage, $nX, $nY, $nWidth, $nHeight [, $pImageAttributes = 0] )",
        "params": [{
            "label": "$hImage",
            "documentation": "Pointer to an image object"
        }, {
            "label": "$nX",
            "documentation": "Leftmost coordinate of the image portion to be used by this brush"
        }, {
            "label": "$nY",
            "documentation": "Uppermost coordinate of the image portion to be used by this brush"
        }, {
            "label": "$nWidth",
            "documentation": "Width of the brush and width of the image portion to be used by the brush"
        }, {
            "label": "$nHeight",
            "documentation": "Height of the brush and height of the image portion to be used by the brush"
        }, {
            "label": "$pImageAttributes",
            "documentation": "**[optional]** Pointer to an ImageAttributes object that contains properties of the image"
        }]
    },
    "_GetIP": {
        "documentation": "Get public IP address of a network/computer",
        "label": "_GetIP (  )",
        "params": []
    },
    "_GUICtrlAVI_Close": {
        "documentation": "Closes an AVI clip",
        "label": "_GUICtrlAVI_Close ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlAVI_Create": {
        "documentation": "Creates an AVI control",
        "label": "_GUICtrlAVI_Create ( $hWnd [, $sFilePath = \"\" [, $iSubFileID = -1 [, $iX = 0 [, $iY = 0 [, $iWidth = 0 [, $iHeight = 0 [, $iStyle = 0x00000006 [, $iExStyle = 0x00000000]]]]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$sFilePath",
            "documentation": "**[optional]** The filename of the video. Only .avi files are supported"
        }, {
            "label": "$iSubFileID",
            "documentation": "**[optional]** id of the subfile to be used."
        }, {
            "label": "$iX",
            "documentation": "**[optional]** Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "**[optional]** Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control styles:    $ACS_CENTER - Centers the animation in the animation control's window    $ACS_TRANSPARENT - Creates the control with a transparent background    $ACS_AUTOPLAY - Starts playing the animation as soon as the AVI clip is opened    $ACS_TIMER - The control plays the clip without creating a threadDefault: $ACS_TRANSPARENT, $ACS_AUTOPLAYForced: $WS_CHILD, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table."
        }]
    },
    "_GUICtrlAVI_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlAVI_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlAVI_IsPlaying": {
        "documentation": "Checks whether an Audio-Video Interleaved (AVI) clip is playing",
        "label": "_GUICtrlAVI_IsPlaying ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlAVI_Open": {
        "documentation": "Opens an AVI clip and displays its first frame in an animation control",
        "label": "_GUICtrlAVI_Open ( $hWnd, $sFileName )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFileName",
            "documentation": "Fully qualified path to the AVI file"
        }]
    },
    "_GUICtrlAVI_OpenEx": {
        "documentation": "Opens an AVI clip and displays its first frame in an animation control",
        "label": "_GUICtrlAVI_OpenEx ( $hWnd, $sFileName, $iResourceID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFileName",
            "documentation": "Fully qualified path to resource file"
        }, {
            "label": "$iResourceID",
            "documentation": "AVI resource identifier"
        }]
    },
    "_GUICtrlAVI_Play": {
        "documentation": "Plays an AVI clip in an animation control",
        "label": "_GUICtrlAVI_Play ( $hWnd [, $iFrom = 0 [, $iTo = -1 [, $iRepeat = -1]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iFrom",
            "documentation": "**[optional]** 0-based index of the frame where playing begins. The value must be less than 65,536.A value of 0 means begin with the first frame in the clip."
        }, {
            "label": "$iTo",
            "documentation": "**[optional]** 0-based index of the frame where playing ends. The value must be less than 65,536.A value of -1 means end with the last frame in the clip."
        }, {
            "label": "$iRepeat",
            "documentation": "**[optional]** Number of times to replay the AVI clip. A value of -1 means replay the clip indefinitely."
        }]
    },
    "_GUICtrlAVI_Seek": {
        "documentation": "Directs an AVI control to display a particular frame of an AVI clip",
        "label": "_GUICtrlAVI_Seek ( $hWnd, $iFrame )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iFrame",
            "documentation": "0-based index of the frame to display"
        }]
    },
    "_GUICtrlAVI_Show": {
        "documentation": "Show/Hide the AVI control",
        "label": "_GUICtrlAVI_Show ( $hWnd, $iState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iState",
            "documentation": "State of the AVI, can be the following values:"
        }]
    },
    "_GUICtrlAVI_Stop": {
        "documentation": "Stops playing an AVI clip",
        "label": "_GUICtrlAVI_Stop ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_Click": {
        "documentation": "Simulates the user clicking a button",
        "label": "_GUICtrlButton_Click ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_Create": {
        "documentation": "Creates a Button control",
        "label": "_GUICtrlButton_Create ( $hWnd, $sText, $iX, $iY, $iWidth, $iHeight [, $iStyle = -1 [, $iExStyle = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$sText",
            "documentation": "Text to add to Button"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "Control width"
        }, {
            "label": "$iHeight",
            "documentation": "Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control style:    $BS_AUTO3STATE - Creates a three-state check box in which the state cycles through selected, unavailable, and cleared each time the user selects the check box.    $BS_AUTOCHECKBOX - Creates a check box in which the check state switches between selected and cleared each time the user selects the check box.    $BS_AUTORADIOBUTTON - Same as a radio button, except that when the user selects it, the button automatically highlights itself and removes the selection from any other radio buttons with the same style in the same group.    $BS_FLAT - Specifies that the button is two-dimensional; it does not use the default shading to create a 3-D image.    $BS_GROUPBOX - Creates a rectangle in which other buttons can be grouped. Any text associated with this style is displayed in the rectangle’s upper-left corner.    $BS_PUSHLIKE - Makes a button (such as a check box, three-state check box, or radio button) look and act like a push button. The button looks raised when it isn't pushed or checked, and sunken when it is pushed or checked.    $BS_DEFPUSHBUTTON - Creates a push button with a heavy black border. If the button is in a dialog box, the user can select the button by pressing the ENTER key, even when the button does not have the input focus. This style is useful for enabling the user to quickly select the most likely option, or default.    $BS_BOTTOM - Places the text at the bottom of the button rectangle.    $BS_CENTER - Centers the text horizontally in the button rectangle.    $BS_LEFT - Left-aligns the text in the button rectangle on the right side of the check box.    $BS_MULTILINE - Wraps the button text to multiple lines if the text string is too long to fit on a single line in the button rectangle.    $BS_RIGHT - Right-aligns text in the button rectangle on the right side of the check box.    $BS_RIGHTBUTTON - Positions a check box square on the right side of the button rectangle.    $BS_TOP - Places text at the top of the button rectangle.    $BS_VCENTER - Vertically centers text in the button rectangle.    $BS_ICON - Specifies that the button displays an icon.    $BS_BITMAP - Specifies that the button displays a bitmap.    $BS_NOTIFY - Enables a button to send BN_KILLFOCUS and BN_SETFOCUS notification messages to its parent window. Note that buttons send the BN_CLICKED notification message regardless of whether it has this style. To get BN_DBLCLK notification messages, the button must have the BS_RADIOBUTTON or BS_OWNERDRAW style.Vista Sytles:    $BS_SPLITBUTTON - Creates a split button. A split button has a drop down arrow    $BS_DEFSPLITBUTTON - Creates a split button that behaves like a $BS_PUSHBUTTON style button, but also has a distinctive appearance.    $BS_COMMANDLINK - Creates a command link button    $BS_DEFCOMMANDLINK - Creates a command link button that behaves like a $BS_PUSHBUTTON style button.Default: ( -1) : noneForced : $WS_CHILD, $WS_TABSTOP, $WS_VISIBLE, $BS_NOTIFY"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table."
        }]
    },
    "_GUICtrlButton_Destroy": {
        "documentation": "Delete the Button control",
        "label": "_GUICtrlButton_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_Enable": {
        "documentation": "Enables or disables mouse and keyboard input to the specified button",
        "label": "_GUICtrlButton_Enable ( $hWnd [, $bEnable = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bEnable",
            "documentation": "**[optional]** Specifies whether to enable or disable the button:    True - The button is enabled    False - The button is disabled"
        }]
    },
    "_GUICtrlButton_GetCheck": {
        "documentation": "Gets the check state of a radio button or check box",
        "label": "_GUICtrlButton_GetCheck ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetFocus": {
        "documentation": "Retrieves if the button has keyboard focus",
        "label": "_GUICtrlButton_GetFocus ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetIdealSize": {
        "documentation": "Gets the size of the button that best fits its text and image, if an image list is present",
        "label": "_GUICtrlButton_GetIdealSize ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetImage": {
        "documentation": "Retrieves a handle to the image (icon or bitmap) associated with the button",
        "label": "_GUICtrlButton_GetImage ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetImageList": {
        "documentation": "Retrieves an array that describes the image list assigned to a button control",
        "label": "_GUICtrlButton_GetImageList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetNote": {
        "documentation": "Gets the text of the note associated with the Command Link button",
        "label": "_GUICtrlButton_GetNote ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetNoteLength": {
        "documentation": "Gets the length of the note text that may be displayed in the description for a command link button",
        "label": "_GUICtrlButton_GetNoteLength ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetSplitInfo": {
        "documentation": "Gets information for a split button control",
        "label": "_GUICtrlButton_GetSplitInfo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetState": {
        "documentation": "Determines the state of a button or check box",
        "label": "_GUICtrlButton_GetState ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetText": {
        "documentation": "Retrieve the text of the button",
        "label": "_GUICtrlButton_GetText ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_GetTextMargin": {
        "documentation": "Gets the margins used to draw text in a button control",
        "label": "_GUICtrlButton_GetTextMargin ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlButton_SetCheck": {
        "documentation": "Sets the check state of a radio button or check box",
        "label": "_GUICtrlButton_SetCheck ( $hWnd [, $iState = $BST_CHECKED] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iState",
            "documentation": "**[optional]** The check state. This parameter can be one of the following values:    $BST_CHECKED - Sets the button state to checked.    $BST_INDETERMINATE - Sets the button state to grayed, indicating an indeterminate state.        Use this value only if the button has the $BS_3STATE or $BS_AUTO3STATE style.    $BST_UNCHECKED - Sets the button state to cleared."
        }]
    },
    "_GUICtrlButton_SetDontClick": {
        "documentation": "Sets the state of $BST_DONTCLICK flag on a button",
        "label": "_GUICtrlButton_SetDontClick ( $hWnd [, $bState = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** The state. True to set the $BST_DONTCLICK, otherwise False"
        }]
    },
    "_GUICtrlButton_SetFocus": {
        "documentation": "Sets the keyboard focus to the specified button",
        "label": "_GUICtrlButton_SetFocus ( $hWnd [, $bFocus = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bFocus",
            "documentation": "**[optional]** This parameter can be one of the following values:    True - Sets the keyboard focus to the button    False - Removes the keyboard focus from the button"
        }]
    },
    "_GUICtrlButton_SetImage": {
        "documentation": "Sets the image of a button",
        "label": "_GUICtrlButton_SetImage ( $hWnd, $sImageFile [, $iIconID = -1 [, $bLarge = False]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sImageFile",
            "documentation": "File containing the Image"
        }, {
            "label": "$iIconID",
            "documentation": "**[optional]** Specifies the 0-based index of the icon to extract"
        }, {
            "label": "$bLarge",
            "documentation": "**[optional]** Extract Large Icon"
        }]
    },
    "_GUICtrlButton_SetImageList": {
        "documentation": "Assigns an image list to a button control",
        "label": "_GUICtrlButton_SetImageList ( $hWnd, $hImage [, $iAlign = 0 [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hImage",
            "documentation": "A handle to the image list.Should contain either a single image to be used for all states or individual images for each state listed in the following:    1 - Normal    2 - Hot    3 - Pressed    4 - Disabled    5 - Defaulted    6 - Stylus Hot (tablet computers only)"
        }, {
            "label": "$iAlign",
            "documentation": "**[optional]** Specifies the alignment to use. This parameter can be one of the following values:    0 - Align the image with the left margin.    1 - Align the image with the right margin.    2 - Align the image with the top margin.    3 - Align the image with the bottom margin.    4 - Center the image."
        }, {
            "label": "$iLeft",
            "documentation": "**[optional]** Left margin of the icon"
        }, {
            "label": "$iTop",
            "documentation": "**[optional]** Top margin of the icon"
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** Right margin of the icon"
        }, {
            "label": "$iBottom",
            "documentation": "**[optional]** Bottom margin of the icon"
        }]
    },
    "_GUICtrlButton_SetNote": {
        "documentation": "Sets the text of the note associated with a command link button",
        "label": "_GUICtrlButton_SetNote ( $hWnd, $sNote )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sNote",
            "documentation": "String that contains the note"
        }]
    },
    "_GUICtrlButton_SetShield": {
        "documentation": "Sets the elevation required state for a specified button or command link to display an elevated icon",
        "label": "_GUICtrlButton_SetShield ( $hWnd [, $bRequired = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bRequired",
            "documentation": "**[optional]** True to draw an elevated icon, or False otherwise"
        }]
    },
    "_GUICtrlButton_SetSize": {
        "documentation": "Sets the size of the button",
        "label": "_GUICtrlButton_SetSize ( $hWnd, $iWidth, $iHeight )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iWidth",
            "documentation": "New width of the button"
        }, {
            "label": "$iHeight",
            "documentation": "New height of the button"
        }]
    },
    "_GUICtrlButton_SetSplitInfo": {
        "documentation": "Gets information for a split button control",
        "label": "_GUICtrlButton_SetSplitInfo ( $hWnd [, $hImlGlyph = -1 [, $iSplitStyle = $BCSS_ALIGNLEFT [, $iWidth = 0 [, $iHeight = 0]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hImlGlyph",
            "documentation": "**[optional]** Handle to the image list"
        }, {
            "label": "$iSplitStyle",
            "documentation": "**[optional]** The split button style. Value must be one or more of the following flags.    $BCSS_ALIGNLEFT - Align the image or glyph horizontally with the left margin    $BCSS_IMAGE - Draw an icon image as the glyph    $BCSS_NOSPLIT - No split    $BCSS_STRETCH - Stretch glyph, but try to retain aspect ratio"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Width of the glyph"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Height of the glyph"
        }]
    },
    "_GUICtrlButton_SetState": {
        "documentation": "Sets the highlight state of a button. The highlight state indicates whether the button is highlighted as if the user had pushed it",
        "label": "_GUICtrlButton_SetState ( $hWnd [, $bHighlighted = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bHighlighted",
            "documentation": "**[optional]** Specifies whether the button is highlighted."
        }]
    },
    "_GUICtrlButton_SetStyle": {
        "documentation": "Sets the style of a button",
        "label": "_GUICtrlButton_SetStyle ( $hWnd, $iStyle )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iStyle",
            "documentation": "Can be a combination of button styles"
        }]
    },
    "_GUICtrlButton_SetText": {
        "documentation": "Sets the text of the button",
        "label": "_GUICtrlButton_SetText ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "New text"
        }]
    },
    "_GUICtrlButton_SetTextMargin": {
        "documentation": "Sets the margins for drawing text in a button control",
        "label": "_GUICtrlButton_SetTextMargin ( $hWnd [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iLeft",
            "documentation": "**[optional]** Left margin to use for drawing text"
        }, {
            "label": "$iTop",
            "documentation": "**[optional]** Top margin to use for drawing text"
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** Right margin to use for drawing text"
        }, {
            "label": "$iBottom",
            "documentation": "**[optional]** Bottom margin to use for drawing text"
        }]
    },
    "_GUICtrlButton_Show": {
        "documentation": "Show/Hide button",
        "label": "_GUICtrlButton_Show ( $hWnd [, $bShow = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bShow",
            "documentation": "**[optional]** One of the following:    True - Show button    False - Hide button"
        }]
    },
    "_GUICtrlComboBoxEx_AddDir": {
        "documentation": "Adds the names of directories and files",
        "label": "_GUICtrlComboBoxEx_AddDir ( $hWnd, $sFilePath [, $iAttributes = 0 [, $bBrackets = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sFilePath",
            "documentation": "Specifies an absolute path, relative path, or filename"
        }, {
            "label": "$iAttributes",
            "documentation": "**[optional]** Specifies the attributes of the files or directories to be added:    $DDL_READWRITE - Includes read-write files with no additional attributes    $DDL_READONLY - Includes read-only files    $DDL_HIDDEN - Includes hidden files    $DDL_SYSTEM - Includes system files    $DDL_DIRECTORY - Includes subdirectories    $DDL_ARCHIVE - Includes archived files    $DDL_DRIVES - All mapped drives are added to the list    $DDL_EXCLUSIVE - Includes only files with the specified attributes"
        }, {
            "label": "$bBrackets",
            "documentation": "**[optional]** include/exclude brackets when $DDL_DRIVES is used"
        }]
    },
    "_GUICtrlComboBoxEx_AddString": {
        "documentation": "Add a string",
        "label": "_GUICtrlComboBoxEx_AddString ( $hWnd, $sText [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Item text. If set to -1, the item set is set via the $CBEN_GETDISPINFO notification message."
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iSelectedImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iOverlayImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iIndent",
            "documentation": "**[optional]** Number of image widths to indent the item. A single indentation equals the width of an image."
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Value specific to the item"
        }]
    },
    "_GUICtrlComboBoxEx_BeginUpdate": {
        "documentation": "Prevents updating of the control until the EndUpdate function is called",
        "label": "_GUICtrlComboBoxEx_BeginUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_Create": {
        "documentation": "Create a ComboBoxEx control",
        "label": "_GUICtrlComboBoxEx_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 200 [, $iStyle = 0x00200002 [, $iExStyle = 0x00000000]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$sText",
            "documentation": "Delimited text to add to ComboBox"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control style:    $CBS_DROPDOWN - Similar to $CBS_SIMPLE, except that the list box is not displayed unless the user selects an icon next to the edit control    $CBS_DROPDOWNLIST - Similar to $CBS_DROPDOWN, except that the edit control is replaced by a static text item that displays the current selection in the list box    $CBS_SIMPLE - Displays the list box at all timesDefault: $CBS_DROPDOWN, $WS_VSCROLLForced : $WS_CHILD, $WS_TABSTOP, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style:    $CBES_EX_CASESENSITIVE - Searches in the list will be case sensitive    $CBES_EX_NOEDITIMAGE - The edit box and the dropdown list will not display item images    $CBES_EX_NOEDITIMAGEINDENT - The edit box and the dropdown list will not display item images    $CBES_EX_NOSIZELIMIT - Allows the ComboBoxEx control to be vertically sized smaller than its contained combo box control"
        }]
    },
    "_GUICtrlComboBoxEx_CreateSolidBitMap": {
        "documentation": "Creates a solid color bitmap",
        "label": "_GUICtrlComboBoxEx_CreateSolidBitMap ( $hWnd, $iColor, $iWidth, $iHeight )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window where the bitmap will be displayed"
        }, {
            "label": "$iColor",
            "documentation": "The color of the bitmap, stated in RGB"
        }, {
            "label": "$iWidth",
            "documentation": "The width of the bitmap"
        }, {
            "label": "$iHeight",
            "documentation": "The height of the bitmap"
        }]
    },
    "_GUICtrlComboBoxEx_DeleteString": {
        "documentation": "Removes an item from a ComboBoxEx control",
        "label": "_GUICtrlComboBoxEx_DeleteString ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the Item to delete"
        }]
    },
    "_GUICtrlComboBoxEx_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlComboBoxEx_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_EndUpdate": {
        "documentation": "Enables screen repainting that was turned off with the BeginUpdate function",
        "label": "_GUICtrlComboBoxEx_EndUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_FindStringExact": {
        "documentation": "Search for a string",
        "label": "_GUICtrlComboBoxEx_FindStringExact ( $hWnd, $sText [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String to search for"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** 0-based index of the item preceding the first item to be searched"
        }]
    },
    "_GUICtrlComboBoxEx_GetComboBoxInfo": {
        "documentation": "Gets information about the specified ComboBox",
        "label": "_GUICtrlComboBoxEx_GetComboBoxInfo ( $hWnd, ByRef $tInfo )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$tInfo",
            "documentation": "The information about the ComboBox."
        }]
    },
    "_GUICtrlComboBoxEx_GetComboControl": {
        "documentation": "Gets the handle to the child combo box control",
        "label": "_GUICtrlComboBoxEx_GetComboControl ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetCount": {
        "documentation": "Retrieve the number of items",
        "label": "_GUICtrlComboBoxEx_GetCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetCurSel": {
        "documentation": "Retrieve the index of the currently selected item",
        "label": "_GUICtrlComboBoxEx_GetCurSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetDroppedControlRect": {
        "documentation": "Retrieve the screen coordinates of a combo box in its dropped-down state",
        "label": "_GUICtrlComboBoxEx_GetDroppedControlRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetDroppedControlRectEx": {
        "documentation": "Retrieve the screen coordinates of a combo box in its dropped-down state",
        "label": "_GUICtrlComboBoxEx_GetDroppedControlRectEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetDroppedState": {
        "documentation": "Determines whether the ListBox of a ComboBox is dropped down",
        "label": "_GUICtrlComboBoxEx_GetDroppedState ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetDroppedWidth": {
        "documentation": "Retrieve the minimum allowable width, of the ListBox of a ComboBox",
        "label": "_GUICtrlComboBoxEx_GetDroppedWidth ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetEditControl": {
        "documentation": "Gets the handle to the edit control portion of a ComboBoxEx control",
        "label": "_GUICtrlComboBoxEx_GetEditControl ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetEditSel": {
        "documentation": "Gets the starting and ending character positions of the current selection in the edit control of a ComboBox",
        "label": "_GUICtrlComboBoxEx_GetEditSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetEditText": {
        "documentation": "Get the text from the edit control of a ComboBoxEx",
        "label": "_GUICtrlComboBoxEx_GetEditText ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetExtendedStyle": {
        "documentation": "Gets the extended styles that are in use for a ComboBoxEx control",
        "label": "_GUICtrlComboBoxEx_GetExtendedStyle ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetExtendedUI": {
        "documentation": "Determines whether a ComboBox has the default user interface or the extended user interface",
        "label": "_GUICtrlComboBoxEx_GetExtendedUI ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetImageList": {
        "documentation": "Retrieves the handle to an image list assigned to a ComboBoxEx control",
        "label": "_GUICtrlComboBoxEx_GetImageList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetItem": {
        "documentation": "Retrieves an item's attributes",
        "label": "_GUICtrlComboBoxEx_GetItem ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlComboBoxEx_GetItemEx": {
        "documentation": "Retrieves some or all of an item's attributes",
        "label": "_GUICtrlComboBoxEx_GetItemEx ( $hWnd, ByRef $tItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$tItem",
            "documentation": "$tagCOMBOBOXEXITEM structure that specifies the information to retrieve"
        }]
    },
    "_GUICtrlComboBoxEx_GetItemHeight": {
        "documentation": "Determines the height of list items or the selection field in a ComboBox",
        "label": "_GUICtrlComboBoxEx_GetItemHeight ( $hWnd [, $iComponent = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iComponent",
            "documentation": "**[optional]** Use the following values:    –1 - Get the height of the selection field     0 - Get the height of list items"
        }]
    },
    "_GUICtrlComboBoxEx_GetItemImage": {
        "documentation": "Retrieves the index of the item's icon",
        "label": "_GUICtrlComboBoxEx_GetItemImage ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlComboBoxEx_GetItemIndent": {
        "documentation": "Retrieves the number of image widths the item is indented",
        "label": "_GUICtrlComboBoxEx_GetItemIndent ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlComboBoxEx_GetItemOverlayImage": {
        "documentation": "Retrieves the index of the item's overlay image icon",
        "label": "_GUICtrlComboBoxEx_GetItemOverlayImage ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlComboBoxEx_GetItemParam": {
        "documentation": "Retrieves the application specific value of the item",
        "label": "_GUICtrlComboBoxEx_GetItemParam ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlComboBoxEx_GetItemSelectedImage": {
        "documentation": "Retrieves the index of the item's selected image icon",
        "label": "_GUICtrlComboBoxEx_GetItemSelectedImage ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlComboBoxEx_GetItemText": {
        "documentation": "Retrieve a string from the list of a ComboBox",
        "label": "_GUICtrlComboBoxEx_GetItemText ( $hWnd, $iIndex, ByRef $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index to Retrieve from"
        }, {
            "label": "$sText",
            "documentation": "Variable that will receive the string"
        }]
    },
    "_GUICtrlComboBoxEx_GetItemTextLen": {
        "documentation": "Gets the length, in characters, of a string in the list of a combo box",
        "label": "_GUICtrlComboBoxEx_GetItemTextLen ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "index item"
        }]
    },
    "_GUICtrlComboBoxEx_GetList": {
        "documentation": "Retrieves all items from the list portion of a ComboBox control",
        "label": "_GUICtrlComboBoxEx_GetList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetListArray": {
        "documentation": "Retrieves all items from the list portion of a ComboBox control",
        "label": "_GUICtrlComboBoxEx_GetListArray ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetLocale": {
        "documentation": "Retrieves the current locale",
        "label": "_GUICtrlComboBoxEx_GetLocale ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetLocaleCountry": {
        "documentation": "Retrieves the current country code",
        "label": "_GUICtrlComboBoxEx_GetLocaleCountry ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetLocaleLang": {
        "documentation": "Retrieves the current language identifier",
        "label": "_GUICtrlComboBoxEx_GetLocaleLang ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetLocalePrimLang": {
        "documentation": "Extract primary language id from a language id",
        "label": "_GUICtrlComboBoxEx_GetLocalePrimLang ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetLocaleSubLang": {
        "documentation": "Extract sublanguage id from a language id",
        "label": "_GUICtrlComboBoxEx_GetLocaleSubLang ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetMinVisible": {
        "documentation": "Retrieve the minimum number of visible items in the drop-down list of a ComboBox",
        "label": "_GUICtrlComboBoxEx_GetMinVisible ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetTopIndex": {
        "documentation": "Retrieve the 0-based index of the first visible item in the ListBox portion of a ComboBox",
        "label": "_GUICtrlComboBoxEx_GetTopIndex ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_GetUnicode": {
        "documentation": "Retrieves if control is using Unicode",
        "label": "_GUICtrlComboBoxEx_GetUnicode ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_InitStorage": {
        "documentation": "Allocates memory for storing ListBox items",
        "label": "_GUICtrlComboBoxEx_InitStorage ( $hWnd, $iNum, $iBytes )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iNum",
            "documentation": "Number of items to add"
        }, {
            "label": "$iBytes",
            "documentation": "The amount of memory to allocate for item strings, in bytes"
        }]
    },
    "_GUICtrlComboBoxEx_InsertString": {
        "documentation": "Inserts a new item in the control",
        "label": "_GUICtrlComboBoxEx_InsertString ( $hWnd, $sText [, $iIndex = -1 [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Item text. If set to -1, the item set is set via the $CBEN_GETDISPINFO notification message."
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** 0-based index at which the new string should be inserted.To insert an item at the end of the list, set the $iIndex member to -1"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iSelectedImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iOverlayImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iIndent",
            "documentation": "**[optional]** Number of image widths to indent the item. A single indentation equals the width of an image."
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Value specific to the item"
        }]
    },
    "_GUICtrlComboBoxEx_LimitText": {
        "documentation": "Limits the length of the text the user may type into the edit control of a ComboBox",
        "label": "_GUICtrlComboBoxEx_LimitText ( $hWnd [, $iLimit = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iLimit",
            "documentation": "**[optional]** Limit length of the text"
        }]
    },
    "_GUICtrlComboBoxEx_ReplaceEditSel": {
        "documentation": "Replace text selected in edit box",
        "label": "_GUICtrlComboBoxEx_ReplaceEditSel ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String containing the replacement text"
        }]
    },
    "_GUICtrlComboBoxEx_ResetContent": {
        "documentation": "Removes all items",
        "label": "_GUICtrlComboBoxEx_ResetContent ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlComboBoxEx_SetCurSel": {
        "documentation": "Select a string in the list of a ComboBox",
        "label": "_GUICtrlComboBoxEx_SetCurSel ( $hWnd [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based index of the string to select"
        }]
    },
    "_GUICtrlComboBoxEx_SetDroppedWidth": {
        "documentation": "Set the maximum allowable width, in pixels, of the ListBox of a ComboBox",
        "label": "_GUICtrlComboBoxEx_SetDroppedWidth ( $hWnd, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iWidth",
            "documentation": "The width of the ListBox, in pixels"
        }]
    },
    "_GUICtrlComboBoxEx_SetEditSel": {
        "documentation": "Select characters in the edit control of a ComboBox",
        "label": "_GUICtrlComboBoxEx_SetEditSel ( $hWnd, $iStart, $iStop )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iStart",
            "documentation": "Starting position"
        }, {
            "label": "$iStop",
            "documentation": "Ending postions"
        }]
    },
    "_GUICtrlComboBoxEx_SetEditText": {
        "documentation": "Set the text of the edit control of the ComboBox",
        "label": "_GUICtrlComboBoxEx_SetEditText ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to be set"
        }]
    },
    "_GUICtrlComboBoxEx_SetExtendedStyle": {
        "documentation": "Sets extended styles within a ComboBoxEx control",
        "label": "_GUICtrlComboBoxEx_SetExtendedStyle ( $hWnd, $iExStyle [, $iExMask = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iExStyle",
            "documentation": "Extended control styles:    $CBES_EX_CASESENSITIVE - Searches in the list will be case sensitive    $CBES_EX_NOEDITIMAGE - The edit box and the dropdown list will not display item images    $CBES_EX_NOEDITIMAGEINDENT - The edit box and the dropdown list will not display item images    $CBES_EX_NOSIZELIMIT - Allows the ComboBoxEx control to be vertically sized smaller than its contained combo box control"
        }, {
            "label": "$iExMask",
            "documentation": "**[optional]** Specifies which styles in $iExStyle are to be affected.This parameter can be a combination of extended styles.Only the extended styles in $iExMask will be changed.All other styles will be maintained as they are.If this parameter is zero, all of the styles in $iExStyle will be affected."
        }]
    },
    "_GUICtrlComboBoxEx_SetExtendedUI": {
        "documentation": "Select either the default user interface or the extended user interface",
        "label": "_GUICtrlComboBoxEx_SetExtendedUI ( $hWnd [, $bExtended = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bExtended",
            "documentation": "**[optional]** Specifies whether the combo box uses the extended"
        }]
    },
    "_GUICtrlComboBoxEx_SetImageList": {
        "documentation": "Sets an image list for a ComboBoxEx control",
        "label": "_GUICtrlComboBoxEx_SetImageList ( $hWnd, $hHandle )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$hHandle",
            "documentation": "A handle to the image list to be set for the control"
        }]
    },
    "_GUICtrlComboBoxEx_SetItem": {
        "documentation": "Sets some or all of a item's attributes",
        "label": "_GUICtrlComboBoxEx_SetItem ( $hWnd, $sText [, $iIndex = 0 [, $iImage = -1 [, $iSelectedImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Item text. See remark."
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** The 0-based index of the item"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iSelectedImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iOverlayImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iIndent",
            "documentation": "**[optional]** Number of image widths to indent the item. A single indentation equals the width of an image."
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Value specific to the item"
        }]
    },
    "_GUICtrlComboBoxEx_SetItemEx": {
        "documentation": "Sets some or all of a item's attributes",
        "label": "_GUICtrlComboBoxEx_SetItemEx ( $hWnd, ByRef $tItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$tItem",
            "documentation": "$tagCOMBOBOXEXITEM structure"
        }]
    },
    "_GUICtrlComboBoxEx_SetItemHeight": {
        "documentation": "Set the height of list items or the selection field in a ComboBox",
        "label": "_GUICtrlComboBoxEx_SetItemHeight ( $hWnd, $iComponent, $iHeight )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iComponent",
            "documentation": "Use the following values:    –1 - Set the height of the selection field     0 - Set the height of list items"
        }, {
            "label": "$iHeight",
            "documentation": "The height, in pixels, of the combo box component identified by $iComponent"
        }]
    },
    "_GUICtrlComboBoxEx_SetItemImage": {
        "documentation": "Sets the index of the item's icon in the control's image list",
        "label": "_GUICtrlComboBoxEx_SetItemImage ( $hWnd, $iIndex, $iImage )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iImage",
            "documentation": "0-based index into the control's image list"
        }]
    },
    "_GUICtrlComboBoxEx_SetItemIndent": {
        "documentation": "Sets the number of image widths to indent the item",
        "label": "_GUICtrlComboBoxEx_SetItemIndent ( $hWnd, $iIndex, $iIndent )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iIndent",
            "documentation": "Indention value"
        }]
    },
    "_GUICtrlComboBoxEx_SetItemOverlayImage": {
        "documentation": "Sets the index of the item's overlay icon in the control's image list",
        "label": "_GUICtrlComboBoxEx_SetItemOverlayImage ( $hWnd, $iIndex, $iImage )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iImage",
            "documentation": "0-based index into the control's image list"
        }]
    },
    "_GUICtrlComboBoxEx_SetItemParam": {
        "documentation": "Sets the value specific to the item",
        "label": "_GUICtrlComboBoxEx_SetItemParam ( $hWnd, $iIndex, $iParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iParam",
            "documentation": "Item specific value"
        }]
    },
    "_GUICtrlComboBoxEx_SetItemSelectedImage": {
        "documentation": "Sets the index of the item's overlay icon in the control's image list",
        "label": "_GUICtrlComboBoxEx_SetItemSelectedImage ( $hWnd, $iIndex, $iImage )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iImage",
            "documentation": "0-based index into the control's image list"
        }]
    },
    "_GUICtrlComboBoxEx_SetMinVisible": {
        "documentation": "Set the minimum number of visible items in the drop-down list of a ComboBox",
        "label": "_GUICtrlComboBoxEx_SetMinVisible ( $hWnd, $iMinimum )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iMinimum",
            "documentation": "Specifies the minimum number of visible items"
        }]
    },
    "_GUICtrlComboBoxEx_SetTopIndex": {
        "documentation": "Ensure that a particular item is visible in the ListBox of a ComboBox",
        "label": "_GUICtrlComboBoxEx_SetTopIndex ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the list item"
        }]
    },
    "_GUICtrlComboBoxEx_SetUnicode": {
        "documentation": "Sets if control is using Unicode",
        "label": "_GUICtrlComboBoxEx_SetUnicode ( $hWnd [, $bUnicode = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bUnicode",
            "documentation": "**[optional]** May be one of the following:    True - Turn on Unicode    False - Turn off Unicode"
        }]
    },
    "_GUICtrlComboBoxEx_ShowDropDown": {
        "documentation": "Show or hide the ListBox of a ComboBox",
        "label": "_GUICtrlComboBoxEx_ShowDropDown ( $hWnd [, $bShow = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bShow",
            "documentation": "**[optional]** Specifies whether the drop-down ListBox is to be shown or hidden:    True - Show ListBox    False - Hide ListBox"
        }]
    },
    "_GUICtrlComboBox_AddDir": {
        "documentation": "Adds the names of directories and files",
        "label": "_GUICtrlComboBox_AddDir ( $hWnd, $sFilePath [, $iAttributes = 0 [, $bBrackets = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFilePath",
            "documentation": "Specifies an absolute path, relative path, or filename"
        }, {
            "label": "$iAttributes",
            "documentation": "**[optional]** Specifies the attributes of the files or directories to be added:    $DDL_READWRITE - Includes read-write files with no additional attributes    $DDL_READONLY - Includes read-only files    $DDL_HIDDEN - Includes hidden files    $DDL_SYSTEM - Includes system files    $DDL_DIRECTORY - Includes directories    $DDL_ARCHIVE - Includes archived files    $DDL_DRIVES - All mapped drives are added to the list    $DDL_EXCLUSIVE - Includes only files with the specified attributes"
        }, {
            "label": "$bBrackets",
            "documentation": "**[optional]** include/exclude brackets when $DDL_DRIVES is used"
        }]
    },
    "_GUICtrlComboBox_AddString": {
        "documentation": "Add a string",
        "label": "_GUICtrlComboBox_AddString ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String to add"
        }]
    },
    "_GUICtrlComboBox_AutoComplete": {
        "documentation": "AutoComplete a ComboBox edit control",
        "label": "_GUICtrlComboBox_AutoComplete ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_BeginUpdate": {
        "documentation": "Prevents updating of the control until the EndUpdate function is called",
        "label": "_GUICtrlComboBox_BeginUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_Create": {
        "documentation": "Create a ComboBox control",
        "label": "_GUICtrlComboBox_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 120 [, $iStyle = 0x00200042 [, $iExStyle = 0x00000000]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$sText",
            "documentation": "Delimited string to add to the combobox"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control style:    $CBS_AUTOHSCROLL - Automatically scrolls the text in an edit control to the right when the user types a character at the end of the line.    $CBS_DISABLENOSCROLL - Shows a disabled vertical scroll bar    $CBS_DROPDOWN - Similar to $CBS_SIMPLE, except that the list box is not displayed unless the user selects an icon next to the edit control    $CBS_DROPDOWNLIST - Similar to $CBS_DROPDOWN, except that the edit control is replaced by a static text item that displays the current selection in the list box    $CBS_LOWERCASE - Converts to lowercase all text in both the selection field and the list    $CBS_NOINTEGRALHEIGHT - Specifies that the size of the combo box is exactly the size specified by the application when it created the combo box    $CBS_OEMCONVERT - Converts text entered in the combo box edit control from the Windows character set to the OEM character set and then back to the Windows character set    $CBS_OWNERDRAWFIXED - Specifies that the owner of the list box is responsible for drawing its contents and that the items in the list box are all the same height    $CBS_OWNERDRAWVARIABLE - Specifies that the owner of the list box is responsible for drawing its contents and that the items in the list box are variable in height    $CBS_SIMPLE - Displays the list box at all times    $CBS_SORT - Automatically sorts strings added to the list box    $CBS_UPPERCASE - Converts to uppercase all text in both the selection field and the listDefault: $CBS_DROPDOWN, $CBS_AUTOHSCROLL, $WS_VSCROLLForced : $WS_CHILD, $WS_TABSTOP, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table."
        }]
    },
    "_GUICtrlComboBox_DeleteString": {
        "documentation": "Delete a string",
        "label": "_GUICtrlComboBox_DeleteString ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of string"
        }]
    },
    "_GUICtrlComboBox_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlComboBox_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_EndUpdate": {
        "documentation": "Enables screen repainting that was turned off with the BeginUpdate function",
        "label": "_GUICtrlComboBox_EndUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_FindString": {
        "documentation": "Search for a string",
        "label": "_GUICtrlComboBox_FindString ( $hWnd, $sText [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String to search for"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** 0-based index of the item preceding the first item to be searched"
        }]
    },
    "_GUICtrlComboBox_FindStringExact": {
        "documentation": "Search for a string",
        "label": "_GUICtrlComboBox_FindStringExact ( $hWnd, $sText [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String to search for"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** 0-based index of the item preceding the first item to be searched"
        }]
    },
    "_GUICtrlComboBox_GetComboBoxInfo": {
        "documentation": "Gets information about the specified ComboBox",
        "label": "_GUICtrlComboBox_GetComboBoxInfo ( $hWnd, ByRef $tInfo )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$tInfo",
            "documentation": "infos as defined by $tagCOMBOBOXINFO"
        }]
    },
    "_GUICtrlComboBox_GetCount": {
        "documentation": "Retrieve the number of items",
        "label": "_GUICtrlComboBox_GetCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetCueBanner": {
        "documentation": "Gets the cue banner text displayed in the edit control of a combo box",
        "label": "_GUICtrlComboBox_GetCueBanner ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetCurSel": {
        "documentation": "Retrieve the index of the currently selected item",
        "label": "_GUICtrlComboBox_GetCurSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetDroppedControlRect": {
        "documentation": "Retrieve the screen coordinates of a combo box in its dropped-down state",
        "label": "_GUICtrlComboBox_GetDroppedControlRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetDroppedControlRectEx": {
        "documentation": "Retrieve the screen coordinates of a combo box in its dropped-down state",
        "label": "_GUICtrlComboBox_GetDroppedControlRectEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetDroppedState": {
        "documentation": "Determines whether the ListBox of a ComboBox is dropped down",
        "label": "_GUICtrlComboBox_GetDroppedState ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetDroppedWidth": {
        "documentation": "Retrieve the minimum allowable width, of the ListBox of a ComboBox",
        "label": "_GUICtrlComboBox_GetDroppedWidth ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetEditSel": {
        "documentation": "Gets the starting and ending character positions of the current selection in the edit control of a ComboBox",
        "label": "_GUICtrlComboBox_GetEditSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetEditText": {
        "documentation": "Get the text from the edit control of a ComboBox",
        "label": "_GUICtrlComboBox_GetEditText ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetExtendedUI": {
        "documentation": "Determines whether a ComboBox has the default user interface or the extended user interface",
        "label": "_GUICtrlComboBox_GetExtendedUI ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetHorizontalExtent": {
        "documentation": "Gets the width, in pixels, that the ListBox of a ComboBox control can be scrolled horizontally",
        "label": "_GUICtrlComboBox_GetHorizontalExtent ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetItemHeight": {
        "documentation": "Determines the height of list items or the selection field in a ComboBox",
        "label": "_GUICtrlComboBox_GetItemHeight ( $hWnd [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Determines which height to get:    –1 - Retrieve the height of the selection field     0 - Retrieve the height of list items"
        }]
    },
    "_GUICtrlComboBox_GetLBText": {
        "documentation": "Retrieve a string from the list of a ComboBox",
        "label": "_GUICtrlComboBox_GetLBText ( $hWnd, $iIndex, ByRef $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index to Retrieve from"
        }, {
            "label": "$sText",
            "documentation": "Variable that will receive the string"
        }]
    },
    "_GUICtrlComboBox_GetLBTextLen": {
        "documentation": "Gets the length, in characters, of a string in the list of a combo box",
        "label": "_GUICtrlComboBox_GetLBTextLen ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "index of the required entry"
        }]
    },
    "_GUICtrlComboBox_GetList": {
        "documentation": "Retrieves all items from the list portion of a ComboBox control",
        "label": "_GUICtrlComboBox_GetList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetListArray": {
        "documentation": "Retrieves all items from the list portion of a ComboBox control",
        "label": "_GUICtrlComboBox_GetListArray ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetLocale": {
        "documentation": "Retrieves the current locale",
        "label": "_GUICtrlComboBox_GetLocale ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetLocaleCountry": {
        "documentation": "Retrieves the current country code",
        "label": "_GUICtrlComboBox_GetLocaleCountry ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetLocaleLang": {
        "documentation": "Retrieves the current language identifier",
        "label": "_GUICtrlComboBox_GetLocaleLang ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetLocalePrimLang": {
        "documentation": "Extract primary language id from a language id",
        "label": "_GUICtrlComboBox_GetLocalePrimLang ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetLocaleSubLang": {
        "documentation": "Extract sublanguage id from a language id",
        "label": "_GUICtrlComboBox_GetLocaleSubLang ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetMinVisible": {
        "documentation": "Retrieve the minimum number of visible items in the drop-down list of a ComboBox",
        "label": "_GUICtrlComboBox_GetMinVisible ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_GetTopIndex": {
        "documentation": "Retrieve the 0-based index of the first visible item in the ListBox portion of a ComboBox",
        "label": "_GUICtrlComboBox_GetTopIndex ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_InitStorage": {
        "documentation": "Allocates memory for storing ListBox items",
        "label": "_GUICtrlComboBox_InitStorage ( $hWnd, $iNum, $iBytes )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iNum",
            "documentation": "Number of items to add"
        }, {
            "label": "$iBytes",
            "documentation": "The amount of memory to allocate for item strings, in bytes"
        }]
    },
    "_GUICtrlComboBox_InsertString": {
        "documentation": "Insert a string",
        "label": "_GUICtrlComboBox_InsertString ( $hWnd, $sText [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text string to be inserted"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based index of the position at which to insert the string."
        }]
    },
    "_GUICtrlComboBox_LimitText": {
        "documentation": "Limits the length of the text the user may type into the edit control of a ComboBox",
        "label": "_GUICtrlComboBox_LimitText ( $hWnd [, $iLimit = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iLimit",
            "documentation": "**[optional]** limit length of the text"
        }]
    },
    "_GUICtrlComboBox_ReplaceEditSel": {
        "documentation": "Replace text selected in edit box",
        "label": "_GUICtrlComboBox_ReplaceEditSel ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String containing the replacement text"
        }]
    },
    "_GUICtrlComboBox_ResetContent": {
        "documentation": "Remove all items from the ListBox and edit control of a ComboBox",
        "label": "_GUICtrlComboBox_ResetContent ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlComboBox_SelectString": {
        "documentation": "Searches the ListBox of a ComboBox for an item that begins with the characters in a specified string",
        "label": "_GUICtrlComboBox_SelectString ( $hWnd, $sText [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String that contains the characters for which to search"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based index of the item preceding the first item to be searched"
        }]
    },
    "_GUICtrlComboBox_SetCueBanner": {
        "documentation": "Sets the cue banner text that is displayed for the edit control of a combo box",
        "label": "_GUICtrlComboBox_SetCueBanner ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String that contains the text"
        }]
    },
    "_GUICtrlComboBox_SetCurSel": {
        "documentation": "Select a string in the list of a ComboBox",
        "label": "_GUICtrlComboBox_SetCurSel ( $hWnd [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based index of the string to select"
        }]
    },
    "_GUICtrlComboBox_SetDroppedWidth": {
        "documentation": "Set the maximum allowable width, in pixels, of the ListBox of a ComboBox",
        "label": "_GUICtrlComboBox_SetDroppedWidth ( $hWnd, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iWidth",
            "documentation": "The width of the ListBox, in pixels"
        }]
    },
    "_GUICtrlComboBox_SetEditSel": {
        "documentation": "Select characters in the edit control of a ComboBox",
        "label": "_GUICtrlComboBox_SetEditSel ( $hWnd, $iStart, $iStop )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iStart",
            "documentation": "Starting position"
        }, {
            "label": "$iStop",
            "documentation": "Ending postions"
        }]
    },
    "_GUICtrlComboBox_SetEditText": {
        "documentation": "Set the text of the edit control of the ComboBox",
        "label": "_GUICtrlComboBox_SetEditText ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to be set"
        }]
    },
    "_GUICtrlComboBox_SetExtendedUI": {
        "documentation": "Select either the default user interface or the extended user interface",
        "label": "_GUICtrlComboBox_SetExtendedUI ( $hWnd [, $bExtended = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bExtended",
            "documentation": "**[optional]** Specifies whether the combo box uses the extended"
        }]
    },
    "_GUICtrlComboBox_SetHorizontalExtent": {
        "documentation": "Set the width, in pixels, by which a list box can be scrolled horizontally",
        "label": "_GUICtrlComboBox_SetHorizontalExtent ( $hWnd, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iWidth",
            "documentation": "Specifies the scrollable width of the list box, in pixels"
        }]
    },
    "_GUICtrlComboBox_SetItemHeight": {
        "documentation": "Set the height of list items or the selection field in a ComboBox",
        "label": "_GUICtrlComboBox_SetItemHeight ( $hWnd, $iHeight [, $iComponent = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iHeight",
            "documentation": "The height, in pixels, of the combo box component identified by $iComponent"
        }, {
            "label": "$iComponent",
            "documentation": "**[optional]** Use the following values:    –1 - Set the height of the selection field     0 - Set the height of list items"
        }]
    },
    "_GUICtrlComboBox_SetMinVisible": {
        "documentation": "Set the minimum number of visible items in the drop-down list of a ComboBox",
        "label": "_GUICtrlComboBox_SetMinVisible ( $hWnd, $iMinimum )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMinimum",
            "documentation": "Specifies the minimum number of visible items"
        }]
    },
    "_GUICtrlComboBox_SetTopIndex": {
        "documentation": "Ensure that a particular item is visible in the ListBox of a ComboBox",
        "label": "_GUICtrlComboBox_SetTopIndex ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the list item"
        }]
    },
    "_GUICtrlComboBox_ShowDropDown": {
        "documentation": "Show or hide the ListBox of a ComboBox",
        "label": "_GUICtrlComboBox_ShowDropDown ( $hWnd [, $bShow = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bShow",
            "documentation": "**[optional]** Specifies whether the drop-down ListBox is to be shown or hidden:    True - Show ListBox    False - Hide ListBox"
        }]
    },
    "_GUICtrlDTP_Create": {
        "documentation": "Create a DTP control",
        "label": "_GUICtrlDTP_Create ( $hWnd, $iX, $iY [, $iWidth = 120 [, $iHeight = 21 [, $iStyle = 0x00000000 [, $iExStyle = 0x00000000]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control styles:    $DTS_APPCANPARSE - Allows the owner to parse user input and take action    $DTS_LONGDATEFORMAT - Displays the date in long format    $DTS_RIGHTALIGN - The calendar will be right-aligned    $DTS_SHOWNONE - Displays a check box that can be checked once a date is entered    $DTS_SHORTDATEFORMAT - Displays the date in short format    $DTS_SHORTDATECENTURYFORMAT - The year is a four-digit field    $DTS_TIMEFORMAT - Displays the time    $DTS_UPDOWN - Places an up-down control to the right of the controlForced: $WS_CHILD, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table."
        }]
    },
    "_GUICtrlDTP_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlDTP_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlDTP_GetMCColor": {
        "documentation": "Retrieves the specified color",
        "label": "_GUICtrlDTP_GetMCColor ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Indicates which month calendar color to retrieve:    0 - Background color displayed between months    1 - Color used to display text within a month    2 - Background color displayed in the calendar title    3 - Color used to display text within the calendar title    4 - Background color displayed within the month    5 - Color used to display header day and trailing day text"
        }]
    },
    "_GUICtrlDTP_GetMCFont": {
        "documentation": "Retrieves the month calendar font handle",
        "label": "_GUICtrlDTP_GetMCFont ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlDTP_GetMonthCal": {
        "documentation": "Retrieves the handle to child month calendar control",
        "label": "_GUICtrlDTP_GetMonthCal ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlDTP_GetRange": {
        "documentation": "Retrieves the current minimum and maximum allowable system times",
        "label": "_GUICtrlDTP_GetRange ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlDTP_GetRangeEx": {
        "documentation": "Retrieves the current minimum and maximum allowable system times",
        "label": "_GUICtrlDTP_GetRangeEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlDTP_GetSystemTime": {
        "documentation": "Retrieves the currently selected date and time",
        "label": "_GUICtrlDTP_GetSystemTime ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlDTP_GetSystemTimeEx": {
        "documentation": "Retrieves the currently selected date and time",
        "label": "_GUICtrlDTP_GetSystemTimeEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlDTP_SetFormat": {
        "documentation": "Sets the display based on a given format string",
        "label": "_GUICtrlDTP_SetFormat ( $hWnd, $sFormat )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sFormat",
            "documentation": "String that defines the desired format. Setting this to blank will reset the control to the default format string for the current style. You can use the following format strings:    \"d\" - The one or two digit day    \"dd\" - The two digit day. Single digit day values are preceded by a zero    \"ddd\" - The three character weekday abbreviation    \"dddd\" - The full weekday name    \"h\" - The one or two digit hour in 12-hour format    \"hh\" - The two digit hour in 12-hour format    \"H\" - The one or two digit hour in 24-hour format    \"HH\" - The two digit hour in 24 hour format    \"m\" - The one or two digit minute    \"mm\" - The two digit minute    \"M\" - The one or two digit month number    \"MM\" - The two digit month number    \"MMM\" - The three-character month abbreviation    \"MMMM\" - The full month name    \"t\" - The one letter AM/PM abbreviation    \"tt\" - The two letter AM/PM abbreviation    \"yy\" - The last two digits of the year    \"yyyy\" - The full year"
        }]
    },
    "_GUICtrlDTP_SetMCColor": {
        "documentation": "Sets the color for a given portion of the month calendar",
        "label": "_GUICtrlDTP_SetMCColor ( $hWnd, $iIndex, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Indicates which month calendar color to set:    0 - Background color displayed between months    1 - Color used to display text within a month    2 - Background color displayed in the calendar title    3 - Color used to display text within the calendar title    4 - Background color displayed within the month    5 - Color used to display header day and trailing day text"
        }, {
            "label": "$iColor",
            "documentation": "The color that will be set for the specified area"
        }]
    },
    "_GUICtrlDTP_SetMCFont": {
        "documentation": "Sets the month calendar font",
        "label": "_GUICtrlDTP_SetMCFont ( $hWnd, $hFont [, $bRedraw = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$hFont",
            "documentation": "Handle to the font that will be set"
        }, {
            "label": "$bRedraw",
            "documentation": "**[optional]** Specifies whether the control should be redrawn immediately"
        }]
    },
    "_GUICtrlDTP_SetRange": {
        "documentation": "Sets the current minimum and maximum allowable system times",
        "label": "_GUICtrlDTP_SetRange ( $hWnd, ByRef $aRange )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$aRange",
            "documentation": "Array formatted as follows:    [ 0] - True if Min data is to be set, otherwise False    [ 1] - Min Year    [ 2] - Min Month    [ 3] - Min Day    [ 4] - Min Hour    [ 5] - Min Minute    [ 6] - Min Second    [ 7] - True if Max data is to be set, otherwise False    [ 8] - Max Year    [ 9] - Max Month    [10] - Max Day    [11] - Max Hour    [12] - Max Minute    [13] - Max Second"
        }]
    },
    "_GUICtrlDTP_SetRangeEx": {
        "documentation": "Sets the current minimum and maximum allowable system times",
        "label": "_GUICtrlDTP_SetRangeEx ( $hWnd, ByRef $tRange )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$tRange",
            "documentation": "$tagDTPRANGE structure"
        }]
    },
    "_GUICtrlDTP_SetSystemTime": {
        "documentation": "Sets the currently selected date and time",
        "label": "_GUICtrlDTP_SetSystemTime ( $hWnd, ByRef $aDate )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$aDate",
            "documentation": "Array formatted as follows:    [0] - If True, the control will is set to \"no date\"    [1] - Year    [2] - Month    [3] - Day    [4] - Hour    [5] - Minute    [6] - Second"
        }]
    },
    "_GUICtrlDTP_SetSystemTimeEx": {
        "documentation": "Sets the currently selected date and time",
        "label": "_GUICtrlDTP_SetSystemTimeEx ( $hWnd, ByRef $tDate [, $bFlag = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$tDate",
            "documentation": "$tagSYSTEMTIME structure"
        }, {
            "label": "$bFlag",
            "documentation": "**[optional]** No date setting:    True - Control will be set to \"no date\"    False - Control is set to date and time value"
        }]
    },
    "_GUICtrlEdit_AppendText": {
        "documentation": "Append text",
        "label": "_GUICtrlEdit_AppendText ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String to append"
        }]
    },
    "_GUICtrlEdit_BeginUpdate": {
        "documentation": "Prevents updating of the control until the _GUICtrlEdit_EndUpdate function is called",
        "label": "_GUICtrlEdit_BeginUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_CanUndo": {
        "documentation": "Determines whether there are any actions in an edit control's undo queue",
        "label": "_GUICtrlEdit_CanUndo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_CharFromPos": {
        "documentation": "Retrieve information about the character closest to a specified point in the client area",
        "label": "_GUICtrlEdit_CharFromPos ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "horizontal position"
        }, {
            "label": "$iY",
            "documentation": "vertical position"
        }]
    },
    "_GUICtrlEdit_Create": {
        "documentation": "Create an Edit control",
        "label": "_GUICtrlEdit_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x003010C4 [, $iExStyle = 0x00000200]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$sText",
            "documentation": "Text to be displayed in the control"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control styles:    $ES_AUTOHSCROLL - Automatically scrolls text to the right by 10 characters when the user types a character at the end of the line.    $ES_AUTOVSCROLL - Automatically scrolls text up one page when the user presses the ENTER key on the last line.    $ES_CENTER - Centers text in an edit control.    $ES_LEFT - Aligns text with the left margin.    $ES_LOWERCASE - Converts all characters to lowercase as they are typed into the edit control.    $ES_MULTILINE - Designates a multiline edit control.    $ES_NOHIDESEL - The selected text is inverted, even if the control does not have the focus.    $ES_NUMBER - Allows only digits to be entered into the edit control.    $ES_OEMCONVERT - Converts text entered in the edit control.    $ES_READONLY - Prevents the user from typing or editing text in the edit control.    $ES_RIGHT - Right-aligns text edit control.    $ES_UPPERCASE - Converts all characters to uppercase as they are typed into the edit control.    $ES_WANTRETURN - Specifies that a carriage return be inserted when the user presses the ENTER key.    $ES_PASSWORD - Displays an asterisk (*) for each character that is typed into the edit controlDefault: $ES_MULTILINE, $ES_WANTRETURN, $WS_VSCROLL, $WS_HSCROLL, $ES_AUTOVSCROLL, $ES_AUTOHSCROLLForced : WS_CHILD, $WS_VISIBLE, $WS_TABSTOP only if not using $ES_READONLY"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table."
        }]
    },
    "_GUICtrlEdit_Destroy": {
        "documentation": "Delete the Edit control",
        "label": "_GUICtrlEdit_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_EmptyUndoBuffer": {
        "documentation": "Resets the undo flag of an edit control",
        "label": "_GUICtrlEdit_EmptyUndoBuffer ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_EndUpdate": {
        "documentation": "Enables screen repainting that was turned off with the _GUICtrlEdit_BeginUpdate function",
        "label": "_GUICtrlEdit_EndUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_Find": {
        "documentation": "Initiates a find dialog",
        "label": "_GUICtrlEdit_Find ( $hWnd [, $bReplace = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bReplace",
            "documentation": "**[optional]** Replace Option:    True - Show option    False - Hide option"
        }]
    },
    "_GUICtrlEdit_FmtLines": {
        "documentation": "Determines whether an edit control includes soft line-break characters",
        "label": "_GUICtrlEdit_FmtLines ( $hWnd [, $bSoftBreak = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bSoftBreak",
            "documentation": "**[optional]** Specifies whether soft line-break characters are to be inserted:    True - Inserts the characters    False - Removes them"
        }]
    },
    "_GUICtrlEdit_GetCueBanner": {
        "documentation": "Gets the cue banner text displayed in the edit control",
        "label": "_GUICtrlEdit_GetCueBanner ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetFirstVisibleLine": {
        "documentation": "Retrieves the 0-based index of the uppermost visible line in a multiline edit control",
        "label": "_GUICtrlEdit_GetFirstVisibleLine ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetLimitText": {
        "documentation": "Gets the current text limit for an edit control",
        "label": "_GUICtrlEdit_GetLimitText ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetLine": {
        "documentation": "Retrieves a line of text from an edit control",
        "label": "_GUICtrlEdit_GetLine ( $hWnd, $iLine )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iLine",
            "documentation": "0-based line index to get"
        }]
    },
    "_GUICtrlEdit_GetLineCount": {
        "documentation": "Retrieves the number of lines",
        "label": "_GUICtrlEdit_GetLineCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetMargins": {
        "documentation": "Retrieves the widths of the left and right margins",
        "label": "_GUICtrlEdit_GetMargins ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetModify": {
        "documentation": "Retrieves the state of an edit control's modification flag",
        "label": "_GUICtrlEdit_GetModify ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetPasswordChar": {
        "documentation": "Gets the password character that an edit control displays when the user enters text",
        "label": "_GUICtrlEdit_GetPasswordChar ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetRECT": {
        "documentation": "Retrieves the formatting rectangle of an edit control",
        "label": "_GUICtrlEdit_GetRECT ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetRECTEx": {
        "documentation": "Retrieves the formatting rectangle of an edit control",
        "label": "_GUICtrlEdit_GetRECTEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetSel": {
        "documentation": "Retrieves the starting and ending character positions of the current selection",
        "label": "_GUICtrlEdit_GetSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetText": {
        "documentation": "Get the text from the edit control",
        "label": "_GUICtrlEdit_GetText ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_GetTextLen": {
        "documentation": "Get the length of all the text from the edit control",
        "label": "_GUICtrlEdit_GetTextLen ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_HideBalloonTip": {
        "documentation": "Hides any balloon tip associated with an edit control",
        "label": "_GUICtrlEdit_HideBalloonTip ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlEdit_InsertText": {
        "documentation": "Insert text",
        "label": "_GUICtrlEdit_InsertText ( $hWnd, $sText [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String to insert"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Character position to insert"
        }]
    },
    "_GUICtrlEdit_LineFromChar": {
        "documentation": "Retrieves the index of the line that contains the specified character index",
        "label": "_GUICtrlEdit_LineFromChar ( $hWnd [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** The character index of the character contained in the line whose number is to be retrieved"
        }]
    },
    "_GUICtrlEdit_LineIndex": {
        "documentation": "Retrieves the character index of the first character of a specified line",
        "label": "_GUICtrlEdit_LineIndex ( $hWnd [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based line number"
        }]
    },
    "_GUICtrlEdit_LineLength": {
        "documentation": "Retrieves the length, in characters, of a line",
        "label": "_GUICtrlEdit_LineLength ( $hWnd [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based line index of the line whose length is to be retrieved"
        }]
    },
    "_GUICtrlEdit_LineScroll": {
        "documentation": "Scrolls the text",
        "label": "_GUICtrlEdit_LineScroll ( $hWnd, $iHoriz, $iVert )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iHoriz",
            "documentation": "Specifies the number of characters to scroll horizontally."
        }, {
            "label": "$iVert",
            "documentation": "Specifies the number of lines to scroll vertically."
        }]
    },
    "_GUICtrlEdit_PosFromChar": {
        "documentation": "Retrieves the client area coordinates of a specified character in an edit control",
        "label": "_GUICtrlEdit_PosFromChar ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "The 0-based index of the character"
        }]
    },
    "_GUICtrlEdit_ReplaceSel": {
        "documentation": "Replaces the current selection",
        "label": "_GUICtrlEdit_ReplaceSel ( $hWnd, $sText [, $bUndo = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String containing the replacement text."
        }, {
            "label": "$bUndo",
            "documentation": "**[optional]** Specifies whether the replacement operation can be undone:    True - The operation can be undone.    False - The operation cannot be undone."
        }]
    },
    "_GUICtrlEdit_Scroll": {
        "documentation": "Scrolls the text vertically",
        "label": "_GUICtrlEdit_Scroll ( $hWnd, $iDirection )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iDirection",
            "documentation": "This parameter can be one of the following values:    $SB_LINEDOWN - Scrolls down one line    $SB_LINEUP - Scrolls up one line    $SB_PAGEDOWN - Scrolls down one page    $SB_PAGEUP - Scrolls up one page    $SB_SCROLLCARET - Scrolls the caret into view"
        }]
    },
    "_GUICtrlEdit_SetCueBanner": {
        "documentation": "Sets the cue banner text that is displayed for the edit control",
        "label": "_GUICtrlEdit_SetCueBanner ( $hWnd, $sText [, $bOnFocus = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String that contains the text"
        }, {
            "label": "$bOnFocus",
            "documentation": "**[optional]** True - if the cue banner should show even when the edit control has focus.False (Default) - the cue banner disappears when the user clicks in the control."
        }]
    },
    "_GUICtrlEdit_SetLimitText": {
        "documentation": "Sets the text limit",
        "label": "_GUICtrlEdit_SetLimitText ( $hWnd, $iLimit )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iLimit",
            "documentation": "The maximum number of TCHARs the user can enter"
        }]
    },
    "_GUICtrlEdit_SetMargins": {
        "documentation": "Sets the widths of the left and right margins",
        "label": "_GUICtrlEdit_SetMargins ( $hWnd [, $iMargin = 0x1 [, $iLeft = 0xFFFF [, $iRight = 0xFFFF]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMargin",
            "documentation": "**[optional]** Can be one or more of the following    $EC_LEFTMARGIN - Sets the left margin    $EC_RIGHTMARGIN - Sets the right marginDefault: $EC_LEFTMARGIN"
        }, {
            "label": "$iLeft",
            "documentation": "**[optional]** The new width of the left marginDefault: $EC_USEFONTINFO"
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** The new width of the right marginDefault: $EC_USEFONTINFO"
        }]
    },
    "_GUICtrlEdit_SetModify": {
        "documentation": "Sets or clears the modification flag",
        "label": "_GUICtrlEdit_SetModify ( $hWnd, $bModified )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bModified",
            "documentation": "Specifies the new value for the modification flag:    True - Indicates the text has been modified.    False - Indicates it has not been modified."
        }]
    },
    "_GUICtrlEdit_SetPasswordChar": {
        "documentation": "Sets or removes the password character for an edit control",
        "label": "_GUICtrlEdit_SetPasswordChar ( $hWnd [, $sDisplayChar = \"0\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sDisplayChar",
            "documentation": "**[optional]** The character to be displayed in place of the characters typed by the userIf this parameter is zero, the control removes the current password character and displays the characters typed by the user"
        }]
    },
    "_GUICtrlEdit_SetReadOnly": {
        "documentation": "Sets or removes the read-only style ($ES_READONLY)",
        "label": "_GUICtrlEdit_SetReadOnly ( $hWnd, $bReadOnly )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bReadOnly",
            "documentation": "Following values:    True - Sets the $ES_READONLY style    False - Removes the $ES_READONLY style"
        }]
    },
    "_GUICtrlEdit_SetRECT": {
        "documentation": "Sets the formatting rectangle of a multiline edit control",
        "label": "_GUICtrlEdit_SetRECT ( $hWnd, $aRect )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$aRect",
            "documentation": "Array in the following format:[0] - Specifies the x-coordinate of the upper-left corner of the rectangle.[1] - Specifies the y-coordinate of the upper-left corner of the rectangle.[2] - Specifies the x-coordinate of the lower-right corner of the rectangle.[3] - Specifies the y-coordinate of the lower-right corner of the rectangle."
        }]
    },
    "_GUICtrlEdit_SetRECTEx": {
        "documentation": "Sets the formatting rectangle of a multiline edit control",
        "label": "_GUICtrlEdit_SetRECTEx ( $hWnd, $tRECT )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains formatting rectangle of an edit control"
        }]
    },
    "_GUICtrlEdit_SetRECTNP": {
        "documentation": "Sets the formatting rectangle of a multiline edit control",
        "label": "_GUICtrlEdit_SetRECTNP ( $hWnd, $aRect )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$aRect",
            "documentation": "Array in the following format:[0] - Specifies the x-coordinate of the upper-left corner of the rectangle.[1] - Specifies the y-coordinate of the upper-left corner of the rectangle.[2] - Specifies the x-coordinate of the lower-right corner of the rectangle.[3] - Specifies the y-coordinate of the lower-right corner of the rectangle."
        }]
    },
    "_GUICtrlEdit_SetRectNPEx": {
        "documentation": "Sets the formatting rectangle of a multiline edit control",
        "label": "_GUICtrlEdit_SetRectNPEx ( $hWnd, $tRECT )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains formatting rectangle of an edit control"
        }]
    },
    "_GUICtrlEdit_SetSel": {
        "documentation": "Selects a range of characters",
        "label": "_GUICtrlEdit_SetSel ( $hWnd, $iStart, $iEnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iStart",
            "documentation": "Specifies the starting character position of the selection."
        }, {
            "label": "$iEnd",
            "documentation": "Specifies the ending character position of the selection."
        }]
    },
    "_GUICtrlEdit_SetTabStops": {
        "documentation": "Sets the tab stops",
        "label": "_GUICtrlEdit_SetTabStops ( $hWnd, $aTabStops )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$aTabStops",
            "documentation": "Array of tab stops in the following format:[0] - Tab stop 1[2] - Tab stop 2[n] - Tab stop n"
        }]
    },
    "_GUICtrlEdit_SetText": {
        "documentation": "Set the text",
        "label": "_GUICtrlEdit_SetText ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String to place in edit control"
        }]
    },
    "_GUICtrlEdit_ShowBalloonTip": {
        "documentation": "Displays a balloon tip associated with an edit control",
        "label": "_GUICtrlEdit_ShowBalloonTip ( $hWnd, $sTitle, $sText, $iIcon )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sTitle",
            "documentation": "String for title of ToolTip (Unicode)"
        }, {
            "label": "$sText",
            "documentation": "String for text of ToolTip (Unicode)"
        }, {
            "label": "$iIcon",
            "documentation": "Icon can be one of the following:    $TTI_ERROR - Use the error icon    $TTI_INFO - Use the information icon    $TTI_NONE - Use no icon    $TTI_WARNING - Use the warning iconThe following for Windows Vista or later    $TTI_ERROR_LARGE - Use the error icon    $TTI_INFO_LARGE - Use the information icon    $TTI_WARNING_LARGE - Use the warning icon"
        }]
    },
    "_GUICtrlEdit_Undo": {
        "documentation": "Undoes the last edit control operation in the control's undo queue",
        "label": "_GUICtrlEdit_Undo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlHeader_AddItem": {
        "documentation": "Adds a new header item",
        "label": "_GUICtrlHeader_AddItem ( $hWnd, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $bOnRight = False]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Item text"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Item width"
        }, {
            "label": "$iAlign",
            "documentation": "**[optional]** Text alignment:    0 - Text is left-aligned    1 - Text is right-aligned    2 - Text is centered"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of an image within the image list"
        }, {
            "label": "$bOnRight",
            "documentation": "**[optional]** If True, the column image appears to the right of text"
        }]
    },
    "_GUICtrlHeader_ClearFilter": {
        "documentation": "Clears the filter",
        "label": "_GUICtrlHeader_ClearFilter ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_ClearFilterAll": {
        "documentation": "Clears all of the filters",
        "label": "_GUICtrlHeader_ClearFilterAll ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlHeader_Create": {
        "documentation": "Creates a Header control",
        "label": "_GUICtrlHeader_Create ( $hWnd [, $iStyle = 0x00000046] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control styles"
        }]
    },
    "_GUICtrlHeader_CreateDragImage": {
        "documentation": "Creates a semi-transparent version of an item's image for use as a dragging image",
        "label": "_GUICtrlHeader_CreateDragImage ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index. The image assigned to the item is the basis for the transparent image."
        }]
    },
    "_GUICtrlHeader_DeleteItem": {
        "documentation": "Deletes a header item",
        "label": "_GUICtrlHeader_DeleteItem ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_Destroy": {
        "documentation": "Delete the Header control",
        "label": "_GUICtrlHeader_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlHeader_EditFilter": {
        "documentation": "Starts editing the specified filter",
        "label": "_GUICtrlHeader_EditFilter ( $hWnd, $iIndex [, $bDiscard = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$bDiscard",
            "documentation": "**[optional]** Flag that specifies how to handle the user's editing changes. Use this flag to specify what to do if the user is in the process of editing the filter when the message is sent:    True - Discard the changes made by the user    False - Accept the changes made by the user"
        }]
    },
    "_GUICtrlHeader_GetBitmapMargin": {
        "documentation": "Retrieves the width of the bitmap margin",
        "label": "_GUICtrlHeader_GetBitmapMargin ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlHeader_GetImageList": {
        "documentation": "Retrieves the handle to the image list",
        "label": "_GUICtrlHeader_GetImageList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlHeader_GetItem": {
        "documentation": "Retrieves information about an item",
        "label": "_GUICtrlHeader_GetItem ( $hWnd, $iIndex, ByRef $tItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$tItem",
            "documentation": "$tagHDITEM structure"
        }]
    },
    "_GUICtrlHeader_GetItemAlign": {
        "documentation": "Retrieves the item text alignment",
        "label": "_GUICtrlHeader_GetItemAlign ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemBitmap": {
        "documentation": "Retrieves the item bitmap handle",
        "label": "_GUICtrlHeader_GetItemBitmap ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemCount": {
        "documentation": "Retrieves a count of the items",
        "label": "_GUICtrlHeader_GetItemCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlHeader_GetItemDisplay": {
        "documentation": "Returns the item display information",
        "label": "_GUICtrlHeader_GetItemDisplay ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemFlags": {
        "documentation": "Returns the item flag information",
        "label": "_GUICtrlHeader_GetItemFlags ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemFormat": {
        "documentation": "Returns the format of the item",
        "label": "_GUICtrlHeader_GetItemFormat ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemImage": {
        "documentation": "Retrieves the index of an image within the image list",
        "label": "_GUICtrlHeader_GetItemImage ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemOrder": {
        "documentation": "Retrieves the order in which the item appears",
        "label": "_GUICtrlHeader_GetItemOrder ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemParam": {
        "documentation": "Retrieves the param value of the item",
        "label": "_GUICtrlHeader_GetItemParam ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemRect": {
        "documentation": "Retrieves the bounding rectangle for a given item",
        "label": "_GUICtrlHeader_GetItemRect ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemRectEx": {
        "documentation": "Retrieves the bounding rectangle for a given item",
        "label": "_GUICtrlHeader_GetItemRectEx ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemText": {
        "documentation": "Retrieves the item text",
        "label": "_GUICtrlHeader_GetItemText ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetItemWidth": {
        "documentation": "Retrieves the item's width",
        "label": "_GUICtrlHeader_GetItemWidth ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlHeader_GetOrderArray": {
        "documentation": "Retrieves the current left-to-right order of items in a header control",
        "label": "_GUICtrlHeader_GetOrderArray ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlHeader_GetUnicodeFormat": {
        "documentation": "Retrieves the Unicode character format flag for the control",
        "label": "_GUICtrlHeader_GetUnicodeFormat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlHeader_HitTest": {
        "documentation": "Tests a point to determine which item is at the specified point",
        "label": "_GUICtrlHeader_HitTest ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X position to test"
        }, {
            "label": "$iY",
            "documentation": "Y position to text"
        }]
    },
    "_GUICtrlHeader_InsertItem": {
        "documentation": "Inserts a new header item",
        "label": "_GUICtrlHeader_InsertItem ( $hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $bOnRight = False]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Index of the item after which the new item is to be inserted.The new item is inserted at the end of the control if index is greater than or equal to the number of items in the control.If index is zero, the new item is inserted at the beginning of the control."
        }, {
            "label": "$sText",
            "documentation": "Item text. See remark."
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Item width"
        }, {
            "label": "$iAlign",
            "documentation": "**[optional]** Text alignment:    0 - Text is left-aligned    1 - Text is right-aligned    2 - Text is centered"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of an image within the image list"
        }, {
            "label": "$bOnRight",
            "documentation": "**[optional]** If True, the column image appears to the right of text"
        }]
    },
    "_GUICtrlHeader_Layout": {
        "documentation": "Retrieves the correct size and position of the control",
        "label": "_GUICtrlHeader_Layout ( $hWnd, ByRef $tRECT )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the rectangle the control will occupy."
        }]
    },
    "_GUICtrlHeader_OrderToIndex": {
        "documentation": "Retrieves an index value for an item based on its order",
        "label": "_GUICtrlHeader_OrderToIndex ( $hWnd, $iOrder )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iOrder",
            "documentation": "Order in which the item appears within the header control, from left to right"
        }]
    },
    "_GUICtrlHeader_SetBitmapMargin": {
        "documentation": "Sets the width of the margin, specified in pixels, of a bitmap",
        "label": "_GUICtrlHeader_SetBitmapMargin ( $hWnd, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iWidth",
            "documentation": "Width, specified in pixels, of the bitmap margin"
        }]
    },
    "_GUICtrlHeader_SetFilterChangeTimeout": {
        "documentation": "Sets the filter change timeout interval",
        "label": "_GUICtrlHeader_SetFilterChangeTimeout ( $hWnd, $iTimeOut )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iTimeOut",
            "documentation": "Timeout value, in milliseconds"
        }]
    },
    "_GUICtrlHeader_SetHotDivider": {
        "documentation": "Changes the hot divider color",
        "label": "_GUICtrlHeader_SetHotDivider ( $hWnd, $iFlag, $iInputValue )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iFlag",
            "documentation": "Value specifying the type of value represented by $iInputValue.This value can be one of the following:    True - Indicates that $iInputValue holds the client coordinates of the pointer    False - Indicates that $iInputValue holds a divider index value"
        }, {
            "label": "$iInputValue",
            "documentation": "Value interpreted by $iFlag"
        }]
    },
    "_GUICtrlHeader_SetImageList": {
        "documentation": "Assigns an image list",
        "label": "_GUICtrlHeader_SetImageList ( $hWnd, $hImage )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$hImage",
            "documentation": "Handle to an image list"
        }]
    },
    "_GUICtrlHeader_SetItem": {
        "documentation": "Sets information about an item",
        "label": "_GUICtrlHeader_SetItem ( $hWnd, $iIndex, ByRef $tItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$tItem",
            "documentation": "DllStructCreate($tagHDITEM) structure"
        }]
    },
    "_GUICtrlHeader_SetItemAlign": {
        "documentation": "Sets the item text alignment",
        "label": "_GUICtrlHeader_SetItemAlign ( $hWnd, $iIndex, $iAlign )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iAlign",
            "documentation": "Text alignment:    0 - Text is left-aligned    1 - Text is right-aligned    2 - Text is centered"
        }]
    },
    "_GUICtrlHeader_SetItemBitmap": {
        "documentation": "Sets the item bitmap handle",
        "label": "_GUICtrlHeader_SetItemBitmap ( $hWnd, $iIndex, $hBitmap )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$hBitmap",
            "documentation": "Item bitmap handle"
        }]
    },
    "_GUICtrlHeader_SetItemDisplay": {
        "documentation": "Returns the item display information",
        "label": "_GUICtrlHeader_SetItemDisplay ( $hWnd, $iIndex, $iDisplay )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iDisplay",
            "documentation": "Item display information. Can be a combination of the following:    1 - The item displays a bitmap    2 - The bitmap appears to the right of text    4 - The control's owner draws the item    8 - The item displays a string"
        }]
    },
    "_GUICtrlHeader_SetItemFlags": {
        "documentation": "Returns the item flag information",
        "label": "_GUICtrlHeader_SetItemFlags ( $hWnd, $iIndex, $iFlags )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iFlags",
            "documentation": "Item flag information. Can be a combination of the following:    1 - Displays an image from an image list    2 - Text reads in the opposite direction from the text in the parent window    4 - Draws a down arrow on this item    8 - Draws a up arrow on this item"
        }]
    },
    "_GUICtrlHeader_SetItemFormat": {
        "documentation": "Sets the format of the item",
        "label": "_GUICtrlHeader_SetItemFormat ( $hWnd, $iIndex, $iFormat )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iFormat",
            "documentation": "Combination of the following format identifiers:    $HDF_CENTER - The item's contents are centered    $HDF_LEFT - The item's contents are left-aligned    $HDF_RIGHT - The item's contents are right-aligned    $HDF_BITMAP - The item displays a bitmap    $HDF_BITMAP_ON_RIGHT - The bitmap appears to the right of text    $HDF_OWNERDRAW - The header control's owner draws the item    $HDF_STRING - The item displays a string    $HDF_IMAGE - Display an image from an image list    $HDF_RTLREADING - Text will read in the opposite direction from the text in the parent window    $HDF_SORTDOWN - Draws a down-arrow on this item    $HDF_SORTUP - Draws an up-arrow on this item"
        }]
    },
    "_GUICtrlHeader_SetItemImage": {
        "documentation": "Sets the index of an image within the image list",
        "label": "_GUICtrlHeader_SetItemImage ( $hWnd, $iIndex, $iImage )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iImage",
            "documentation": "0-based image index"
        }]
    },
    "_GUICtrlHeader_SetItemOrder": {
        "documentation": "Sets the order in which the item appears",
        "label": "_GUICtrlHeader_SetItemOrder ( $hWnd, $iIndex, $iOrder )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iOrder",
            "documentation": "0-based item order"
        }]
    },
    "_GUICtrlHeader_SetItemParam": {
        "documentation": "Sets the param value of the item",
        "label": "_GUICtrlHeader_SetItemParam ( $hWnd, $iIndex, $iParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iParam",
            "documentation": "Item param value"
        }]
    },
    "_GUICtrlHeader_SetItemText": {
        "documentation": "Sets the item text",
        "label": "_GUICtrlHeader_SetItemText ( $hWnd, $iIndex, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$sText",
            "documentation": "New item text. See remark."
        }]
    },
    "_GUICtrlHeader_SetItemWidth": {
        "documentation": "Sets the item's width",
        "label": "_GUICtrlHeader_SetItemWidth ( $hWnd, $iIndex, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iWidth",
            "documentation": "New width for item"
        }]
    },
    "_GUICtrlHeader_SetOrderArray": {
        "documentation": "Sets the current left-to-right order of items",
        "label": "_GUICtrlHeader_SetOrderArray ( $hWnd, ByRef $aOrder )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$aOrder",
            "documentation": "Array that specifies the index values for items in the header:    [0] - Number of items in array    [1] - Item index 1    [2] - Item index 2    [n] - Item index n"
        }]
    },
    "_GUICtrlHeader_SetUnicodeFormat": {
        "documentation": "Sets the Unicode character format flag for the control",
        "label": "_GUICtrlHeader_SetUnicodeFormat ( $hWnd, $bUnicode )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bUnicode",
            "documentation": "Unicode flag:    True - Control uses Unicode characters    False - Control uses ANSI characters"
        }]
    },
    "_GUICtrlIpAddress_ClearAddress": {
        "documentation": "Clears the contents of the IP address control",
        "label": "_GUICtrlIpAddress_ClearAddress ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlIpAddress_Create": {
        "documentation": "Create a GUI IP Address Control",
        "label": "_GUICtrlIpAddress_Create ( $hWnd, $iX, $iY [, $iWidth = 125 [, $iHeight = 25 [, $iStyles = 0x00000000 [, $iExstyles = 0x00000000]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyles",
            "documentation": "**[optional]** Control styles:Forced : $WS_CHILD, $WS_VISIBLE, $WS_TABSTOP"
        }, {
            "label": "$iExStyles",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table."
        }]
    },
    "_GUICtrlIpAddress_Destroy": {
        "documentation": "Delete the IP Address control",
        "label": "_GUICtrlIpAddress_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlIpAddress_Get": {
        "documentation": "Retrieves the address from the IP address control",
        "label": "_GUICtrlIpAddress_Get ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlIpAddress_GetArray": {
        "documentation": "Retrieves the address from the IP address control",
        "label": "_GUICtrlIpAddress_GetArray ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlIpAddress_GetEx": {
        "documentation": "Retrieves the address from the IP address control",
        "label": "_GUICtrlIpAddress_GetEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlIpAddress_IsBlank": {
        "documentation": "Determines if all fields in the IP address control are blank",
        "label": "_GUICtrlIpAddress_IsBlank ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlIpAddress_Set": {
        "documentation": "Sets the address in the IP address control",
        "label": "_GUICtrlIpAddress_Set ( $hWnd, $sAddress )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sAddress",
            "documentation": "IP Address string"
        }]
    },
    "_GUICtrlIpAddress_SetArray": {
        "documentation": "Sets the address in the IP address control",
        "label": "_GUICtrlIpAddress_SetArray ( $hWnd, $aAddress )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$aAddress",
            "documentation": "Array formatted as follows:[0] - 1st address field[1] - 2nd address field[2] - 3rd address field[3] - 4th address field"
        }]
    },
    "_GUICtrlIpAddress_SetEx": {
        "documentation": "Sets the address in the IP address control",
        "label": "_GUICtrlIpAddress_SetEx ( $hWnd, $tIP )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$tIP",
            "documentation": "$tagGetIPAddress structure containing new ip address for the control"
        }]
    },
    "_GUICtrlIpAddress_SetFocus": {
        "documentation": "Sets the keyboard focus to the specified field in the IP address control",
        "label": "_GUICtrlIpAddress_SetFocus ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based field index to which the focus should be set.If this value is greater than the number of fields, focus is set to the first blank field.If all fields are nonblank, focus is set to the first field."
        }]
    },
    "_GUICtrlIpAddress_SetFont": {
        "documentation": "Set font of the control",
        "label": "_GUICtrlIpAddress_SetFont ( $hWnd [, $sFaceName = \"Arial\" [, $iFontSize = 12 [, $iFontWeight = 400 [, $bFontItalic = False]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sFaceName",
            "documentation": "**[optional]** The Font Name of the font to use"
        }, {
            "label": "$iFontSize",
            "documentation": "**[optional]** The Font Size"
        }, {
            "label": "$iFontWeight",
            "documentation": "**[optional]** The Font Weight"
        }, {
            "label": "$bFontItalic",
            "documentation": "**[optional]** Use Italic Attribute"
        }]
    },
    "_GUICtrlIpAddress_SetRange": {
        "documentation": "Sets the valid range for the specified field in the IP address control",
        "label": "_GUICtrlIpAddress_SetRange ( $hWnd, $iIndex [, $iLowRange = 0 [, $iHighRange = 255]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based field index to which the range will be applied"
        }, {
            "label": "$iLowRange",
            "documentation": "**[optional]** Lower limit of the range"
        }, {
            "label": "$iHighRange",
            "documentation": "**[optional]** Upper limit of the range"
        }]
    },
    "_GUICtrlIpAddress_ShowHide": {
        "documentation": "Shows/Hides the IP address control",
        "label": "_GUICtrlIpAddress_ShowHide ( $hWnd, $iState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iState",
            "documentation": "State of the IP Address control, can be the following values:"
        }]
    },
    "_GUICtrlListBox_AddFile": {
        "documentation": "Adds the specified filename that contains a directory listing",
        "label": "_GUICtrlListBox_AddFile ( $hWnd, $sFilePath )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFilePath",
            "documentation": "Name of the file to add"
        }]
    },
    "_GUICtrlListBox_AddString": {
        "documentation": "Add a string",
        "label": "_GUICtrlListBox_AddString ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String that is to be added"
        }]
    },
    "_GUICtrlListBox_BeginUpdate": {
        "documentation": "Prevents updating of the control until the EndUpdate function is called",
        "label": "_GUICtrlListBox_BeginUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_ClickItem": {
        "documentation": "Clicks an item",
        "label": "_GUICtrlListBox_ClickItem ( $hWnd, $iIndex [, $sButton = \"left\" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 0]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }, {
            "label": "$sButton",
            "documentation": "**[optional]** Button to click with"
        }, {
            "label": "$bMove",
            "documentation": "**[optional]** If True, the mouse will be moved. If False, the mouse does not move."
        }, {
            "label": "$iClicks",
            "documentation": "**[optional]** Number of clicks"
        }, {
            "label": "$iSpeed",
            "documentation": "**[optional]** Mouse movement speed"
        }]
    },
    "_GUICtrlListBox_Create": {
        "documentation": "Create a Listbox control",
        "label": "_GUICtrlListBox_Create ( $hWnd, $sText, $iX, $iY [, $iWidth = 100 [, $iHeight = 200 [, $iStyle = 0x00B00002 [, $iExStyle = 0x00000200]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$sText",
            "documentation": "String to add to the combobox"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control style:    $LBS_COMBOBOX - Notifies a list box that it is part of a combo box    $LBS_DISABLENOSCROLL - Shows a disabled vertical scroll bar    $LBS_EXTENDEDSEL - Allows multiple items to be selected    $LBS_HASSTRINGS - Specifies that a list box contains items consisting of strings    $LBS_MULTICOLUMN - Specifies a multi columnn list box that will be scrolled horizontally    $LBS_MULTIPLESEL - Turns string selection on or off each time the user clicks a string    $LBS_NODATA - Specifies a no-data list box    $LBS_NOINTEGRALHEIGHT - Specifies that the size is exactly the size set by the application    $LBS_NOREDRAW - Specifies that the list box's appearance is not updated when changes are made    $LBS_NOSEL - Specifies that the list box contains items that can be viewed but not selected    $LBS_NOTIFY - Notifies whenever the user clicks or double clicks a string    $LBS_OWNERDRAWFIXED - Specifies that the list box is owner drawn    $LBS_OWNERDRAWVARIABLE - Specifies that the list box is owner drawn with variable height    $LBS_SORT - Sorts strings in the list box alphabetically    $LBS_STANDARD - Standard list box style    $LBS_USETABSTOPS - Enables a list box to recognize and expand tab characters    $LBS_WANTKEYBOARDINPUT - Specifies that the owner receives WM_VKEYTOITEM messagesDefault: $LBS_SORT, $WS_HSCROLL, $WS_VSCROLL, $WS_BORDERForced : $WS_CHILD, $WS_TABSTOP, $WS_VISIBLE, $LBS_NOTIFY"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table.Default: $WS_EX_CLIENTEDGE"
        }]
    },
    "_GUICtrlListBox_DeleteString": {
        "documentation": "Delete a string",
        "label": "_GUICtrlListBox_DeleteString ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the string to be deleted"
        }]
    },
    "_GUICtrlListBox_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlListBox_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_Dir": {
        "documentation": "Adds the names of directories and files",
        "label": "_GUICtrlListBox_Dir ( $hWnd, $sFilePath [, $iAttributes = 0 [, $bBrackets = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFilePath",
            "documentation": "Specifies an absolute path, relative path, or filename"
        }, {
            "label": "$iAttributes",
            "documentation": "**[optional]** Specifies the attributes of the files or directories to be added:    $DDL_READWRITE - Includes read-write files with no additional attributes    $DDL_READONLY - Includes read-only files    $DDL_HIDDEN - Includes hidden files    $DDL_SYSTEM - Includes system files    $DDL_DIRECTORY - Includes subdirectories    $DDL_ARCHIVE - Includes archived files    $DDL_DRIVES - All mapped drives are added to the list    $DDL_EXCLUSIVE - Includes only files with the specified attributes"
        }, {
            "label": "$bBrackets",
            "documentation": "**[optional]** include/exclude brackets when $DDL_DRIVES is used"
        }]
    },
    "_GUICtrlListBox_EndUpdate": {
        "documentation": "Enables screen repainting that was turned off with the BeginUpdate function",
        "label": "_GUICtrlListBox_EndUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_FindInText": {
        "documentation": "Searches for an item that contains the specified text anywhere in its text",
        "label": "_GUICtrlListBox_FindInText ( $hWnd, $sText [, $iStart = -1 [, $bWrapOK = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to match"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** 0-based index of the item to begin the search with or -1 to start from the beginning.The specified item is itself excluded from the search."
        }, {
            "label": "$bWrapOK",
            "documentation": "**[optional]** If True, the search will continue with the first item if no match is found"
        }]
    },
    "_GUICtrlListBox_FindString": {
        "documentation": "Search for a string",
        "label": "_GUICtrlListBox_FindString ( $hWnd, $sText [, $bExact = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String to search for"
        }, {
            "label": "$bExact",
            "documentation": "**[optional]** Exact match or not"
        }]
    },
    "_GUICtrlListBox_GetAnchorIndex": {
        "documentation": "Retrieves the index of the anchor item",
        "label": "_GUICtrlListBox_GetAnchorIndex ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetCaretIndex": {
        "documentation": "Return index of item that has the focus rectangle",
        "label": "_GUICtrlListBox_GetCaretIndex ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetCount": {
        "documentation": "Retrieves the number of items",
        "label": "_GUICtrlListBox_GetCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetCurSel": {
        "documentation": "Retrieve the index of the currently selected item",
        "label": "_GUICtrlListBox_GetCurSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetHorizontalExtent": {
        "documentation": "Retrieve from a list box the the scrollable width",
        "label": "_GUICtrlListBox_GetHorizontalExtent ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetItemData": {
        "documentation": "Retrieves the application defined value associated with an item",
        "label": "_GUICtrlListBox_GetItemData ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }]
    },
    "_GUICtrlListBox_GetItemHeight": {
        "documentation": "Retrieves the height of items",
        "label": "_GUICtrlListBox_GetItemHeight ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetItemRect": {
        "documentation": "Retrieves the rectangle that bounds an item",
        "label": "_GUICtrlListBox_GetItemRect ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }]
    },
    "_GUICtrlListBox_GetItemRectEx": {
        "documentation": "Retrieves the rectangle that bounds an item",
        "label": "_GUICtrlListBox_GetItemRectEx ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }]
    },
    "_GUICtrlListBox_GetListBoxInfo": {
        "documentation": "Retrieve the number of items per column in a specified list box",
        "label": "_GUICtrlListBox_GetListBoxInfo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetLocale": {
        "documentation": "Retrieves the current locale",
        "label": "_GUICtrlListBox_GetLocale ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetLocaleCountry": {
        "documentation": "Retrieves the current country code",
        "label": "_GUICtrlListBox_GetLocaleCountry ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetLocaleLang": {
        "documentation": "Retrieves the current language identifier",
        "label": "_GUICtrlListBox_GetLocaleLang ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetLocalePrimLang": {
        "documentation": "Extract primary language id from a language id",
        "label": "_GUICtrlListBox_GetLocalePrimLang ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetLocaleSubLang": {
        "documentation": "Extract sublanguage id from a language id",
        "label": "_GUICtrlListBox_GetLocaleSubLang ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetSel": {
        "documentation": "Retrieves the selection state of an item",
        "label": "_GUICtrlListBox_GetSel ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }]
    },
    "_GUICtrlListBox_GetSelCount": {
        "documentation": "Retrieves the total number of selected items",
        "label": "_GUICtrlListBox_GetSelCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetSelItems": {
        "documentation": "Fills a buffer with an array of selected items",
        "label": "_GUICtrlListBox_GetSelItems ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetSelItemsText": {
        "documentation": "Retrieves the text of selected items",
        "label": "_GUICtrlListBox_GetSelItemsText ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_GetText": {
        "documentation": "Returns the item (string) at the specified index",
        "label": "_GUICtrlListBox_GetText ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the string to retrieve"
        }]
    },
    "_GUICtrlListBox_GetTextLen": {
        "documentation": "Gets the length of a string in a list box",
        "label": "_GUICtrlListBox_GetTextLen ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }]
    },
    "_GUICtrlListBox_GetTopIndex": {
        "documentation": "Retrieve the index of the first visible item in a list",
        "label": "_GUICtrlListBox_GetTopIndex ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_InitStorage": {
        "documentation": "This message allocates memory for storing items",
        "label": "_GUICtrlListBox_InitStorage ( $hWnd, $iItems, $iBytes )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iItems",
            "documentation": "The total amount of items that you intend to add"
        }, {
            "label": "$iBytes",
            "documentation": "The total amount of memory your strings will consume"
        }]
    },
    "_GUICtrlListBox_InsertString": {
        "documentation": "Insert a string into the list",
        "label": "_GUICtrlListBox_InsertString ( $hWnd, $sText [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text string to be inserted"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based index of the position at which to insert the string.If this parameter is -1 the string is added to the end of the list."
        }]
    },
    "_GUICtrlListBox_ItemFromPoint": {
        "documentation": "Retrieves the 0-based index of the item nearest the specified point",
        "label": "_GUICtrlListBox_ItemFromPoint ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X coordinate, relative to the upper-left corner of the client area"
        }, {
            "label": "$iY",
            "documentation": "Y coordinate, relative to the upper-left corner of the client area"
        }]
    },
    "_GUICtrlListBox_ReplaceString": {
        "documentation": "Replaces the text of an item",
        "label": "_GUICtrlListBox_ReplaceString ( $hWnd, $iIndex, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }, {
            "label": "$sText",
            "documentation": "String to replace old string"
        }]
    },
    "_GUICtrlListBox_ResetContent": {
        "documentation": "Remove all items from the list box",
        "label": "_GUICtrlListBox_ResetContent ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_SelectString": {
        "documentation": "Searchs for an item that begins with the specified string",
        "label": "_GUICtrlListBox_SelectString ( $hWnd, $sText [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "String that contains the string for which to search."
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based index of the item before the first item to be searched.When the search reaches the bottom of the list box, it continues searching from the top of the list box back to the item specified by $iIndex.If $iIndex is –1, the entire list box is searched from the beginning."
        }]
    },
    "_GUICtrlListBox_SelItemRange": {
        "documentation": "Select one or more consecutive items in a multiple-selection list box",
        "label": "_GUICtrlListBox_SelItemRange ( $hWnd, $iFirst, $iLast [, $bSelect = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iFirst",
            "documentation": "0-based index of the first item to select"
        }, {
            "label": "$iLast",
            "documentation": "0-based index of the last item to select"
        }, {
            "label": "$bSelect",
            "documentation": "**[optional]** Specifies how to set the selection.If this parameter is True, the string is selected and highlighted.If it is False, the highlight is removed and the string is no longer selected."
        }]
    },
    "_GUICtrlListBox_SelItemRangeEx": {
        "documentation": "Select one or more consecutive items in a multiple-selection list box",
        "label": "_GUICtrlListBox_SelItemRangeEx ( $hWnd, $iFirst, $iLast )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iFirst",
            "documentation": "0-based index of the first item to select"
        }, {
            "label": "$iLast",
            "documentation": "0-based index of the last item to select"
        }]
    },
    "_GUICtrlListBox_SetAnchorIndex": {
        "documentation": "Set the anchor item—that is, the item from which a multiple selection starts",
        "label": "_GUICtrlListBox_SetAnchorIndex ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }]
    },
    "_GUICtrlListBox_SetCaretIndex": {
        "documentation": "Set the focus rectangle to the item at the specified index in a multiple-selection list box",
        "label": "_GUICtrlListBox_SetCaretIndex ( $hWnd, $iIndex [, $bPartial = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }, {
            "label": "$bPartial",
            "documentation": "**[optional]** If False, the item is scrolled until it is fully visible.If it is True, the item is scrolled until it is at least partially visible."
        }]
    },
    "_GUICtrlListBox_SetColumnWidth": {
        "documentation": "Set the width, in pixels, of all columns",
        "label": "_GUICtrlListBox_SetColumnWidth ( $hWnd, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iWidth",
            "documentation": "Specifies the width, in pixels, of all columns"
        }]
    },
    "_GUICtrlListBox_SetCurSel": {
        "documentation": "Select a string and scroll it into view, if necessary",
        "label": "_GUICtrlListBox_SetCurSel ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the string that is selected.If this parameter is -1 the list box is set to have no selection."
        }]
    },
    "_GUICtrlListBox_SetHorizontalExtent": {
        "documentation": "Set the width, in pixels, by which a list box can be scrolled horizontally",
        "label": "_GUICtrlListBox_SetHorizontalExtent ( $hWnd, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iWidth",
            "documentation": "Specifies the number of pixels the list box can be scrolled"
        }]
    },
    "_GUICtrlListBox_SetItemData": {
        "documentation": "Sets the value associated with the specified item",
        "label": "_GUICtrlListBox_SetItemData ( $hWnd, $iIndex, $iValue )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }, {
            "label": "$iValue",
            "documentation": "Specifies the value to be associated with the item"
        }]
    },
    "_GUICtrlListBox_SetItemHeight": {
        "documentation": "Sets the height, in pixels, of items",
        "label": "_GUICtrlListBox_SetItemHeight ( $hWnd, $iHeight [, $iIndex = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iHeight",
            "documentation": "Specifies the height, in pixels, of the item"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based index of the item in the list box.Use this only if the control has the LBS_OWNERDRAWVARIABLE style otherwise, set it to zero."
        }]
    },
    "_GUICtrlListBox_SetLocale": {
        "documentation": "Set the current locale",
        "label": "_GUICtrlListBox_SetLocale ( $hWnd, $iLocal )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iLocal",
            "documentation": "Specifies the locale identifier that the list box will use for sorting when adding text"
        }]
    },
    "_GUICtrlListBox_SetSel": {
        "documentation": "Select a string(s) in a multiple-selection list box",
        "label": "_GUICtrlListBox_SetSel ( $hWnd [, $iIndex = -1 [, $iSelect = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based index of the item"
        }, {
            "label": "$iSelect",
            "documentation": "**[optional]** Specifies how to set the selection."
        }]
    },
    "_GUICtrlListBox_SetTabStops": {
        "documentation": "Sets the tab-stop positions",
        "label": "_GUICtrlListBox_SetTabStops ( $hWnd, $aTabStops )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$aTabStops",
            "documentation": "Array with the following format:    [0] - Number of tab stops in the array (n)    [1] - First tab stop    [2] - Second tab stop    [n] - Nth tab stop"
        }]
    },
    "_GUICtrlListBox_SetTopIndex": {
        "documentation": "Ensure that a particular item in a list box is visible",
        "label": "_GUICtrlListBox_SetTopIndex ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }]
    },
    "_GUICtrlListBox_Sort": {
        "documentation": "Re-sorts list box if it has the $LBS_SORT style",
        "label": "_GUICtrlListBox_Sort ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListBox_SwapString": {
        "documentation": "Swaps the text of two items at the specified indices",
        "label": "_GUICtrlListBox_SwapString ( $hWnd, $iIndexA, $iIndexB )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndexA",
            "documentation": "0-based index item to swap"
        }, {
            "label": "$iIndexB",
            "documentation": "0-based index item to swap"
        }]
    },
    "_GUICtrlListBox_UpdateHScroll": {
        "documentation": "Update the horizontal scroll bar based on the longest string",
        "label": "_GUICtrlListBox_UpdateHScroll ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_AddArray": {
        "documentation": "Adds items from an array to the control",
        "label": "_GUICtrlListView_AddArray ( $hWnd, ByRef $aItems )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$aItems",
            "documentation": "Array with the following format:    [0][0] - Item 1 Text    [0][1] - Item 1 Subitem 1 text    [0][2] - Item 1 Subitem 2 text    [0][n] - Item 1 Subitem n text    [1][0] - Item 2 Text    [1][1] - Item 2 Subitem 1 text    [1][2] - Item 2 Subitem 2 text    [1][n] - Item 2 Subitem n text"
        }]
    },
    "_GUICtrlListView_AddColumn": {
        "documentation": "Adds a new column in the control",
        "label": "_GUICtrlListView_AddColumn ( $hWnd, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $bOnRight = False]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Column header text"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Width of the column, in pixels"
        }, {
            "label": "$iAlign",
            "documentation": "**[optional]** Alignment of the column header and the subitem text in the column:    0 - Text is left aligned    1 - Text is right aligned    2 - Text is centered"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of an image within the image list"
        }, {
            "label": "$bOnRight",
            "documentation": "**[optional]** If True, the column image appears to the right of text"
        }]
    },
    "_GUICtrlListView_AddItem": {
        "documentation": "Adds a new item to the end of the list",
        "label": "_GUICtrlListView_AddItem ( $hWnd, $sText [, $iImage = -1 [, $iParam = 0]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Item text. If set to -1, the item set is set via the $LVN_GETDISPINFO notification message."
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Application Defined data"
        }]
    },
    "_GUICtrlListView_AddSubItem": {
        "documentation": "Adds a new subitem to the control",
        "label": "_GUICtrlListView_AddSubItem ( $hWnd, $iIndex, $sText, $iSubItem [, $iImage = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$sText",
            "documentation": "Item or subitem text"
        }, {
            "label": "$iSubItem",
            "documentation": "1-based index of the subitem"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the icon in the control's image list"
        }]
    },
    "_GUICtrlListView_ApproximateViewHeight": {
        "documentation": "Calculates the approximate height required to display a given number of items",
        "label": "_GUICtrlListView_ApproximateViewHeight ( $hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** Number of items to be displayed in the control. If this parameter is set to -1 the message uses the total number of items in the control."
        }, {
            "label": "$iCX",
            "documentation": "**[optional]** Proposed X dimension of the control, in pixels. This parameter can be set to -1 to allow the message to use the current width value."
        }, {
            "label": "$iCY",
            "documentation": "**[optional]** Proposed Y dimension of the control, in pixels. This parameter can be set to -1 to allow the message to use the current height value."
        }]
    },
    "_GUICtrlListView_ApproximateViewRect": {
        "documentation": "Calculates the approximate size required to display a given number of items",
        "label": "_GUICtrlListView_ApproximateViewRect ( $hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** Number of items to be displayed in the control.If this parameter is set to -1 the message uses the total number of items in the control."
        }, {
            "label": "$iCX",
            "documentation": "**[optional]** Proposed X dimension of the control, in pixels.This parameter can be set to -1 to allow the message to use the current width value."
        }, {
            "label": "$iCY",
            "documentation": "**[optional]** Proposed Y dimension of the control, in pixels.This parameter can be set to -1 to allow the message to use the current height value."
        }]
    },
    "_GUICtrlListView_ApproximateViewWidth": {
        "documentation": "Calculates the approximate width required to display a given number of items",
        "label": "_GUICtrlListView_ApproximateViewWidth ( $hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** Number of items to be displayed in the control.If this parameter is set to -1 the message uses the total number of items in the control"
        }, {
            "label": "$iCX",
            "documentation": "**[optional]** Proposed X dimension of the control, in pixels.This parameter can be set to -1 to allow the message to use the current width value."
        }, {
            "label": "$iCY",
            "documentation": "**[optional]** Proposed Y dimension of the control, in pixels.This parameter can be set to -1 to allow the message to use the current height value."
        }]
    },
    "_GUICtrlListView_Arrange": {
        "documentation": "Arranges items in icon view",
        "label": "_GUICtrlListView_Arrange ( $hWnd [, $iArrange = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iArrange",
            "documentation": "**[optional]** Alignment. This can be one of the following values:    0 - Aligns items according to the controls default value    1 - Aligns items along the left edge of the window    2 - Aligns items along the top edge of the window    3 - Snaps all icons to the nearest grid position."
        }]
    },
    "_GUICtrlListView_BeginUpdate": {
        "documentation": "Prevents updating of the control until the _GUICtrlListView_EndUpdate() function is called",
        "label": "_GUICtrlListView_BeginUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_CancelEditLabel": {
        "documentation": "Cancels an item text editing operation",
        "label": "_GUICtrlListView_CancelEditLabel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_ClickItem": {
        "documentation": "Clicks an item",
        "label": "_GUICtrlListView_ClickItem ( $hWnd, $iIndex [, $sButton = \"left\" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$sButton",
            "documentation": "**[optional]** Button to click"
        }, {
            "label": "$bMove",
            "documentation": "**[optional]** If True, the mouse will be moved. If False, the mouse does not move."
        }, {
            "label": "$iClicks",
            "documentation": "**[optional]** Number of clicks"
        }, {
            "label": "$iSpeed",
            "documentation": "**[optional]** Delay between clicks"
        }]
    },
    "_GUICtrlListView_CopyItems": {
        "documentation": "Copy Items between 2 list-view controls",
        "label": "_GUICtrlListView_CopyItems ( $hWnd_Source, $hWnd_Destination [, $bDelFlag = False] )",
        "params": [{
            "label": "$hWnd_Source",
            "documentation": "Control ID/Handle to the control of the source"
        }, {
            "label": "$hWnd_Destination",
            "documentation": "Control ID/Handle to the control of the destination"
        }, {
            "label": "$bDelFlag",
            "documentation": "**[optional]** Delete after copying"
        }]
    },
    "_GUICtrlListView_Create": {
        "documentation": "Create a ListView control",
        "label": "_GUICtrlListView_Create ( $hWnd, $sHeaderText, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x0000000D [, $iExStyle = 0x00000000 [, $bCoInit = False]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$sHeaderText",
            "documentation": "Text to be displayed in the header. Pipe \"|\" delimited."
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control styles:    $LVS_ALIGNLEFT - Items are left aligned in icon and small icon view    $LVS_ALIGNTOP - Items are aligned with the top of the control in icon and small icon view    $LVS_AUTOARRANGE - Icons are automatically kept arranged in icon and small icon view    $LVS_EDITLABELS - Item text can be edited in place    $LVS_ICON - This style specifies icon view    $LVS_LIST - This style specifies list view    $LVS_NOCOLUMNHEADER - Column headers are not displayed in report view    $LVS_NOLABELWRAP - Item text is displayed on a single line in icon view    $LVS_NOSCROLL - Scrolling is disabled    $LVS_NOSORTHEADER - Column headers do not work like buttons    $LVS_OWNERDATA - This style specifies a virtual control    $LVS_OWNERDRAWFIXED - The owner window can paint items in report view    $LVS_REPORT - This style specifies report view    $LVS_SHAREIMAGELISTS - The image list will not be deleted    $LVS_SHOWSELALWAYS - The selection, if any, is always shown    $LVS_SINGLESEL - Only one item at a time can be selected    $LVS_SMALLICON - This style specifies small icon view    $LVS_SORTASCENDING - Item indexes are sorted in ascending order    $LVS_SORTDESCENDING - Item indexes are sorted in descending orderDefault: $LVS_REPORT, $LVS_SINGLESEL, $LVS_SHOWSELALWAYSForced : $WS_CHILD, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Extended control styles. Can be a combination of the following:    $LVS_EX_BORDERSELECT - When an item is selected the border color of the item changes    $LVS_EX_CHECKBOXES - Enables check boxes for items in a list-view control    $LVS_EX_DOUBLEBUFFER - Paints via double-buffering, which reduces flicker    $LVS_EX_FLATSB - Enables flat scroll bars in the list view    $LVS_EX_FULLROWSELECT - When an item is selected, the item and all its subitems are highlighted    $LVS_EX_GRIDLINES - Displays gridlines around items and subitems    $LVS_EX_HEADERDRAGDROP - Enables drag-and-drop reordering of columns    $LVS_EX_INFOTIP - The $LVN_GETINFOTIP notification message is sent before displaying a ToolTip    $LVS_EX_LABELTIP - If not set, the unfolds partly hidden labels only for the large icon mode    $LVS_EX_MULTIWORKAREAS - The control will not autoarrange its icons until one or more work areas are defined    $LVS_EX_ONECLICKACTIVATE - The control sends an $LVN_ITEMACTIVATE messages when the user clicks an item    $LVS_EX_REGIONAL - Sets the control region to include only the item icons and text    $LVS_EX_SIMPLESELECT - In icon view moves the state image of the control to the top right    $LVS_EX_SUBITEMIMAGES - Allows images to be displayed for subitems    $LVS_EX_TRACKSELECT - Enables hot-track selection in the control    $LVS_EX_TWOCLICKACTIVATE - The control sends an $LVN_ITEMACTIVATE message when the user double-clicks an item    $LVS_EX_UNDERLINECOLD - Causes non-hot items that may be activated to be displayed with underlined text    $LVS_EX_UNDERLINEHOT - Causes hot items that may be activated to be displayed with underlined text"
        }, {
            "label": "$bCoInit",
            "documentation": "**[optional]** Initializes the COM library for use by the calling thread."
        }]
    },
    "_GUICtrlListView_CreateDragImage": {
        "documentation": "Creates a drag image list for the specified item",
        "label": "_GUICtrlListView_CreateDragImage ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_CreateSolidBitMap": {
        "documentation": "Creates a solid color bitmap",
        "label": "_GUICtrlListView_CreateSolidBitMap ( $hWnd, $iColor, $iWidth, $iHeight )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "The color of the bitmap, stated in RGB"
        }, {
            "label": "$iWidth",
            "documentation": "The width of the bitmap"
        }, {
            "label": "$iHeight",
            "documentation": "The height of the bitmap"
        }]
    },
    "_GUICtrlListView_DeleteAllItems": {
        "documentation": "Removes all items from a list-view control",
        "label": "_GUICtrlListView_DeleteAllItems ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_DeleteColumn": {
        "documentation": "Removes a column from a list-view control",
        "label": "_GUICtrlListView_DeleteColumn ( $hWnd, $iCol )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iCol",
            "documentation": "Index of the column to delete"
        }]
    },
    "_GUICtrlListView_DeleteItem": {
        "documentation": "Removes an item from a list-view control",
        "label": "_GUICtrlListView_DeleteItem ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the list-view item to delete"
        }]
    },
    "_GUICtrlListView_DeleteItemsSelected": {
        "documentation": "Deletes item(s) selected",
        "label": "_GUICtrlListView_DeleteItemsSelected ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_Destroy": {
        "documentation": "Delete the listview control",
        "label": "_GUICtrlListView_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_DrawDragImage": {
        "documentation": "Draw the Drag Image",
        "label": "_GUICtrlListView_DrawDragImage ( ByRef $hWnd, ByRef $aDrag )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$aDrag",
            "documentation": "Array with the following format:    [0] - Handle to the drag image list    [1] - X coordinate of the upper left corner of the image    [2] - Y coordinate of the upper left corner of the image"
        }]
    },
    "_GUICtrlListView_EditLabel": {
        "documentation": "Begins in place editing of the specified item text",
        "label": "_GUICtrlListView_EditLabel ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item to edit"
        }]
    },
    "_GUICtrlListView_EnableGroupView": {
        "documentation": "Enables or disables whether the items in the control display as a group",
        "label": "_GUICtrlListView_EnableGroupView ( $hWnd [, $bEnable = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bEnable",
            "documentation": "**[optional]** Indicates whether to enable group displayed itemsTrue - Enable group viewFalse - Disable group view"
        }]
    },
    "_GUICtrlListView_EndUpdate": {
        "documentation": "Enables screen repainting that was turned off with the _GUICtrlListView_BeginUpdate() function",
        "label": "_GUICtrlListView_EndUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_EnsureVisible": {
        "documentation": "Ensures that a list-view item is either entirely or partially visible",
        "label": "_GUICtrlListView_EnsureVisible ( $hWnd, $iIndex [, $bPartialOK = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Index of the list-view item"
        }, {
            "label": "$bPartialOK",
            "documentation": "**[optional]** Value specifying whether the item must be entirely visible"
        }]
    },
    "_GUICtrlListView_FindInText": {
        "documentation": "Searches for an item that contains the specified text anywhere in its text",
        "label": "_GUICtrlListView_FindInText ( $hWnd, $sText [, $iStart = -1 [, $bWrapOK = True [, $bReverse = False]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to match"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** 0-based index of the item to begin the search with or -1 to start from the beginning.The specified item is itself excluded from the search."
        }, {
            "label": "$bWrapOK",
            "documentation": "**[optional]** If True, the search will continue with the first item if no match is found"
        }, {
            "label": "$bReverse",
            "documentation": "**[optional]** If True, the search will start at $iStart - 1 to Zero. If $bWrapOK = True search will continue"
        }]
    },
    "_GUICtrlListView_FindItem": {
        "documentation": "Searches for an item with the specified characteristics",
        "label": "_GUICtrlListView_FindItem ( $hWnd, $iStart, ByRef $tFindInfo [, $sText = \"\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iStart",
            "documentation": "0-based index of the item to begin the search with or -1 to start from the beginning.The specified item is itself excluded from the search."
        }, {
            "label": "$tFindInfo",
            "documentation": "$tagLVFINDINFO structure that contains the search information."
        }, {
            "label": "$sText",
            "documentation": "**[optional]** String to compare with the item text.It is valid if $LVFI_STRING or $LVFI_PARTIAL is set in the Flags member."
        }]
    },
    "_GUICtrlListView_FindNearest": {
        "documentation": "Finds the item nearest to the position specified",
        "label": "_GUICtrlListView_FindNearest ( $hWnd, $iX, $iY [, $iDir = 0 [, $iStart = -1 [, $bWrapOK = True]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X position"
        }, {
            "label": "$iY",
            "documentation": "Y position"
        }, {
            "label": "$iDir",
            "documentation": "**[optional]** Specifies which direction to search:    0 - Left    1 - Right    2 - Up    3 - Down    4 - From start    5 - From end    6 - From prior item    7 - From next item"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** 0-based index of the item to begin the search with or -1 to start from the beginning.The specified item is itself excluded from the search."
        }, {
            "label": "$bWrapOK",
            "documentation": "**[optional]** If True, the search will continue with the first item if no match is found"
        }]
    },
    "_GUICtrlListView_FindParam": {
        "documentation": "Searches for an item with the specified lParam",
        "label": "_GUICtrlListView_FindParam ( $hWnd, $iParam [, $iStart = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iParam",
            "documentation": "Param value to search for"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** 0-based index of the item to begin the search with or -1 to start from the beginning.The specified item is itself excluded from the search."
        }]
    },
    "_GUICtrlListView_FindText": {
        "documentation": "Searches for an item with the specified text",
        "label": "_GUICtrlListView_FindText ( $hWnd, $sText [, $iStart = -1 [, $bPartialOK = True [, $bWrapOK = True]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to match"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** 0-based index of the item to begin the search with or -1 to start from the beginning.The specified item is itself excluded from the search."
        }, {
            "label": "$bPartialOK",
            "documentation": "**[optional]** If True, a match will occur if the item text begins with the text"
        }, {
            "label": "$bWrapOK",
            "documentation": "**[optional]** If True, the search will continue with the first item if no match is found"
        }]
    },
    "_GUICtrlListView_GetBkColor": {
        "documentation": "Retrieves the background color of a list-view control",
        "label": "_GUICtrlListView_GetBkColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetBkImage": {
        "documentation": "Retrieves the background image in the control",
        "label": "_GUICtrlListView_GetBkImage ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetCallbackMask": {
        "documentation": "Retrieves the callback mask for the control",
        "label": "_GUICtrlListView_GetCallbackMask ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlListView_GetColumn": {
        "documentation": "Retrieves the attributes of a column",
        "label": "_GUICtrlListView_GetColumn ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of column"
        }]
    },
    "_GUICtrlListView_GetColumnCount": {
        "documentation": "Retrieve the number of columns",
        "label": "_GUICtrlListView_GetColumnCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetColumnOrder": {
        "documentation": "Retrieves the current left-to-right order of columns",
        "label": "_GUICtrlListView_GetColumnOrder ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetColumnOrderArray": {
        "documentation": "Retrieves the current left-to-right order of columns in the control",
        "label": "_GUICtrlListView_GetColumnOrderArray ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetColumnWidth": {
        "documentation": "Retrieves the width of a column in report or list view",
        "label": "_GUICtrlListView_GetColumnWidth ( $hWnd, $iCol )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iCol",
            "documentation": "The index of the column. This parameter is ignored in list view."
        }]
    },
    "_GUICtrlListView_GetCounterPage": {
        "documentation": "Calculates the number of items that can fit vertically in the visible area",
        "label": "_GUICtrlListView_GetCounterPage ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetEditControl": {
        "documentation": "Retrieves the handle to the edit control being used to edit an item's text",
        "label": "_GUICtrlListView_GetEditControl ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetExtendedListViewStyle": {
        "documentation": "Retrieves the extended styles that are currently in use",
        "label": "_GUICtrlListView_GetExtendedListViewStyle ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetFocusedGroup": {
        "documentation": "Gets the group that has the focus",
        "label": "_GUICtrlListView_GetFocusedGroup ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetGroupCount": {
        "documentation": "Gets the number of groups",
        "label": "_GUICtrlListView_GetGroupCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetGroupInfo": {
        "documentation": "Retrieves group information",
        "label": "_GUICtrlListView_GetGroupInfo ( $hWnd, $iGroupID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iGroupID",
            "documentation": "ID that specifies the group whose information is retrieved"
        }]
    },
    "_GUICtrlListView_GetGroupInfoByIndex": {
        "documentation": "Retrieves group information",
        "label": "_GUICtrlListView_GetGroupInfoByIndex ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index that specifies the group whose information is retrieved"
        }]
    },
    "_GUICtrlListView_GetGroupRect": {
        "documentation": "Gets the rectangle for a specified group",
        "label": "_GUICtrlListView_GetGroupRect ( $hWnd, $iGroupID [, $iGet = $LVGGR_GROUP] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iGroupID",
            "documentation": "ID that specifies the group whose information is retrieved"
        }, {
            "label": "$iGet",
            "documentation": "**[optional]** Flag to specify the coordinates of the rectangle to get, can be one of the following:    $LVGGR_GROUP - Coordinates of the entire expanded group    $LVGGR_HEADER - Coordinates of the header only (collapsed group)    $LVGGR_LABEL - Coordinates of the label only    $LVGGR_SUBSETLINK - Coordinates of the subset link only (markup subset)"
        }]
    },
    "_GUICtrlListView_GetGroupViewEnabled": {
        "documentation": "Checks whether the control has group view enabled",
        "label": "_GUICtrlListView_GetGroupViewEnabled ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetHeader": {
        "documentation": "Retrieves the handle to the header control",
        "label": "_GUICtrlListView_GetHeader ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetHotCursor": {
        "documentation": "Retrieves the HCURSOR value used when the pointer is over an item while hot tracking is enabled",
        "label": "_GUICtrlListView_GetHotCursor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetHotItem": {
        "documentation": "Retrieves the index of the hot item",
        "label": "_GUICtrlListView_GetHotItem ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetHoverTime": {
        "documentation": "Retrieves the amount of time that the mouse cursor must hover over an item before it is selected",
        "label": "_GUICtrlListView_GetHoverTime ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetImageList": {
        "documentation": "Retrieves the handle to an image list used for drawing listview items",
        "label": "_GUICtrlListView_GetImageList ( $hWnd, $iImageList )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iImageList",
            "documentation": "Image list to retrieve:0 - Image list with large icons1 - Image list with small icons2 - Image list with state images"
        }]
    },
    "_GUICtrlListView_GetISearchString": {
        "documentation": "Retrieves the incremental search string of the control",
        "label": "_GUICtrlListView_GetISearchString ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetItem": {
        "documentation": "Retrieves an item's attributes",
        "label": "_GUICtrlListView_GetItem ( $hWnd, $iIndex [, $iSubItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** 1-based subitem index"
        }]
    },
    "_GUICtrlListView_GetItemChecked": {
        "documentation": "Returns the check state for a list-view control item",
        "label": "_GUICtrlListView_GetItemChecked ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index to retrieve item check state from"
        }]
    },
    "_GUICtrlListView_GetItemCount": {
        "documentation": "Retrieves the number of items in a list-view control",
        "label": "_GUICtrlListView_GetItemCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetItemCut": {
        "documentation": "Determines whether the item is marked for a cut and paste operation",
        "label": "_GUICtrlListView_GetItemCut ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_GetItemDropHilited": {
        "documentation": "Determines whether the item is highlighted as a drag-and-drop target",
        "label": "_GUICtrlListView_GetItemDropHilited ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_GetItemEx": {
        "documentation": "Retrieves some or all of an item's attributes",
        "label": "_GUICtrlListView_GetItemEx ( $hWnd, ByRef $tItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$tItem",
            "documentation": "$tagLVITEM structure that specifies the information to retrieve"
        }]
    },
    "_GUICtrlListView_GetItemFocused": {
        "documentation": "Determines whether the item is highlighted as a drag-and-drop target",
        "label": "_GUICtrlListView_GetItemFocused ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_GetItemGroupID": {
        "documentation": "Gets the item group ID",
        "label": "_GUICtrlListView_GetItemGroupID ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_GetItemImage": {
        "documentation": "Retrieves the index of the item's icon",
        "label": "_GUICtrlListView_GetItemImage ( $hWnd, $iIndex [, $iSubItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** 1-based item sub item index"
        }]
    },
    "_GUICtrlListView_GetItemIndent": {
        "documentation": "Retrieves the number of image widths the item is indented",
        "label": "_GUICtrlListView_GetItemIndent ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlListView_GetItemParam": {
        "documentation": "Retrieves the application specific value of the item",
        "label": "_GUICtrlListView_GetItemParam ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlListView_GetItemPosition": {
        "documentation": "Retrieves the position of an item",
        "label": "_GUICtrlListView_GetItemPosition ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_GetItemPositionX": {
        "documentation": "Retrieves the X position of an item",
        "label": "_GUICtrlListView_GetItemPositionX ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_GetItemPositionY": {
        "documentation": "Retrieves the Y position of an item",
        "label": "_GUICtrlListView_GetItemPositionY ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_GetItemRect": {
        "documentation": "Retrieves the bounding rectangle for all or part of an item",
        "label": "_GUICtrlListView_GetItemRect ( $hWnd, $iIndex [, $iPart = 3] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iPart",
            "documentation": "**[optional]** The portion of the item to retrieve:    0 - The bounding rectangle of the entire item    1 - The bounding rectangle of the icon or small icon    2 - The bounding rectangle of the item text    3 - The union of 1 and 2, but excludes columns in report view"
        }]
    },
    "_GUICtrlListView_GetItemRectEx": {
        "documentation": "Retrieves the bounding rectangle for all or part of an item",
        "label": "_GUICtrlListView_GetItemRectEx ( $hWnd, $iIndex [, $iPart = 3] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iPart",
            "documentation": "**[optional]** The portion of the item to retrieve:    $LVIR_BOUNDS - Returns the bounding rectangle of the entire item, including the icon and label    $LVIR_ICON - Returns the bounding rectangle of the icon or small icon    $LVIR_LABEL - Returns the bounding rectangle of the item text    $LVIR_SELECTBOUNDS - Returns the union of the $LVIR_ICON and $LVIR_LABEL rectangles, but excludes columns in report view."
        }]
    },
    "_GUICtrlListView_GetItemSelected": {
        "documentation": "Determines whether the item is selected",
        "label": "_GUICtrlListView_GetItemSelected ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_GetItemSpacing": {
        "documentation": "Determines the spacing between items in the control",
        "label": "_GUICtrlListView_GetItemSpacing ( $hWnd [, $bSmall = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bSmall",
            "documentation": "**[optional]** View for which to retrieve the item spacing:    True - Small icon view    False - Icon view"
        }]
    },
    "_GUICtrlListView_GetItemSpacingX": {
        "documentation": "Determines the horizontal spacing between items in the control",
        "label": "_GUICtrlListView_GetItemSpacingX ( $hWnd [, $bSmall = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bSmall",
            "documentation": "**[optional]** View for which to retrieve the item spacing:    True - Small icon view    False - Icon view"
        }]
    },
    "_GUICtrlListView_GetItemSpacingY": {
        "documentation": "Determines the vertical spacing between items in the control",
        "label": "_GUICtrlListView_GetItemSpacingY ( $hWnd [, $bSmall = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bSmall",
            "documentation": "**[optional]** View for which to retrieve the item spacing:    True - Small icon view    False - Icon view"
        }]
    },
    "_GUICtrlListView_GetItemState": {
        "documentation": "Retrieves the state of a listview item",
        "label": "_GUICtrlListView_GetItemState ( $hWnd, $iIndex, $iMask )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iMask",
            "documentation": "State information to retrieve. This can be a combination of:    $LVIS_CUT - The item is marked for a cut-and-paste operation    $LVIS_DROPHILITED - The item is highlighted as a drag-and-drop target    $LVIS_FOCUSED - The item has the focus, so it is surrounded by a standard focus rectangle    $LVIS_SELECTED - The item is selected    $LVIS_OVERLAYMASK - Use this mask to retrieve the item's overlay image index    $LVIS_STATEIMAGEMASK - Use this mask to retrieve the item's state image index"
        }]
    },
    "_GUICtrlListView_GetItemStateImage": {
        "documentation": "Gets the state image that is displayed",
        "label": "_GUICtrlListView_GetItemStateImage ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlListView_GetItemText": {
        "documentation": "Retrieves the text of an item or subitem",
        "label": "_GUICtrlListView_GetItemText ( $hWnd, $iIndex [, $iSubItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** 1-based sub item index"
        }]
    },
    "_GUICtrlListView_GetItemTextArray": {
        "documentation": "Retrieves all of a list-view item",
        "label": "_GUICtrlListView_GetItemTextArray ( $hWnd [, $iItem = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iItem",
            "documentation": "**[optional]** 0-based index of item to retrieve"
        }]
    },
    "_GUICtrlListView_GetItemTextString": {
        "documentation": "Retrieves all of a list-view item",
        "label": "_GUICtrlListView_GetItemTextString ( $hWnd [, $iItem = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iItem",
            "documentation": "**[optional]** 0-based index of item to retrieve"
        }]
    },
    "_GUICtrlListView_GetNextItem": {
        "documentation": "Searches for an item that has the specified properties",
        "label": "_GUICtrlListView_GetNextItem ( $hWnd [, $iStart = -1 [, $iSearch = 0 [, $iState = 8]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Index of the item to begin the search with, or -1 to find the first item that matches the specified flags.The specified item itself is excluded from the search."
        }, {
            "label": "$iSearch",
            "documentation": "**[optional]** Relationship to the index of the item where the search is to begin:    0 - Searches for a subsequent item by index    1 - Searches for an item that is above the specified item    2 - Searches for an item that is below the specified item    3 - Searches for an item to the left of the specified item    4 - Searches for an item to the right of the specified item"
        }, {
            "label": "$iState",
            "documentation": "**[optional]** State of the item to find. Can be a combination of:    1 - The item is cut    2 - The item is highlighted    4 - The item is focused    8 - The item is selected"
        }]
    },
    "_GUICtrlListView_GetNumberOfWorkAreas": {
        "documentation": "Retrieves the number of working areas in the control",
        "label": "_GUICtrlListView_GetNumberOfWorkAreas ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetOrigin": {
        "documentation": "Retrieves the current view origin for the control",
        "label": "_GUICtrlListView_GetOrigin ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetOriginX": {
        "documentation": "Retrieves the current horizontal view origin for the control",
        "label": "_GUICtrlListView_GetOriginX ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetOriginY": {
        "documentation": "Retrieves the current vertical view origin for the control",
        "label": "_GUICtrlListView_GetOriginY ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetOutlineColor": {
        "documentation": "Retrieves the color of the border of the control",
        "label": "_GUICtrlListView_GetOutlineColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetSelectedColumn": {
        "documentation": "Retrieves the index of the selected column",
        "label": "_GUICtrlListView_GetSelectedColumn ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetSelectedCount": {
        "documentation": "Determines the number of selected items",
        "label": "_GUICtrlListView_GetSelectedCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetSelectedIndices": {
        "documentation": "Retrieve indices of selected item(s)",
        "label": "_GUICtrlListView_GetSelectedIndices ( $hWnd [, $bArray = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bArray",
            "documentation": "**[optional]** Return string or Array    True - Returns array    False - Returns pipe \"|\" delimited string"
        }]
    },
    "_GUICtrlListView_GetSelectionMark": {
        "documentation": "Retrieves the selection mark from the control",
        "label": "_GUICtrlListView_GetSelectionMark ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetStringWidth": {
        "documentation": "Determines the width of a specified string",
        "label": "_GUICtrlListView_GetStringWidth ( $hWnd, $sString )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sString",
            "documentation": "String for which the width will be calculated"
        }]
    },
    "_GUICtrlListView_GetSubItemRect": {
        "documentation": "Retrieves information about an item bounding rectangle",
        "label": "_GUICtrlListView_GetSubItemRect ( $hWnd, $iIndex, $iSubItem [, $iPart = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the subitem's parent item"
        }, {
            "label": "$iSubItem",
            "documentation": "1-based index of the subitem"
        }, {
            "label": "$iPart",
            "documentation": "**[optional]** The portion of the subitem item to retrieve:    0 - The rectangle of the entire subitem, including the icon and label    1 - The rectangle of the icon or small icon"
        }]
    },
    "_GUICtrlListView_GetTextBkColor": {
        "documentation": "Retrieves the text background color of the control",
        "label": "_GUICtrlListView_GetTextBkColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetTextColor": {
        "documentation": "Retrieves the text color of the control",
        "label": "_GUICtrlListView_GetTextColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetToolTips": {
        "documentation": "Retrieves the ToolTip control handle",
        "label": "_GUICtrlListView_GetToolTips ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetTopIndex": {
        "documentation": "Retrieves the index of the topmost visible item when in list or report view",
        "label": "_GUICtrlListView_GetTopIndex ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetUnicodeFormat": {
        "documentation": "Retrieves the Unicode character format flag for the control",
        "label": "_GUICtrlListView_GetUnicodeFormat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetView": {
        "documentation": "Retrieves the current view of the control",
        "label": "_GUICtrlListView_GetView ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetViewDetails": {
        "documentation": "Determines whether the view mode is in detail mode",
        "label": "_GUICtrlListView_GetViewDetails ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetViewLarge": {
        "documentation": "Determines whether the view mode is in large icon mode",
        "label": "_GUICtrlListView_GetViewLarge ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetViewList": {
        "documentation": "Determines whether the view mode is in list mode",
        "label": "_GUICtrlListView_GetViewList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetViewRect": {
        "documentation": "Retrieves the bounding rectangle of all items in the control",
        "label": "_GUICtrlListView_GetViewRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetViewSmall": {
        "documentation": "Determines whether the view mode is in small icon mode",
        "label": "_GUICtrlListView_GetViewSmall ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_GetViewTile": {
        "documentation": "Determines whether the view mode is in tile mode",
        "label": "_GUICtrlListView_GetViewTile ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_HideColumn": {
        "documentation": "Hides the column \"sets column width to zero\"",
        "label": "_GUICtrlListView_HideColumn ( $hWnd, $iCol )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iCol",
            "documentation": "Column to hide"
        }]
    },
    "_GUICtrlListView_HitTest": {
        "documentation": "Determines which item is at a specified position",
        "label": "_GUICtrlListView_HitTest ( $hWnd [, $iX = -1 [, $iY = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "**[optional]** X position, in client coordinates, to be tested or -1 to use the current mouse position"
        }, {
            "label": "$iY",
            "documentation": "**[optional]** Y position, in client coordinates, to be tested or -1 to use the current mouse position"
        }]
    },
    "_GUICtrlListView_InsertColumn": {
        "documentation": "Inserts a new column in the control",
        "label": "_GUICtrlListView_InsertColumn ( $hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $bOnRight = False]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of new column"
        }, {
            "label": "$sText",
            "documentation": "Column header text"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Width of the column, in pixels"
        }, {
            "label": "$iAlign",
            "documentation": "**[optional]** Alignment of the column header and the subitem text in the column:    0 - Text is left aligned    1 - Text is right aligned    2 - Text is centered"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of an image within the image list"
        }, {
            "label": "$bOnRight",
            "documentation": "**[optional]** If True, the column image appears to the right of text"
        }]
    },
    "_GUICtrlListView_InsertGroup": {
        "documentation": "Inserts a group",
        "label": "_GUICtrlListView_InsertGroup ( $hWnd, $iIndex, $iGroupID, $sHeader [, $iAlign = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Index where the group is to be added. If this is -1, the group is added at the end of the list."
        }, {
            "label": "$iGroupID",
            "documentation": "ID of the group"
        }, {
            "label": "$sHeader",
            "documentation": "Header text"
        }, {
            "label": "$iAlign",
            "documentation": "**[optional]** Alignment of the header text for the group:    0 - Left    1 - Center    2 - Right"
        }]
    },
    "_GUICtrlListView_InsertItem": {
        "documentation": "Inserts a new item in the control",
        "label": "_GUICtrlListView_InsertItem ( $hWnd, $sText [, $iIndex = -1 [, $iImage = -1 [, $iParam = 0]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Item text. If set to -1, the item text is set via the $LVN_GETDISPINFO notification message."
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** 0-based index at which the new item should be inserted.If this value is greater than the number of items currently contained by the control, the new item will be appended to the end of the list and assigned the correct index."
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Application Defined Data"
        }]
    },
    "_GUICtrlListView_JustifyColumn": {
        "documentation": "Set Justification of a column for a list-view control",
        "label": "_GUICtrlListView_JustifyColumn ( $hWnd, $iIndex [, $iAlign = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of new column"
        }, {
            "label": "$iAlign",
            "documentation": "**[optional]** Alignment of the column header and the subitem text in the column:    0 - Text is left aligned    1 - Text is right aligned    2 - Text is centered"
        }]
    },
    "_GUICtrlListView_MapIDToIndex": {
        "documentation": "Maps the ID of an item to an index",
        "label": "_GUICtrlListView_MapIDToIndex ( $hWnd, $iID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iID",
            "documentation": "ID of an item"
        }]
    },
    "_GUICtrlListView_MapIndexToID": {
        "documentation": "Maps an index to an item ID",
        "label": "_GUICtrlListView_MapIndexToID ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of an item"
        }]
    },
    "_GUICtrlListView_RedrawItems": {
        "documentation": "Forces the control to redraw a range of items",
        "label": "_GUICtrlListView_RedrawItems ( $hWnd, $iFirst, $iLast )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iFirst",
            "documentation": "0-based index of the first item to redraw"
        }, {
            "label": "$iLast",
            "documentation": "0-based index of the last item to redraw"
        }]
    },
    "_GUICtrlListView_RegisterSortCallBack": {
        "documentation": "Register the Simple Sort callback function",
        "label": "_GUICtrlListView_RegisterSortCallBack ( $hWnd [, $bNumbers = True [, $bArrows = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the control"
        }, {
            "label": "$bNumbers",
            "documentation": "**[optional]** Treat number strings as numbers"
        }, {
            "label": "$bArrows",
            "documentation": "**[optional]** Draws a down-arrow/up-arrow on column selected"
        }]
    },
    "_GUICtrlListView_RemoveAllGroups": {
        "documentation": "Removes all groups from the control",
        "label": "_GUICtrlListView_RemoveAllGroups ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlListView_RemoveGroup": {
        "documentation": "Removes a group from the control",
        "label": "_GUICtrlListView_RemoveGroup ( $hWnd, $iGroupID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iGroupID",
            "documentation": "ID that specifies the group to remove"
        }]
    },
    "_GUICtrlListView_Scroll": {
        "documentation": "Scrolls the content of a list-view",
        "label": "_GUICtrlListView_Scroll ( $hWnd, $iDX, $iDY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iDX",
            "documentation": "Value of type int that specifies the amount of horizontal scrolling in pixels.If the list-view control is in list-view, this value specifies the number of columns to scroll."
        }, {
            "label": "$iDY",
            "documentation": "Value of type int that specifies the amount of vertical scrolling in pixels"
        }]
    },
    "_GUICtrlListView_SetBkColor": {
        "documentation": "Sets the background color of the control",
        "label": "_GUICtrlListView_SetBkColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "Background color to set or CLR_NONE value for no background color"
        }]
    },
    "_GUICtrlListView_SetBkImage": {
        "documentation": "Sets the background image in the control",
        "label": "_GUICtrlListView_SetBkImage ( $hWnd [, $sURL = \"\" [, $iStyle = 0 [, $iXOffset = 0 [, $iYOffset = 0]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sURL",
            "documentation": "**[optional]** URL of the background image. If blank, the control has no background"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Determines the background image style:    0 - Normal    1 - Tiled"
        }, {
            "label": "$iXOffset",
            "documentation": "**[optional]** Percentage of the control's client area that the image should be offset horizontally.Only valid when 0 is used in $iStyle."
        }, {
            "label": "$iYOffset",
            "documentation": "**[optional]** Percentage of the control's client area that the image should be offset vertically.Only valid when 0 is used in $iStyle."
        }]
    },
    "_GUICtrlListView_SetCallBackMask": {
        "documentation": "Changes the callback mask for the control",
        "label": "_GUICtrlListView_SetCallBackMask ( $hWnd, $iMask )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMask",
            "documentation": "Value of the callback mask.The bits of the mask indicate the item states or images for which the application stores the current state data.This value can be any combination of the following:    1 - The item is marked for a cut-and-paste operation    2 - The item is highlighted as a drag-and-drop target    4 - The item has the focus    8 - The item is selected    16 - The application stores the image list index of the current overlay image    32 - The application stores the image list index of the current state image"
        }]
    },
    "_GUICtrlListView_SetColumn": {
        "documentation": "Sets the attributes of a column",
        "label": "_GUICtrlListView_SetColumn ( $hWnd, $iIndex, $sText [, $iWidth = -1 [, $iAlign = -1 [, $iImage = -1 [, $bOnRight = False]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of new column"
        }, {
            "label": "$sText",
            "documentation": "Column header text"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Width of the column, in pixels"
        }, {
            "label": "$iAlign",
            "documentation": "**[optional]** Alignment of the column header and the subitem text in the column:    0 - Text is left aligned    1 - Text is right aligned    2 - Text is centered"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of an image within the image list"
        }, {
            "label": "$bOnRight",
            "documentation": "**[optional]** If True, the column image appears to the right of text"
        }]
    },
    "_GUICtrlListView_SetColumnOrder": {
        "documentation": "Sets the left-to-right order of columns",
        "label": "_GUICtrlListView_SetColumnOrder ( $hWnd, $sOrder )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sOrder",
            "documentation": "Use Opt('GUIDataSeparatorChar', param) to set Separator Char, delimited column order, must be formated as follows:    \"2|0|3|1\""
        }]
    },
    "_GUICtrlListView_SetColumnOrderArray": {
        "documentation": "Sets the left-to-right order of columns in the control",
        "label": "_GUICtrlListView_SetColumnOrderArray ( $hWnd, $aOrder )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$aOrder",
            "documentation": "Array of integers that holds the index values of the columns in the control.The array must be formatted as follows:    [0] - Number of items in array    [1] - First column index    [2] - Second column index    [n] - Last column index"
        }]
    },
    "_GUICtrlListView_SetColumnWidth": {
        "documentation": "Changes the width of a column",
        "label": "_GUICtrlListView_SetColumnWidth ( $hWnd, $iCol, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iCol",
            "documentation": "0-based index of a valid column. For list-view mode, this parameter must be set to zero"
        }, {
            "label": "$iWidth",
            "documentation": "New width of the column, in pixels.For report-view mode, the following special values are supported:    $LVSCW_AUTOSIZE - Automatically sizes the column.    $LVSCW_AUTOSIZE_USEHEADER - Automatically sizes the column to fit the header text.If you use this value with the last column, its width is set to fill the remaining width of the list-view control."
        }]
    },
    "_GUICtrlListView_SetExtendedListViewStyle": {
        "documentation": "Sets extended styles",
        "label": "_GUICtrlListView_SetExtendedListViewStyle ( $hWnd, $iExStyle [, $iExMask = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iExStyle",
            "documentation": "Extended control styles:    $LVS_EX_BORDERSELECT - When an item is selected the border color of the item changes    $LVS_EX_CHECKBOXES - Enables check boxes for items in a list-view control    $LVS_EX_DOUBLEBUFFER - Paints via double-buffering, which reduces flicker    $LVS_EX_FLATSB - Enables flat scroll bars in the list view    $LVS_EX_FULLROWSELECT - When an item is selected, the item and all its subitems are highlighted    $LVS_EX_GRIDLINES - Displays gridlines around items and subitems    $LVS_EX_HEADERDRAGDROP - Enables drag-and-drop reordering of columns    $LVS_EX_INFOTIP - The $LVN_GETINFOTIP notification message is sent before displaying a ToolTip    $LVS_EX_LABELTIP - If not set, the unfolds partly hidden labels only for the large icon mode    $LVS_EX_MULTIWORKAREAS - The control will not autoarrange its icons until one or more work areas are defined    $LVS_EX_ONECLICKACTIVATE - The control sends an $LVN_ITEMACTIVATE messages when the user clicks an item    $LVS_EX_REGIONAL - Sets the control region to include only the item icons and text    $LVS_EX_SIMPLESELECT - In icon view moves the state image of the control to the top right    $LVS_EX_SUBITEMIMAGES - Allows images to be displayed for subitems    $LVS_EX_TRACKSELECT - Enables hot-track selection in the control    $LVS_EX_TWOCLICKACTIVATE - The control sends an $LVN_ITEMACTIVATE message when the user double-clicks an item    $LVS_EX_UNDERLINECOLD - Causes non-hot items that may be activated to be displayed with underlined text    $LVS_EX_UNDERLINEHOT - Causes hot items that may be activated to be displayed with underlined text"
        }, {
            "label": "$iExMask",
            "documentation": "**[optional]** Specifies which styles in $iExStyle are to be affected.This parameter can be a combination of extended styles. Only the extended styles in $iExMask will be changed.All other styles will be maintained as they are.If this parameter is zero, all of the styles in $iExStyle will be affected."
        }]
    },
    "_GUICtrlListView_SetGroupInfo": {
        "documentation": "Sets group information",
        "label": "_GUICtrlListView_SetGroupInfo ( $hWnd, $iGroupID, $sHeader [, $iAlign = 0 [, $iState = $LVGS_NORMAL]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iGroupID",
            "documentation": "ID of the group"
        }, {
            "label": "$sHeader",
            "documentation": "Header text"
        }, {
            "label": "$iAlign",
            "documentation": "**[optional]** Alignment of the header text for the group:    0 - Left    1 - Center    2 - Right"
        }, {
            "label": "$iState",
            "documentation": "**[optional]** Windows Vista or later can have one of the following values:    $LVGS_NORMAL - Groups are expanded, the group name is displayed, and all items in the group are displayed.    $LVGS_COLLAPSED - The group is collapsed.    $LVGS_HIDDEN - The group is hidden.    $LVGS_NOHEADER - The group does not display a header.    $LVGS_COLLAPSIBLE - The group can be collapsed.    $LVGS_FOCUSED - The group has keyboard focus.    $LVGS_SELECTED - The group is selected.    $LVGS_SUBSETED - The group displays only a portion of its items.    $LVGS_SUBSETLINKFOCUSED - The subset link of the group has keyboard focus"
        }]
    },
    "_GUICtrlListView_SetHotItem": {
        "documentation": "Sets the hot item",
        "label": "_GUICtrlListView_SetHotItem ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item to be set as the hot item"
        }]
    },
    "_GUICtrlListView_SetHoverTime": {
        "documentation": "Sets the amount of time which the mouse cursor must hover over an item before it is selected",
        "label": "_GUICtrlListView_SetHoverTime ( $hWnd, $iTime )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iTime",
            "documentation": "The new amount of time, in milliseconds, that the mouse cursor must hover over an item before it is selected.If this value is (DWORD)-1, then the hover time is set to the default hover time."
        }]
    },
    "_GUICtrlListView_SetIconSpacing": {
        "documentation": "Sets the spacing between icons where the style is large icon",
        "label": "_GUICtrlListView_SetIconSpacing ( $hWnd, $iCX, $iCY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iCX",
            "documentation": "Distance, in pixels, to set between icons on the x-axis"
        }, {
            "label": "$iCY",
            "documentation": "Distance, in pixels, to set between icons on the y-axis"
        }]
    },
    "_GUICtrlListView_SetImageList": {
        "documentation": "Assigns an image list to the control",
        "label": "_GUICtrlListView_SetImageList ( $hWnd, $hHandle [, $iType = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hHandle",
            "documentation": "Handle to the image list to assign"
        }, {
            "label": "$iType",
            "documentation": "**[optional]** Type of image list:    0 - Image list with large icons    1 - Image list with small icons    2 - Image list with state images"
        }]
    },
    "_GUICtrlListView_SetItem": {
        "documentation": "Sets some or all of a item's attributes",
        "label": "_GUICtrlListView_SetItem ( $hWnd, $sText [, $iIndex = 0 [, $iSubItem = 0 [, $iImage = -1 [, $iParam = -1 [, $iIndent = -1]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Item text. See remark."
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** The 0-based index of the item"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** 1-based index of the subitem or zero if this refers to an item"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-base index of the item's icon in the control's image list"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Value specific to the item"
        }, {
            "label": "$iIndent",
            "documentation": "**[optional]** Number of image widths to indent the item. A single indentation equals the width of an image."
        }]
    },
    "_GUICtrlListView_SetItemChecked": {
        "documentation": "Sets the checked state",
        "label": "_GUICtrlListView_SetItemChecked ( $hWnd, $iIndex [, $bCheck = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item, -1 sets all items"
        }, {
            "label": "$bCheck",
            "documentation": "**[optional]** Value to set checked state to:    True - Checked    False - Not checked"
        }]
    },
    "_GUICtrlListView_SetItemCount": {
        "documentation": "Causes the list-view control to allocate memory for the specified number of items",
        "label": "_GUICtrlListView_SetItemCount ( $hWnd, $iItems )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iItems",
            "documentation": "Number of items that the list-view control will ultimately contain"
        }]
    },
    "_GUICtrlListView_SetItemCut": {
        "documentation": "Sets whether the item is marked for a cut-and-paste operation",
        "label": "_GUICtrlListView_SetItemCut ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set."
        }]
    },
    "_GUICtrlListView_SetItemDropHilited": {
        "documentation": "Sets whether the item is highlighted as a drag-and-drop target",
        "label": "_GUICtrlListView_SetItemDropHilited ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set."
        }]
    },
    "_GUICtrlListView_SetItemEx": {
        "documentation": "Sets some or all of a item's attributes",
        "label": "_GUICtrlListView_SetItemEx ( $hWnd, ByRef $tItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$tItem",
            "documentation": "$tagLVITEM structure"
        }]
    },
    "_GUICtrlListView_SetItemFocused": {
        "documentation": "Sets whether the item has the focus",
        "label": "_GUICtrlListView_SetItemFocused ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set."
        }]
    },
    "_GUICtrlListView_SetItemGroupID": {
        "documentation": "Sets the item group ID",
        "label": "_GUICtrlListView_SetItemGroupID ( $hWnd, $iIndex, $iGroupID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iGroupID",
            "documentation": "Group ID"
        }]
    },
    "_GUICtrlListView_SetItemImage": {
        "documentation": "Sets the index of the item's icon in the control's image list",
        "label": "_GUICtrlListView_SetItemImage ( $hWnd, $iIndex, $iImage [, $iSubItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iImage",
            "documentation": "0-based index into the control's image list"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** 1-based index of the subitem"
        }]
    },
    "_GUICtrlListView_SetItemIndent": {
        "documentation": "Sets the number of image widths to indent the item",
        "label": "_GUICtrlListView_SetItemIndent ( $hWnd, $iIndex, $iIndent )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iIndent",
            "documentation": "Indention value"
        }]
    },
    "_GUICtrlListView_SetItemParam": {
        "documentation": "Sets the value specific to the item",
        "label": "_GUICtrlListView_SetItemParam ( $hWnd, $iIndex, $iParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iParam",
            "documentation": "A value to associate with the item"
        }]
    },
    "_GUICtrlListView_SetItemPosition": {
        "documentation": "Moves an item to a specified position in the control",
        "label": "_GUICtrlListView_SetItemPosition ( $hWnd, $iIndex, $iCX, $iCY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iCX",
            "documentation": "New x-position of the item's upper-left corner, in view coordinates"
        }, {
            "label": "$iCY",
            "documentation": "New y-position of the item's upper-left corner, in view coordinates"
        }]
    },
    "_GUICtrlListView_SetItemPosition32": {
        "documentation": "Moves an item to a specified position in the control",
        "label": "_GUICtrlListView_SetItemPosition32 ( $hWnd, $iIndex, $iCX, $iCY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iCX",
            "documentation": "New x-position of the item's upper-left corner, in view coordinates"
        }, {
            "label": "$iCY",
            "documentation": "New y-position of the item's upper-left corner, in view coordinates"
        }]
    },
    "_GUICtrlListView_SetItemSelected": {
        "documentation": "Sets whether the item is selected",
        "label": "_GUICtrlListView_SetItemSelected ( $hWnd, $iIndex [, $bSelected = True [, $bFocused = False]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item, -1 to set selected state of all items"
        }, {
            "label": "$bSelected",
            "documentation": "**[optional]** If True the item(s) are selected, otherwise not."
        }, {
            "label": "$bFocused",
            "documentation": "**[optional]** If True the item has focus, otherwise not."
        }]
    },
    "_GUICtrlListView_SetItemState": {
        "documentation": "Changes the state of an item in the control",
        "label": "_GUICtrlListView_SetItemState ( $hWnd, $iIndex, $iState, $iStateMask )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iState",
            "documentation": "Item state to be changed"
        }, {
            "label": "$iStateMask",
            "documentation": "Bits that determine whether state is active or inactive"
        }]
    },
    "_GUICtrlListView_SetItemStateImage": {
        "documentation": "Sets the state image that is displayed",
        "label": "_GUICtrlListView_SetItemStateImage ( $hWnd, $iIndex, $iImage )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$iImage",
            "documentation": "1-based overlay image index"
        }]
    },
    "_GUICtrlListView_SetItemText": {
        "documentation": "Changes the text of an item or subitem",
        "label": "_GUICtrlListView_SetItemText ( $hWnd, $iIndex, $sText [, $iSubItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }, {
            "label": "$sText",
            "documentation": "Item or subitem text"
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** 1-based index of the subitem or 0 to set the item"
        }]
    },
    "_GUICtrlListView_SetOutlineColor": {
        "documentation": "Sets the color of the border",
        "label": "_GUICtrlListView_SetOutlineColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "Color to set the border"
        }]
    },
    "_GUICtrlListView_SetSelectedColumn": {
        "documentation": "Sets the index of the selected column",
        "label": "_GUICtrlListView_SetSelectedColumn ( $hWnd, $iCol )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iCol",
            "documentation": "Specifies the column index"
        }]
    },
    "_GUICtrlListView_SetSelectionMark": {
        "documentation": "Sets the selection mark in the control",
        "label": "_GUICtrlListView_SetSelectionMark ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the new selection mark. If -1, the selection mark is removed."
        }]
    },
    "_GUICtrlListView_SetTextBkColor": {
        "documentation": "Sets the background color of text in the control",
        "label": "_GUICtrlListView_SetTextBkColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "Text color"
        }]
    },
    "_GUICtrlListView_SetTextColor": {
        "documentation": "Sets the color of text in the control",
        "label": "_GUICtrlListView_SetTextColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "Text color"
        }]
    },
    "_GUICtrlListView_SetToolTips": {
        "documentation": "Sets the ToolTip control that the control will use to display ToolTips",
        "label": "_GUICtrlListView_SetToolTips ( $hWnd, $hToolTip )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hToolTip",
            "documentation": "Handle to the ToolTip control to be set"
        }]
    },
    "_GUICtrlListView_SetUnicodeFormat": {
        "documentation": "Sets the UNICODE character format flag for the control",
        "label": "_GUICtrlListView_SetUnicodeFormat ( $hWnd, $bUnicode )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bUnicode",
            "documentation": "Determines the character set that is used by the control.    True - the control will use Unicode    False - the control will use ANSI characters."
        }]
    },
    "_GUICtrlListView_SetView": {
        "documentation": "Sets the view of the control",
        "label": "_GUICtrlListView_SetView ( $hWnd, $iView )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iView",
            "documentation": "View state for the control:    0 - Large Icon    1 - Details    2 - List    3 - Small Icon    4 - Tile"
        }]
    },
    "_GUICtrlListView_SetWorkAreas": {
        "documentation": "Creates a work area within the control",
        "label": "_GUICtrlListView_SetWorkAreas ( $hWnd, $iLeft, $iTop, $iRight, $iBottom )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iLeft",
            "documentation": "X coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iTop",
            "documentation": "Y coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iRight",
            "documentation": "X coordinate of the lower right corner of the rectangle"
        }, {
            "label": "$iBottom",
            "documentation": "Y coordinate of the lower right corner of the rectangle"
        }]
    },
    "_GUICtrlListView_SimpleSort": {
        "documentation": "Sorts a list-view control (limited)",
        "label": "_GUICtrlListView_SimpleSort ( $hWnd, ByRef $vSortSense, $iCol [, $bToggleSense = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$vSortSense",
            "documentation": "Sets the defined sort order    True - Sort Descending    False - Sort AscendingUse a simple variable for a single column ListViewUse an array for multicolumn ListViews:    $aArray[0] - Order for first Column    $aArray[1] - Order for second Column    $aArray[n] - Order for last Column"
        }, {
            "label": "$iCol",
            "documentation": "Column number"
        }, {
            "label": "$bToggleSense",
            "documentation": "**[optional]** Toggle sort sense    True - Toggle sort sense after sort (default)    False - Sort sense unchanged after sort"
        }]
    },
    "_GUICtrlListView_SortItems": {
        "documentation": "Starts the sort call back, also sets the Arrow in the Header",
        "label": "_GUICtrlListView_SortItems ( $hWnd, $iCol )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the control"
        }, {
            "label": "$iCol",
            "documentation": "Column clicked"
        }]
    },
    "_GUICtrlListView_SubItemHitTest": {
        "documentation": "Determines which listview item or subitem is at a given position",
        "label": "_GUICtrlListView_SubItemHitTest ( $hWnd [, $iX = -1 [, $iY = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "**[optional]** X position to test or -1 to use the current mouse position"
        }, {
            "label": "$iY",
            "documentation": "**[optional]** Y position to test or -1 to use the current mouse position"
        }]
    },
    "_GUICtrlListView_UnRegisterSortCallBack": {
        "documentation": "UnRegister the Sort callback function",
        "label": "_GUICtrlListView_UnRegisterSortCallBack ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the control"
        }]
    },
    "_GUICtrlMenu_AddMenuItem": {
        "documentation": "Adds a new menu item to the end of the menu",
        "label": "_GUICtrlMenu_AddMenuItem ( $hMenu, $sText [, $iCmdID = 0 [, $hSubMenu = 0]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$sText",
            "documentation": "Menu item text. If blank, a separator will be added."
        }, {
            "label": "$iCmdID",
            "documentation": "**[optional]** Command ID to assign to the item"
        }, {
            "label": "$hSubMenu",
            "documentation": "**[optional]** Handle to the submenu associated with the menu item"
        }]
    },
    "_GUICtrlMenu_AppendMenu": {
        "documentation": "Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu",
        "label": "_GUICtrlMenu_AppendMenu ( $hMenu, $iFlags, $iNewItem, $vNewItem )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iFlags",
            "documentation": "Specifies flags to control the appearance and behavior of the new menu item:    $MF_BITMAP - Uses a bitmap as the menu item    $MF_CHECKED - Places a check mark next to the menu item. If the application provides check-mark bitmaps, this flag displays the check-mark bitmap next to the menu item.    $MF_DISABLED - Disables the menu item so that it cannot be selected, but the flag does not gray it.    $MF_ENABLED - Enables the menu item so that it can be selected, and restores it from its grayed state.    $MF_GRAYED - Disables the menu item and grays it so that it cannot be selected.    $MF_MENUBARBREAK - Functions the same as $MF_MENUBREAK for a menu bar. For a drop down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.    $MF_MENUBREAK - Places the item on a new line (for a menu bar) or in a new column (for a drop down menu, submenu, or shortcut menu) without separating columns.    $MF_OWNERDRAW - Specifies that the item is an owner drawn item.        Before the menu is displayed for the first time, the window that owns the menu receives a $WM_MEASUREITEM message to retrieve the width and height of the menu item.        The $WM_DRAWITEM message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.    $MF_POPUP - Specifies that the menu item opens a drop down menu or submenu.        The $iNewItem parameter specifies a handle to the drop down menu or submenu.        This flag is used to add a menu name to a menu bar, or a menu item that opens a submenu to a drop down menu, submenu, or shortcut menu.    $MF_SEPARATOR - Draws a horizontal dividing line. This flag is used only in a drop down menu, submenu, or shortcut menu.        The line cannot be grayed, disabled, or highlighted. The $vNewItem and $iNewItem parameters are ignored.    $MF_STRING - Specifies that the menu item is a text string. The $vNewItem parameter is a string.    $MF_UNCHECKED - Does not place a check mark next to the item. If the application supplies check mark bitmaps, this flag displays the clear bitmap next to the menu item."
        }, {
            "label": "$iNewItem",
            "documentation": "Specifies either the identifier of the new menu item or, if the $iFlags parameter is set to a popup, a handle to the drop down menu or submenu."
        }, {
            "label": "$vNewItem",
            "documentation": "Specifies the content of the new menu item. The interpretation of $vNewItem depends on whether the $iFlags parameter includes the $MF_BITMAP, $MF_OWNERDRAW, or $MF_STRING flag:    $MF_BITMAP - Contains a bitmap handle    $MF_OWNERDRAW - Contains an application supplied value that can be used to maintain additional data related to the menu item.        The value is in the ItemData member of the structure pointed to by the lParam parameter of the $WM_MEASUREITEM or $WM_DRAWITEM message sent when the menu is created or its appearance is updated.    $MF_STRING - Contains a string"
        }]
    },
    "_GUICtrlMenu_CalculatePopupWindowPosition": {
        "documentation": "Calculates an appropriate pop-up window position",
        "label": "_GUICtrlMenu_CalculatePopupWindowPosition ( $iX, $iY, $iWidth, $iHeight [, $iFlags = 0 [, $tExclude = 0]] )",
        "params": [{
            "label": "$iX",
            "documentation": "The x-coordinate, in logical units, of the specified anchor point."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical units, of the specified anchor point."
        }, {
            "label": "$iWidth",
            "documentation": "The width, in logical units, of the specified window."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in logical units, of the specified window."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify how the function positions the pop-up window horizontally and vertically.    $TPM_CENTERALIGN    $TPM_LEFTALIGN (Default)    $TPM_RIGHTALIGN    $TPM_BOTTOMALIGN    $TPM_TOPALIGN (Default)    $TPM_VCENTERALIGN    $TPM_HORIZONTAL (Default)    $TPM_VERTICAL    $TPM_WORKAREA"
        }, {
            "label": "$tExclude",
            "documentation": "**[optional]** $tagRECT structure that specifies the exclude rectangle."
        }]
    },
    "_GUICtrlMenu_CheckMenuItem": {
        "documentation": "Sets the state of the specified menu item's check mark attribute to either selected or clear",
        "label": "_GUICtrlMenu_CheckMenuItem ( $hMenu, $iItem [, $bCheck = True [, $bByPos = True]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item to check"
        }, {
            "label": "$bCheck",
            "documentation": "**[optional]** True to set the check mark, False to remove it"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_CheckRadioItem": {
        "documentation": "Checks a specified menu item and makes it a radio item",
        "label": "_GUICtrlMenu_CheckRadioItem ( $hMenu, $iFirst, $iLast, $iCheck [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iFirst",
            "documentation": "Identifier or position of the first menu item in the group"
        }, {
            "label": "$iLast",
            "documentation": "Identifier or position of the last menu item in the group"
        }, {
            "label": "$iCheck",
            "documentation": "Identifier or position of the menu item to check"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iFirst, $iLast and $iCheck are a 0-based item position    False - $iFirst, $iLast and $iCheck are a menu item identifier"
        }]
    },
    "_GUICtrlMenu_CreateMenu": {
        "documentation": "Creates a menu",
        "label": "_GUICtrlMenu_CreateMenu ( [$iStyle = $MNS_CHECKORBMP] )",
        "params": [{
            "label": "$iStyle",
            "documentation": "**[optional]** Style of the menu"
        }]
    },
    "_GUICtrlMenu_CreatePopup": {
        "documentation": "Creates a drop down menu, submenu, or shortcut menu",
        "label": "_GUICtrlMenu_CreatePopup ( [$iStyle = $MNS_CHECKORBMP] )",
        "params": [{
            "label": "$iStyle",
            "documentation": "**[optional]** Style of the menu"
        }]
    },
    "_GUICtrlMenu_DeleteMenu": {
        "documentation": "Deletes an item from the specified menu",
        "label": "_GUICtrlMenu_DeleteMenu ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_DestroyMenu": {
        "documentation": "Destroys the specified menu and frees any memory that the menu occupies",
        "label": "_GUICtrlMenu_DestroyMenu ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }]
    },
    "_GUICtrlMenu_DrawMenuBar": {
        "documentation": "Redraws the menu bar of the specified window",
        "label": "_GUICtrlMenu_DrawMenuBar ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose menu bar needs redrawing"
        }]
    },
    "_GUICtrlMenu_EnableMenuItem": {
        "documentation": "Enables, disables, or grays the specified menu item",
        "label": "_GUICtrlMenu_EnableMenuItem ( $hMenu, $iItem [, $iState = 0 [, $bByPos = True]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$iState",
            "documentation": "**[optional]** Indicates whether the menu item is enabled, disabled, or grayed:    0 - Enabled    1 - Grayed    2 - Disabled"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_FindItem": {
        "documentation": "Retrieves a menu item based on it's text",
        "label": "_GUICtrlMenu_FindItem ( $hMenu, $sText [, $bInStr = False [, $iStart = 0]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$sText",
            "documentation": "Text to search for"
        }, {
            "label": "$bInStr",
            "documentation": "**[optional]** If True, the text can be anywhere in the item's text."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Item to start searching from"
        }]
    },
    "_GUICtrlMenu_FindParent": {
        "documentation": "Retrieves the window to which a menu belongs",
        "label": "_GUICtrlMenu_FindParent ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }]
    },
    "_GUICtrlMenu_GetItemBmp": {
        "documentation": "Retrieves the bitmap displayed for the item",
        "label": "_GUICtrlMenu_GetItemBmp ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemBmpChecked": {
        "documentation": "Retrieves the bitmap displayed if the item is selected",
        "label": "_GUICtrlMenu_GetItemBmpChecked ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemBmpUnchecked": {
        "documentation": "Retrieves the bitmap displayed if the item is not selected",
        "label": "_GUICtrlMenu_GetItemBmpUnchecked ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemChecked": {
        "documentation": "Retrieves the status of the menu item checked state",
        "label": "_GUICtrlMenu_GetItemChecked ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemCount": {
        "documentation": "Retrieves the number of items in the specified menu",
        "label": "_GUICtrlMenu_GetItemCount ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }]
    },
    "_GUICtrlMenu_GetItemData": {
        "documentation": "Retrieves the application defined value associated with the menu item",
        "label": "_GUICtrlMenu_GetItemData ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemDefault": {
        "documentation": "Retrieves the status of the menu item default state",
        "label": "_GUICtrlMenu_GetItemDefault ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemDisabled": {
        "documentation": "Retrieves the status of the menu item disabled state",
        "label": "_GUICtrlMenu_GetItemDisabled ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemEnabled": {
        "documentation": "Retrieves the status of the menu item enabled state",
        "label": "_GUICtrlMenu_GetItemEnabled ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemGrayed": {
        "documentation": "Retrieves the status of the menu item grayed state",
        "label": "_GUICtrlMenu_GetItemGrayed ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemHighlighted": {
        "documentation": "Retrieves the status of the menu item highlighted state",
        "label": "_GUICtrlMenu_GetItemHighlighted ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemID": {
        "documentation": "Retrieves the menu item ID",
        "label": "_GUICtrlMenu_GetItemID ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemInfo": {
        "documentation": "Retrieves information about a menu item",
        "label": "_GUICtrlMenu_GetItemInfo ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemRect": {
        "documentation": "Retrieves the bounding rectangle for the specified menu item",
        "label": "_GUICtrlMenu_GetItemRect ( $hWnd, $hMenu, $iItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window containing the menu"
        }, {
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "0-based position of the menu item"
        }]
    },
    "_GUICtrlMenu_GetItemRectEx": {
        "documentation": "Retrieves the bounding rectangle for the specified menu item",
        "label": "_GUICtrlMenu_GetItemRectEx ( $hWnd, $hMenu, $iItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window containing the menu"
        }, {
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "0-based position of the menu item"
        }]
    },
    "_GUICtrlMenu_GetItemState": {
        "documentation": "Retrieves the menu item state",
        "label": "_GUICtrlMenu_GetItemState ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemStateEx": {
        "documentation": "Retrieves the menu flags associated with the specified menu item",
        "label": "_GUICtrlMenu_GetItemStateEx ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemSubMenu": {
        "documentation": "Retrieves a the submenu activated by a specified item",
        "label": "_GUICtrlMenu_GetItemSubMenu ( $hMenu, $iItem )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "0-based position of the menu item"
        }]
    },
    "_GUICtrlMenu_GetItemText": {
        "documentation": "Retrieves the text of the specified menu item",
        "label": "_GUICtrlMenu_GetItemText ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetItemType": {
        "documentation": "Retrieves the menu item type",
        "label": "_GUICtrlMenu_GetItemType ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_GetMenu": {
        "documentation": "Retrieves the handle of the menu assigned to the given window",
        "label": "_GUICtrlMenu_GetMenu ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Identifies the window whose menu handle is retrieved"
        }]
    },
    "_GUICtrlMenu_GetMenuBackground": {
        "documentation": "Retrieves the brush to use for the menu's background",
        "label": "_GUICtrlMenu_GetMenuBackground ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }]
    },
    "_GUICtrlMenu_GetMenuBarInfo": {
        "documentation": "Retrieves information about the specified menu bar",
        "label": "_GUICtrlMenu_GetMenuBarInfo ( $hWnd [, $iItem = 0 [, $iObject = 1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose information is to be retrieved"
        }, {
            "label": "$iItem",
            "documentation": "**[optional]** Specifies the item for which to retrieve information. If 0, the function retrieves information about the menu itself.If 1, the function retrieves information about the first item on the menu, and so on."
        }, {
            "label": "$iObject",
            "documentation": "**[optional]** Specifies the menu object:    0 - The popup menu associated with the window    1 - The menu bar associated with the window    2 - The system menu associated with the window"
        }]
    },
    "_GUICtrlMenu_GetMenuContextHelpID": {
        "documentation": "Retrieves the context help identifier",
        "label": "_GUICtrlMenu_GetMenuContextHelpID ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }]
    },
    "_GUICtrlMenu_GetMenuData": {
        "documentation": "Retrieves the application defined value",
        "label": "_GUICtrlMenu_GetMenuData ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }]
    },
    "_GUICtrlMenu_GetMenuDefaultItem": {
        "documentation": "Retrieves the default menu item on the specified menu",
        "label": "_GUICtrlMenu_GetMenuDefaultItem ( $hMenu [, $bByPos = True [, $iFlags = 0]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Determines whether to retrive the menu items's identifer of it's position:    True - Return menu item position    False - Return menu item identifier"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Specifies how the function searches for menu items:    0 - No special search parameters    1 - Specifies that the function will return a default item even if it is disabled    2 - Specifies that if the default item is one that opens a submenu the function is to search recursively in the corresponding submenu."
        }]
    },
    "_GUICtrlMenu_GetMenuHeight": {
        "documentation": "Retrieves the maximum height of a menu",
        "label": "_GUICtrlMenu_GetMenuHeight ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }]
    },
    "_GUICtrlMenu_GetMenuInfo": {
        "documentation": "Retrieves information about a specified menu",
        "label": "_GUICtrlMenu_GetMenuInfo ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }]
    },
    "_GUICtrlMenu_GetMenuStyle": {
        "documentation": "Retrieves the style information for a menu",
        "label": "_GUICtrlMenu_GetMenuStyle ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }]
    },
    "_GUICtrlMenu_GetSystemMenu": {
        "documentation": "Allows the application to access the window menu for copying and modifying",
        "label": "_GUICtrlMenu_GetSystemMenu ( $hWnd [, $bRevert = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that will own a copy of the window menu"
        }, {
            "label": "$bRevert",
            "documentation": "**[optional]** Specifies the action to be taken. If this parameter is False, the function returns a handle to the copy of the window menu currently in use. The copy is initially identical to the window menu, but it can be modified.If this parameter is True, the function resets the window menu back to the default state. The previous window menu, if any, is destroyed."
        }]
    },
    "_GUICtrlMenu_InsertMenuItem": {
        "documentation": "Inserts a new menu item at the specified position",
        "label": "_GUICtrlMenu_InsertMenuItem ( $hMenu, $iIndex, $sText [, $iCmdID = 0 [, $hSubMenu = 0]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iIndex",
            "documentation": "0-based position of the menu item before which to insert the new item"
        }, {
            "label": "$sText",
            "documentation": "Menu item text. If blank, a separator will be inserted."
        }, {
            "label": "$iCmdID",
            "documentation": "**[optional]** Command ID to assign to the item"
        }, {
            "label": "$hSubMenu",
            "documentation": "**[optional]** Handle to the submenu associated with the menu item"
        }]
    },
    "_GUICtrlMenu_InsertMenuItemEx": {
        "documentation": "Inserts a new menu item at the specified position in a menu",
        "label": "_GUICtrlMenu_InsertMenuItemEx ( $hMenu, $iIndex, ByRef $tMenu [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iIndex",
            "documentation": "Position of the menu item before which to insert the new item"
        }, {
            "label": "$tMenu",
            "documentation": "$tagMENUITEMINFO structure"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iIndex is a 0-based item position    False - $iIndex is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_IsMenu": {
        "documentation": "Determines whether a handle is a menu handle",
        "label": "_GUICtrlMenu_IsMenu ( $hMenu )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle to be tested"
        }]
    },
    "_GUICtrlMenu_LoadMenu": {
        "documentation": "Loads the specified menu resource from the executable file associated with an application instance",
        "label": "_GUICtrlMenu_LoadMenu ( $hInst, $sMenuName )",
        "params": [{
            "label": "$hInst",
            "documentation": "Handle to the module containing the menu resource to be loaded"
        }, {
            "label": "$sMenuName",
            "documentation": "String that contains the name of the menu resource.Alternatively, this parameter can consist of the resource identifier in the low order word and 0 in the high order word."
        }]
    },
    "_GUICtrlMenu_MapAccelerator": {
        "documentation": "Maps a menu accelerator key to it's position in the menu",
        "label": "_GUICtrlMenu_MapAccelerator ( $hMenu, $sAccelKey )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle to menu"
        }, {
            "label": "$sAccelKey",
            "documentation": "Accelerator key"
        }]
    },
    "_GUICtrlMenu_MenuItemFromPoint": {
        "documentation": "Determines which menu item is at the specified location",
        "label": "_GUICtrlMenu_MenuItemFromPoint ( $hWnd, $hMenu [, $iX = -1 [, $iY = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window containing the menu. If this value is 0 and $hMenu represents a popup menu, the function will find the menu window."
        }, {
            "label": "$hMenu",
            "documentation": "Handle to the menu containing the menu items to hit test"
        }, {
            "label": "$iX",
            "documentation": "**[optional]** X position to test. If -1, the current mouse X position will be used."
        }, {
            "label": "$iY",
            "documentation": "**[optional]** Y position to test. If -1, the current mouse Y position will be used."
        }]
    },
    "_GUICtrlMenu_RemoveMenu": {
        "documentation": "Deletes a menu item or detaches a submenu from the specified menu",
        "label": "_GUICtrlMenu_RemoveMenu ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle to the menu to be changed"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemBitmaps": {
        "documentation": "Associates the specified bitmap with a menu item",
        "label": "_GUICtrlMenu_SetItemBitmaps ( $hMenu, $iItem, $hChecked, $hUnChecked [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$hChecked",
            "documentation": "Handle to the bitmap displayed when the menu item is selected"
        }, {
            "label": "$hUnChecked",
            "documentation": "Handle to the bitmap displayed when the menu item is not selected"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemBmp": {
        "documentation": "Sets the bitmap displayed for the item",
        "label": "_GUICtrlMenu_SetItemBmp ( $hMenu, $iItem, $hBitmap [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the item bitmap"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemBmpChecked": {
        "documentation": "Sets the bitmap displayed if the item is selected",
        "label": "_GUICtrlMenu_SetItemBmpChecked ( $hMenu, $iItem, $hBitmap [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap to display next to the item if it is selected"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemBmpUnchecked": {
        "documentation": "Sets the bitmap displayed if the item is not selected",
        "label": "_GUICtrlMenu_SetItemBmpUnchecked ( $hMenu, $iItem, $hBitmap [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap to display next to the item if it is not selected"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemChecked": {
        "documentation": "Sets the checked state of a menu item",
        "label": "_GUICtrlMenu_SetItemChecked ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** True to set state, otherwise False"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemData": {
        "documentation": "Sets the application defined value for a menu item",
        "label": "_GUICtrlMenu_SetItemData ( $hMenu, $iItem, $iData [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$iData",
            "documentation": "Application defined value"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemDefault": {
        "documentation": "Sets the status of the menu item default state",
        "label": "_GUICtrlMenu_SetItemDefault ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** Item state to set:    True - State is enabled    False - State is disabled"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemDisabled": {
        "documentation": "Sets the disabled state of a menu item",
        "label": "_GUICtrlMenu_SetItemDisabled ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** True to set state, otherwise False"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemEnabled": {
        "documentation": "Sets the enabled state of a menu item",
        "label": "_GUICtrlMenu_SetItemEnabled ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** Item state to set:    True - State is enabled    False - State is disabled"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemGrayed": {
        "documentation": "Sets the grayed state of a menu item",
        "label": "_GUICtrlMenu_SetItemGrayed ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** Item state to set:    True - State is enabled    False - State is disabled"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemHighlighted": {
        "documentation": "Sets the highlighted state of a menu item",
        "label": "_GUICtrlMenu_SetItemHighlighted ( $hMenu, $iItem [, $bState = True [, $bByPos = True]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** Item state to set:    True - State is enabled    False - State is disabled"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemID": {
        "documentation": "Sets the menu item ID",
        "label": "_GUICtrlMenu_SetItemID ( $hMenu, $iItem, $iID [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$iID",
            "documentation": "Menu item ID"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemInfo": {
        "documentation": "Changes information about a menu item",
        "label": "_GUICtrlMenu_SetItemInfo ( $hMenu, $iItem, ByRef $tInfo [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$tInfo",
            "documentation": "$tagMENUITEMINFO structure"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemState": {
        "documentation": "Sets the state of a menu item",
        "label": "_GUICtrlMenu_SetItemState ( $hMenu, $iItem, $iState [, $bState = True [, $bByPos = True]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$iState",
            "documentation": "Menu item state:    $MFS_CHECKED - Item is checked    $MFS_DEFAULT - Item is the default item    $MFS_DISABLED - Item is disabled    $MFS_GRAYED - Item is disabled    $MFS_HILITE - Item is highlighted"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** Item state to set:    True - State is enabled    False - State is disabled"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemSubMenu": {
        "documentation": "Sets the drop down menu or submenu associated with the menu item",
        "label": "_GUICtrlMenu_SetItemSubMenu ( $hMenu, $iItem, $hSubMenu [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$hSubMenu",
            "documentation": "Handle to the drop down menu or submenu"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemText": {
        "documentation": "Sets the text for a menu item",
        "label": "_GUICtrlMenu_SetItemText ( $hMenu, $iItem, $sText [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$sText",
            "documentation": "Menu item text"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetItemType": {
        "documentation": "Sets the menu item type",
        "label": "_GUICtrlMenu_SetItemType ( $hMenu, $iItem, $iType [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the menu item"
        }, {
            "label": "$iType",
            "documentation": "Menu item type. This can be one or more of the following values:    $MFT_BITMAP - Item is displayed using a bitmap    $MFT_MENUBARBREAK - Item is placed on a new line. A vertical line separates the new column from the old.    $MFT_MENUBREAK - Item is placed on a new line. The columns are not separated by a vertical line.    $MFT_OWNERDRAW - Item is owner drawn    $MFT_RADIOCHECK - Item is displayed using a radio button mark    $MFT_RIGHTJUSTIFY - Item is right justified    $MFT_RIGHTORDER - Item cascades from right to left    $MFT_SEPARATOR - Item is a separator"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetMenu": {
        "documentation": "Assigns a new menu to the specified window",
        "label": "_GUICtrlMenu_SetMenu ( $hWnd, $hMenu )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to which the menu is to be assigned"
        }, {
            "label": "$hMenu",
            "documentation": "Handle to the new menu. If 0, the window's current menu is removed."
        }]
    },
    "_GUICtrlMenu_SetMenuBackground": {
        "documentation": "Sets the background brush for the menu",
        "label": "_GUICtrlMenu_SetMenuBackground ( $hMenu, $hBrush )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$hBrush",
            "documentation": "Brush to use for the background"
        }]
    },
    "_GUICtrlMenu_SetMenuContextHelpID": {
        "documentation": "Sets the context help identifier for the menu",
        "label": "_GUICtrlMenu_SetMenuContextHelpID ( $hMenu, $iHelpID )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iHelpID",
            "documentation": "Context help ID"
        }]
    },
    "_GUICtrlMenu_SetMenuData": {
        "documentation": "Sets the application defined for the menu",
        "label": "_GUICtrlMenu_SetMenuData ( $hMenu, $iData )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iData",
            "documentation": "Application defined data"
        }]
    },
    "_GUICtrlMenu_SetMenuDefaultItem": {
        "documentation": "Sets the default menu item",
        "label": "_GUICtrlMenu_SetMenuDefaultItem ( $hMenu, $iItem [, $bByPos = True] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$iItem",
            "documentation": "Identifier or position of the default menu item or -1 for no default item"
        }, {
            "label": "$bByPos",
            "documentation": "**[optional]** Menu identifier flag:    True - $iItem is a 0-based item position    False - $iItem is a menu item identifier"
        }]
    },
    "_GUICtrlMenu_SetMenuHeight": {
        "documentation": "Sets the maximum height of the menu",
        "label": "_GUICtrlMenu_SetMenuHeight ( $hMenu, $iHeight )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iHeight",
            "documentation": "Maximum height of the menu"
        }]
    },
    "_GUICtrlMenu_SetMenuInfo": {
        "documentation": "Sets information for a specified menu",
        "label": "_GUICtrlMenu_SetMenuInfo ( $hMenu, ByRef $tInfo )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Menu handle"
        }, {
            "label": "$tInfo",
            "documentation": "$tagMENUINFO structure"
        }]
    },
    "_GUICtrlMenu_SetMenuStyle": {
        "documentation": "Sets the menu style",
        "label": "_GUICtrlMenu_SetMenuStyle ( $hMenu, $iStyle )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle of the menu"
        }, {
            "label": "$iStyle",
            "documentation": "Style of the menu."
        }]
    },
    "_GUICtrlMenu_TrackPopupMenu": {
        "documentation": "Displays a shortcut menu at the specified location",
        "label": "_GUICtrlMenu_TrackPopupMenu ( $hMenu, $hWnd [, $iX = -1 [, $iY = -1 [, $iAlignX = 1 [, $iAlignY = 1 [, $iNotify = 0 [, $iButtons = 0]]]]]] )",
        "params": [{
            "label": "$hMenu",
            "documentation": "Handle to the shortcut menu to be displayed"
        }, {
            "label": "$hWnd",
            "documentation": "Handle to the window that owns the shortcut menu"
        }, {
            "label": "$iX",
            "documentation": "**[optional]** Specifies the horizontal location of the shortcut menu, in screen coordinates.If this is -1, the current mouse position is used."
        }, {
            "label": "$iY",
            "documentation": "**[optional]** Specifies the vertical location of the shortcut menu, in screen coordinates.If this is -1, the current mouse position is used."
        }, {
            "label": "$iAlignX",
            "documentation": "**[optional]** Specifies how to position the menu horizontally:    0 - Center the menu horizontally relative to $iX    1 - Position the menu so that its left side is aligned with $iX    2 - Position the menu so that its right side is aligned with $iX"
        }, {
            "label": "$iAlignY",
            "documentation": "**[optional]** Specifies how to position the menu vertically:    0 - Position the menu so that its bottom side is aligned with $iY    1 - Position the menu so that its top side is aligned with $iY    2 - Center the menu vertically relative to $iY"
        }, {
            "label": "$iNotify",
            "documentation": "**[optional]** Use to determine the selection withouta parent window:    1 - Do not send notification messages    2 - Return the menu item identifier of the user's selection"
        }, {
            "label": "$iButtons",
            "documentation": "**[optional]** Mouse button the shortcut menu tracks:    0 - The user can select items with only the left mouse button    1 - The user can select items with both left and right buttons"
        }]
    },
    "_GUICtrlMonthCal_Create": {
        "documentation": "Creates a Month Calendar control",
        "label": "_GUICtrlMonthCal_Create ( $hWnd, $iX, $iY [, $iStyle = 0x00000000 [, $iExStyle = 0x00000000]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control styles:    $MCS_DAYSTATE - The month calendar will send $MCN_GETDAYSTATE notifications to request information about which days should be displayed in bold.    $MCS_MULTISELECT - The month calendar will allow the user to select a range of dates within the control    $MCS_WEEKNUMBERS - The month calendar control will display week numbers to the left of each row of days    $MCS_NOTODAYCIRCLE - The month calendar control will not circle the \"today\" date    $MCS_NOTODAY - The month calendar control will not display the \"today\" date at the bottomForced: $WS_CHILD, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table."
        }]
    },
    "_GUICtrlMonthCal_Destroy": {
        "documentation": "Delete the MonthCal control",
        "label": "_GUICtrlMonthCal_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetCalendarBorder": {
        "documentation": "Gets the size of the border, in pixels",
        "label": "_GUICtrlMonthCal_GetCalendarBorder ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetCalendarCount": {
        "documentation": "Gets the number of calendars currently displayed in the calendar control",
        "label": "_GUICtrlMonthCal_GetCalendarCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetColor": {
        "documentation": "Retrieves a given color for the control",
        "label": "_GUICtrlMonthCal_GetColor ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Indicates which month calendar color to retrieve:    $MCSC_BACKGROUND - Background color displayed between months    $MCSC_TEXT - Color used to display text within a month    $MCSC_TITLEBK - Background color displayed in the calendar title    $MCSC_TITLETEXT - Color used to display text within the calendar title    $MCSC_MONTHBK - Background color displayed within the month    $MCSC_TRAILINGTEXT - Color used to display header day and trailing day text"
        }]
    },
    "_GUICtrlMonthCal_GetColorArray": {
        "documentation": "Retrieves the color for a given portion of a month calendar control",
        "label": "_GUICtrlMonthCal_GetColorArray ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "Value of type int specifying which month calendar color to retrieveThis value can be one of the following:    $MCSC_BACKGROUND - Retrieve the background color displayed between months.    $MCSC_MONTHBK - Retrieve the background color displayed within the month.    $MCSC_TEXT - Retrieve the color used to display text within a month.    $MCSC_TITLEBK - Retrieve the background color displayed in the calendar's title.    $MCSC_TITLETEXT - Retrieve the color used to display text within the calendar's title.    $MCSC_TRAILINGTEXT - Retrieve the color used to display header day and trailing day text."
        }]
    },
    "_GUICtrlMonthCal_GetCurSel": {
        "documentation": "Retrieves the currently selected date",
        "label": "_GUICtrlMonthCal_GetCurSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetCurSelStr": {
        "documentation": "Retrieves the currently selected date in string format",
        "label": "_GUICtrlMonthCal_GetCurSelStr ( $hWnd [, $sFormat = \"%02d/%02d/%04d\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** StringFormat string used to format the date"
        }]
    },
    "_GUICtrlMonthCal_GetFirstDOW": {
        "documentation": "Retrieves the first day of the week",
        "label": "_GUICtrlMonthCal_GetFirstDOW ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetFirstDOWStr": {
        "documentation": "Retrieves the first day of the week as a string",
        "label": "_GUICtrlMonthCal_GetFirstDOWStr ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetMaxSelCount": {
        "documentation": "Retrieves the maximum date range that can be selected in a month calendar control",
        "label": "_GUICtrlMonthCal_GetMaxSelCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetMaxTodayWidth": {
        "documentation": "Retrieves the maximum width of the \"today\" string in a month calendar control",
        "label": "_GUICtrlMonthCal_GetMaxTodayWidth ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetMinReqHeight": {
        "documentation": "Retrieves the minimum height required to display a full month",
        "label": "_GUICtrlMonthCal_GetMinReqHeight ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetMinReqRect": {
        "documentation": "Retrieves the minimum size required to display a full month",
        "label": "_GUICtrlMonthCal_GetMinReqRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetMinReqRectArray": {
        "documentation": "Retrieves the minimum size required to display a full month in a month calendar control",
        "label": "_GUICtrlMonthCal_GetMinReqRectArray ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetMinReqWidth": {
        "documentation": "Retrieves the minimum width required to display a full month",
        "label": "_GUICtrlMonthCal_GetMinReqWidth ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetMonthDelta": {
        "documentation": "Retrieves the scroll rate for a month calendar control",
        "label": "_GUICtrlMonthCal_GetMonthDelta ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetMonthRange": {
        "documentation": "Retrieves date information that represents the high and low display limits",
        "label": "_GUICtrlMonthCal_GetMonthRange ( $hWnd [, $bPartial = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bPartial",
            "documentation": "**[optional]** Specifies the scope of the range limits to be retrieved:    True - Preceding and trailing months are included    False - Only months that are entirely displayed are included"
        }]
    },
    "_GUICtrlMonthCal_GetMonthRangeMax": {
        "documentation": "Retrieves date information that represents the high limit of the controls display",
        "label": "_GUICtrlMonthCal_GetMonthRangeMax ( $hWnd [, $bPartial = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bPartial",
            "documentation": "**[optional]** Specifies the scope of the range limits to be retrieved:    True - Preceding and trailing months are included    False - Only months that are entirely displayed are included"
        }]
    },
    "_GUICtrlMonthCal_GetMonthRangeMaxStr": {
        "documentation": "Retrieves date information that represents the high limit of the controls display in string format",
        "label": "_GUICtrlMonthCal_GetMonthRangeMaxStr ( $hWnd [, $sFormat = \"%02d/%02d/%04d\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** StringFormat string used to format the date"
        }]
    },
    "_GUICtrlMonthCal_GetMonthRangeMin": {
        "documentation": "Retrieves date information that represents the low limit of the controls display",
        "label": "_GUICtrlMonthCal_GetMonthRangeMin ( $hWnd [, $bPartial = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bPartial",
            "documentation": "**[optional]** Specifies the scope of the range limits to be retrieved:    True - Preceding and trailing months are included    False - Only months that are entirely displayed are included"
        }]
    },
    "_GUICtrlMonthCal_GetMonthRangeMinStr": {
        "documentation": "Retrieves date information that represents the low limit of the controls display in string format",
        "label": "_GUICtrlMonthCal_GetMonthRangeMinStr ( $hWnd [, $sFormat = \"%02d/%02d/%04d\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** StringFormat string used to format the date"
        }]
    },
    "_GUICtrlMonthCal_GetMonthRangeSpan": {
        "documentation": "Returns a value that represents the range, in months, spanned",
        "label": "_GUICtrlMonthCal_GetMonthRangeSpan ( $hWnd [, $bPartial = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bPartial",
            "documentation": "**[optional]** Specifies the scope of the range limits to be retrieved:    True - Preceding and trailing months are included    False - Only months that are entirely displayed are included"
        }]
    },
    "_GUICtrlMonthCal_GetRange": {
        "documentation": "Retrieves the minimum and maximum allowable dates",
        "label": "_GUICtrlMonthCal_GetRange ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetRangeMax": {
        "documentation": "Retrieves the upper limit date range",
        "label": "_GUICtrlMonthCal_GetRangeMax ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetRangeMaxStr": {
        "documentation": "Retrieves the upper limit date range in string format",
        "label": "_GUICtrlMonthCal_GetRangeMaxStr ( $hWnd [, $sFormat = \"%02d/%02d/%04d\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** StringFormat string used to format the date"
        }]
    },
    "_GUICtrlMonthCal_GetRangeMin": {
        "documentation": "Retrieves the lower limit date range",
        "label": "_GUICtrlMonthCal_GetRangeMin ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetRangeMinStr": {
        "documentation": "Retrieves the lower limit date range in string form",
        "label": "_GUICtrlMonthCal_GetRangeMinStr ( $hWnd [, $sFormat = \"%02d/%02d/%04d\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** StringFormat string used to format the date"
        }]
    },
    "_GUICtrlMonthCal_GetSelRange": {
        "documentation": "Retrieves the upper and lower limits of the date range currently selected",
        "label": "_GUICtrlMonthCal_GetSelRange ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetSelRangeMax": {
        "documentation": "Retrieves the upper date range currently selected by the user",
        "label": "_GUICtrlMonthCal_GetSelRangeMax ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetSelRangeMaxStr": {
        "documentation": "Retrieves the upper date range currently selected by the user in string form",
        "label": "_GUICtrlMonthCal_GetSelRangeMaxStr ( $hWnd [, $sFormat = \"%02d/%02d/%04d\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** StringFormat string used to format the date"
        }]
    },
    "_GUICtrlMonthCal_GetSelRangeMin": {
        "documentation": "Retrieves the lower date range currently selected by the user",
        "label": "_GUICtrlMonthCal_GetSelRangeMin ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetSelRangeMinStr": {
        "documentation": "Retrieves the lower date range currently selected by the user in string form",
        "label": "_GUICtrlMonthCal_GetSelRangeMinStr ( $hWnd [, $sFormat = \"%02d/%02d/%04d\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** StringFormat string used to format the date"
        }]
    },
    "_GUICtrlMonthCal_GetToday": {
        "documentation": "Retrieves the date information for the date specified as \"today\"",
        "label": "_GUICtrlMonthCal_GetToday ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_GetTodayStr": {
        "documentation": "Retrieves the date information for the date specified as \"today\" in string format",
        "label": "_GUICtrlMonthCal_GetTodayStr ( $hWnd [, $sFormat = \"%02d/%02d/%04d\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** StringFormat string used to format the date"
        }]
    },
    "_GUICtrlMonthCal_GetUnicodeFormat": {
        "documentation": "Retrieves the Unicode character format flag for the control",
        "label": "_GUICtrlMonthCal_GetUnicodeFormat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlMonthCal_HitTest": {
        "documentation": "Determines which portion of a month calendar control is at a given point",
        "label": "_GUICtrlMonthCal_HitTest ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X position to test"
        }, {
            "label": "$iY",
            "documentation": "Y position to test"
        }]
    },
    "_GUICtrlMonthCal_SetCalendarBorder": {
        "documentation": "Sets the size of the border, in pixels",
        "label": "_GUICtrlMonthCal_SetCalendarBorder ( $hWnd [, $iBorderSize = 4 [, $bSetBorder = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iBorderSize",
            "documentation": "**[optional]** Number of pixels of the border size"
        }, {
            "label": "$bSetBorder",
            "documentation": "**[optional]** One of the Following:    True - The border size is set to the number of pixels that $iBorderSize specifies    False - The border size is reset to the default value specified by the theme, or zero if themes are not being used"
        }]
    },
    "_GUICtrlMonthCal_SetColor": {
        "documentation": "Sets the color for a given portion of the month calendar",
        "label": "_GUICtrlMonthCal_SetColor ( $hWnd, $iIndex, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Indicates which month calendar color to set:    $MCSC_BACKGROUND - Background color displayed between months    $MCSC_TEXT - Color used to display text within a month    $MCSC_TITLEBK - Background color displayed in the calendar title    $MCSC_TITLETEXT - Color used to display text within the calendar title    $MCSC_MONTHBK - Background color displayed within the month    $MCSC_TRAILINGTEXT - Color used to display header day and trailing day text"
        }, {
            "label": "$iColor",
            "documentation": "Color value"
        }]
    },
    "_GUICtrlMonthCal_SetCurSel": {
        "documentation": "Sets the currently selected date",
        "label": "_GUICtrlMonthCal_SetCurSel ( $hWnd, $iYear, $iMonth, $iDay )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iYear",
            "documentation": "Year value"
        }, {
            "label": "$iMonth",
            "documentation": "Month value"
        }, {
            "label": "$iDay",
            "documentation": "Day value"
        }]
    },
    "_GUICtrlMonthCal_SetDayState": {
        "documentation": "Sets the day states for all months that are currently visible",
        "label": "_GUICtrlMonthCal_SetDayState ( $hWnd, $aMasks )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$aMasks",
            "documentation": "An array of integers that corresponds to the months that are visible in the calendar"
        }]
    },
    "_GUICtrlMonthCal_SetFirstDOW": {
        "documentation": "Sets the first day of the week for a month calendar control",
        "label": "_GUICtrlMonthCal_SetFirstDOW ( $hWnd, $sDay )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sDay",
            "documentation": "In the following format:    0 or \"Monday\"    1 or \"Tuesday\"    2 or \"Wednesday\"    3 or \"Thursday\"    4 or \"Friday\"    5 or \"Saturday\"    6 or \"Sunday\""
        }]
    },
    "_GUICtrlMonthCal_SetMaxSelCount": {
        "documentation": "Sets the maximum number of days that can be selected in a month calendar control",
        "label": "_GUICtrlMonthCal_SetMaxSelCount ( $hWnd, $iMaxSel )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMaxSel",
            "documentation": "Value of type int that will be set to represent the maximum number of days that can be selected"
        }]
    },
    "_GUICtrlMonthCal_SetMonthDelta": {
        "documentation": "Sets the scroll rate for a month calendar control",
        "label": "_GUICtrlMonthCal_SetMonthDelta ( $hWnd, $iDelta )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iDelta",
            "documentation": "Value representing the number of months to be set as the control's scroll rate.If this value is zero, the month delta is reset to the default which is the number of months displayed in the control."
        }]
    },
    "_GUICtrlMonthCal_SetRange": {
        "documentation": "Sets date information that represents the high and low limits",
        "label": "_GUICtrlMonthCal_SetRange ( $hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMinYear",
            "documentation": "Minimum year"
        }, {
            "label": "$iMinMonth",
            "documentation": "Minimum month"
        }, {
            "label": "$iMinDay",
            "documentation": "Minimum day"
        }, {
            "label": "$iMaxYear",
            "documentation": "Maximum year"
        }, {
            "label": "$iMaxMonth",
            "documentation": "Maximum month"
        }, {
            "label": "$iMaxDay",
            "documentation": "Maximum day"
        }]
    },
    "_GUICtrlMonthCal_SetSelRange": {
        "documentation": "Sets the selection for a month calendar control to a given date range",
        "label": "_GUICtrlMonthCal_SetSelRange ( $hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMinYear",
            "documentation": "Minimum year"
        }, {
            "label": "$iMinMonth",
            "documentation": "Minimum month"
        }, {
            "label": "$iMinDay",
            "documentation": "Minimum day"
        }, {
            "label": "$iMaxYear",
            "documentation": "Maximum year"
        }, {
            "label": "$iMaxMonth",
            "documentation": "Maximum month"
        }, {
            "label": "$iMaxDay",
            "documentation": "Maximum day"
        }]
    },
    "_GUICtrlMonthCal_SetToday": {
        "documentation": "Sets the date information for the date specified as \"today\"",
        "label": "_GUICtrlMonthCal_SetToday ( $hWnd, $iYear, $iMonth, $iDay )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iYear",
            "documentation": "Year"
        }, {
            "label": "$iMonth",
            "documentation": "Month"
        }, {
            "label": "$iDay",
            "documentation": "Day"
        }]
    },
    "_GUICtrlMonthCal_SetUnicodeFormat": {
        "documentation": "Sets the Unicode character format flag for the control",
        "label": "_GUICtrlMonthCal_SetUnicodeFormat ( $hWnd [, $bUnicode = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bUnicode",
            "documentation": "**[optional]** Unicode format flag:    True - Control uses Unicode characters    False - Control uses ANSI characters"
        }]
    },
    "_GUICtrlRebar_AddBand": {
        "documentation": "Adds a new band in a rebar control",
        "label": "_GUICtrlRebar_AddBand ( $hWndRebar, $hWndChild [, $iMinWidth = 100 [, $iDefaultWidth = 100 [, $sText = \"\" [, $iIndex = -1 [, $iStyle = -1]]]]] )",
        "params": [{
            "label": "$hWndRebar",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$hWndChild",
            "documentation": "Handle of control to add"
        }, {
            "label": "$iMinWidth",
            "documentation": "**[optional]** Minimum width for the band"
        }, {
            "label": "$iDefaultWidth",
            "documentation": "**[optional]** Length of the band, in pixels"
        }, {
            "label": "$sText",
            "documentation": "**[optional]** Display text for the band"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** 0-based index of the location where the band will be inserted.If you set this parameter to -1, the control will add the new band at the last location"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Flags that specify the band style. This value can be a combination of the following:    $RBBS_BREAK - The band is on a new line.    $RBBS_CHILDEDGE - The band has an edge at the top and bottom of the child window.    $RBBS_FIXEDBMP - The background bitmap does not move when the band is resized.    $RBBS_FIXEDSIZE - The band can't be sized. With this style, the sizing grip is not displayed on the band.    $RBBS_GRIPPERALWAYS - Version 4.71. The band will always have a sizing grip, even if it is the only band in the rebar.    $RBBS_HIDDEN - The band will not be visible.    $RBBS_NOGRIPPER - Version 4.71. The band will never have a sizing grip, even if there is more than one band in the rebar.    $RBBS_USECHEVRON - Version 5.80. Show a chevron button if the band is smaller than cxIdeal.    $RBBS_VARIABLEHEIGHT - Version 4.71. The band can be resized by the rebar control; cyIntegral and cyMaxChild affect how the rebar will resize the band.    $RBBS_NOVERT - Don't show when vertical.    $RBBS_USECHEVRON - Display drop-down button.    $RBBS_HIDETITLE - Keep band title hidden.    $RBBS_TOPALIGN - Keep band in top row."
        }]
    },
    "_GUICtrlRebar_AddToolBarBand": {
        "documentation": "Adds a new band in a rebar control",
        "label": "_GUICtrlRebar_AddToolBarBand ( $hWndRebar, $hWndToolbar [, $sText = \"\" [, $iIndex = -1 [, $iStyle = -1]]] )",
        "params": [{
            "label": "$hWndRebar",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$hWndToolbar",
            "documentation": "Handle of the Toolbar control to add"
        }, {
            "label": "$sText",
            "documentation": "**[optional]** Display text for the band"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** 0-based index of the location where the band will be inserted.If you set this parameter to -1, the control will add the new band at the last location"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Flags that specify the band style. This value can be a combination of the following:    $RBBS_BREAK - The band is on a new line.    $RBBS_CHILDEDGE - The band has an edge at the top and bottom of the child window.    $RBBS_FIXEDBMP - The background bitmap does not move when the band is resized.    $RBBS_FIXEDSIZE - The band can't be sized. With this style, the sizing grip is not displayed on the band.    $RBBS_GRIPPERALWAYS - Version 4.71. The band will always have a sizing grip, even if it is the only band in the rebar.    $RBBS_HIDDEN - The band will not be visible.    $RBBS_NOGRIPPER - Version 4.71. The band will never have a sizing grip, even if there is more than one band in the rebar.    $RBBS_USECHEVRON - Version 5.80. Show a chevron button if the band is smaller than cxIdeal.    $RBBS_VARIABLEHEIGHT - Version 4.71. The band can be resized by the rebar control; cyIntegral and cyMaxChild affect how the rebar will resize the band.    $RBBS_NOVERT - Don't show when vertical.    $RBBS_USECHEVRON - Display drop-down button.    $RBBS_HIDETITLE - Keep band title hidden.    $RBBS_TOPALIGN - Keep band in top row."
        }]
    },
    "_GUICtrlRebar_BeginDrag": {
        "documentation": "Adds a new band in a rebar control",
        "label": "_GUICtrlRebar_BeginDrag ( $hWnd, $iIndex [, $iPos = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band that the drag-and-drop operation will affect"
        }, {
            "label": "$iPos",
            "documentation": "**[optional]** DWORD value that contains the starting mouse coordinates.The horizontal coordinate is contained in the LOWORD and the vertical coordinate is contained in the HIWORD.If you pass (DWORD)-1, the rebar control will use the position of the mouse the last time the control's thread called GetMessage or PeekMessage"
        }]
    },
    "_GUICtrlRebar_Create": {
        "documentation": "Create a Rebar control",
        "label": "_GUICtrlRebar_Create ( $hWnd [, $iStyles = 0x513] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$iStyles",
            "documentation": "**[optional]** Rebar controls support a variety of control styles in addition to standard window styles:    $RBS_AUTOSIZE - Version 4.71. The rebar control will automatically change the layout of the bands when the size or position of the control changes.        An $RBN_AUTOSIZE notification will be sent when this occurs    $RBS_BANDBORDERS - Version 4.71. The rebar control displays narrow lines to separate adjacent bands    $RBS_DBLCLKTOGGLE - Version 4.71. The rebar band will toggle its maximized or minimized state when the user double-clicks the band.        Without this style, the maximized or minimized state is toggled when the user single-clicks on the band    $RBS_FIXEDORDER - Version 4.70. The rebar control always displays bands in the same order. You can move bands to different rows, but the band order is static    $RBS_REGISTERDROP - Version 4.71. The rebar control generates $RBN_GETOBJECT notification messages when an object is dragged over a band in the control    $RBS_TOOLTIPS - Version 4.71. Not yet supported    $RBS_VARHEIGHT - Version 4.71. The rebar control displays bands at the minimum required height, when possible.        Without this style, the rebar control displays all bands at the same height, using the height of the tallest visible band to determine the height of other bands    $RBS_VERTICALGRIPPER - Version 4.71. The size grip will be displayed vertically instead of horizontally in a vertical rebar control.        This style is ignored for rebar controls that do not have the $CCS_VERT style    $CCS_LEFT - Version 4.70. Causes the control to be displayed vertically on the left side of the parent window    $CCS_NODIVIDER - Prevents a two-pixel highlight from being drawn at the top of the control    $CCS_RIGHT - Version 4.70. Causes the control to be displayed vertically on the right side of the parent window    $CCS_VERT - Version 4.70. Causes the control to be displayed verticallyDefault: $CCS_TOP, $RBS_VARHEIGHTForced: $WS_CHILD, $WS_VISIBLE, $WS_CLIPCHILDREN, $WS_CLIPSIBLINGS"
        }]
    },
    "_GUICtrlRebar_DeleteBand": {
        "documentation": "Deletes a band from a rebar control",
        "label": "_GUICtrlRebar_DeleteBand ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band to be deleted"
        }]
    },
    "_GUICtrlRebar_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlRebar_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_DragMove": {
        "documentation": "Updates the drag position in the rebar control after a previous _GUICtrlRebar_BeginDrag message",
        "label": "_GUICtrlRebar_DragMove ( $hWnd [, $iPos = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iPos",
            "documentation": "**[optional]** DWORD value that contains the new mouse coordinates.The horizontal coordinate is contained in the LOWORD and the vertical coordinate is contained in the HIWORD.If you pass (DWORD)-1, the rebar control will use the position of the mouse the last time the control's thread called GetMessage or PeekMessage"
        }]
    },
    "_GUICtrlRebar_EndDrag": {
        "documentation": "Terminates the rebar control's drag-and-drop operation",
        "label": "_GUICtrlRebar_EndDrag ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetBandBackColor": {
        "documentation": "Retrieves the Band background color",
        "label": "_GUICtrlRebar_GetBandBackColor ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandBorders": {
        "documentation": "Retrieves the borders of a band",
        "label": "_GUICtrlRebar_GetBandBorders ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band for which the borders will be retrieved"
        }]
    },
    "_GUICtrlRebar_GetBandBordersEx": {
        "documentation": "Retrieves the borders of a band",
        "label": "_GUICtrlRebar_GetBandBordersEx ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band for which the borders will be retrieved"
        }]
    },
    "_GUICtrlRebar_GetBandChildHandle": {
        "documentation": "Retrieves the Handle to the child window contained in the band, if any",
        "label": "_GUICtrlRebar_GetBandChildHandle ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band for which the borders will be retrieved"
        }]
    },
    "_GUICtrlRebar_GetBandChildSize": {
        "documentation": "Retrieves the Child size settings",
        "label": "_GUICtrlRebar_GetBandChildSize ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandCount": {
        "documentation": "Retrieves the count of bands currently in the rebar control",
        "label": "_GUICtrlRebar_GetBandCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetBandForeColor": {
        "documentation": "Retrieves the Band foreground color",
        "label": "_GUICtrlRebar_GetBandForeColor ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandHeaderSize": {
        "documentation": "Retrieves the size of the band's header, in pixels",
        "label": "_GUICtrlRebar_GetBandHeaderSize ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandID": {
        "documentation": "Get the value that the control uses to identify this band for custom draw notification messages",
        "label": "_GUICtrlRebar_GetBandID ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandIdealSize": {
        "documentation": "Get Ideal width of the band, in pixels",
        "label": "_GUICtrlRebar_GetBandIdealSize ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandLength": {
        "documentation": "Get Length of the band, in pixels",
        "label": "_GUICtrlRebar_GetBandLength ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandLParam": {
        "documentation": "Get Application-defined value",
        "label": "_GUICtrlRebar_GetBandLParam ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandMargins": {
        "documentation": "Get Length of the band, in pixels",
        "label": "_GUICtrlRebar_GetBandMargins ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetBandMarginsEx": {
        "documentation": "Get Length of the band, in pixels",
        "label": "_GUICtrlRebar_GetBandMarginsEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetBandRect": {
        "documentation": "Retrieves the bounding rectangle for a given band in a rebar control",
        "label": "_GUICtrlRebar_GetBandRect ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of a band in the rebar control"
        }]
    },
    "_GUICtrlRebar_GetBandRectEx": {
        "documentation": "Retrieves the bounding rectangle for a given band in a rebar control",
        "label": "_GUICtrlRebar_GetBandRectEx ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of a band in the rebar control"
        }]
    },
    "_GUICtrlRebar_GetBandStyle": {
        "documentation": "Get the band style Flags",
        "label": "_GUICtrlRebar_GetBandStyle ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleBreak": {
        "documentation": "Determine if band break flag is set",
        "label": "_GUICtrlRebar_GetBandStyleBreak ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleChildEdge": {
        "documentation": "Determine if band child edge flag is set",
        "label": "_GUICtrlRebar_GetBandStyleChildEdge ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleFixedBMP": {
        "documentation": "Determine if band fixed BMP flag is set",
        "label": "_GUICtrlRebar_GetBandStyleFixedBMP ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleFixedSize": {
        "documentation": "Determine if band fixed size flag is set",
        "label": "_GUICtrlRebar_GetBandStyleFixedSize ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleGripperAlways": {
        "documentation": "Determine if band gripper flag is set",
        "label": "_GUICtrlRebar_GetBandStyleGripperAlways ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleHidden": {
        "documentation": "Determine if band hidden flag is set",
        "label": "_GUICtrlRebar_GetBandStyleHidden ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleHideTitle": {
        "documentation": "Determine if band hide title flag is set",
        "label": "_GUICtrlRebar_GetBandStyleHideTitle ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleNoGripper": {
        "documentation": "Determine if band noGripper flag is set",
        "label": "_GUICtrlRebar_GetBandStyleNoGripper ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleTopAlign": {
        "documentation": "Determine if band top align flag is set",
        "label": "_GUICtrlRebar_GetBandStyleTopAlign ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleUseChevron": {
        "documentation": "Determine if band use chevron flag is set",
        "label": "_GUICtrlRebar_GetBandStyleUseChevron ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandStyleVariableHeight": {
        "documentation": "Determine if band variable height flag is set",
        "label": "_GUICtrlRebar_GetBandStyleVariableHeight ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_GetBandText": {
        "documentation": "Retrieves the display text for the band",
        "label": "_GUICtrlRebar_GetBandText ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band for which the information will be retrieved"
        }]
    },
    "_GUICtrlRebar_GetBarHeight": {
        "documentation": "Retrieves the height of the rebar control",
        "label": "_GUICtrlRebar_GetBarHeight ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetBarInfo": {
        "documentation": "Retrieves information about the rebar control and the image list it uses",
        "label": "_GUICtrlRebar_GetBarInfo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetBKColor": {
        "documentation": "Retrieves a rebar control's default background color",
        "label": "_GUICtrlRebar_GetBKColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetColorScheme": {
        "documentation": "Retrieves the color scheme information from the rebar control",
        "label": "_GUICtrlRebar_GetColorScheme ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetRowCount": {
        "documentation": "Retrieves the number of rows of bands in a rebar control",
        "label": "_GUICtrlRebar_GetRowCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetRowHeight": {
        "documentation": "Retrieves the height of a specified row in a rebar control",
        "label": "_GUICtrlRebar_GetRowHeight ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of a band. The height of the row that contains the specified band will be retrieved"
        }]
    },
    "_GUICtrlRebar_GetTextColor": {
        "documentation": "Retrieves a rebar control's default text color",
        "label": "_GUICtrlRebar_GetTextColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetToolTips": {
        "documentation": "Retrieves the handle to any ToolTip control associated with the rebar control",
        "label": "_GUICtrlRebar_GetToolTips ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_GetUnicodeFormat": {
        "documentation": "Retrieves the Unicode character format flag for the control",
        "label": "_GUICtrlRebar_GetUnicodeFormat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }]
    },
    "_GUICtrlRebar_HitTest": {
        "documentation": "Determines which band is at a specified position",
        "label": "_GUICtrlRebar_HitTest ( $hWnd [, $iX = -1 [, $iY = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iX",
            "documentation": "**[optional]** X position, in client coordinates, to be tested or -1 to use the current mouse position"
        }, {
            "label": "$iY",
            "documentation": "**[optional]** Y position, in client coordinates, to be tested or -1 to use the current mouse position"
        }]
    },
    "_GUICtrlRebar_IDToIndex": {
        "documentation": "Converts a band identifier to a band index in a rebar control",
        "label": "_GUICtrlRebar_IDToIndex ( $hWnd, $iID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iID",
            "documentation": "The application-defined identifier of the band in question"
        }]
    },
    "_GUICtrlRebar_MaximizeBand": {
        "documentation": "Resizes a band in a rebar control to either its ideal or largest size",
        "label": "_GUICtrlRebar_MaximizeBand ( $hWnd, $iIndex [, $bIdeal = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bIdeal",
            "documentation": "**[optional]** Indicates if the ideal width of the band should be used when the band is maximized"
        }]
    },
    "_GUICtrlRebar_MinimizeBand": {
        "documentation": "Resizes a band in a rebar control to its smallest size",
        "label": "_GUICtrlRebar_MinimizeBand ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }]
    },
    "_GUICtrlRebar_MoveBand": {
        "documentation": "Moves a band from one index to another",
        "label": "_GUICtrlRebar_MoveBand ( $hWnd, $iIndexFrom, $iIndexTo )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndexFrom",
            "documentation": "0-based index of the band to be moved"
        }, {
            "label": "$iIndexTo",
            "documentation": "0-based index of the new band position"
        }]
    },
    "_GUICtrlRebar_SetBandBackColor": {
        "documentation": "Set the Band background color",
        "label": "_GUICtrlRebar_SetBandBackColor ( $hWnd, $iIndex, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$iColor",
            "documentation": "New color for band background"
        }]
    },
    "_GUICtrlRebar_SetBandForeColor": {
        "documentation": "Set the Band foreground color",
        "label": "_GUICtrlRebar_SetBandForeColor ( $hWnd, $iIndex, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$iColor",
            "documentation": "New color for band foreground"
        }]
    },
    "_GUICtrlRebar_SetBandHeaderSize": {
        "documentation": "Set the size of the band's header, in pixels",
        "label": "_GUICtrlRebar_SetBandHeaderSize ( $hWnd, $iIndex, $iNewSize )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$iNewSize",
            "documentation": "New size of the band's header"
        }]
    },
    "_GUICtrlRebar_SetBandID": {
        "documentation": "Set the value that the control uses to identify this band for custom draw notification messages",
        "label": "_GUICtrlRebar_SetBandID ( $hWnd, $iIndex, $iID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$iID",
            "documentation": "value that the control uses to identify this band for custom draw notification messages"
        }]
    },
    "_GUICtrlRebar_SetBandIdealSize": {
        "documentation": "Set Ideal width of the band, in pixels",
        "label": "_GUICtrlRebar_SetBandIdealSize ( $hWnd, $iIndex, $iNewSize )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$iNewSize",
            "documentation": "Ideal width of the band, in pixels"
        }]
    },
    "_GUICtrlRebar_SetBandLength": {
        "documentation": "Set the size length of the band",
        "label": "_GUICtrlRebar_SetBandLength ( $hWnd, $iIndex, $iLength )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$iLength",
            "documentation": "Length of the band, in pixels"
        }]
    },
    "_GUICtrlRebar_SetBandLParam": {
        "documentation": "Set Application-defined value",
        "label": "_GUICtrlRebar_SetBandLParam ( $hWnd, $iIndex, $lParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$lParam",
            "documentation": "Application-defined value"
        }]
    },
    "_GUICtrlRebar_SetBandStyle": {
        "documentation": "Set the band style Flags",
        "label": "_GUICtrlRebar_SetBandStyle ( $hWnd, $iIndex, $iStyle )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$iStyle",
            "documentation": "see $tagREBARBANDINFO"
        }]
    },
    "_GUICtrlRebar_SetBandStyleBreak": {
        "documentation": "Set whether the band is on a new line",
        "label": "_GUICtrlRebar_SetBandStyleBreak ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleChildEdge": {
        "documentation": "Set whether the band has an edge at the top and bottom of the child window",
        "label": "_GUICtrlRebar_SetBandStyleChildEdge ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleFixedBMP": {
        "documentation": "Set whether the band background bitmap does not move when the band is resized",
        "label": "_GUICtrlRebar_SetBandStyleFixedBMP ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleFixedSize": {
        "documentation": "Set whether the band can't be sized. With this style, the sizing grip is not displayed on the band",
        "label": "_GUICtrlRebar_SetBandStyleFixedSize ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleGripperAlways": {
        "documentation": "Set whether the band will always have a sizing grip, even if it is the only band in the rebar",
        "label": "_GUICtrlRebar_SetBandStyleGripperAlways ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleHidden": {
        "documentation": "Set whether the band will not be visible",
        "label": "_GUICtrlRebar_SetBandStyleHidden ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleHideTitle": {
        "documentation": "Set whether to keep band title hidden",
        "label": "_GUICtrlRebar_SetBandStyleHideTitle ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleNoGripper": {
        "documentation": "Set whether the band will never have a sizing grip, even if there is more than one band in the rebar",
        "label": "_GUICtrlRebar_SetBandStyleNoGripper ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleTopAlign": {
        "documentation": "Set whether to keep band in top row",
        "label": "_GUICtrlRebar_SetBandStyleTopAlign ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleUseChevron": {
        "documentation": "Set whether to display drop-down button",
        "label": "_GUICtrlRebar_SetBandStyleUseChevron ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandStyleVariableHeight": {
        "documentation": "Set whether the band can be resized by the rebar control",
        "label": "_GUICtrlRebar_SetBandStyleVariableHeight ( $hWnd, $iIndex [, $bEnabled = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bEnabled",
            "documentation": "**[optional]** If True the item state is set, otherwise it is not set"
        }]
    },
    "_GUICtrlRebar_SetBandText": {
        "documentation": "Sets the display text for the band of a rebar control",
        "label": "_GUICtrlRebar_SetBandText ( $hWnd, $iIndex, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band for which the information will be set"
        }, {
            "label": "$sText",
            "documentation": "New display text for the band"
        }]
    },
    "_GUICtrlRebar_SetBarInfo": {
        "documentation": "Sets the characteristics of a rebar control",
        "label": "_GUICtrlRebar_SetBarInfo ( $hWnd, $hIml )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$hIml",
            "documentation": "Handle to the Image list"
        }]
    },
    "_GUICtrlRebar_SetBKColor": {
        "documentation": "Sets the default background color of a rebar control",
        "label": "_GUICtrlRebar_SetBKColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iColor",
            "documentation": "COLORREF value that represents the new default background color"
        }]
    },
    "_GUICtrlRebar_SetColorScheme": {
        "documentation": "Sets the color scheme of a rebar control",
        "label": "_GUICtrlRebar_SetColorScheme ( $hWnd, $iBtnHighlight, $iBtnShadow )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iBtnHighlight",
            "documentation": "COLORREF value that represents the highlight color of the buttons"
        }, {
            "label": "$iBtnShadow",
            "documentation": "COLORREF value that represents the shadow color of the buttons"
        }]
    },
    "_GUICtrlRebar_SetTextColor": {
        "documentation": "Sets a rebar control's default text color",
        "label": "_GUICtrlRebar_SetTextColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iColor",
            "documentation": "COLORREF value that represents the new default text color"
        }]
    },
    "_GUICtrlRebar_SetToolTips": {
        "documentation": "Associates a ToolTip control with the rebar control",
        "label": "_GUICtrlRebar_SetToolTips ( $hWnd, $hToolTip )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$hToolTip",
            "documentation": "Handle to the ToolTip control to be set"
        }]
    },
    "_GUICtrlRebar_SetUnicodeFormat": {
        "documentation": "Sets the Unicode character format flag for the control",
        "label": "_GUICtrlRebar_SetUnicodeFormat ( $hWnd [, $bUnicode = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$bUnicode",
            "documentation": "**[optional]** Determines the character set that is used by the control:    True - The control will use Unicode characters    False - The control will use ANSI characters"
        }]
    },
    "_GUICtrlRebar_ShowBand": {
        "documentation": "Shows or hides a given band in a rebar control",
        "label": "_GUICtrlRebar_ShowBand ( $hWnd, $iIndex [, $bShow = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the rebar control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the band"
        }, {
            "label": "$bShow",
            "documentation": "**[optional]** indicates if the band should be shown or hidden:    True - Show    False - Hide"
        }]
    },
    "_GUICtrlRichEdit_AppendText": {
        "documentation": "Appends text at the end of the client area",
        "label": "_GUICtrlRichEdit_AppendText ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to be appended"
        }]
    },
    "_GUICtrlRichEdit_AutoDetectURL": {
        "documentation": "Enables or disables automatic detection of URLS",
        "label": "_GUICtrlRichEdit_AutoDetectURL ( $hWnd, $bState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "True to detect URLs in text, False not to"
        }]
    },
    "_GUICtrlRichEdit_CanPaste": {
        "documentation": "Can the contents of the clipboard be pasted into the control?",
        "label": "_GUICtrlRichEdit_CanPaste ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_CanPasteSpecial": {
        "documentation": "Can the contents of the clipboard be pasted into the control in both formats?",
        "label": "_GUICtrlRichEdit_CanPasteSpecial ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_CanRedo": {
        "documentation": "Can an undone action be redone?",
        "label": "_GUICtrlRichEdit_CanRedo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_CanUndo": {
        "documentation": "Can an action be undone?",
        "label": "_GUICtrlRichEdit_CanUndo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_ChangeFontSize": {
        "documentation": "Increment or decrement font size(s) of selected text",
        "label": "_GUICtrlRichEdit_ChangeFontSize ( $hWnd, $iIncrement )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIncrement",
            "documentation": "Positive to increase, negative to decrease"
        }]
    },
    "_GUICtrlRichEdit_Copy": {
        "documentation": "Copy text to clipboard",
        "label": "_GUICtrlRichEdit_Copy ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_Create": {
        "documentation": "Create an Edit control",
        "label": "_GUICtrlRichEdit_Create ( $hWnd, $sText, $iLeft, $iTop [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = -1 [, $iExStyle = -1]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$sText",
            "documentation": "Text to be displayed in the control"
        }, {
            "label": "$iLeft",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iTop",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control styles:    $ES_AUTOHSCROLL - Automatically scrolls text to the right by 10 characters when the user types a character at the end of the line.    $ES_AUTOVSCROLL - Automatically scrolls text up one page when the user presses the ENTER key on the last line.    $WS_HSCROLL - Control has horizontal scroll bar    $WS_VSCROLL - Control has vertical scroll bar    $ES_CENTER - Centers text in an edit control.    $ES_LEFT - Aligns text with the left margin.    $ES_MULTILINE - Generates a multi-line control (Default)    $ES_NOHIDESEL - The selected text is inverted, even if the control does not have the focus.    $ES_NUMBER - Allows only digits to be entered into the edit control.    $ES_READONLY - Prevents the user from typing or editing text in the edit control.    $ES_RIGHT - Right-aligns text edit control.    $ES_WANTRETURN - Specifies that a carriage return be inserted when the user presses the ENTER key. (Default)    $ES_PASSWORD - Displays an asterisk (*) for each character that is typed into the edit controlDefault: 0Forced : WS_CHILD, $WS_VISIBLE, $WS_TABSTOP unless $ES_READONLY"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table."
        }]
    },
    "_GUICtrlRichEdit_Cut": {
        "documentation": "Cut text to clipboard",
        "label": "_GUICtrlRichEdit_Cut ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_Deselect": {
        "documentation": "Deselects text, leaving none selected",
        "label": "_GUICtrlRichEdit_Deselect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_Destroy": {
        "documentation": "Delete the Rich Edit control",
        "label": "_GUICtrlRichEdit_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_EmptyUndoBuffer": {
        "documentation": "Resets the undo flag of the control",
        "label": "_GUICtrlRichEdit_EmptyUndoBuffer ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_FindText": {
        "documentation": "Search for a text starting at insertion point or at anchor point of selection",
        "label": "_GUICtrlRichEdit_FindText ( $hWnd, $sText [, $bForward = True [, $bMatchCase = False [, $bWholeWord = False [, $iBehavior = 0]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to find"
        }, {
            "label": "$bForward",
            "documentation": "**[optional]** Search direction(Win 95: search is always forward)"
        }, {
            "label": "$bMatchCase",
            "documentation": "**[optional]** Search is case-sensitiveDefault: case-insensitive"
        }, {
            "label": "$bWholeWord",
            "documentation": "**[optional]** Search only for text as a whole wordDefault: partial or full word"
        }, {
            "label": "$iBehavior",
            "documentation": "**[optional]** Any BitOR combination of $FR_MATCHALEFHAMZA, $FR_MATCHDIAC and $FR_MATCHKASHIDADefault: 0"
        }]
    },
    "_GUICtrlRichEdit_FindTextInRange": {
        "documentation": "Search for a text in a range of inter-character positions",
        "label": "_GUICtrlRichEdit_FindTextInRange ( $hWnd, $sText [, $iStart = 0 [, $iEnd = -1 [, $bMatchCase = False [, $bWholeWord = False [, $iBehavior = 0]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to find"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** Starting inter-character position of searchDefault: beginning of control"
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** Ending inter-character position of searchDefault: end of control"
        }, {
            "label": "$bMatchCase",
            "documentation": "**[optional]** Search is case-sensitiveDefault: case-insensitive"
        }, {
            "label": "$bWholeWord",
            "documentation": "**[optional]** Search only for text as a whole wordDefault: partial or full word"
        }, {
            "label": "$iBehavior",
            "documentation": "**[optional]** Any BitOR combination of $FR_MATCHALEFHAMZA, $FR_MATCHDIAC and $FR_MATCHKASHIDADefault: 0"
        }]
    },
    "_GUICtrlRichEdit_GetBkColor": {
        "documentation": "Gets the background color of the control",
        "label": "_GUICtrlRichEdit_GetBkColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetCharAttributes": {
        "documentation": "Returns attributes of selected text",
        "label": "_GUICtrlRichEdit_GetCharAttributes ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetCharBkColor": {
        "documentation": "Retrieves the background color of the selected text or, if none selected, of the character to the right of the insertion point",
        "label": "_GUICtrlRichEdit_GetCharBkColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetCharColor": {
        "documentation": "Retrieves the color of the selected text or, if none selected, of the character to the right of the insertion point",
        "label": "_GUICtrlRichEdit_GetCharColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetCharPosFromXY": {
        "documentation": "Gets inter-character position closest to a specified point in the client area",
        "label": "_GUICtrlRichEdit_GetCharPosFromXY ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "horizontal coordinate relative to left side of control"
        }, {
            "label": "$iY",
            "documentation": "vertical coordinate relative to top of control"
        }]
    },
    "_GUICtrlRichEdit_GetCharPosOfNextWord": {
        "documentation": "Gets inter-character position before the next word",
        "label": "_GUICtrlRichEdit_GetCharPosOfNextWord ( $hWnd, $iCpStart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCPStart",
            "documentation": "inter-character position to start from"
        }]
    },
    "_GUICtrlRichEdit_GetCharPosOfPreviousWord": {
        "documentation": "Gets inter-character position before the Previous word",
        "label": "_GUICtrlRichEdit_GetCharPosOfPreviousWord ( $hWnd, $iCpStart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCPStart",
            "documentation": "inter-character position to start from"
        }]
    },
    "_GUICtrlRichEdit_GetCharWordBreakInfo": {
        "documentation": "Gets inter-character position before the Previous word/",
        "label": "_GUICtrlRichEdit_GetCharWordBreakInfo ( $hWnd, $iCp )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCP",
            "documentation": "Inter-character position to left of character of interest"
        }]
    },
    "_GUICtrlRichEdit_GetFirstCharPosOnLine": {
        "documentation": "Retrieves the inter-character position preceding the first character of a line",
        "label": "_GUICtrlRichEdit_GetFirstCharPosOnLine ( $hWnd [, $iLine = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iLine",
            "documentation": "**[optional]** Line numberDefault: current line"
        }]
    },
    "_GUICtrlRichEdit_GetFont": {
        "documentation": "Gets the font attributes of a selection or, if no selection, at the insertion point",
        "label": "_GUICtrlRichEdit_GetFont ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetLineCount": {
        "documentation": "Retrieves the number of lines in a multi-line edit control",
        "label": "_GUICtrlRichEdit_GetLineCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetLineLength": {
        "documentation": "Retrieves the length of a line",
        "label": "_GUICtrlRichEdit_GetLineLength ( $hWnd, $iLine )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iLine",
            "documentation": "line numberSpecial value: -1 - return number of unselected characters on lines containing selected characters"
        }]
    },
    "_GUICtrlRichEdit_GetLineNumberFromCharPos": {
        "documentation": "Retrieves the line number on which an inter-character position is found",
        "label": "_GUICtrlRichEdit_GetLineNumberFromCharPos ( $hWnd, $iCharPos )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCharPos",
            "documentation": "Inter-character position"
        }]
    },
    "_GUICtrlRichEdit_GetNextRedo": {
        "documentation": "Retrieves the name or type ID of the next possible redo action",
        "label": "_GUICtrlRichEdit_GetNextRedo ( $hWnd [, $bName = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bName",
            "documentation": "**[optional]** True (return name, default) or False (return ID number)"
        }]
    },
    "_GUICtrlRichEdit_GetNextUndo": {
        "documentation": "Retrieves the name or type ID of the next possible Undo action",
        "label": "_GUICtrlRichEdit_GetNextUndo ( $hWnd [, $bName = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bName",
            "documentation": "**[optional]** True (return name, default) or False (return ID number)"
        }]
    },
    "_GUICtrlRichEdit_GetNumberOfFirstVisibleLine": {
        "documentation": "Gets number of the first line which is visible in the control",
        "label": "_GUICtrlRichEdit_GetNumberOfFirstVisibleLine ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetParaAlignment": {
        "documentation": "Gets the alignment of selected paragraph(s), or (if no selection) of the current paragraph",
        "label": "_GUICtrlRichEdit_GetParaAlignment ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetParaAttributes": {
        "documentation": "Gets the attributes of (first) selected paragraph or (if no selection) of the current paragraph",
        "label": "_GUICtrlRichEdit_GetParaAttributes ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetParaBorder": {
        "documentation": "Gets the border settings of (first) selected paragraph or (if no selection) of the current paragraph",
        "label": "_GUICtrlRichEdit_GetParaBorder ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetParaIndents": {
        "documentation": "Gets the border indent settings of (first) selected paragraph or (if no selection) of the current paragraph",
        "label": "_GUICtrlRichEdit_GetParaIndents ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetParaNumbering": {
        "documentation": "Gets the numbering style of (first) selected paragraph or (if no selection) of the current paragraph",
        "label": "_GUICtrlRichEdit_GetParaNumbering ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetParaShading": {
        "documentation": "Gets the shading settings of (first) selected paragraph or (if no selection) of the current paragraph",
        "label": "_GUICtrlRichEdit_GetParaShading ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetParaSpacing": {
        "documentation": "Gets the spacing settings of (first) selected paragraph or (if no selection) of the current paragraph",
        "label": "_GUICtrlRichEdit_GetParaSpacing ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetParaTabStops": {
        "documentation": "Gets the tabstops of (first) selected paragraph or (if no selection) of the current paragraph",
        "label": "_GUICtrlRichEdit_GetParaTabStops ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetPasswordChar": {
        "documentation": "Gets the password character that a rich edit control displays when the user enters text",
        "label": "_GUICtrlRichEdit_GetPasswordChar ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetRECT": {
        "documentation": "Retrieves the formatting rectangle of a control",
        "label": "_GUICtrlRichEdit_GetRECT ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetScrollPos": {
        "documentation": "Gets the Scrolling position of the control",
        "label": "_GUICtrlRichEdit_GetScrollPos ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetSel": {
        "documentation": "Gets the low and high inter-character positions of a selection",
        "label": "_GUICtrlRichEdit_GetSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetSelAA": {
        "documentation": "Gets the anchor and active inter-character positions of a selection, in that order",
        "label": "_GUICtrlRichEdit_GetSelAA ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetSelText": {
        "documentation": "Retrieves the currently selected text",
        "label": "_GUICtrlRichEdit_GetSelText ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GetSpaceUnit": {
        "documentation": "Gets the unit of measure of horizontal and vertical space used in parameters of various _GUICtrlRichEdit functions",
        "label": "_GUICtrlRichEdit_GetSpaceUnit (  )",
        "params": []
    },
    "_GUICtrlRichEdit_GetText": {
        "documentation": "Get all of the text in the control",
        "label": "_GUICtrlRichEdit_GetText ( $hWnd [, $bCrToCrLf = False [, $iCodePage = 0 [, $sReplChar = \"\"]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bCrToCrLf",
            "documentation": "**[optional]** Convert each CR to a CrLf    True - do it    False - don't (Default)"
        }, {
            "label": "$iCodePage",
            "documentation": "**[optional]** code page used in translationDefault: use system defaultCP_ACP for ANSI, 1200 for Unicode"
        }, {
            "label": "$sReplChar",
            "documentation": "**[optional]** Character used if $iCodePage is not 1200 and a wide character cannot be represented in specified code page"
        }]
    },
    "_GUICtrlRichEdit_GetTextInLine": {
        "documentation": "Gets a line of text",
        "label": "_GUICtrlRichEdit_GetTextInLine ( $hWnd, $iLine )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iLine",
            "documentation": "Line number"
        }]
    },
    "_GUICtrlRichEdit_GetTextInRange": {
        "documentation": "Gets the text from from one inter-character position to another",
        "label": "_GUICtrlRichEdit_GetTextInRange ( $hWnd, $iStart, $iEnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iStart",
            "documentation": "Inter-character position before the text"
        }, {
            "label": "$iEnd",
            "documentation": "Inter-character position after the textSpecial value: -1 - end of text"
        }]
    },
    "_GUICtrlRichEdit_GetTextLength": {
        "documentation": "Get the length of the whole text in the control",
        "label": "_GUICtrlRichEdit_GetTextLength ( $hWnd [, $bExact = True [, $bChars = False]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bExact",
            "documentation": "**[optional]**    True - Return the exact length    False - return at least the number of characters in the control (faster)Default: exact length"
        }, {
            "label": "$bChars",
            "documentation": "**[optional]**    True - return length in characters    False - return length in bytesDefault: bytes"
        }]
    },
    "_GUICtrlRichEdit_GetVersion": {
        "documentation": "Retrieves the version of Rich Edit",
        "label": "_GUICtrlRichEdit_GetVersion (  )",
        "params": []
    },
    "_GUICtrlRichEdit_GetXYFromCharPos": {
        "documentation": "Retrieves the XY coordinates of an inter-character position",
        "label": "_GUICtrlRichEdit_GetXYFromCharPos ( $hWnd, $iCharPos )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCharPos",
            "documentation": "Inter-character position"
        }]
    },
    "_GUICtrlRichEdit_GetZoom": {
        "documentation": "Gets the zoom level of the control",
        "label": "_GUICtrlRichEdit_GetZoom ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_GotoCharPos": {
        "documentation": "Moves the insertion point to an inter-character position",
        "label": "_GUICtrlRichEdit_GotoCharPos ( $hWnd, $iCharPos )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCharPos",
            "documentation": "the inter character positionSpecial value: -1 - end of text"
        }]
    },
    "_GUICtrlRichEdit_HideSelection": {
        "documentation": "Hides (or shows) a selection",
        "label": "_GUICtrlRichEdit_HideSelection ( $hWnd [, $bHide = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bHide",
            "documentation": "**[optional]**    True - hide    False - showDefault: hide"
        }]
    },
    "_GUICtrlRichEdit_InsertText": {
        "documentation": "Inserts text at insertion point or anchor point of selection",
        "label": "_GUICtrlRichEdit_InsertText ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to be inserted"
        }]
    },
    "_GUICtrlRichEdit_IsModified": {
        "documentation": "Retrieves the state of a rich edit control's modification flag",
        "label": "_GUICtrlRichEdit_IsModified ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_IsTextSelected": {
        "documentation": "Is text selected?",
        "label": "_GUICtrlRichEdit_IsTextSelected ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_Paste": {
        "documentation": "Paste RTF or RTF with Objects from clipboard",
        "label": "_GUICtrlRichEdit_Paste ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_PasteSpecial": {
        "documentation": "Paste RTF or RTF and Objects from clipboard",
        "label": "_GUICtrlRichEdit_PasteSpecial ( $hWnd [, $bAndObjects = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bAndObjects",
            "documentation": "**[optional]** Paste objects as well as RTF - True (default) or False"
        }]
    },
    "_GUICtrlRichEdit_PauseRedraw": {
        "documentation": "Pauses redrawing of the control",
        "label": "_GUICtrlRichEdit_PauseRedraw ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_Redo": {
        "documentation": "Redoes last undone action",
        "label": "_GUICtrlRichEdit_Redo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_ReplaceText": {
        "documentation": "Replaces selected text",
        "label": "_GUICtrlRichEdit_ReplaceText ( $hWnd, $sText [, $bCanUndo = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Replacement text"
        }, {
            "label": "$bCanUndo",
            "documentation": "**[optional]** Can operation can be undone? True (Default) or False"
        }]
    },
    "_GUICtrlRichEdit_ResumeRedraw": {
        "documentation": "Resumes redrawing of the control",
        "label": "_GUICtrlRichEdit_ResumeRedraw ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_ScrollLineOrPage": {
        "documentation": "Scrolls the text down or up a line or a page",
        "label": "_GUICtrlRichEdit_ScrollLineOrPage ( $hWnd, $sAction )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sAction",
            "documentation": "one of the following:    \"ld\" - line down    \"lu\" - line up    \"pd\" - page down    \"pu\" - page up"
        }]
    },
    "_GUICtrlRichEdit_ScrollLines": {
        "documentation": "Scrolls the text down or up a number of lines",
        "label": "_GUICtrlRichEdit_ScrollLines ( $hWnd, $iQlines )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iQlines",
            "documentation": "number of lines to scroll"
        }]
    },
    "_GUICtrlRichEdit_ScrollToCaret": {
        "documentation": "Scrolls to show line on which caret (insertion point) is",
        "label": "_GUICtrlRichEdit_ScrollToCaret ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlRichEdit_SetBkColor": {
        "documentation": "Sets the background color of the control",
        "label": "_GUICtrlRichEdit_SetBkColor ( $hWnd [, $iBngColor = Default] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iBngColor",
            "documentation": "**[optional]** one of the following:a number - a COLORREF valueDefault keyword - the system color (default)"
        }]
    },
    "_GUICtrlRichEdit_SetCharAttributes": {
        "documentation": "Turns an attribute on or off for selected text or, if none selected, for text inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetCharAttributes ( $hWnd, $sStatesAndEffects [, $bWord = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sStatesAndEffects",
            "documentation": "a string consisting of three character groups: + (or -) for the state, and a two-letter abbreviation for the attributefirst character: + for on, - for offsecond and third character: any of:    bo - bold    di - disable - displays characters with a shadow [nd]    em - emboss [nd]    hi - hide, i.e. don't display    im - imprint [nd]    it - italcize    li - send EN_LINK messages when mouse is over text with this attribute    ou - outline [nd]    pr - send EN_PROTECT when user attempts to modify    re - mark as revised [nd]    sh - shadow [nd]    sm - small capital letters [nd]    st - strike out    sb - subscript [nd]    sp - superscript [nd]    un - underline"
        }, {
            "label": "$bWord",
            "documentation": "**[optional]** True    If text is selected, apply the attribute to whole words in the selected text    If not:    If the insertion point is in a word, or at the end of it, apply the attribute to the word    If not, apply the attribute to text inserted at the insertion pointFalse (Default)    If text is selected, apply the attribute to the selected text    If not, apply the attribute to text inserted at the insertion point"
        }]
    },
    "_GUICtrlRichEdit_SetCharBkColor": {
        "documentation": "Sets the background color of selected text or, if none selected, sets the background color of text inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetCharBkColor ( $hWnd [, $iBkColor = Default] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iBkColor",
            "documentation": "**[optional]** one of the following:a number - a COLORREF valueDefault keyword - the system color (default)"
        }]
    },
    "_GUICtrlRichEdit_SetCharColor": {
        "documentation": "Sets the color of selected text or, if none selected, sets the background color of text inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetCharColor ( $hWnd [, $iColor = Default] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "**[optional]** one of the following:a number - a COLORREF valueDefault keyword - the system color (default)"
        }]
    },
    "_GUICtrlRichEdit_SetEventMask": {
        "documentation": "Specifies which notification messages are sent to the parent window",
        "label": "_GUICtrlRichEdit_SetEventMask ( $hWnd, $iEventMask )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iEventMask",
            "documentation": "BitOR combination of :    $ENM_CHANGE - Sends $EN_CHANGE notifications (user may have altered text)    $ENM_CORRECTTEXT - Sends $EN_CORRECTTEXT notifications (parent window can cancel correction of text)    $ENM_DRAGDROPDONE - Sends $EN_DRAGDROPDONE notifications (drag and drop operation completed)    $ENM_DROPFILES - Sends $EN_DROPFILES notifications (user is attempting to drop files into the control)    $ENM_KEYEVENTS - Sends $EN_MSGFILTER notifications for keyboard events    $ENM_LINK - Sends $EN_LINK notifications when the mouse pointer is over text having the link character attribute set and when user clicks the mouse [2.0+]    $ENM_MOUSEEVENTS - Sends $EN_MSGFILTER notifications for mouse events to parent window    $ENM_OBJECTPOSITIONS - Sends $EN_OBJECTPOSITIONS notifications when the control reads in objects    $ENM_PROTECTED - Sends $EN_PROTECTED notifications when the user attempts to change characters having the protected attribute set    $ENM_REQUESTRESIZE - Sends $EN_REQUESTRESIZE notifications that the control's contents are either smaller or larger than the control's window size    $ENM_SCROLL - Sends $EN_HSCROLL and $EN_VSCROLL notifications when the user clicks the horizontal/vertical scroll bar    $ENM_SCROLLEVENTS - Sends EN_MSGFILTER notifications for mouse wheel events    $ENM_SELCHANGE - Sends EN_SELCHANGE notifications when the current selection changes    $ENM_UPDATE - Sends EN_UPDATE notifications when a control is about to redraw itselfor    $ENM_NONE - Disables sending of notification messages to the parent window"
        }]
    },
    "_GUICtrlRichEdit_SetFont": {
        "documentation": "Sets the font attributes of selected text or, if none selected, sets those of text inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetFont ( $hWnd [, $iPoints = Default [, $sName = Default [, $iCharset = Default [, $iLcid = Default]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPoints",
            "documentation": "**[optional]** point size"
        }, {
            "label": "$sName",
            "documentation": "**[optional]** the name of the font face, e.g. \"Courier\" not \"Courier Bold\""
        }, {
            "label": "$iCharSet",
            "documentation": "**[optional]** the character set - one of:    $ANSI_CHARSET - 0    $BALTIC_CHARSET - 186    $CHINESEBIG5_CHARSET - 136    $DEFAULT_CHARSET - 1    $EASTEUROPE_CHARSET - 238    $GB2312_CHARSET - 134    $GREEK_CHARSET - 161    $HANGEUL_CHARSET - 129    $MAC_CHARSET - 77    $OEM_CHARSET - 255    $RUSSIAN_CHARSET - 204    $SHIFTJIS_CHARSET - 128    $SYMBOL_CHARSET - 2    $TURKISH_CHARSET - 162    $VIETNAMESE_CHARSET - 163"
        }, {
            "label": "$iLcid",
            "documentation": "**[optional]** see http://www.microsoft.com/globaldev/reference/lcid-all.mspx"
        }]
    },
    "_GUICtrlRichEdit_SetLimitOnText": {
        "documentation": "Change number of characters that can be typed, pasted or streamed in as Rich Text Format",
        "label": "_GUICtrlRichEdit_SetLimitOnText ( $hWnd, $iNewLimit )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iNewLimit",
            "documentation": "new limit"
        }]
    },
    "_GUICtrlRichEdit_SetModified": {
        "documentation": "Sets or clears the modification flag",
        "label": "_GUICtrlRichEdit_SetModified ( $hWnd [, $bState = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** Specifies the new value for the modification flag:True - Indicates that the text has been modified (default)False - Indicates it has not been modified."
        }]
    },
    "_GUICtrlRichEdit_SetParaAlignment": {
        "documentation": "Sets alignment of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetParaAlignment ( $hWnd, $sAlignment )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sAlignment",
            "documentation": "values:    \"l\" - align with the left margin.    \"r\" - align with the right margin.    \"c\" - center between margins    \"j\" - justify between margins    \"f\" - justify between margins by only expanding spaces"
        }]
    },
    "_GUICtrlRichEdit_SetParaAttributes": {
        "documentation": "Sets attributes of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetParaAttributes ( $hWnd, $sStatesAndAtts )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sStatesAndAtts",
            "documentation": "a string consisting of groups separated by semicolons \";\".Each group consists of:First character - state:    + - turn attribute on    - - turn attribute off    \"fpg\" - force this/these paragraphs on to new page(s) (Initially off)    \"hyp\" - automatic hypthenation (Initially on)    \"kpt\" - keep this/these paragraph(s) together on a page (Initially off}    \"kpn\" - keep this/these paragraph(s) and the next together on a page (Initially off)    \"pwo\" - prevent widows and orphans, i.e. avoid a single line of this/these paragraphson a page (Initially off)    \"r2l\" - display text using right-to-left reading order (Initially off)    \"row\" - paragraph(s) is/are table row(s) (Initially off)    \"sbs\" - display paragraphs side by side (Initially off)    \"sln\" - suppress line numbers in documents or sections with line numbers (Initially off)"
        }]
    },
    "_GUICtrlRichEdit_SetParaBorder": {
        "documentation": "Sets the border of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetParaBorder ( $hWnd [, $sLocation = Default [, $vLineStyle = Default [, $sColor = Default [, $iSpace = Default]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sLocation",
            "documentation": "**[optional]** a string consisting of any logical combination of:    l - left border    r - right border    t - top border    b - bottom border    i - inside border    o - outside border    or \"\" - no border (initial value)"
        }, {
            "label": "$vLineStyle",
            "documentation": "**[optional]** line style - one of:    \"none\" - no line (initial value)    .75 - 3/4 point    1.5 - 1 1/2 points    2.25 - 2 1/4 points    3 - 3 points    4.5 - 4 1/2 points    6 - 6 points    \".75d\" - 1/2 points, double    \"1.5d\" - 1 1/2 points, double    \"2.25d\" - 2 1/4 points, double    \".75g\" - 3/4 point grey    \".75gd\" - 3/4 point grey dashed"
        }, {
            "label": "$sColor",
            "documentation": "**[optional]** one of:    \"aut\" - autocolor    \"blk\" - black (initial value)    \"blu\" - blue    \"cyn\" - cyan    \"grn\" - green    \"mag\" - magenta    \"red\" - red    \"yel\" - yellow    \"whi\" - white    \"dbl\" - dark blue    \"dgn\" - dark green    \"dmg\" - dark magenta    \"drd\" - dark red    \"dyl\" - dark yellow    \"dgy\" - dark grey    \"lgy\" - light grey"
        }, {
            "label": "$iSpace",
            "documentation": "**[optional]** space between the border and the text (in space units) ( (initial value): 0)"
        }]
    },
    "_GUICtrlRichEdit_SetParaIndents": {
        "documentation": "Sets indents of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetParaIndents ( $hWnd [, $vLeft = Default [, $iRight = Default [, $iFirstLine = Default]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$vLeft",
            "documentation": "**[optional]** indentation of left side of the body of the paragraph (in space units)    absolute - a number    relative to previous - a string - \"+\" or \"-\""
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** indentation of right side of the paragraph (in space units)"
        }, {
            "label": "$iFirstLine",
            "documentation": "**[optional]** indentation of the first line relative to other lines (in space units)"
        }]
    },
    "_GUICtrlRichEdit_SetParaNumbering": {
        "documentation": "Sets numbering of paragraph(s) in the current selection or, if no selection, of paragraph(s) inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetParaNumbering ( $hWnd, $sStyle [, $iTextToNbrSpace = Default [, $bForceRoman = False]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sStyle",
            "documentation": "a string specifying style and starting \"number\": e.g. \".\" (bullet), \"1)\",\"(b)\", \"C.\", \"iv\", \"V)\"This is the \"numbering\" that will display for the first paragraph.Trailing spaces indicate the minimum spaces between the number and the paragraph unless $iTextToNbrSpace is enteredSpecial cases:    \"=\" - This paragraph is an unnumbered paragraph within the preceding list element    \"\" - removed the numbering from the selected paragraph(s)"
        }, {
            "label": "$iTextToNbrSpace",
            "documentation": "**[optional]** space between number/bullet and paragraph (in space units)Default: number of trailing spaces times point size"
        }, {
            "label": "$bForceRoman",
            "documentation": "**[optional]** False - i, v, x ... in $sStyle is letter i, v, x ... {Default)"
        }]
    },
    "_GUICtrlRichEdit_SetParaShading": {
        "documentation": "Sets the shading of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetParaShading ( $hWnd [, $iWeight = Default [, $sStyle = Default [, $sForeColor = Default [, $sBackColor = Default]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iWeight",
            "documentation": "**[optional]** percent of foreground color, the rest being background color"
        }, {
            "label": "$sStyle",
            "documentation": "**[optional]** shading style - a string containing one of the following:    non - none    dhz - dark horizontal    dvt - dark vertical    ddd - dark down diagonal    dud - dark up diagonal    dgr - dark grid    dtr - dark trellis    lhz - light horizontal    lvt - light vertical    ldd - light down diagonal    lud - light up diagonal    lgr - light grid    ltr - light trellis"
        }, {
            "label": "$sForeColor",
            "documentation": "**[optional]** one of the following:    \"blk\" - black (initial value)    \"blu\" - blue    \"cyn\" - cyan    \"grn\" - green    \"mag\" - magenta    \"red\" - red    \"yel\" - yellow    \"whi\" - white    \"dbl\" - dark blue    \"dgn\" - dark green    \"dmg\" - dark magenta    \"drd\" - dark red    \"dyl\" - dark yellow    \"dgy\" - dark grey    \"lgy\" - light grey"
        }, {
            "label": "$sBackColor",
            "documentation": "**[optional]** same values as for $sForeColor"
        }]
    },
    "_GUICtrlRichEdit_SetParaSpacing": {
        "documentation": "Sets paragraph spacing of paragraphs having selected text or, if none selected, sets it for text inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetParaSpacing ( $hWnd [, $vInter = Default [, $iBefore = Default [, $iAfter = Default]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$vInter",
            "documentation": "**[optional]** spacing between lines:either: a number - in space unitsor: \" lines\" - in lines"
        }, {
            "label": "$iBefore",
            "documentation": "**[optional]** spacing before paragraph(s) (in space units)"
        }, {
            "label": "$iAfter",
            "documentation": "**[optional]** spacing after paragraph(s) (in space units)"
        }]
    },
    "_GUICtrlRichEdit_SetParaTabStops": {
        "documentation": "Sets tab stops of paragraphs having selected text or, if none selected, sets it for text inserted at the insertion point",
        "label": "_GUICtrlRichEdit_SetParaTabStops ( $hWnd, $sTabStops )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sTabStops",
            "documentation": "A string consisting of groups separated by ; (semicolon). Format of a group:absolute position of a tab stop (in space units)kind of tab    l - left tab    c - center tab    r - decimal tab    b - bar tabkind of dot leader    . - dotted leader    - - dashed leader    _ - underline leader    = - double line leader    t - thick-line leader    a space - no leader"
        }]
    },
    "_GUICtrlRichEdit_SetPasswordChar": {
        "documentation": "Sets the characters to be displayed instead of those typed, or causes typed characters to show",
        "label": "_GUICtrlRichEdit_SetPasswordChar ( $hWnd [, $sDisplayChar = \"*\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sDisplayChar",
            "documentation": "**[optional]** The character to be displayed in place of the characters typed by the user.Special value: \"\" - characters typed are displayed"
        }]
    },
    "_GUICtrlRichEdit_SetReadOnly": {
        "documentation": "Sets or removes the read-only state",
        "label": "_GUICtrlRichEdit_SetReadOnly ( $hWnd [, $bState = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** one of the following values:    True - Sets control to read-only (default)    False - Sets control to read-write"
        }]
    },
    "_GUICtrlRichEdit_SetRECT": {
        "documentation": "Sets the formatting rectangle of a Rich Edit control",
        "label": "_GUICtrlRichEdit_SetRECT ( $hWnd [, $iLeft = Default [, $iTop = Default [, $iRight = Default [, $iBottom = Default [, $bRedraw = True]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iLeft",
            "documentation": "**[optional]** Left position in dialog units"
        }, {
            "label": "$iTop",
            "documentation": "**[optional]** Top position in dialog units"
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** Right position in dialog units"
        }, {
            "label": "$iBottom",
            "documentation": "**[optional]** Bottom position in dialog unit"
        }, {
            "label": "$bRedraw",
            "documentation": "**[optional]** True to force redraw"
        }]
    },
    "_GUICtrlRichEdit_SetScrollPos": {
        "documentation": "Scrolls the display such that ($ix,$iY) is in the upper left corner of the control",
        "label": "_GUICtrlRichEdit_SetScrollPos ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "x coordinate (in pixels)"
        }, {
            "label": "$iY",
            "documentation": "y coordinate (in pixels)"
        }]
    },
    "_GUICtrlRichEdit_SetSel": {
        "documentation": "Sets the low and high character position of a selection",
        "label": "_GUICtrlRichEdit_SetSel ( $hWnd, $iAnchor, $iActive [, $bHideSel = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iAnchor",
            "documentation": "the character position of the first character to selectSpecial value: -1 - end of text"
        }, {
            "label": "$iActive",
            "documentation": "the character position of the last character to selectSpecial value: -1 - end of text"
        }, {
            "label": "$bHideSel",
            "documentation": "**[optional]** True to hide the selection"
        }]
    },
    "_GUICtrlRichEdit_SetSpaceUnit": {
        "documentation": "Sets the unit of measure of horizontal and vertical space used in parameters of various _GUICtrlRichEdit functions",
        "label": "_GUICtrlRichEdit_SetSpaceUnit ( $sUnit )",
        "params": [{
            "label": "$sUnit",
            "documentation": "\"in\", \"cm\", \"mm\", \"pt\" (points), or \"tw\" (twips, 1/1440 inches, 1/567 centimeters)"
        }]
    },
    "_GUICtrlRichEdit_SetTabStops": {
        "documentation": "Sets tab stops for the control",
        "label": "_GUICtrlRichEdit_SetTabStops ( $hWnd, $vTabStops [, $bRedraw = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "handle of control"
        }, {
            "label": "$VTabStops",
            "documentation": "tab stop(s) to set in space units:If a string, semicolon-separated tab stop positionsIf numeric: set a tab stop every  space units"
        }, {
            "label": "$bRedraw",
            "documentation": "**[optional]** whether to redraw the control - True (default) or False"
        }]
    },
    "_GUICtrlRichEdit_SetText": {
        "documentation": "Sets the text of a control",
        "label": "_GUICtrlRichEdit_SetText ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Plain or RTF text to put into the control"
        }]
    },
    "_GUICtrlRichEdit_SetUndoLimit": {
        "documentation": "Sets the maximum number of actions that can stored in the undo queue",
        "label": "_GUICtrlRichEdit_SetUndoLimit ( $hWnd, $iLimit )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iLimit",
            "documentation": "the maximum number of actions that can be stored in the undo queue"
        }]
    },
    "_GUICtrlRichEdit_SetZoom": {
        "documentation": "Sets zoom level of the control",
        "label": "_GUICtrlRichEdit_SetZoom ( $hWnd, $iPercent )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPercent",
            "documentation": "percentage zoomvalues: 100 and 200 to 6400"
        }]
    },
    "_GUICtrlRichEdit_StreamFromFile": {
        "documentation": "Sets text in a control from a file",
        "label": "_GUICtrlRichEdit_StreamFromFile ( $hWnd, $sFileSpec )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sFileSpec",
            "documentation": "file specification"
        }]
    },
    "_GUICtrlRichEdit_StreamFromVar": {
        "documentation": "Sets text in a control from a variable",
        "label": "_GUICtrlRichEdit_StreamFromVar ( $hWnd, $sVar )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sVar",
            "documentation": "a string"
        }]
    },
    "_GUICtrlRichEdit_StreamToFile": {
        "documentation": "Writes contents of a control to a file",
        "label": "_GUICtrlRichEdit_StreamToFile ( $hWnd, $sFileSpec [, $bIncludeCOM = True [, $iOpts = 0 [, $iCodePage = 0]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sFileSpec",
            "documentation": "file specification"
        }, {
            "label": "$bIncludeCOM",
            "documentation": "**[optional]** True (default):    If writing to a .rtf file, includes any COM objects (space consuming)    If writing to any other file, writes a text represntation of COM objectsFalse: Writes spaces instead of COM objects"
        }, {
            "label": "$iOpts",
            "documentation": "**[optional]** additional options: (default: 0)    $SFF_PLAINRTF - write only rich text keywords common to all languages    $SF_UNICODE - write Unicode"
        }, {
            "label": "$iCodePage",
            "documentation": "**[optional]** Generate UTF-8 and text using this code pageDefault: do not"
        }]
    },
    "_GUICtrlRichEdit_StreamToVar": {
        "documentation": "Writes contents of a control to a variable",
        "label": "_GUICtrlRichEdit_StreamToVar ( $hWnd [, $bRtf = True [, $bIncludeCOM = True [, $iOpts = 0 [, $iCodePage = 0]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bRtf",
            "documentation": "**[optional]** True - write Rich Text Format (RTF) (Default)False - write only text"
        }, {
            "label": "$bIncludeCOM",
            "documentation": "**[optional]** True (default):    If writing RTF, include any COM objects (space consuming)    If writing only text, write a text represntation of COM objectsFalse: Write spaces instead of COM objects"
        }, {
            "label": "$iOpts",
            "documentation": "**[optional]** additional options:    $SFF_PLAINRTF - write only rich text keywords common to all languages    $SF_UNICODE - write Unicode"
        }, {
            "label": "$iCodePage",
            "documentation": "**[optional]** Generate UTF-8 and text using this code pageDefault: do not"
        }]
    },
    "_GUICtrlRichEdit_Undo": {
        "documentation": "Undoes the last edit control operation in the control's undo queue",
        "label": "_GUICtrlRichEdit_Undo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlSlider_ClearSel": {
        "documentation": "Clears the current selection range",
        "label": "_GUICtrlSlider_ClearSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_ClearTics": {
        "documentation": "Removes the current tick marks from a slider",
        "label": "_GUICtrlSlider_ClearTics ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_Create": {
        "documentation": "Create a Slider control",
        "label": "_GUICtrlSlider_Create ( $hWnd, $iX, $iY [, $iWidth = 100 [, $iHeight = 20 [, $iStyle = $TBS_AUTOTICKS [, $iExStyle = 0x00000000]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control style:    $TBS_AUTOTICKS - Adds tick marks when you set the range on the slider by using the TBM_SETRANGE message    $TBS_BOTH - Places ticks on both sides of the slider    $TBS_BOTTOM - Places ticks on the bottom of a horizontal slider    $TBS_DOWNISLEFT - Down equal left and up equal right    $TBS_ENABLESELRANGE - The tick marks at the starting and ending positions of a selection range are displayed as triangles        (instead of vertical dashes), and the selection range is highlighted.    $TBS_FIXEDLENGTH - allows the size of the slider to be changed with the $TBM_SETTHUMBLENGTH message    $TBS_HORZ - Specifies a horizontal slider. This is the default    $TBS_LEFT - Places ticks on the left side of a vertical slider    $TBS_NOTHUMB - Specifies that the slider has no slider    $TBS_NOTICKS - Specifies that no ticks are placed on the slider    $TBS_REVERSED - Smaller number indicates \"higher\" and a larger number indicates \"lower\"    $TBS_RIGHT - Places ticks on the right side of a vertical slider    $TBS_TOP - Places ticks on the top of a horizontal slider    $TBS_TOOLTIPS - Creates a default ToolTip control that displays the slider's current position    $TBS_VERT - Creates a vertical sliderDefault: $TBS_AUTOTICKSForced : $WS_CHILD, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table.Default: $WS_EX_STATICEDGE"
        }]
    },
    "_GUICtrlSlider_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlSlider_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetBuddy": {
        "documentation": "Retrieves the handle to a slider control buddy window at a given location",
        "label": "_GUICtrlSlider_GetBuddy ( $hWnd, $bLocation )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bLocation",
            "documentation": "Which buddy window handle will be retrieved. This value can be one of the following:    True - Retrieves the handle to the buddy to the left of the slider.        If the slider control uses the $TBS_VERT style, the message will retrieve the buddy above the slider.    False - Retrieves the handle to the buddy to the right of the slider.        If the slider control uses the $TBS_VERT style, the message will retrieve the buddy below the slider."
        }]
    },
    "_GUICtrlSlider_GetChannelRect": {
        "documentation": "Retrieves the size and position of the bounding rectangle for a sliders's channel",
        "label": "_GUICtrlSlider_GetChannelRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetChannelRectEx": {
        "documentation": "Retrieves the size and position of the bounding rectangle for a sliders's channel",
        "label": "_GUICtrlSlider_GetChannelRectEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetLineSize": {
        "documentation": "Retrieves the number of logical positions the slider moves",
        "label": "_GUICtrlSlider_GetLineSize ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetLogicalTics": {
        "documentation": "Retrieves an array that contains the logical positions of the tick marks for a slider",
        "label": "_GUICtrlSlider_GetLogicalTics ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetNumTics": {
        "documentation": "Retrieves the number of tick marks from a slider",
        "label": "_GUICtrlSlider_GetNumTics ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetPageSize": {
        "documentation": "Retrieves the number of logical positions the slider moves",
        "label": "_GUICtrlSlider_GetPageSize ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetPos": {
        "documentation": "Retrieves the logical position the slider",
        "label": "_GUICtrlSlider_GetPos ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetRange": {
        "documentation": "Retrieves the maximum and minimum position for the slider",
        "label": "_GUICtrlSlider_GetRange ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetRangeMax": {
        "documentation": "Retrieves the maximum position for the slider",
        "label": "_GUICtrlSlider_GetRangeMax ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetRangeMin": {
        "documentation": "Retrieves the minimum position for the slider",
        "label": "_GUICtrlSlider_GetRangeMin ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetSel": {
        "documentation": "Retrieves the ending and starting position of the current selection range",
        "label": "_GUICtrlSlider_GetSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetSelEnd": {
        "documentation": "Retrieves the ending position of the current selection range",
        "label": "_GUICtrlSlider_GetSelEnd ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetSelStart": {
        "documentation": "Retrieves the starting position of the current selection range",
        "label": "_GUICtrlSlider_GetSelStart ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetThumbLength": {
        "documentation": "Retrieves the length of the slider",
        "label": "_GUICtrlSlider_GetThumbLength ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetThumbRect": {
        "documentation": "Retrieves the size and position of the bounding rectangle for the slider",
        "label": "_GUICtrlSlider_GetThumbRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetThumbRectEx": {
        "documentation": "Retrieves the size and position of the bounding rectangle for the slider",
        "label": "_GUICtrlSlider_GetThumbRectEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetTic": {
        "documentation": "Retrieves the logical position of a tick mark",
        "label": "_GUICtrlSlider_GetTic ( $hWnd, $iTic )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iTic",
            "documentation": "0-based index identifying a tick mark. Valid indexes are in the range from zero to two less than the tick count returned by the _GUICtrlSlider_GetNumTics() depends on the _GUICtrlSlider_SetTicFreq()."
        }]
    },
    "_GUICtrlSlider_GetTicPos": {
        "documentation": "Retrieves the current physical position of a tick mark",
        "label": "_GUICtrlSlider_GetTicPos ( $hWnd, $iTic )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iTic",
            "documentation": "0-based index identifying a tick mark. The positions of the first and last tick marks are not directly available via this message."
        }]
    },
    "_GUICtrlSlider_GetToolTips": {
        "documentation": "Retrieves the handle to the ToolTip control assigned to the slider, if any",
        "label": "_GUICtrlSlider_GetToolTips ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_GetUnicodeFormat": {
        "documentation": "Retrieves the Unicode character format flag for the control",
        "label": "_GUICtrlSlider_GetUnicodeFormat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlSlider_SetBuddy": {
        "documentation": "Assigns a window as the buddy window for a slider control",
        "label": "_GUICtrlSlider_SetBuddy ( $hWnd, $bLocation, $hBuddy )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bLocation",
            "documentation": "Following values:    True - The buddy will appear to the left of the slider if the control uses the $TBS_HORZ style        The buddy will appear above the slider if the control uses the $TBS_VERT style    False - The buddy will appear to the right of the slider if the control uses the $TBS_HORZ style        The buddy will appear below the slider if the control uses the $TBS_VERT style"
        }, {
            "label": "$hBuddy",
            "documentation": "Handle to buddy control"
        }]
    },
    "_GUICtrlSlider_SetLineSize": {
        "documentation": "Sets the number of logical positions the slider moves",
        "label": "_GUICtrlSlider_SetLineSize ( $hWnd, $iLineSize )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iLineSize",
            "documentation": "New line size"
        }]
    },
    "_GUICtrlSlider_SetPageSize": {
        "documentation": "Sets the number of logical positions the slider moves",
        "label": "_GUICtrlSlider_SetPageSize ( $hWnd, $iPageSize )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iPageSize",
            "documentation": "New page size"
        }]
    },
    "_GUICtrlSlider_SetPos": {
        "documentation": "Sets the current logical position of the slider",
        "label": "_GUICtrlSlider_SetPos ( $hWnd, $iPosition )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iPosition",
            "documentation": "New logical position of the slider"
        }]
    },
    "_GUICtrlSlider_SetRange": {
        "documentation": "Sets the range of minimum and maximum logical positions for the slider",
        "label": "_GUICtrlSlider_SetRange ( $hWnd, $iMinimum, $iMaximum )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMinimum",
            "documentation": "Minimum position for the slider"
        }, {
            "label": "$iMaximum",
            "documentation": "Maximum position for the slider"
        }]
    },
    "_GUICtrlSlider_SetRangeMax": {
        "documentation": "Sets the maximum logical position for the slider",
        "label": "_GUICtrlSlider_SetRangeMax ( $hWnd, $iMaximum )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMaximum",
            "documentation": "Maximum position for the slider"
        }]
    },
    "_GUICtrlSlider_SetRangeMin": {
        "documentation": "Sets the minimum logical position for the slider",
        "label": "_GUICtrlSlider_SetRangeMin ( $hWnd, $iMinimum )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMinimum",
            "documentation": "Minimum position for the slider"
        }]
    },
    "_GUICtrlSlider_SetSel": {
        "documentation": "Sets the starting and ending positions for the available selection range",
        "label": "_GUICtrlSlider_SetSel ( $hWnd, $iMinimum, $iMaximum )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMinimum",
            "documentation": "Starting logical position for the selection range"
        }, {
            "label": "$iMaximum",
            "documentation": "Ending logical position for the selection range"
        }]
    },
    "_GUICtrlSlider_SetSelEnd": {
        "documentation": "Sets the ending logical position of the current selection range",
        "label": "_GUICtrlSlider_SetSelEnd ( $hWnd, $iMaximum )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMaximum",
            "documentation": "Ending logical position for the selection range"
        }]
    },
    "_GUICtrlSlider_SetSelStart": {
        "documentation": "Sets the starting logical position of the current selection range",
        "label": "_GUICtrlSlider_SetSelStart ( $hWnd, $iMinimum )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMinimum",
            "documentation": "Starting logical position for the selection range"
        }]
    },
    "_GUICtrlSlider_SetThumbLength": {
        "documentation": "Sets the length of the slider",
        "label": "_GUICtrlSlider_SetThumbLength ( $hWnd, $iLength )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iLength",
            "documentation": "Length, in pixels, of the slider"
        }]
    },
    "_GUICtrlSlider_SetTic": {
        "documentation": "Sets a tick mark in a slider at the specified logical position",
        "label": "_GUICtrlSlider_SetTic ( $hWnd, $iPosition )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iPosition",
            "documentation": "Position of the tick markThis parameter can be any of the integer values in the slider's range of minimum to maximum positions"
        }]
    },
    "_GUICtrlSlider_SetTicFreq": {
        "documentation": "Sets the interval frequency for tick marks in a slider",
        "label": "_GUICtrlSlider_SetTicFreq ( $hWnd, $iFreg )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iFreg",
            "documentation": "Frequency of the tick marks."
        }]
    },
    "_GUICtrlSlider_SetTipSide": {
        "documentation": "Positions a ToolTip control",
        "label": "_GUICtrlSlider_SetTipSide ( $hWnd, $iLocation )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iLocation",
            "documentation": "The location at which to display the ToolTip control. This value can be one of the following:    $TBTS_TOP - Will be positioned above the slider. This flag is for use with horizontal sliders.    $TBTS_LEFT - Will be positioned to the left of the slider. This flag is for use with vertical sliders.    $TBTS_BOTTOM - Will be positioned below the slider This flag is for use with horizontal sliders.    $TBTS_RIGHT - Will be positioned to the right of the slider. This flag is for use with vertical sliders."
        }]
    },
    "_GUICtrlSlider_SetToolTips": {
        "documentation": "Assigns a ToolTip control to a slider control",
        "label": "_GUICtrlSlider_SetToolTips ( $hWnd, $hWndTT )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hWndTT",
            "documentation": "Handle to an existing ToolTip control"
        }]
    },
    "_GUICtrlSlider_SetUnicodeFormat": {
        "documentation": "Sets the Unicode character format flag for the control",
        "label": "_GUICtrlSlider_SetUnicodeFormat ( $hWnd, $bUnicode )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bUnicode",
            "documentation": "Determines the character set that is used by the control:    True - The control will use Unicode characters    False - The control will use ANSI characters"
        }]
    },
    "_GUICtrlStatusBar_Create": {
        "documentation": "Create a statusbar",
        "label": "_GUICtrlStatusBar_Create ( $hWnd [, $vPartEdge = -1 [, $vPartText = \"\" [, $iStyles = -1 [, $iExStyles = 0x00000000]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent window"
        }, {
            "label": "$vPartEdge",
            "documentation": "**[optional]** Width of part or parts, for more than 1 part pass in 0-based array in the following format:    $vPartEdge[0] - Right edge of part #1    $vPartEdge[1] - Right edge of part #2    $vPartEdge[n] - Right edge of part n"
        }, {
            "label": "$vPartText",
            "documentation": "**[optional]** Text of part or parts, for more than 1 part pass in 0-based array in the following format:    $vPartText[0] - First part    $vPartText[1] - Second part    $vPartText[n] - Last part"
        }, {
            "label": "$iStyles",
            "documentation": "**[optional]** Control styles:    $SBARS_SIZEGRIP - The status bar control will include a sizing grip at the right end of the status bar    $SBARS_TOOLTIPS - The status bar will have tooltipsForced: $WS_CHILD, $WS_VISIBLE"
        }, {
            "label": "$iExStyles",
            "documentation": "**[optional]** Control extended style. These correspond to the standard $WS_EX_* constants. See Extended Style Table."
        }]
    },
    "_GUICtrlStatusBar_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlStatusBar_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_EmbedControl": {
        "documentation": "Embeds a child control in the control",
        "label": "_GUICtrlStatusBar_EmbedControl ( $hWnd, $iPart, $hControl [, $iFit = 4] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index"
        }, {
            "label": "$hControl",
            "documentation": "Handle of control to embed in panel"
        }, {
            "label": "$iFit",
            "documentation": "**[optional]** Determines how to fit the control. Can be a combination of:    1 - Center the control horizontally    2 - Center the control vertically    4 - Fit the control to the status bar part"
        }]
    },
    "_GUICtrlStatusBar_GetBorders": {
        "documentation": "Retrieves the current widths of the horizontal and vertical borders",
        "label": "_GUICtrlStatusBar_GetBorders ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_GetBordersHorz": {
        "documentation": "Retrieves the current width of the horizontal border",
        "label": "_GUICtrlStatusBar_GetBordersHorz ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_GetBordersRect": {
        "documentation": "Retrieves the current width of the rectangle border",
        "label": "_GUICtrlStatusBar_GetBordersRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_GetBordersVert": {
        "documentation": "Retrieves the current width of the vertical border",
        "label": "_GUICtrlStatusBar_GetBordersVert ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_GetCount": {
        "documentation": "Retrieves the number of parts",
        "label": "_GUICtrlStatusBar_GetCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_GetHeight": {
        "documentation": "Retrieves the height of the statusbar",
        "label": "_GUICtrlStatusBar_GetHeight ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_GetIcon": {
        "documentation": "Retrieves the icon for a part",
        "label": "_GUICtrlStatusBar_GetIcon ( $hWnd [, $iIndex = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** 0-based index of the part that contains the icon to be retrieved.If this parameter is -1, the status bar is assumed to be a Simple Mode status bar."
        }]
    },
    "_GUICtrlStatusBar_GetParts": {
        "documentation": "Retrieves the number of parts and the part edges",
        "label": "_GUICtrlStatusBar_GetParts ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_GetRect": {
        "documentation": "Retrieves the bounding rectangle of a part",
        "label": "_GUICtrlStatusBar_GetRect ( $hWnd, $iPart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index"
        }]
    },
    "_GUICtrlStatusBar_GetRectEx": {
        "documentation": "Retrieves the bounding rectangle of a part",
        "label": "_GUICtrlStatusBar_GetRectEx ( $hWnd, $iPart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index.If the control is in simple mode this field is ignored and the rectangle of the status bar is returned."
        }]
    },
    "_GUICtrlStatusBar_GetText": {
        "documentation": "Retrieves the text from the specified part",
        "label": "_GUICtrlStatusBar_GetText ( $hWnd, $iPart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index"
        }]
    },
    "_GUICtrlStatusBar_GetTextFlags": {
        "documentation": "Retrieves the text length flags for a part",
        "label": "_GUICtrlStatusBar_GetTextFlags ( $hWnd, $iPart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index"
        }]
    },
    "_GUICtrlStatusBar_GetTextLength": {
        "documentation": "Retrieves the length of a part text",
        "label": "_GUICtrlStatusBar_GetTextLength ( $hWnd, $iPart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index"
        }]
    },
    "_GUICtrlStatusBar_GetTextLengthEx": {
        "documentation": "Retrieves the uFlag of a part",
        "label": "_GUICtrlStatusBar_GetTextLengthEx ( $hWnd, $iPart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index"
        }]
    },
    "_GUICtrlStatusBar_GetTipText": {
        "documentation": "Retrieves the ToolTip text for a part",
        "label": "_GUICtrlStatusBar_GetTipText ( $hWnd, $iPart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index"
        }]
    },
    "_GUICtrlStatusBar_GetUnicodeFormat": {
        "documentation": "Retrieves the Unicode character format flag",
        "label": "_GUICtrlStatusBar_GetUnicodeFormat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_GetWidth": {
        "documentation": "Retrieves the width of a part",
        "label": "_GUICtrlStatusBar_GetWidth ( $hWnd, $iPart )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index"
        }]
    },
    "_GUICtrlStatusBar_IsSimple": {
        "documentation": "Checks a status bar control to determine if it is in simple mode",
        "label": "_GUICtrlStatusBar_IsSimple ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_Resize": {
        "documentation": "Causes the status bar to resize itself",
        "label": "_GUICtrlStatusBar_Resize ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlStatusBar_SetBkColor": {
        "documentation": "Sets the background color",
        "label": "_GUICtrlStatusBar_SetBkColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "New background color. Specify the CLR_DEFAULT value to cause the status bar to use its default background color."
        }]
    },
    "_GUICtrlStatusBar_SetIcon": {
        "documentation": "Sets the icon for a part",
        "label": "_GUICtrlStatusBar_SetIcon ( $hWnd, $iPart [, $hIcon = -1 [, $sIconFile = \"\"]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index. If the control is in simple mode, this field is ignored."
        }, {
            "label": "$hIcon",
            "documentation": "**[optional]** Handle to the icon. If this value is -1, the icon is removed."
        }, {
            "label": "$sIconFile",
            "documentation": "**[optional]** Icon filename to be used."
        }]
    },
    "_GUICtrlStatusBar_SetMinHeight": {
        "documentation": "Sets the minimum height of a status window's drawing area",
        "label": "_GUICtrlStatusBar_SetMinHeight ( $hWnd, $iMinHeight )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iMinHeight",
            "documentation": "Minimum height, in pixels, of the window"
        }]
    },
    "_GUICtrlStatusBar_SetParts": {
        "documentation": "Sets the number of parts and the part edges",
        "label": "_GUICtrlStatusBar_SetParts ( $hWnd [, $aParts = -1 [, $aPartWidth = 25]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$aParts",
            "documentation": "**[optional]** Number of parts, can be an 0-based array of ints in the following format:    $aParts[0] - Right edge of part #1    $aParts[1] - Right edge of part #2    $aParts[n] - Right edge of part n"
        }, {
            "label": "$aPartWidth",
            "documentation": "**[optional]** Size of parts, can be an 0-based array of ints in the following format:    $aPartWidth[0] - width part #1    $aPartWidth[1] - width of part #2    $aPartWidth[n] - width of part n"
        }]
    },
    "_GUICtrlStatusBar_SetSimple": {
        "documentation": "Specifies whether a status window displays simple text or displays all window parts",
        "label": "_GUICtrlStatusBar_SetSimple ( $hWnd [, $bSimple = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bSimple",
            "documentation": "**[optional]** Sets the display of the windows    True - The window displays simple text    False - The window displays multiple parts"
        }]
    },
    "_GUICtrlStatusBar_SetText": {
        "documentation": "Sets the text in the specified part of a status window",
        "label": "_GUICtrlStatusBar_SetText ( $hWnd [, $sText = \"\" [, $iPart = 0 [, $iUFlag = 0]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "**[optional]** The text to display in the part"
        }, {
            "label": "$iPart",
            "documentation": "**[optional]** The part to hold the text"
        }, {
            "label": "$iUFlag",
            "documentation": "**[optional]** Type of drawing operation. The type can be one of the following values:    0 - The text is drawn with a border to appear lower than the plane of the window    $SBT_NOBORDERS - The text is drawn without borders    $SBT_OWNERDRAW - The text is drawn by the parent window    $SBT_POPOUT - The text is drawn with a border to appear higher than the plane of the window    $SBT_RTLREADING - The text will be displayed in the opposite direction to the text in the parent window"
        }]
    },
    "_GUICtrlStatusBar_SetTipText": {
        "documentation": "Sets the ToolTip text for a part",
        "label": "_GUICtrlStatusBar_SetTipText ( $hWnd, $iPart, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iPart",
            "documentation": "0-based part index"
        }, {
            "label": "$sText",
            "documentation": "Text of Tip"
        }]
    },
    "_GUICtrlStatusBar_SetUnicodeFormat": {
        "documentation": "Sets the Unicode character format flag",
        "label": "_GUICtrlStatusBar_SetUnicodeFormat ( $hWnd [, $bUnicode = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bUnicode",
            "documentation": "**[optional]** Unicode character format flag:    True - Control uses Unicode characters    False - Control uses ANSI characters"
        }]
    },
    "_GUICtrlStatusBar_ShowHide": {
        "documentation": "Show/Hide the StatusBar control",
        "label": "_GUICtrlStatusBar_ShowHide ( $hWnd, $iState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iState",
            "documentation": "State of the StatusBar, can be the following values:@SW_SHOW@SW_HIDE"
        }]
    },
    "_GUICtrlTab_ActivateTab": {
        "documentation": "Activates a tab by its index",
        "label": "_GUICtrlTab_ActivateTab ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }]
    },
    "_GUICtrlTab_ClickTab": {
        "documentation": "Clicks a tab",
        "label": "_GUICtrlTab_ClickTab ( $hWnd, $iIndex [, $sButton = \"left\" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the item"
        }, {
            "label": "$sButton",
            "documentation": "**[optional]** Button to click with"
        }, {
            "label": "$bMove",
            "documentation": "**[optional]** If True, the mouse will be moved. If False, the mouse does not move."
        }, {
            "label": "$iClicks",
            "documentation": "**[optional]** Number of clicks"
        }, {
            "label": "$iSpeed",
            "documentation": "**[optional]** Mouse movement speed"
        }]
    },
    "_GUICtrlTab_Create": {
        "documentation": "Create a TabControl control",
        "label": "_GUICtrlTab_Create ( $hWnd, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x00000040 [, $iExStyle = 0x00000000]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control styles:    $TCS_BOTTOM - Tabs appear at the bottom of the control    $TCS_BUTTONS - Tabs appear as buttons, and no border is drawn around the display area    $TCS_FIXEDWIDTH - All tabs are the same width    $TCS_FLATBUTTONS - Selected tabs appear as being indented into the background while other tabs appear as being on the same plane as the background.        This only affects tab controls with the $TCS_BUTTONS style.    $TCS_FOCUSNEVER - The control does not receive the input focus when clicked    $TCS_FOCUSONBUTTONDOWN - The control receives the input focus when clicked    $TCS_FORCEICONLEFT - Icons are aligned with the left edge of each fixed width tab.        This style can only be used with the $TCS_FIXEDWIDTH style.    $TCS_FORCELABELLEFT - Labels are aligned on the left edge of each fixed width tab.        The label is displayed immediately to the right of the icon instead of being centered.        This style can only be used with the    $TCS_FIXEDWIDTH style and it implies the $TCS_FORCEICONLEFT style.    $TCS_HOTTRACK - Items under the pointer are automatically highlighted.        You can check whether or not hot tracking is enabled by calling SystemParametersInfo.    $TCS_MULTILINE - Multiple rows of tabs are displayed, if necessary, so all tabs are visible at once    $TCS_MULTISELECT - Multiple tabs can be selected by holding down the CTRL key when clicking.        This style must be used with the $TCS_BUTTONS style.    $TCS_OWNERDRAWFIXED - The parent window is responsible for drawing tabs    $TCS_RAGGEDRIGHT - Rows of tabs will not be stretched to fill the entire width of the control.        This style is the default.    $TCS_RIGHT - Tabs appear vertically on the right side of controls that use the $TCS_VERTICAL style.        This value equals $TCS_BOTTOM. This style is not supported if you use visual styles.    $TCS_RIGHTJUSTIFY - The width of each tab is increased, if necessary, so that each row of tabs fills the entire width of the tab control.        This style is ignored unless the $TCS_MULTILINE style is also specified.    $TCS_SCROLLOPPOSITE - Unneeded tabs scroll to the opposite side of the control when a tab is selected    $TCS_SINGLELINE - Only one row of tabs is displayed. The user can scroll to see more tabs, if necessary.        This style is the default.    $TCS_TABS - Tabs appear as tabs, and a border is drawn around the display area.        This style is the default.    $TCS_TOOLTIPS - The tab control has a ToolTip control associated with it    $TCS_VERTICAL - Tabs appear at the left side of the control with tab text displayed vertically.        This style is valid only when used with the $TCS_MULTILINE style.        To make tabs appear on the right side of the control, also use the $TCS_RIGHT style.Default: $TCS_HOTTRACKForced: $WS_CHILD, $WS_CLIPSIBLINGS, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended styles:    $TCS_EX_FLATSEPARATORS - The control will draw separators between the tab items    $TCS_EX_REGISTERDROP - The control generates $TCN_GETOBJECT notification messages to request a drop target object when an object is dragged over the tab items."
        }]
    },
    "_GUICtrlTab_DeleteAllItems": {
        "documentation": "Deletes all tabs",
        "label": "_GUICtrlTab_DeleteAllItems ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_DeleteItem": {
        "documentation": "Deletes a tab",
        "label": "_GUICtrlTab_DeleteItem ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the item"
        }]
    },
    "_GUICtrlTab_DeselectAll": {
        "documentation": "Resets tabs, clearing any that were set to the pressed state",
        "label": "_GUICtrlTab_DeselectAll ( $hWnd [, $bExclude = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bExclude",
            "documentation": "**[optional]** Exclusion flag:    True - All tabs except for the one currently selected will be reset    False - All tab items will be reset"
        }]
    },
    "_GUICtrlTab_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlTab_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_FindTab": {
        "documentation": "Searches for a tab with the specific text",
        "label": "_GUICtrlTab_FindTab ( $hWnd, $sText [, $bInStr = False [, $iStart = 0]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to search for"
        }, {
            "label": "$bInStr",
            "documentation": "**[optional]** If True, the text can be anywhere in the tab's text."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** 0-based index of the tab to start searching from"
        }]
    },
    "_GUICtrlTab_GetCurFocus": {
        "documentation": "Returns the index of the item that has the focus in a tab control",
        "label": "_GUICtrlTab_GetCurFocus ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_GetCurSel": {
        "documentation": "Determines the currently selected tab",
        "label": "_GUICtrlTab_GetCurSel ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_GetDisplayRect": {
        "documentation": "Retrieves the display rectangle of the client area",
        "label": "_GUICtrlTab_GetDisplayRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlTab_GetDisplayRectEx": {
        "documentation": "Retrieves the display rectangle of the client area",
        "label": "_GUICtrlTab_GetDisplayRectEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlTab_GetExtendedStyle": {
        "documentation": "Retrieves the extended styles that are currently in use",
        "label": "_GUICtrlTab_GetExtendedStyle ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_GetImageList": {
        "documentation": "Retrieves the tab control image list",
        "label": "_GUICtrlTab_GetImageList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_GetItem": {
        "documentation": "Retrieves information about a tab",
        "label": "_GUICtrlTab_GetItem ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlTab_GetItemCount": {
        "documentation": "Retrieves the number of tabs",
        "label": "_GUICtrlTab_GetItemCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_GetItemImage": {
        "documentation": "Retrieves the image index for a tab",
        "label": "_GUICtrlTab_GetItemImage ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlTab_GetItemParam": {
        "documentation": "Retrieves the param data for a tab",
        "label": "_GUICtrlTab_GetItemParam ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlTab_GetItemRect": {
        "documentation": "Retrieves the bounding rectangle for a tab",
        "label": "_GUICtrlTab_GetItemRect ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlTab_GetItemRectEx": {
        "documentation": "Retrieves the bounding rectangle for a tab",
        "label": "_GUICtrlTab_GetItemRectEx ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlTab_GetItemState": {
        "documentation": "Retrieves the state of a tab",
        "label": "_GUICtrlTab_GetItemState ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlTab_GetItemText": {
        "documentation": "Retrieves the text of a tab",
        "label": "_GUICtrlTab_GetItemText ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlTab_GetRowCount": {
        "documentation": "Retrieves the current number of rows of tabs",
        "label": "_GUICtrlTab_GetRowCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_GetToolTips": {
        "documentation": "Retrieves the handle to the ToolTip control associated with the control",
        "label": "_GUICtrlTab_GetToolTips ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_GetUnicodeFormat": {
        "documentation": "Retrieves the Unicode character format flag for the control",
        "label": "_GUICtrlTab_GetUnicodeFormat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTab_HighlightItem": {
        "documentation": "Sets the highlight state of a tab item",
        "label": "_GUICtrlTab_HighlightItem ( $hWnd, $iIndex [, $bHighlight = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$bHighlight",
            "documentation": "**[optional]** If True, the tab is highlighted, otherwise the tab is reset"
        }]
    },
    "_GUICtrlTab_HitTest": {
        "documentation": "Determines where a point lies control",
        "label": "_GUICtrlTab_HitTest ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X position to test"
        }, {
            "label": "$iY",
            "documentation": "Y position to test"
        }]
    },
    "_GUICtrlTab_InsertItem": {
        "documentation": "Inserts a new tab",
        "label": "_GUICtrlTab_InsertItem ( $hWnd, $iIndex, $sText [, $iImage = -1 [, $iParam = 0]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Index of the new tab"
        }, {
            "label": "$sText",
            "documentation": "Tab text"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based tab image index"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Application defined data"
        }]
    },
    "_GUICtrlTab_RemoveImage": {
        "documentation": "Removes an image from the control's image list",
        "label": "_GUICtrlTab_RemoveImage ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the image to remove"
        }]
    },
    "_GUICtrlTab_SetCurFocus": {
        "documentation": "Sets the focus to a specified tab",
        "label": "_GUICtrlTab_SetCurFocus ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlTab_SetCurSel": {
        "documentation": "Selects a tab",
        "label": "_GUICtrlTab_SetCurSel ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }]
    },
    "_GUICtrlTab_SetExtendedStyle": {
        "documentation": "Sets the extended styles that are currently in use",
        "label": "_GUICtrlTab_SetExtendedStyle ( $hWnd, $iStyle )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iStyle",
            "documentation": "Extended styles currently in use:    $TCS_EX_FLATSEPARATORS - The control will draw separators between the tab items    $TCS_EX_REGISTERDROP - The control generates TCN_GETOBJECT notification messages to request a drop target object when an object is dragged over the tab items."
        }]
    },
    "_GUICtrlTab_SetImageList": {
        "documentation": "Sets the image list associated with a tab control",
        "label": "_GUICtrlTab_SetImageList ( $hWnd, $hImage )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hImage",
            "documentation": "Handle to the image list to assign to the tab control"
        }]
    },
    "_GUICtrlTab_SetItem": {
        "documentation": "Sets information about a tab",
        "label": "_GUICtrlTab_SetItem ( $hWnd, $iIndex [, $sText = -1 [, $iState = -1 [, $iImage = -1 [, $iParam = -1]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$sText",
            "documentation": "**[optional]** Item text"
        }, {
            "label": "$iState",
            "documentation": "**[optional]** Item state"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based item image"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Application defined data"
        }]
    },
    "_GUICtrlTab_SetItemImage": {
        "documentation": "Sets the image of a tab",
        "label": "_GUICtrlTab_SetItemImage ( $hWnd, $iIndex, $iImage )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iImage",
            "documentation": "0-based item image"
        }]
    },
    "_GUICtrlTab_SetItemParam": {
        "documentation": "Sets the param data of a tab",
        "label": "_GUICtrlTab_SetItemParam ( $hWnd, $iIndex, $iParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iParam",
            "documentation": "Application defined data"
        }]
    },
    "_GUICtrlTab_SetItemSize": {
        "documentation": "Sets the width and height of tabs in a fixed width or owner drawn control",
        "label": "_GUICtrlTab_SetItemSize ( $hWnd, $iWidth, $iHeight )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iWidth",
            "documentation": "New width, in pixels"
        }, {
            "label": "$iHeight",
            "documentation": "New height, in pixels"
        }]
    },
    "_GUICtrlTab_SetItemState": {
        "documentation": "Sets the state of a tab",
        "label": "_GUICtrlTab_SetItemState ( $hWnd, $iIndex, $iState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$iState",
            "documentation": "Item state. Can be a combination of:    $TCIS_BUTTONPRESSED - The tab control item is selected    $TCIS_HIGHLIGHTED - The tab control item is highlighted"
        }]
    },
    "_GUICtrlTab_SetItemText": {
        "documentation": "Sets the text of a tab",
        "label": "_GUICtrlTab_SetItemText ( $hWnd, $iIndex, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based item index"
        }, {
            "label": "$sText",
            "documentation": "Item text"
        }]
    },
    "_GUICtrlTab_SetMinTabWidth": {
        "documentation": "Sets the minimum width of items in a tab control",
        "label": "_GUICtrlTab_SetMinTabWidth ( $hWnd, $iMinWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iMinWidth",
            "documentation": "Minimum width to be set for a tab control item.If -1, the control will use the default width."
        }]
    },
    "_GUICtrlTab_SetPadding": {
        "documentation": "Sets the amount of space around each tab's icon and label",
        "label": "_GUICtrlTab_SetPadding ( $hWnd, $iHorz, $iVert )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iHorz",
            "documentation": "Amount of horizontal padding, in pixels"
        }, {
            "label": "$iVert",
            "documentation": "Amount of vertical padding, in pixels"
        }]
    },
    "_GUICtrlTab_SetToolTips": {
        "documentation": "Sets the handle to the ToolTip control associated with the control",
        "label": "_GUICtrlTab_SetToolTips ( $hWnd, $hToolTip )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hToolTip",
            "documentation": "Handle to the ToolTip control"
        }]
    },
    "_GUICtrlTab_SetUnicodeFormat": {
        "documentation": "Sets the Unicode character format flag for the control",
        "label": "_GUICtrlTab_SetUnicodeFormat ( $hWnd, $bUnicode )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bUnicode",
            "documentation": "Unicode character flag:    True - Control uses Unicode characters    False - Control uses ANSI characters"
        }]
    },
    "_GUICtrlToolbar_AddBitmap": {
        "documentation": "Adds images to the image list",
        "label": "_GUICtrlToolbar_AddBitmap ( $hWnd, $iButtons, $hInst, $iID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iButtons",
            "documentation": "Number of button images in the bitmap"
        }, {
            "label": "$hInst",
            "documentation": "Handle to the module instance with the executable file that contains a bitmap resource.To use bitmap handles instead of resource IDs, set this to 0. You can add system defined button bitmaps to the list by specifying -1 as the $hInst member and one of the following values as the $iID member:    $IDB_STD_LARGE_COLOR - Adds large, color standard bitmaps    $IDB_STD_SMALL_COLOR - Adds small, color standard bitmaps    $IDB_VIEW_LARGE_COLOR - Adds large, color view bitmaps    $IDB_VIEW_SMALL_COLOR - Adds small, color view bitmaps"
        }, {
            "label": "$iID",
            "documentation": "If $hInst is 0, set this member to the bitmap handle of the bitmap with the button images.Otherwise, set it to the resource identifier of the bitmap with the button images.The following are resource IDs to the standard and view bitmaps:    $STD_COPY - Copy image    $STD_CUT - Cut image    $STD_DELETE - Delete image    $STD_FILENEW - New file image    $STD_FILEOPEN - Open file image    $STD_FILESAVE - Save file image    $STD_FIND - Find image    $STD_HELP - Help image    $STD_PASTE - Paste image    $STD_PRINT - Print image    $STD_PRINTPRE - Print preview image    $STD_PROPERTIES - Properties image    $STD_REDOW - Redo image    $STD_REPLACE - Replace image    $STD_UNDO - Undo image    $VIEW_DETAILS - View details image    $VIEW_LARGEICONS - View large icons image    $VIEW_LIST - View list image    $VIEW_SMALLICONS - View small icons image.    $VIEW_SORTDATE - Sort by date image.    $VIEW_SORTNAME - Sort by name image.    $VIEW_SORTSIZE - Sort by size image.    $VIEW_SORTTYPE - Sort by type image."
        }]
    },
    "_GUICtrlToolbar_AddButton": {
        "documentation": "Adds a button",
        "label": "_GUICtrlToolbar_AddButton ( $hWnd, $iID, $iImage [, $iString = 0 [, $iStyle = 0 [, $iState = 4 [, $iParam = 0]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iID",
            "documentation": "Command ID"
        }, {
            "label": "$iImage",
            "documentation": "0-based index of the button image.Set this parameter to -1 and the control will send the $TBN_GETDISPINFO notification to retrieve the image index when it is needed.Set this to -2 to indicate that the button does not have an image.The button layout will only include space for the text.If the button is a separator, this is the width of the separator, in pixels."
        }, {
            "label": "$iString",
            "documentation": "**[optional]** 0-based index of the button string that was set with AddString"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Button style. Can be a combination of the following:    $BTNS_AUTOSIZE - The toolbar control should not assign the standard width to the button    $BTNS_BUTTON - Standard button (Default)    $BTNS_CHECK - Toggles between the pressed and nonpressed    $BTNS_CHECKGROUP - Button that stays pressed until another button in the group is pressed    $BTNS_DROPDOWN - Creates a drop-down style button that can display a list    $BTNS_GROUP - Button that stays pressed until another button in the group is pressed    $BTNS_NOPREFIX - The button text will not have an accelerator prefix    $BTNS_SEP - Creates a separator    $BTNS_SHOWTEXT - Specifies that button text should be displayed    $BTNS_WHOLEDROPDOWN - Specifies that the button will have a drop-down arrow"
        }, {
            "label": "$iState",
            "documentation": "**[optional]** Button state. Can be a combination of the following:    $TBSTATE_CHECKED - The button has the $TBSTYLE_CHECK style and is being clicked    $TBSTATE_PRESSED - The button is being clicked    $TBSTATE_ENABLED - The button accepts user input    $TBSTATE_HIDDEN - The button is not visible and cannot receive user input    $TBSTATE_INDETERMINATE - The button is grayed    $TBSTATE_WRAP - The button is followed by a line break    $TBSTATE_ELLIPSES - The button's text is cut off and an ellipsis is displayed    $TBSTATE_MARKED - The button is marked"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Application-defined value"
        }]
    },
    "_GUICtrlToolbar_AddButtonSep": {
        "documentation": "Adds a separator",
        "label": "_GUICtrlToolbar_AddButtonSep ( $hWnd [, $iWidth = 6] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to toolbar"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Separator width"
        }]
    },
    "_GUICtrlToolbar_AddString": {
        "documentation": "Adds a new string to the toolbar's string pool",
        "label": "_GUICtrlToolbar_AddString ( $hWnd, $sString )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sString",
            "documentation": "String to add"
        }]
    },
    "_GUICtrlToolbar_ButtonCount": {
        "documentation": "Retrieves a count of the buttons",
        "label": "_GUICtrlToolbar_ButtonCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_CheckButton": {
        "documentation": "Checks or unchecks a given button",
        "label": "_GUICtrlToolbar_CheckButton ( $hWnd, $iCommandID [, $bCheck = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$bCheck",
            "documentation": "**[optional]** Check state:    True - Button will be checked    False - Button will be unchecked"
        }]
    },
    "_GUICtrlToolbar_ClickAccel": {
        "documentation": "Clicks a specific button using it's accelerator",
        "label": "_GUICtrlToolbar_ClickAccel ( $hWnd, $sAccelKey [, $sButton = \"left\" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sAccelKey",
            "documentation": "Button accelerator"
        }, {
            "label": "$sButton",
            "documentation": "**[optional]** Button to click"
        }, {
            "label": "$bMove",
            "documentation": "**[optional]** Mouse movement flag:    True - Mouse will be moved    False - Mouse will not be moved"
        }, {
            "label": "$iClicks",
            "documentation": "**[optional]** Number of clicks"
        }, {
            "label": "$iSpeed",
            "documentation": "**[optional]** Mouse movement speed"
        }]
    },
    "_GUICtrlToolbar_ClickButton": {
        "documentation": "Clicks a specific button",
        "label": "_GUICtrlToolbar_ClickButton ( $hWnd, $iCommandID [, $sButton = \"left\" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$sButton",
            "documentation": "**[optional]** Button to click"
        }, {
            "label": "$bMove",
            "documentation": "**[optional]** Mouse movement flag:    True - Mouse will be moved    False - Mouse will not be moved"
        }, {
            "label": "$iClicks",
            "documentation": "**[optional]** Number of clicks"
        }, {
            "label": "$iSpeed",
            "documentation": "**[optional]** Mouse movement speed"
        }]
    },
    "_GUICtrlToolbar_ClickIndex": {
        "documentation": "Clicks a specific button using it's index",
        "label": "_GUICtrlToolbar_ClickIndex ( $hWnd, $iIndex [, $sButton = \"left\" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 1]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Button index"
        }, {
            "label": "$sButton",
            "documentation": "**[optional]** Button to click"
        }, {
            "label": "$bMove",
            "documentation": "**[optional]** Mouse movement flag:    True - Mouse will be moved    False - Mouse will not be moved"
        }, {
            "label": "$iClicks",
            "documentation": "**[optional]** Number of clicks"
        }, {
            "label": "$iSpeed",
            "documentation": "**[optional]** Mouse movement speed"
        }]
    },
    "_GUICtrlToolbar_CommandToIndex": {
        "documentation": "Retrieves the index for the button associated with the specified command identifier",
        "label": "_GUICtrlToolbar_CommandToIndex ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_Create": {
        "documentation": "Create a Toolbar control",
        "label": "_GUICtrlToolbar_Create ( $hWnd [, $iStyle = 0x00000800 [, $iExStyle = 0x00000000]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control styles:    $TBSTYLE_ALTDRAG - Allows users to change a toolbar button's position by dragging it while holding down the ALT key.        If this style is not specified, the user must hold down the SHIFT key while dragging a button.        Note that the $CCS_ADJUSTABLE style must be specified to enable toolbar buttons to be dragged.    $TBSTYLE_CUSTOMERASE - Generates $NM_CUSTOMDRAW messages when the toolbar processes $WM_ERASEBKGND messages    $TBSTYLE_FLAT - Creates a flat toolbar    $TBSTYLE_LIST - Creates a flat toolbar with button text to the right of the bitmap    $TBSTYLE_REGISTERDROP - Generates $TBN_GETOBJECT notification messages to request drop target objects when the cursor passes over toolbar buttons.    $TBSTYLE_TOOLTIPS - Creates a ToolTip control that an application can use to display descriptive text for the buttons in the toolbar.    $TBSTYLE_TRANSPARENT - Creates a transparent toolbar. In a transparent toolbar, the toolbar is transparent but the buttons are not.        Button text appears under button bitmaps. To prevent repainting problems, this style should be set before the toolbar control becomes visible.    $TBSTYLE_WRAPABLE - Creates a toolbar that can have multiple lines of buttons.        Toolbar buttons can \"wrap\" to the next line when the toolbar becomes too narrow to include all buttons on the same line.        When the toolbar is wrapped, the break will occur on either the rightmost separator or the rightmost button if there are no separators on the bar.        This style must be set to display a vertical toolbar control when the toolbar is part of a vertical rebar control.Default: $TBSTYLE_FLATForced: $WS_CHILD, $WS_CLIPSIBLINGS, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended styles:    $TBSTYLE_EX_DRAWDDARROWS - Allows buttons to have a separate dropdown arrow. Buttons that have the    $BTNS_DROPDOWN style will be drawn with a drop down arrow in a separate section, to the right of the button.        If the arrow is clicked, only the arrow portion of the button will depress, and the toolbar control will send a $TBN_DROPDOWN notification to prompt the application to display the dropdown menu.        If the main part of the button is clicked, the toolbar control sends a $WM_COMMAND message with the button's ID.    $TBSTYLE_EX_HIDECLIPPEDBUTTONS - Hides partially clipped buttons    $TBSTYLE_EX_DOUBLEBUFFER - Requires the toolbar to be double buffered    $TBSTYLE_EX_MIXEDBUTTONS - Allows you to set text for all buttons, but only display it for the buttons with the $BTNS_SHOWTEXT button style.        The $TBSTYLE_LIST style must also be set.        Normally, when a button does not display text, you must handle $TBN_GETINFOTIP to display a ToolTip.        With the $TBSTYLE_EX_MIXEDBUTTONS extended style, text that is set but not displayed on a button will automatically be used as the button's ToolTip text.        You only need to handle $TBN_GETINFOTIP if it needs more flexibility in specifying the ToolTip text."
        }]
    },
    "_GUICtrlToolbar_Customize": {
        "documentation": "Displays the Customize Toolbar dialog box",
        "label": "_GUICtrlToolbar_Customize ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_DeleteButton": {
        "documentation": "Deletes a button from the toolbar",
        "label": "_GUICtrlToolbar_DeleteButton ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlToolbar_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_EnableButton": {
        "documentation": "Enables or disables the specified button",
        "label": "_GUICtrlToolbar_EnableButton ( $hWnd, $iCommandID [, $bEnable = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$bEnable",
            "documentation": "**[optional]** Enable flag:    True - Button will be enabled    False - Button will be disabled"
        }]
    },
    "_GUICtrlToolbar_FindToolbar": {
        "documentation": "Finds a specific toolbar",
        "label": "_GUICtrlToolbar_FindToolbar ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Window handle or text of window"
        }, {
            "label": "$sText",
            "documentation": "Button text to search for"
        }]
    },
    "_GUICtrlToolbar_GetAnchorHighlight": {
        "documentation": "Retrieves the anchor highlight setting",
        "label": "_GUICtrlToolbar_GetAnchorHighlight ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetBitmapFlags": {
        "documentation": "Retrieves the flags that describe the type of bitmap to be used",
        "label": "_GUICtrlToolbar_GetBitmapFlags ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetButtonBitmap": {
        "documentation": "Retrieves the index of the bitmap associated with a button",
        "label": "_GUICtrlToolbar_GetButtonBitmap ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_GetButtonInfo": {
        "documentation": "Retrieves information for a button",
        "label": "_GUICtrlToolbar_GetButtonInfo ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_GetButtonInfoEx": {
        "documentation": "Retrieves extended information for a button",
        "label": "_GUICtrlToolbar_GetButtonInfoEx ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_GetButtonParam": {
        "documentation": "Retrieves the button param value",
        "label": "_GUICtrlToolbar_GetButtonParam ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_GetButtonRect": {
        "documentation": "Retrieves the bounding rectangle for a button",
        "label": "_GUICtrlToolbar_GetButtonRect ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_GetButtonRectEx": {
        "documentation": "Retrieves the bounding rectangle for a specified toolbar button",
        "label": "_GUICtrlToolbar_GetButtonRectEx ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_GetButtonSize": {
        "documentation": "Retrieves the current button width and height, in pixels",
        "label": "_GUICtrlToolbar_GetButtonSize ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetButtonState": {
        "documentation": "Retrieves information about the state of the specified button",
        "label": "_GUICtrlToolbar_GetButtonState ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_GetButtonStyle": {
        "documentation": "Retrieves the style flags of a button",
        "label": "_GUICtrlToolbar_GetButtonStyle ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_GetButtonText": {
        "documentation": "Retrieves the display text of a button",
        "label": "_GUICtrlToolbar_GetButtonText ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_GetColorScheme": {
        "documentation": "Retrieves the color scheme information",
        "label": "_GUICtrlToolbar_GetColorScheme ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetDisabledImageList": {
        "documentation": "Retrieves the disabled button image list",
        "label": "_GUICtrlToolbar_GetDisabledImageList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetExtendedStyle": {
        "documentation": "Retrieves the extended styles",
        "label": "_GUICtrlToolbar_GetExtendedStyle ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetHotImageList": {
        "documentation": "Retrieves the hot button image list",
        "label": "_GUICtrlToolbar_GetHotImageList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetHotItem": {
        "documentation": "Retrieves the index of the hot item",
        "label": "_GUICtrlToolbar_GetHotItem ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetImageList": {
        "documentation": "Retrieves the default state image list",
        "label": "_GUICtrlToolbar_GetImageList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetInsertMark": {
        "documentation": "Retrieves the current insertion mark",
        "label": "_GUICtrlToolbar_GetInsertMark ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetInsertMarkColor": {
        "documentation": "Retrieves the color used to draw the insertion mark",
        "label": "_GUICtrlToolbar_GetInsertMarkColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetMaxSize": {
        "documentation": "Retrieves the total size of all of the visible buttons and separators",
        "label": "_GUICtrlToolbar_GetMaxSize ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetMetrics": {
        "documentation": "Retrieves the metrics of a toolbar control",
        "label": "_GUICtrlToolbar_GetMetrics ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetPadding": {
        "documentation": "Retrieves the horizontal and vertical padding",
        "label": "_GUICtrlToolbar_GetPadding ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetRows": {
        "documentation": "Retrieves the number of rows of buttons",
        "label": "_GUICtrlToolbar_GetRows ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetString": {
        "documentation": "Retrieves a string from the string pool",
        "label": "_GUICtrlToolbar_GetString ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Index of the string"
        }]
    },
    "_GUICtrlToolbar_GetStyle": {
        "documentation": "Retrieves the styles currently in use for a toolbar control",
        "label": "_GUICtrlToolbar_GetStyle ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetStyleAltDrag": {
        "documentation": "Indicates that the control allows buttons to be dragged",
        "label": "_GUICtrlToolbar_GetStyleAltDrag ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetStyleCustomErase": {
        "documentation": "Indicates that the control generates NM_CUSTOMDRAW notification messages",
        "label": "_GUICtrlToolbar_GetStyleCustomErase ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetStyleFlat": {
        "documentation": "Indicates that the control is flat",
        "label": "_GUICtrlToolbar_GetStyleFlat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetStyleList": {
        "documentation": "Indicates that the control has button text to the right of the bitmap",
        "label": "_GUICtrlToolbar_GetStyleList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetStyleRegisterDrop": {
        "documentation": "Indicates that the control generates TBN_GETOBJECT notification messages",
        "label": "_GUICtrlToolbar_GetStyleRegisterDrop ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetStyleToolTips": {
        "documentation": "Indicates that the control has tooltips",
        "label": "_GUICtrlToolbar_GetStyleToolTips ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetStyleTransparent": {
        "documentation": "Indicates that the control is transparent",
        "label": "_GUICtrlToolbar_GetStyleTransparent ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetStyleWrapable": {
        "documentation": "Indicates that the control is wrapable",
        "label": "_GUICtrlToolbar_GetStyleWrapable ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetTextRows": {
        "documentation": "Retrieves the maximum number of text rows that can be displayed on a button",
        "label": "_GUICtrlToolbar_GetTextRows ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetToolTips": {
        "documentation": "Retrieves the handle to the ToolTip control",
        "label": "_GUICtrlToolbar_GetToolTips ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_GetUnicodeFormat": {
        "documentation": "Retrieves the Unicode character format flag",
        "label": "_GUICtrlToolbar_GetUnicodeFormat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_GUICtrlToolbar_HideButton": {
        "documentation": "Hides or shows the specified button",
        "label": "_GUICtrlToolbar_HideButton ( $hWnd, $iCommandID [, $bHide = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$bHide",
            "documentation": "**[optional]** State indicator:    True - Button will be hidden    False - Button will be made visible"
        }]
    },
    "_GUICtrlToolbar_HighlightButton": {
        "documentation": "Sets the highlight state of a given button control",
        "label": "_GUICtrlToolbar_HighlightButton ( $hWnd, $iCommandID [, $bHighlight = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$bHighlight",
            "documentation": "**[optional]** Highlight state:    True - Button will be highlighted    False - Button will be unhighlighted"
        }]
    },
    "_GUICtrlToolbar_HitTest": {
        "documentation": "Determines where a point lies within the control",
        "label": "_GUICtrlToolbar_HitTest ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X position to test"
        }, {
            "label": "$iY",
            "documentation": "Y position to test"
        }]
    },
    "_GUICtrlToolbar_IndexToCommand": {
        "documentation": "Retrieves the command identifier associated with the button",
        "label": "_GUICtrlToolbar_IndexToCommand ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Button index"
        }]
    },
    "_GUICtrlToolbar_InsertButton": {
        "documentation": "Inserts a button",
        "label": "_GUICtrlToolbar_InsertButton ( $hWnd, $iIndex, $iID, $iImage [, $sText = \"\" [, $iStyle = 0 [, $iState = 4 [, $iParam = 0]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of a button"
        }, {
            "label": "$iID",
            "documentation": "Command ID"
        }, {
            "label": "$iImage",
            "documentation": "0-based image index"
        }, {
            "label": "$sText",
            "documentation": "**[optional]** Button text"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Button style. Can be a combination of the following:    $BTNS_AUTOSIZE - The toolbar control should not assign the standard width to the button    $BTNS_BUTTON - Standard button    $BTNS_CHECK - Toggles between the pressed and nonpressed    $BTNS_CHECKGROUP - Button that stays pressed until another button in the group is pressed    $BTNS_DROPDOWN - Creates a drop-down style button that can display a list    $BTNS_GROUP - Button that stays pressed until another button in the group is pressed    $BTNS_NOPREFIX - The button text will not have an accelerator prefix    $BTNS_SEP - Creates a separator    $BTNS_SHOWTEXT - Specifies that button text should be displayed    $BTNS_WHOLEDROPDOWN - Specifies that the button will have a drop-down arrow"
        }, {
            "label": "$iState",
            "documentation": "**[optional]** Button state. Can be a combination of the following:    $TBSTATE_CHECKED - The button has the $TBSTYLE_CHECK style and is being clicked    $TBSTATE_PRESSED - The button is being clicked    $TBSTATE_ENABLED - The button accepts user input    $TBSTATE_HIDDEN - The button is not visible and cannot receive user input    $TBSTATE_INDETERMINATE - The button is grayed    $TBSTATE_WRAP - The button is followed by a line break    $TBSTATE_ELLIPSES - The button's text is cut off and an ellipsis is displayed    $TBSTATE_MARKED - The button is marked"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Application-defined value"
        }]
    },
    "_GUICtrlToolbar_InsertMarkHitTest": {
        "documentation": "Retrieves the insertion mark information for a point",
        "label": "_GUICtrlToolbar_InsertMarkHitTest ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X position relative to the client area"
        }, {
            "label": "$iY",
            "documentation": "Y position relative to the client area"
        }]
    },
    "_GUICtrlToolbar_IsButtonChecked": {
        "documentation": "Indicates whether the specified button is checked",
        "label": "_GUICtrlToolbar_IsButtonChecked ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_IsButtonEnabled": {
        "documentation": "Indicates whether the specified button is enabled",
        "label": "_GUICtrlToolbar_IsButtonEnabled ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_IsButtonHidden": {
        "documentation": "Indicates whether the specified button is hidden",
        "label": "_GUICtrlToolbar_IsButtonHidden ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_IsButtonHighlighted": {
        "documentation": "Indicates whether the specified button is hilighted",
        "label": "_GUICtrlToolbar_IsButtonHighlighted ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_IsButtonIndeterminate": {
        "documentation": "Indicates whether the specified button is indeterminate",
        "label": "_GUICtrlToolbar_IsButtonIndeterminate ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_IsButtonPressed": {
        "documentation": "Indicates that the button is being clicked",
        "label": "_GUICtrlToolbar_IsButtonPressed ( $hWnd, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }]
    },
    "_GUICtrlToolbar_LoadBitmap": {
        "documentation": "Adds a bitmap to the image list from a file",
        "label": "_GUICtrlToolbar_LoadBitmap ( $hWnd, $sFileName )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to toolbar"
        }, {
            "label": "$sFileName",
            "documentation": "Fully qualified path to bitmap file"
        }]
    },
    "_GUICtrlToolbar_LoadImages": {
        "documentation": "Loads system defined button images into a toolbar control's image list",
        "label": "_GUICtrlToolbar_LoadImages ( $hWnd, $iBitMapID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iBitMapID",
            "documentation": "Identifier of a system-defined button image list. Can be set to one of the following values:    $IDB_HIST_LARGE_COLOR    $IDB_HIST_SMALL_COLOR    $IDB_STD_LARGE_COLOR    $IDB_STD_SMALL_COLOR    $IDB_VIEW_LARGE_COLOR    $IDB_VIEW_SMALL_COLOR    $IDB_HIST_NORMAL    $IDB_HIST_HOT    $IDB_HIST_DISABLED    $IDB_HIST_PRESSED"
        }]
    },
    "_GUICtrlToolbar_MapAccelerator": {
        "documentation": "Determines the ID of the button that corresponds to the specified accelerator",
        "label": "_GUICtrlToolbar_MapAccelerator ( $hWnd, $sAccelKey )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sAccelKey",
            "documentation": "Accelerator character"
        }]
    },
    "_GUICtrlToolbar_MoveButton": {
        "documentation": "Moves a button from one index to another",
        "label": "_GUICtrlToolbar_MoveButton ( $hWnd, $iOldPos, $iNewPos )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iOldPos",
            "documentation": "0-based index of the button to be moved"
        }, {
            "label": "$iNewPos",
            "documentation": "0-based index where the button will be moved"
        }]
    },
    "_GUICtrlToolbar_PressButton": {
        "documentation": "Presses or releases the specified button",
        "label": "_GUICtrlToolbar_PressButton ( $hWnd, $iCommandID [, $bPress = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$bPress",
            "documentation": "**[optional]** Pressed state:    True - Button will be set to a pressed state    False - Button will be set to an unpressed state"
        }]
    },
    "_GUICtrlToolbar_SetAnchorHighlight": {
        "documentation": "Sets the anchor highlight setting",
        "label": "_GUICtrlToolbar_SetAnchorHighlight ( $hWnd, $bAnchor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bAnchor",
            "documentation": "Anchor highlighting setting:    True - Anchor highlighting will be enabled    False - Anchor highlighting will be disabled"
        }]
    },
    "_GUICtrlToolbar_SetBitmapSize": {
        "documentation": "Sets the size of the bitmapped images to be added to a toolbar",
        "label": "_GUICtrlToolbar_SetBitmapSize ( $hWnd, $iWidth, $iHeight )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iWidth",
            "documentation": "Width, in pixels, of the bitmapped images"
        }, {
            "label": "$iHeight",
            "documentation": "Height, in pixels, of the bitmapped images"
        }]
    },
    "_GUICtrlToolbar_SetButtonBitMap": {
        "documentation": "Sets the index of the bitmap associated with a button",
        "label": "_GUICtrlToolbar_SetButtonBitMap ( $hWnd, $iCommandID, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of an images image list"
        }]
    },
    "_GUICtrlToolbar_SetButtonInfo": {
        "documentation": "Sets information for a button",
        "label": "_GUICtrlToolbar_SetButtonInfo ( $hWnd, $iCommandID [, $iImage = -3 [, $iState = -1 [, $iStyle = -1 [, $iWidth = -1 [, $iParam = -1]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the button image.Set this parameter to -1 and the control will send the $TBN_GETDISPINFO notification to retrieve the image index when it is needed.Set this to -2 to indicate that the button does not have an image.The button layout will only include space for the text.If the button is a separator, this is the width of the separator, in pixels."
        }, {
            "label": "$iState",
            "documentation": "**[optional]** Button state. Can be a combination of the following:    $TBSTATE_CHECKED - The button being clicked    $TBSTATE_PRESSED - The button is being clicked    $TBSTATE_ENABLED - The button accepts user input    $TBSTATE_HIDDEN - The button is not visible    $TBSTATE_INDETERMINATE - The button is grayed    $TBSTATE_WRAP - The button is followed by a line break    $TBSTATE_ELLIPSES - The button's text is cut off    $TBSTATE_MARKED - The button is marked"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Button style. Can be a combination of the following:    $BTNS_AUTOSIZE - The control should not assign the standard width    $BTNS_BUTTON - Standard button    $BTNS_CHECK - Toggles between the pressed and nonpressed    $BTNS_CHECKGROUP - Button that stays pressed until another button is pressed    $BTNS_DROPDOWN - Creates a drop-down style button that can display a list    $BTNS_GROUP - Button that stays pressed until another button is pressed    $BTNS_NOPREFIX - The button text will not have an accelerator prefix    $BTNS_SEP - Creates a separator    $BTNS_SHOWTEXT - Specifies that button text should be displayed    $BTNS_WHOLEDROPDOWN - Specifies that the button will have a drop-down arrow"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Button width"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Application-defined value"
        }]
    },
    "_GUICtrlToolbar_SetButtonInfoEx": {
        "documentation": "Sets extended information for a button",
        "label": "_GUICtrlToolbar_SetButtonInfoEx ( $hWnd, $iCommandID, $tButton )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$tButton",
            "documentation": "$tagTBBUTTONINFO structure"
        }]
    },
    "_GUICtrlToolbar_SetButtonParam": {
        "documentation": "Sets the button param value",
        "label": "_GUICtrlToolbar_SetButtonParam ( $hWnd, $iCommandID, $iParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$iParam",
            "documentation": "Application-defined value"
        }]
    },
    "_GUICtrlToolbar_SetButtonSize": {
        "documentation": "Sets the size of the buttons to be added to a toolbar",
        "label": "_GUICtrlToolbar_SetButtonSize ( $hWnd, $iHeight, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iHeight",
            "documentation": "Height, in pixels, of the buttons"
        }, {
            "label": "$iWidth",
            "documentation": "Width, in pixels, of the buttons"
        }]
    },
    "_GUICtrlToolbar_SetButtonState": {
        "documentation": "Sets information about the state of the specified button",
        "label": "_GUICtrlToolbar_SetButtonState ( $hWnd, $iCommandID, $iState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$iState",
            "documentation": "Button state. Can be one or more of the following:    $TBSTATE_CHECKED - The button has the $TBSTYLE_CHECK style and is being clicked    $TBSTATE_PRESSED - The button is being clicked    $TBSTATE_ENABLED - The button accepts user input    $TBSTATE_HIDDEN - The button is not visible and cannot receive user input    $TBSTATE_INDETERMINATE - The button is grayed    $TBSTATE_WRAP - The button is followed by a line break    $TBSTATE_ELLIPSES - The button's text is cut off and an ellipsis is displayed    $TBSTATE_MARKED - The button is marked"
        }]
    },
    "_GUICtrlToolbar_SetButtonStyle": {
        "documentation": "Sets the style flags of a button",
        "label": "_GUICtrlToolbar_SetButtonStyle ( $hWnd, $iCommandID, $iStyle )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$iStyle",
            "documentation": "Button style. Can be one or more of the following:    $BTNS_AUTOSIZE - The toolbar control should not assign the standard width to the button    $BTNS_CHECK - Toggles between the pressed and nonpressed    $BTNS_CHECKGROUP - Button that stays pressed until another button in the group is pressed    $BTNS_DROPDOWN - Drop-down style button that can display a list    $BTNS_GROUP - Button that stays pressed until another button in the group is pressed    $BTNS_NOPREFIX - The button text will not have an accelerator prefix    $BTNS_SEP - Separator    $BTNS_SHOWTEXT - Button text should be displayed    $BTNS_WHOLEDROPDOWN - The button has a drop-down arrow"
        }]
    },
    "_GUICtrlToolbar_SetButtonText": {
        "documentation": "Sets the display text of a button",
        "label": "_GUICtrlToolbar_SetButtonText ( $hWnd, $iCommandID, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$sText",
            "documentation": "Button text"
        }]
    },
    "_GUICtrlToolbar_SetButtonWidth": {
        "documentation": "Sets the minimum and maximum button widths in the toolbar control",
        "label": "_GUICtrlToolbar_SetButtonWidth ( $hWnd, $iMin, $iMax )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iMin",
            "documentation": "Minimum button width, in pixels"
        }, {
            "label": "$iMax",
            "documentation": "Maximum button width, in pixels"
        }]
    },
    "_GUICtrlToolbar_SetCmdID": {
        "documentation": "Sets the command identifier of a toolbar button",
        "label": "_GUICtrlToolbar_SetCmdID ( $hWnd, $iIndex, $iCommandID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the button whose command identifier is to be set"
        }, {
            "label": "$iCommandID",
            "documentation": "Command identifier"
        }]
    },
    "_GUICtrlToolbar_SetColorScheme": {
        "documentation": "Sets the color scheme information",
        "label": "_GUICtrlToolbar_SetColorScheme ( $hWnd, $iHighlight, $iShadow )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iHighlight",
            "documentation": "Highlight color"
        }, {
            "label": "$iShadow",
            "documentation": "Shadow color"
        }]
    },
    "_GUICtrlToolbar_SetDisabledImageList": {
        "documentation": "Sets the disabled image list",
        "label": "_GUICtrlToolbar_SetDisabledImageList ( $hWnd, $hImageList )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$hImageList",
            "documentation": "Handle to the image list that will be set"
        }]
    },
    "_GUICtrlToolbar_SetDrawTextFlags": {
        "documentation": "Sets the text drawing flags for the toolbar",
        "label": "_GUICtrlToolbar_SetDrawTextFlags ( $hWnd, $iMask, $iDTFlags )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iMask",
            "documentation": "One or more of the DT_ flags, specified in DrawText, that indicate which bits in $iDTFlags will be used when drawing the text."
        }, {
            "label": "$iDTFlags",
            "documentation": "One or more of the DT_ flags, specified in DrawText, that indicate how the button text will be drawn. This value will be passed to the DrawText API when the button text is drawn."
        }]
    },
    "_GUICtrlToolbar_SetExtendedStyle": {
        "documentation": "Sets the extended styles control",
        "label": "_GUICtrlToolbar_SetExtendedStyle ( $hWnd, $iStyle )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iStyle",
            "documentation": "Control extended styles. Can be one or more of the following:    $TBSTYLE_EX_DRAWDDARROWS - Allows buttons to have a separate dropdown arrow    $TBSTYLE_EX_MIXEDBUTTONS - Allows mixing buttons with text and images    $TBSTYLE_EX_HIDECLIPPEDBUTTONS - Hides partially clipped buttons    $TBSTYLE_EX_DOUBLEBUFFER - Requires the toolbar to be double buffered"
        }]
    },
    "_GUICtrlToolbar_SetHotImageList": {
        "documentation": "Sets the hot button image list",
        "label": "_GUICtrlToolbar_SetHotImageList ( $hWnd, $hImageList )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$hImageList",
            "documentation": "Handle to the image list that will be set"
        }]
    },
    "_GUICtrlToolbar_SetHotItem": {
        "documentation": "Sets the hot item",
        "label": "_GUICtrlToolbar_SetHotItem ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "Index of the item that will be made hot. If this value is -1, none of the items will be hot."
        }]
    },
    "_GUICtrlToolbar_SetImageList": {
        "documentation": "Sets the default button image list",
        "label": "_GUICtrlToolbar_SetImageList ( $hWnd, $hImageList )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$hImageList",
            "documentation": "Handle to the image list to set. If this parameter is 0, no images are displayed in the buttons."
        }]
    },
    "_GUICtrlToolbar_SetIndent": {
        "documentation": "Sets the indentation for the first button control",
        "label": "_GUICtrlToolbar_SetIndent ( $hWnd, $iIndent )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iIndent",
            "documentation": "Indentation in pixels"
        }]
    },
    "_GUICtrlToolbar_SetIndeterminate": {
        "documentation": "Sets or clears the indeterminate state of the specified button",
        "label": "_GUICtrlToolbar_SetIndeterminate ( $hWnd, $iCommandID [, $bState = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCommandID",
            "documentation": "Button command ID"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** True if indeterminate, otherwise False"
        }]
    },
    "_GUICtrlToolbar_SetInsertMark": {
        "documentation": "Sets the current insertion mark for the toolbar",
        "label": "_GUICtrlToolbar_SetInsertMark ( $hWnd, $iButton [, $iFlags = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iButton",
            "documentation": "0-based index of the insertion mark. If -1, there is no mark."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Defines where the insertion mark is in relation to $iButton:    0 - Left of the specified button    1 - Right of the specified button    2 - Background of the toolbar"
        }]
    },
    "_GUICtrlToolbar_SetInsertMarkColor": {
        "documentation": "Sets the color used to draw the insertion mark",
        "label": "_GUICtrlToolbar_SetInsertMarkColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "Insertion mark color"
        }]
    },
    "_GUICtrlToolbar_SetMaxTextRows": {
        "documentation": "Sets the maximum number of text rows displayed button",
        "label": "_GUICtrlToolbar_SetMaxTextRows ( $hWnd, $iMaxRows )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iMaxRows",
            "documentation": "Maximum number of rows of text that can be displayed"
        }]
    },
    "_GUICtrlToolbar_SetMetrics": {
        "documentation": "Sets the metrics of a toolbar control",
        "label": "_GUICtrlToolbar_SetMetrics ( $hWnd, $iXPad, $iYPad, $iXSpacing, $iYSpacing )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iXPad",
            "documentation": "Width of the padding inside the toolbar buttons"
        }, {
            "label": "$iYPad",
            "documentation": "Height of the padding inside the toolbar buttons"
        }, {
            "label": "$iXSpacing",
            "documentation": "Width of the space between toolbar buttons"
        }, {
            "label": "$iYSpacing",
            "documentation": "Height of the space between toolbar buttons"
        }]
    },
    "_GUICtrlToolbar_SetPadding": {
        "documentation": "Sets the padding control",
        "label": "_GUICtrlToolbar_SetPadding ( $hWnd, $iCX, $iCY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iCX",
            "documentation": "The horizontal padding, in pixels"
        }, {
            "label": "$iCY",
            "documentation": "The vertical padding, in pixels"
        }]
    },
    "_GUICtrlToolbar_SetParent": {
        "documentation": "Sets the window to which the control sends notification messages",
        "label": "_GUICtrlToolbar_SetParent ( $hWnd, $hParent )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$hParent",
            "documentation": "Handle to the window to receive notification messages"
        }]
    },
    "_GUICtrlToolbar_SetRows": {
        "documentation": "Sets the number of rows of buttons",
        "label": "_GUICtrlToolbar_SetRows ( $hWnd, $iRows [, $bLarger = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iRows",
            "documentation": "Number of rows requested. The minimum number of rows is one, and the maximum number of rows is equal to the total number of buttons."
        }, {
            "label": "$bLarger",
            "documentation": "**[optional]** Flag that indicates whether to create more rows than requested when the system can not create the number of rows specified by $iRows.If this parameter is True, the system creates more rows.If it is False, the system creates fewer rows."
        }]
    },
    "_GUICtrlToolbar_SetStyle": {
        "documentation": "Sets the style control",
        "label": "_GUICtrlToolbar_SetStyle ( $hWnd, $iStyle )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$iStyle",
            "documentation": "Control styles. Can be a combination of the following:    $TBSTYLE_TOOLTIPS - Creates a ToolTip control    $TBSTYLE_WRAPABLE - Creates a toolbar that can have multiple lines of buttons    $TBSTYLE_ALTDRAG - Allows users to change a toolbar button's position by dragging it    $TBSTYLE_FLAT - Creates a flat toolbar    $TBSTYLE_LIST - Creates a flat toolbar with button text to the right of the bitmap    $TBSTYLE_CUSTOMERASE - Sends $NM_CUSTOMDRAW messages when processing $WM_ERASEBKGND messages    $TBSTYLE_REGISTERDROP - Sends $TBN_GETOBJECT messages to request drop target objects    $TBSTYLE_TRANSPARENT - Creates a transparent toolbar"
        }]
    },
    "_GUICtrlToolbar_SetStyleAltDrag": {
        "documentation": "Sets whether that the control allows buttons to be dragged",
        "label": "_GUICtrlToolbar_SetStyleAltDrag ( $hWnd [, $bState = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** True to set, False to unset"
        }]
    },
    "_GUICtrlToolbar_SetStyleCustomErase": {
        "documentation": "Sets whether the control generates NM_CUSTOMDRAW notification messages",
        "label": "_GUICtrlToolbar_SetStyleCustomErase ( $hWnd [, $bState = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "**[optional]** True to set, False to unset"
        }]
    },
    "_GUICtrlToolbar_SetStyleFlat": {
        "documentation": "Sets whether the control is flat",
        "label": "_GUICtrlToolbar_SetStyleFlat ( $hWnd, $bState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "True to set, false to unset"
        }]
    },
    "_GUICtrlToolbar_SetStyleList": {
        "documentation": "Sets whether the control has button text to the right of the bitmap",
        "label": "_GUICtrlToolbar_SetStyleList ( $hWnd, $bState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "True to set, false to unset"
        }]
    },
    "_GUICtrlToolbar_SetStyleRegisterDrop": {
        "documentation": "Sets whether the control generates TBN_GETOBJECT notification messages",
        "label": "_GUICtrlToolbar_SetStyleRegisterDrop ( $hWnd, $bState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "True to set, false to unset"
        }]
    },
    "_GUICtrlToolbar_SetStyleToolTips": {
        "documentation": "Sets whether the control has tooltips",
        "label": "_GUICtrlToolbar_SetStyleToolTips ( $hWnd, $bState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "True to set, false to unset"
        }]
    },
    "_GUICtrlToolbar_SetStyleTransparent": {
        "documentation": "Sets whether the control is transparent",
        "label": "_GUICtrlToolbar_SetStyleTransparent ( $hWnd, $bState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "True to set, false to unset"
        }]
    },
    "_GUICtrlToolbar_SetStyleWrapable": {
        "documentation": "Sets whether the control is wrapable",
        "label": "_GUICtrlToolbar_SetStyleWrapable ( $hWnd, $bState )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bState",
            "documentation": "True to set, false to unset"
        }]
    },
    "_GUICtrlToolbar_SetToolTips": {
        "documentation": "Associates a ToolTip control with a toolbar",
        "label": "_GUICtrlToolbar_SetToolTips ( $hWnd, $hToolTip )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$hToolTip",
            "documentation": "Handle to the ToolTip control"
        }]
    },
    "_GUICtrlToolbar_SetUnicodeFormat": {
        "documentation": "Sets the Unicode character format flag",
        "label": "_GUICtrlToolbar_SetUnicodeFormat ( $hWnd [, $bUnicode = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$bUnicode",
            "documentation": "**[optional]** Unicode character setting:    True - Control uses Unicode characters    False - Control uses ANSI characters"
        }]
    },
    "_GUICtrlToolbar_SetWindowTheme": {
        "documentation": "Sets the visual style",
        "label": "_GUICtrlToolbar_SetWindowTheme ( $hWnd, $sTheme )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sTheme",
            "documentation": "String that contains the toolbar visual style"
        }]
    },
    "_GUICtrlTreeView_Add": {
        "documentation": "Adds a new item",
        "label": "_GUICtrlTreeView_Add ( $hWnd, $hSibling, $sText [, $iImage = -1 [, $iSelImage = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hSibling",
            "documentation": "Sibling item"
        }, {
            "label": "$sText",
            "documentation": "Text of the item"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iSelImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }]
    },
    "_GUICtrlTreeView_AddChild": {
        "documentation": "Adds a new item",
        "label": "_GUICtrlTreeView_AddChild ( $hWnd, $hParent, $sText [, $iImage = -1 [, $iSelImage = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hParent",
            "documentation": "Parent item"
        }, {
            "label": "$sText",
            "documentation": "Text of the item"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iSelImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }]
    },
    "_GUICtrlTreeView_AddChildFirst": {
        "documentation": "Adds a new item",
        "label": "_GUICtrlTreeView_AddChildFirst ( $hWnd, $hParent, $sText [, $iImage = -1 [, $iSelImage = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hParent",
            "documentation": "Parent item"
        }, {
            "label": "$sText",
            "documentation": "Text of the item"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iSelImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }]
    },
    "_GUICtrlTreeView_AddFirst": {
        "documentation": "Adds a new item",
        "label": "_GUICtrlTreeView_AddFirst ( $hWnd, $hSibling, $sText [, $iImage = -1 [, $iSelImage = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hSibling",
            "documentation": "Sibling item"
        }, {
            "label": "$sText",
            "documentation": "Text of the item"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iSelImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }]
    },
    "_GUICtrlTreeView_BeginUpdate": {
        "documentation": "Prevents updating of the control until the EndUpdate function is called",
        "label": "_GUICtrlTreeView_BeginUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_ClickItem": {
        "documentation": "Click on a item",
        "label": "_GUICtrlTreeView_ClickItem ( $hWnd, $hItem [, $sButton = \"left\" [, $bMove = False [, $iClicks = 1 [, $iSpeed = 0]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$sButton",
            "documentation": "**[optional]** Button to click"
        }, {
            "label": "$bMove",
            "documentation": "**[optional]** If True, the mouse will be moved. If False, the mouse does not move."
        }, {
            "label": "$iClicks",
            "documentation": "**[optional]** Number of clicks"
        }, {
            "label": "$iSpeed",
            "documentation": "**[optional]** Mouse movement speed"
        }]
    },
    "_GUICtrlTreeView_Create": {
        "documentation": "Create a TreeView control",
        "label": "_GUICtrlTreeView_Create ( $hWnd, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x00000037 [, $iExStyle = 0x00000000]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of the control"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of the control"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Control width"
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Control height"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Control style:    $TVS_CHECKBOXES - Enables check boxes for items. A check box will be displayed only if an image is associated with the item.        When set to this style, the control effectively uses DrawFrameControl to create and set a state image list containing two images.        State image 1 is the unchecked box and state image 2 is the checked box.        Setting the state image to zero removes the check box.        Version 5.80 displays a check box even if no image is associated with the item.    $TVS_DISABLEDRAGDROP - Prevents the control from sending $TVN_BEGINDRAG notification messages    $TVS_EDITLABELS - Allows the user to edit the item labels    $TVS_FULLROWSELECT - Enables full row selection.        The entire row of the selected item is highlighted, and clicking anywhere on an item's row causes it to be selected.        This style cannot be used in conjunction with the $TVS_HASLINES style.    $TVS_HASBUTTONS - Displays plus and minus buttons next to parent items.        The user clicks the buttons to expand or collapse a parent item's list of child items.        To include buttons with items at the root, you must also specify $TVS_LINESATROOT.    $TVS_HASLINES - Uses lines to show the hierarchy of items    $TVS_INFOTIP - Obtains ToolTip information by sending the $TVN_GETINFOTIP notification    $TVS_LINESATROOT - Uses lines to link items at the root of the control. This value is ignored if    $TVS_HASLINES is not also specified.    $TVS_NOHSCROLL - Disables horizontal scrolling in the control. The control will not display any horizontal scroll bars.    $TVS_NONEVENHEIGHT - Sets the height of the items to an odd height with the $TVM_SETITEMHEIGHT message.        By default the height of items must be an even value.    $TVS_NOSCROLL - Disables both horizontal and vertical scrolling in the control. The control will not display any scroll bars.    $TVS_NOTOOLTIPS - Disables ToolTips    $TVS_RTLREADING - Causes text to be displayed from right to left    $TVS_SHOWSELALWAYS - Causes a selected item to remain selected when the control loses focus    $TVS_SINGLEEXPAND - Causes the item being selected to expand and the item being unselected to collapse upon selection.        If the mouse is used to single-click the selected item and that item is closed, it will be expanded.        If the user holds down the CTRL key while selecting an item, the item being unselected will not be collapsed.        Version 5.80 causes the item being selected to expand and the item being unselected to collapse upon selection.        If the user holds down the CTRL key while selecting an item, the item being unselected will not be collapsed.    $TVS_TRACKSELECT - Enables hot trackingDefault: $TVS_HASBUTTONS, $TVS_HASLINES, $TVS_LINESATROOT, $TVS_DISABLEDRAGDROP, $TVS_SHOWSELALWAYSForced: $WS_CHILD, $WS_VISIBLE"
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** Control extended style"
        }]
    },
    "_GUICtrlTreeView_CreateDragImage": {
        "documentation": "Creates a dragging bitmap for the specified item",
        "label": "_GUICtrlTreeView_CreateDragImage ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_CreateSolidBitMap": {
        "documentation": "Creates a solid color bitmap",
        "label": "_GUICtrlTreeView_CreateSolidBitMap ( $hWnd, $iColor, $iWidth, $iHeight )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "The color of the bitmap, stated in RGB"
        }, {
            "label": "$iWidth",
            "documentation": "The width of the bitmap"
        }, {
            "label": "$iHeight",
            "documentation": "The height of the bitmap"
        }]
    },
    "_GUICtrlTreeView_Delete": {
        "documentation": "Removes an item and all its children",
        "label": "_GUICtrlTreeView_Delete ( $hWnd [, $hItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** Handle/Control ID of item"
        }]
    },
    "_GUICtrlTreeView_DeleteAll": {
        "documentation": "Removes all items from a tree-view control",
        "label": "_GUICtrlTreeView_DeleteAll ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_DeleteChildren": {
        "documentation": "Deletes all children of a item",
        "label": "_GUICtrlTreeView_DeleteChildren ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item whose children will be deleted"
        }]
    },
    "_GUICtrlTreeView_Destroy": {
        "documentation": "Delete the control",
        "label": "_GUICtrlTreeView_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_DisplayRect": {
        "documentation": "Returns the bounding rectangle for a tree item",
        "label": "_GUICtrlTreeView_DisplayRect ( $hWnd, $hItem [, $bTextOnly = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item whose rectangle will be returned"
        }, {
            "label": "$bTextOnly",
            "documentation": "**[optional]** If the True, the bounding rectangle includes only the text of the item.Otherwise, it includes the entire line that the item occupies."
        }]
    },
    "_GUICtrlTreeView_DisplayRectEx": {
        "documentation": "Returns the bounding rectangle for a tree item",
        "label": "_GUICtrlTreeView_DisplayRectEx ( $hWnd, $hItem [, $bTextOnly = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item whose rectangle will be returned"
        }, {
            "label": "$bTextOnly",
            "documentation": "**[optional]** If the True, the bounding rectangle includes only the text of the item.    Otherwise, it includes the entire line that the item occupies."
        }]
    },
    "_GUICtrlTreeView_EditText": {
        "documentation": "Begins in-place editing of the specified item's text",
        "label": "_GUICtrlTreeView_EditText ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item to edit"
        }]
    },
    "_GUICtrlTreeView_EndEdit": {
        "documentation": "Ends the editing of the item's text",
        "label": "_GUICtrlTreeView_EndEdit ( $hWnd [, $bCancel = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bCancel",
            "documentation": "**[optional]** Indicates whether the editing is cancelled without being saved to the item.If True, the system cancels editing without saving the changes."
        }]
    },
    "_GUICtrlTreeView_EndUpdate": {
        "documentation": "Enables screen repainting that was turned off with the BeginUpdate function",
        "label": "_GUICtrlTreeView_EndUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_EnsureVisible": {
        "documentation": "Ensures that a item is visible, expanding the parent item or scrolling the control if necessary",
        "label": "_GUICtrlTreeView_EnsureVisible ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_Expand": {
        "documentation": "Expands or collapses the list of child items associated with the specified parent item, if any",
        "label": "_GUICtrlTreeView_Expand ( $hWnd [, $hItem = 0 [, $bExpand = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** Handle to the item"
        }, {
            "label": "$bExpand",
            "documentation": "**[optional]** Expand or Collapse, use the following values:    True - Expand items    False - Collapse items"
        }]
    },
    "_GUICtrlTreeView_ExpandedOnce": {
        "documentation": "Indicates if the item's list of child items has been expanded at least once",
        "label": "_GUICtrlTreeView_ExpandedOnce ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_FindItem": {
        "documentation": "Retrieves a item based on it's text",
        "label": "_GUICtrlTreeView_FindItem ( $hWnd, $sText [, $bInStr = False [, $hStart = 0]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sText",
            "documentation": "Text to search for"
        }, {
            "label": "$bInStr",
            "documentation": "**[optional]** If True, the text can be anywhere in the item's text."
        }, {
            "label": "$hStart",
            "documentation": "**[optional]** Item to start searching from. If 0, the root item is used."
        }]
    },
    "_GUICtrlTreeView_FindItemEx": {
        "documentation": "Retrieves a item based on a tree path",
        "label": "_GUICtrlTreeView_FindItemEx ( $hWnd, $sTreePath [, $hStart = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }, {
            "label": "$sTreePath",
            "documentation": "The path to take, delimiter of your choice, see Opt(\"GUIDataSeparatorChar\")"
        }, {
            "label": "$hStart",
            "documentation": "**[optional]** Item to start searching from. If 0, the root item is used."
        }]
    },
    "_GUICtrlTreeView_GetBkColor": {
        "documentation": "Retrieve the text back color",
        "label": "_GUICtrlTreeView_GetBkColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetBold": {
        "documentation": "Indicates if the item is drawn in a bold style",
        "label": "_GUICtrlTreeView_GetBold ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetChecked": {
        "documentation": "Indicates if a item has its checkbox checked",
        "label": "_GUICtrlTreeView_GetChecked ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetChildCount": {
        "documentation": "Retrieves the number of children of an parent item",
        "label": "_GUICtrlTreeView_GetChildCount ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to item"
        }]
    },
    "_GUICtrlTreeView_GetChildren": {
        "documentation": "Indicates whether the item children flag is set",
        "label": "_GUICtrlTreeView_GetChildren ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetCount": {
        "documentation": "Retrieves a count of the items",
        "label": "_GUICtrlTreeView_GetCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetCut": {
        "documentation": "Indicates if the item is drawn as if selected as part of a cut and paste operation",
        "label": "_GUICtrlTreeView_GetCut ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetDropTarget": {
        "documentation": "Indicates whether the item is drawn as a drag and drop target",
        "label": "_GUICtrlTreeView_GetDropTarget ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetEditControl": {
        "documentation": "Retrieves the handle to the edit control being used to edit a item's text",
        "label": "_GUICtrlTreeView_GetEditControl ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetExpanded": {
        "documentation": "Indicates whether the item is expanded",
        "label": "_GUICtrlTreeView_GetExpanded ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetFirstChild": {
        "documentation": "Retrieves the first child item of the specified item",
        "label": "_GUICtrlTreeView_GetFirstChild ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetFirstItem": {
        "documentation": "Retrieves the topmost or very first item",
        "label": "_GUICtrlTreeView_GetFirstItem ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetFirstVisible": {
        "documentation": "Retrieves the first visible item in the control",
        "label": "_GUICtrlTreeView_GetFirstVisible ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetFocused": {
        "documentation": "Indicates whether the item has focus",
        "label": "_GUICtrlTreeView_GetFocused ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetHeight": {
        "documentation": "Retrieves the current height of the each item",
        "label": "_GUICtrlTreeView_GetHeight ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetImageIndex": {
        "documentation": "Retrieves the normal state image index",
        "label": "_GUICtrlTreeView_GetImageIndex ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetImageListIconHandle": {
        "documentation": "Retrieve ImageList handle",
        "label": "_GUICtrlTreeView_GetImageListIconHandle ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndex",
            "documentation": "ImageList index to retrieve"
        }]
    },
    "_GUICtrlTreeView_GetIndent": {
        "documentation": "Retrieves the amount, in pixels, that child items are indented relative to their parent items",
        "label": "_GUICtrlTreeView_GetIndent ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetInsertMarkColor": {
        "documentation": "Retrieves the color used to draw the insertion mark",
        "label": "_GUICtrlTreeView_GetInsertMarkColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetISearchString": {
        "documentation": "Retrieves the incremental search string",
        "label": "_GUICtrlTreeView_GetISearchString ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetItemByIndex": {
        "documentation": "Retrieve a item by its position in the list of child items",
        "label": "_GUICtrlTreeView_GetItemByIndex ( $hWnd, $hItem, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of item in the list of child items"
        }]
    },
    "_GUICtrlTreeView_GetItemHandle": {
        "documentation": "Retrieve the item handle",
        "label": "_GUICtrlTreeView_GetItemHandle ( $hWnd [, $hItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** Item ID"
        }]
    },
    "_GUICtrlTreeView_GetItemParam": {
        "documentation": "Retrieves the application specific value of the item",
        "label": "_GUICtrlTreeView_GetItemParam ( $hWnd [, $hItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** Item ID"
        }]
    },
    "_GUICtrlTreeView_GetLastChild": {
        "documentation": "Retrieves the last child item of the specified item",
        "label": "_GUICtrlTreeView_GetLastChild ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetLineColor": {
        "documentation": "Retrieve the line color",
        "label": "_GUICtrlTreeView_GetLineColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetNext": {
        "documentation": "Retrieves the next item after the calling item",
        "label": "_GUICtrlTreeView_GetNext ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetNextChild": {
        "documentation": "Returns the next item at the same level as the specified item",
        "label": "_GUICtrlTreeView_GetNextChild ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the child item"
        }]
    },
    "_GUICtrlTreeView_GetNextSibling": {
        "documentation": "Returns the next item at the same level as the specified item",
        "label": "_GUICtrlTreeView_GetNextSibling ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetNextVisible": {
        "documentation": "Retrieves the next visible item that follows the specified item",
        "label": "_GUICtrlTreeView_GetNextVisible ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetNormalImageList": {
        "documentation": "Retrieves the normal image list",
        "label": "_GUICtrlTreeView_GetNormalImageList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetParentHandle": {
        "documentation": "Retrieve the parent handle of item",
        "label": "_GUICtrlTreeView_GetParentHandle ( $hWnd [, $hItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** item ID/handle"
        }]
    },
    "_GUICtrlTreeView_GetParentParam": {
        "documentation": "Retrieve the parent control ID/Param of item",
        "label": "_GUICtrlTreeView_GetParentParam ( $hWnd [, $hItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** item ID/Param"
        }]
    },
    "_GUICtrlTreeView_GetPrev": {
        "documentation": "Retrieves the previous item before the calling item",
        "label": "_GUICtrlTreeView_GetPrev ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetPrevChild": {
        "documentation": "Retrieves the previous child item of a specified item",
        "label": "_GUICtrlTreeView_GetPrevChild ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetPrevSibling": {
        "documentation": "Returns the previous item before the calling item at the same level",
        "label": "_GUICtrlTreeView_GetPrevSibling ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetPrevVisible": {
        "documentation": "Retrieves the first visible item that precedes the specified item",
        "label": "_GUICtrlTreeView_GetPrevVisible ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetScrollTime": {
        "documentation": "Retrieves the maximum scroll time",
        "label": "_GUICtrlTreeView_GetScrollTime ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetSelected": {
        "documentation": "Indicates whether the item appears in the selected state",
        "label": "_GUICtrlTreeView_GetSelected ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetSelectedImageIndex": {
        "documentation": "Retrieves the index in the image list of the image displayed for the item when it is selected",
        "label": "_GUICtrlTreeView_GetSelectedImageIndex ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetSelection": {
        "documentation": "Retrieves the currently selected item",
        "label": "_GUICtrlTreeView_GetSelection ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetSiblingCount": {
        "documentation": "Retrieves the number of siblings at the level of an item",
        "label": "_GUICtrlTreeView_GetSiblingCount ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to item"
        }]
    },
    "_GUICtrlTreeView_GetState": {
        "documentation": "Retrieve the state of the item",
        "label": "_GUICtrlTreeView_GetState ( $hWnd [, $hItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** item ID/handle"
        }]
    },
    "_GUICtrlTreeView_GetStateImageIndex": {
        "documentation": "Retrieves the index of the state image to display for the item",
        "label": "_GUICtrlTreeView_GetStateImageIndex ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetStateImageList": {
        "documentation": "Retrieves the handle to the state image list",
        "label": "_GUICtrlTreeView_GetStateImageList ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetText": {
        "documentation": "Retrieve the item text",
        "label": "_GUICtrlTreeView_GetText ( $hWnd [, $hItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** item ID/handle"
        }]
    },
    "_GUICtrlTreeView_GetTextColor": {
        "documentation": "Retrieve the text color",
        "label": "_GUICtrlTreeView_GetTextColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetToolTips": {
        "documentation": "Retrieves the handle to the child ToolTip control",
        "label": "_GUICtrlTreeView_GetToolTips ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetTree": {
        "documentation": "Retrieve all items text",
        "label": "_GUICtrlTreeView_GetTree ( $hWnd [, $hItem = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** item ID/handle"
        }]
    },
    "_GUICtrlTreeView_GetUnicodeFormat": {
        "documentation": "Retrieves the Unicode character format flag",
        "label": "_GUICtrlTreeView_GetUnicodeFormat ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_GetVisible": {
        "documentation": "Indicates whether the item is currently visible in the control image",
        "label": "_GUICtrlTreeView_GetVisible ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_GetVisibleCount": {
        "documentation": "Returns the number of items that can be fully visible in the control",
        "label": "_GUICtrlTreeView_GetVisibleCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUICtrlTreeView_HitTest": {
        "documentation": "Returns information about the location of a point relative to the control",
        "label": "_GUICtrlTreeView_HitTest ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X position, relative to the control, to test"
        }, {
            "label": "$iY",
            "documentation": "Y position, relative to the control, to test"
        }]
    },
    "_GUICtrlTreeView_HitTestEx": {
        "documentation": "Returns information about the location of a point relative to the control",
        "label": "_GUICtrlTreeView_HitTestEx ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X position to test"
        }, {
            "label": "$iY",
            "documentation": "Y position to test"
        }]
    },
    "_GUICtrlTreeView_HitTestItem": {
        "documentation": "Returns the item at the specified coordinates",
        "label": "_GUICtrlTreeView_HitTestItem ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iX",
            "documentation": "X position to test"
        }, {
            "label": "$iY",
            "documentation": "Y position to test"
        }]
    },
    "_GUICtrlTreeView_Index": {
        "documentation": "Retrieves the position of the item in the list",
        "label": "_GUICtrlTreeView_Index ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to item"
        }]
    },
    "_GUICtrlTreeView_InsertItem": {
        "documentation": "Insert an item",
        "label": "_GUICtrlTreeView_InsertItem ( $hWnd, $sItem_Text [, $hItem_Parent = 0 [, $hItem_After = 0 [, $iImage = -1 [, $iSelImage = -1]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$sItem_Text",
            "documentation": "Text of new item. See remark."
        }, {
            "label": "$hItem_Parent",
            "documentation": "**[optional]** parent item ID/handle/item"
        }, {
            "label": "$hItem_After",
            "documentation": "**[optional]** item ID/handle/flag to insert new item after"
        }, {
            "label": "$iImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }, {
            "label": "$iSelImage",
            "documentation": "**[optional]** 0-based index of the item's icon in the control's image list"
        }]
    },
    "_GUICtrlTreeView_IsFirstItem": {
        "documentation": "Indicates whether the tree item is very first",
        "label": "_GUICtrlTreeView_IsFirstItem ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_IsParent": {
        "documentation": "Indicates whether one item is the parent of another item",
        "label": "_GUICtrlTreeView_IsParent ( $hWnd, $hParent, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hParent",
            "documentation": "Handle to parent item"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item to test"
        }]
    },
    "_GUICtrlTreeView_Level": {
        "documentation": "Indicates the level of indentation of a item",
        "label": "_GUICtrlTreeView_Level ( $hWnd, $hItem )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }]
    },
    "_GUICtrlTreeView_SelectItem": {
        "documentation": "Selects the specified item, scrolls the item into view, or redraws the item",
        "label": "_GUICtrlTreeView_SelectItem ( $hWnd, $hItem [, $iFlag = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** Action flag:    $TVGN_CARET - Sets the selection to the given item    $TVGN_DROPHILITE - Redraws the given item in the style used to indicate the target of a drag/drop operation    $TVGN_FIRSTVISIBLE - Scrolls the tree view vertically so that the given item is the first visible item"
        }]
    },
    "_GUICtrlTreeView_SelectItemByIndex": {
        "documentation": "Selects the item based on it's index in the parent list",
        "label": "_GUICtrlTreeView_SelectItemByIndex ( $hWnd, $hItem, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of item in the parent list"
        }]
    },
    "_GUICtrlTreeView_SetBkColor": {
        "documentation": "Sets the back color",
        "label": "_GUICtrlTreeView_SetBkColor ( $hWnd, $vRGBColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$vRGBColor",
            "documentation": "New hex RGB Color"
        }]
    },
    "_GUICtrlTreeView_SetBold": {
        "documentation": "Sets whether the item is drawn using a bold sytle",
        "label": "_GUICtrlTreeView_SetBold ( $hWnd, $hItem [, $bFlag = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$bFlag",
            "documentation": "**[optional]** True if item is drawn bold, otherwise False"
        }]
    },
    "_GUICtrlTreeView_SetChecked": {
        "documentation": "Sets whether a item has it's checkbox checked or not",
        "label": "_GUICtrlTreeView_SetChecked ( $hWnd, $hItem [, $bCheck = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$bCheck",
            "documentation": "**[optional]** Value to set checked state to:    True - Checked    False - Not checked"
        }]
    },
    "_GUICtrlTreeView_SetCheckedByIndex": {
        "documentation": "Sets whether an item has it's checkbox checked or not by it's index",
        "label": "_GUICtrlTreeView_SetCheckedByIndex ( $hWnd, $hItem, $iIndex [, $bCheck = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index into $hItem list of items"
        }, {
            "label": "$bCheck",
            "documentation": "**[optional]** Value to set checked state to:    True - Checked    False - Not checked"
        }]
    },
    "_GUICtrlTreeView_SetChildren": {
        "documentation": "Sets whether the item children flag",
        "label": "_GUICtrlTreeView_SetChildren ( $hWnd, $hItem [, $bFlag = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$bFlag",
            "documentation": "**[optional]** Flag setting:    True - Item children flag is set    False - Item children flag is cleared"
        }]
    },
    "_GUICtrlTreeView_SetCut": {
        "documentation": "Sets whether the item is drawn as if selected as part of a cut and paste operation",
        "label": "_GUICtrlTreeView_SetCut ( $hWnd, $hItem [, $bFlag = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$bFlag",
            "documentation": "**[optional]** Flag setting:    True - Item is cut    False - Item is not"
        }]
    },
    "_GUICtrlTreeView_SetDropTarget": {
        "documentation": "Sets whether the item is drawn as a drag and drop target",
        "label": "_GUICtrlTreeView_SetDropTarget ( $hWnd, $hItem [, $bFlag = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$bFlag",
            "documentation": "**[optional]** Flag setting:    True - Item is drawn as a drag and drop target    False - Item is not"
        }]
    },
    "_GUICtrlTreeView_SetFocused": {
        "documentation": "Sets whether the item appears to have focus",
        "label": "_GUICtrlTreeView_SetFocused ( $hWnd, $hItem [, $bFlag = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$bFlag",
            "documentation": "**[optional]** Flag setting:    True - Item appears to have focus    False - Item does not"
        }]
    },
    "_GUICtrlTreeView_SetHeight": {
        "documentation": "Sets the height of the each item",
        "label": "_GUICtrlTreeView_SetHeight ( $hWnd, $iHeight )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iHeight",
            "documentation": "New height of every item in pixels. Heights less than 1 will be set to 1.If not even and the control does not have the $TVS_NONEVENHEIGHT style this value will be rounded down to the nearest even value.If -1, the control will revert to using its default item height."
        }]
    },
    "_GUICtrlTreeView_SetIcon": {
        "documentation": "Set an item icon",
        "label": "_GUICtrlTreeView_SetIcon ( $hWnd [, $hItem = 0 [, $sIconFile = \"\" [, $iIconID = 0 [, $iImageMode = 6]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** item ID/handle"
        }, {
            "label": "$sIconFile",
            "documentation": "**[optional]** The file to extract the icon of"
        }, {
            "label": "$iIconID",
            "documentation": "**[optional]** The iconID to extract of the file"
        }, {
            "label": "$iImageMode",
            "documentation": "**[optional]** 2=normal image / 4=selected image to set"
        }]
    },
    "_GUICtrlTreeView_SetImageIndex": {
        "documentation": "Sets the index into image list for which image is displayed when a item is in its normal state",
        "label": "_GUICtrlTreeView_SetImageIndex ( $hWnd, $hItem, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iIndex",
            "documentation": "Image list index"
        }]
    },
    "_GUICtrlTreeView_SetIndent": {
        "documentation": "Sets the width of indentation for a tree-view control and redraws the control to reflect the new width",
        "label": "_GUICtrlTreeView_SetIndent ( $hWnd, $iIndent )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iIndent",
            "documentation": "Width, in pixels, of the indentation."
        }]
    },
    "_GUICtrlTreeView_SetInsertMark": {
        "documentation": "Sets the insertion mark",
        "label": "_GUICtrlTreeView_SetInsertMark ( $hWnd, $hItem [, $bAfter = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Specifies at which item the insertion mark will be placed. If this is 0, the insertion mark is removed."
        }, {
            "label": "$bAfter",
            "documentation": "**[optional]** Specifies if the insertion mark is placed before or after the item.If this is True, the insertion mark will be placed after the item.If this is False, the insertion mark will be placed before the item."
        }]
    },
    "_GUICtrlTreeView_SetInsertMarkColor": {
        "documentation": "Sets the color used to draw the insertion mark",
        "label": "_GUICtrlTreeView_SetInsertMarkColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iColor",
            "documentation": "Insertion mark color"
        }]
    },
    "_GUICtrlTreeView_SetItemHeight": {
        "documentation": "Sets the height of an individual item",
        "label": "_GUICtrlTreeView_SetItemHeight ( $hWnd, $hItem, $iIntegral )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iIntegral",
            "documentation": "Height of the item. This height is in increments of the standard item height. By default, eachitem gets one increment of item height. Setting this field to 2 will give the item twice the standard height;setting this field to 3 will give the item three times the standard height; and so on. The control does notdraw in this extra area."
        }]
    },
    "_GUICtrlTreeView_SetItemParam": {
        "documentation": "Sets the value specific to the item",
        "label": "_GUICtrlTreeView_SetItemParam ( $hWnd, $hItem, $iParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iParam",
            "documentation": "A value to associate with the item"
        }]
    },
    "_GUICtrlTreeView_SetLineColor": {
        "documentation": "Sets the line color",
        "label": "_GUICtrlTreeView_SetLineColor ( $hWnd, $vRGBColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$vRGBColor",
            "documentation": "New Hex RGB line color"
        }]
    },
    "_GUICtrlTreeView_SetNormalImageList": {
        "documentation": "Sets the normal image list for the control",
        "label": "_GUICtrlTreeView_SetNormalImageList ( $hWnd, $hImageList )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hImageList",
            "documentation": "Handle to the image list. If 0, all images are removed"
        }]
    },
    "_GUICtrlTreeView_SetScrollTime": {
        "documentation": "Sets the maximum scroll time",
        "label": "_GUICtrlTreeView_SetScrollTime ( $hWnd, $iTime )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$iTime",
            "documentation": "New maximum scroll time, in milliseconds"
        }]
    },
    "_GUICtrlTreeView_SetSelected": {
        "documentation": "Sets whether the item appears in the selected state",
        "label": "_GUICtrlTreeView_SetSelected ( $hWnd, $hItem [, $bFlag = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$bFlag",
            "documentation": "**[optional]** True if item is to be selected, otherwise False"
        }]
    },
    "_GUICtrlTreeView_SetSelectedImageIndex": {
        "documentation": "Sets the selected image index",
        "label": "_GUICtrlTreeView_SetSelectedImageIndex ( $hWnd, $hItem, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iIndex",
            "documentation": "Image list index"
        }]
    },
    "_GUICtrlTreeView_SetState": {
        "documentation": "Set the state of the specified item",
        "label": "_GUICtrlTreeView_SetState ( $hWnd, $hItem [, $iState = 0 [, $bSetState = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iState",
            "documentation": "**[optional]** The new item state, can be one or more of the following:    $TVIS_SELECTED - Set item selected    $TVIS_CUT - Set item as part of a cut-and-paste operation    $TVIS_DROPHILITED - Set item as a drag-and-drop target    $TVIS_BOLD - Set item as bold    $TVIS_EXPANDED - Expand item    $TVIS_EXPANDEDONCE - Set item's list of child items has been expanded at least once    $TVIS_EXPANDPARTIAL - Set item as partially expanded"
        }, {
            "label": "$bSetState",
            "documentation": "**[optional]** True if item state is to be set, False remove item state"
        }]
    },
    "_GUICtrlTreeView_SetStateImageIndex": {
        "documentation": "Sets the index into image list for the state image",
        "label": "_GUICtrlTreeView_SetStateImageIndex ( $hWnd, $hItem, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "Handle to the item"
        }, {
            "label": "$iIndex",
            "documentation": "Image list index"
        }]
    },
    "_GUICtrlTreeView_SetStateImageList": {
        "documentation": "Sets the state image list for the control",
        "label": "_GUICtrlTreeView_SetStateImageList ( $hWnd, $hImageList )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hImageList",
            "documentation": "Handle to the image list. If 0, all images are removed"
        }]
    },
    "_GUICtrlTreeView_SetText": {
        "documentation": "Set the text of an item",
        "label": "_GUICtrlTreeView_SetText ( $hWnd [, $hItem = 0 [, $sText = \"\"]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hItem",
            "documentation": "**[optional]** Handle to the item"
        }, {
            "label": "$sText",
            "documentation": "**[optional]** The new item text"
        }]
    },
    "_GUICtrlTreeView_SetTextColor": {
        "documentation": "Sets the text color",
        "label": "_GUICtrlTreeView_SetTextColor ( $hWnd, $vRGBColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$vRGBColor",
            "documentation": "New Hex text color"
        }]
    },
    "_GUICtrlTreeView_SetToolTips": {
        "documentation": "Sets the handle to the child ToolTip control",
        "label": "_GUICtrlTreeView_SetToolTips ( $hWnd, $hToolTip )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$hToolTip",
            "documentation": "Handle to a ToolTip control"
        }]
    },
    "_GUICtrlTreeView_SetUnicodeFormat": {
        "documentation": "Sets the Unicode character format flag",
        "label": "_GUICtrlTreeView_SetUnicodeFormat ( $hWnd [, $bFormat = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }, {
            "label": "$bFormat",
            "documentation": "**[optional]** Determines the character set that is used by the control.    True - The control will use Unicode characters    False - The control will use ANSI characters."
        }]
    },
    "_GUICtrlTreeView_Sort": {
        "documentation": "Sorts the items",
        "label": "_GUICtrlTreeView_Sort ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Control ID/Handle to the control"
        }]
    },
    "_GUIImageList_Add": {
        "documentation": "Adds an image or images to an image list",
        "label": "_GUIImageList_Add ( $hWnd, $hImage [, $hMask = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$hImage",
            "documentation": "Handle to the bitmap that contains the image or images. The number of images is inferred from the width of the bitmap."
        }, {
            "label": "$hMask",
            "documentation": "**[optional]** Handle to the bitmap that contains the mask"
        }]
    },
    "_GUIImageList_AddBitmap": {
        "documentation": "Adds a bitmap to an image list",
        "label": "_GUIImageList_AddBitmap ( $hWnd, $sImage [, $sMask = \"\"] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$sImage",
            "documentation": "Path to the bitmap that contains the image"
        }, {
            "label": "$sMask",
            "documentation": "**[optional]** Path to the bitmap that contains the mask"
        }]
    },
    "_GUIImageList_AddIcon": {
        "documentation": "Adds an icon to an image list",
        "label": "_GUIImageList_AddIcon ( $hWnd, $sFilePath [, $iIndex = 0 [, $bLarge = False]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$sFilePath",
            "documentation": "Path to the icon that contains the image"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** Specifies the 0-based index of the icon to extract"
        }, {
            "label": "$bLarge",
            "documentation": "**[optional]** Extract Large Icon"
        }]
    },
    "_GUIImageList_AddMasked": {
        "documentation": "Adds an image or images to an image list, generating a mask from the specified bitmap",
        "label": "_GUIImageList_AddMasked ( $hWnd, $hImage [, $iMask = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$hImage",
            "documentation": "Handle to the bitmap that contains the image or images. The number of images is inferred from the width of the bitmap."
        }, {
            "label": "$iMask",
            "documentation": "**[optional]** Color used to generate the mask. Each pixel of this color in the specified bitmap is changed to black, and the corresponding bit in the mask is set to 1."
        }]
    },
    "_GUIImageList_BeginDrag": {
        "documentation": "Begins dragging an image",
        "label": "_GUIImageList_BeginDrag ( $hWnd, $iTrack, $iXHotSpot, $iYHotSpot )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iTrack",
            "documentation": "Index of the image to drag"
        }, {
            "label": "$iXHotSpot",
            "documentation": "X coordinate of the location of the drag position relative to image upper left corner"
        }, {
            "label": "$iYHotSpot",
            "documentation": "Y coordinate of the location of the drag position relative to image upper left corner"
        }]
    },
    "_GUIImageList_Copy": {
        "documentation": "Source image is copied to the destination image's index",
        "label": "_GUIImageList_Copy ( $hWnd, $iSource, $iDestination )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iSource",
            "documentation": "The 0-based index of the image to be used as the source of the copy operation"
        }, {
            "label": "$iDestination",
            "documentation": "The 0-based index of the image to be used as the destination of the copy operation. The image index must exist"
        }]
    },
    "_GUIImageList_Create": {
        "documentation": "Create an ImageList control",
        "label": "_GUIImageList_Create ( [$iCX = 16 [, $iCY = 16 [, $iColor = 4 [, $iOptions = 0 [, $iInitial = 4 [, $iGrow = 4]]]]]] )",
        "params": [{
            "label": "$iCX",
            "documentation": "**[optional]** Width, in pixels, of each image"
        }, {
            "label": "$iCY",
            "documentation": "**[optional]** Height, in pixels, of each image"
        }, {
            "label": "$iColor",
            "documentation": "**[optional]** Image color depth:    0 - Use the default behavior    1 - Use a 4 bit DIB section    2 - Use a 8 bit DIB section    3 - Use a 16 bit DIB section    4 - Use a 24 bit DIB section    5 - Use a 32 bit DIB section    6 - Use a device-dependent bitmap"
        }, {
            "label": "$iOptions",
            "documentation": "**[optional]** Option flags. Can be a combination of the following:    1 - Use a mask    2 - The images in the lists are mirrored    4 - The image list contains a strip of images"
        }, {
            "label": "$iInitial",
            "documentation": "**[optional]** Number of images that the image list initially contains"
        }, {
            "label": "$iGrow",
            "documentation": "**[optional]** Number of images by which the image list can grow when the system needs to make room for new images. This parameter represents the number of new images that the resized image list can contain."
        }]
    },
    "_GUIImageList_Destroy": {
        "documentation": "Destroys an image list",
        "label": "_GUIImageList_Destroy ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }]
    },
    "_GUIImageList_DestroyIcon": {
        "documentation": "Destroys an icon and frees any memory the icon occupied",
        "label": "_GUIImageList_DestroyIcon ( $hIcon )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the icon"
        }]
    },
    "_GUIImageList_DragEnter": {
        "documentation": "Displays the drag image at the specified position within the window",
        "label": "_GUIImageList_DragEnter ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate at which to display the drag image.The coordinate is relative to the upper-left corner of the window, not the client area."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate at which to display the drag image.The coordinate is relative to the upper-left corner of the window, not the client area."
        }]
    },
    "_GUIImageList_DragLeave": {
        "documentation": "Unlocks the specified window and hides the drag image, allowing the window to be updated",
        "label": "_GUIImageList_DragLeave ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }]
    },
    "_GUIImageList_DragMove": {
        "documentation": "Moves the image that is being dragged during a drag-and-drop operation",
        "label": "_GUIImageList_DragMove ( $iX, $iY )",
        "params": [{
            "label": "$iX",
            "documentation": "The x-coordinate at which to display the drag image.The coordinate is relative to the upper-left corner of the window, not the client area."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate at which to display the drag image.The coordinate is relative to the upper-left corner of the window, not the client area."
        }]
    },
    "_GUIImageList_Draw": {
        "documentation": "Draws an image list item in the specified device context",
        "label": "_GUIImageList_Draw ( $hWnd, $iIndex, $hDC, $iX, $iY [, $iStyle = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the image to draw"
        }, {
            "label": "$hDC",
            "documentation": "Handle to the destination device context"
        }, {
            "label": "$iX",
            "documentation": "X coordinate where the image will be drawn"
        }, {
            "label": "$iY",
            "documentation": "Y coordinate where the image will be drawn"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Drawing style and overlay image:    1 - Draws the image transparently using the mask, regardless of the background color    2 - Draws the image, blending 25 percent with the system highlight color    4 - Draws the image, blending 50 percent with the system highlight color    8 - Draws the mask"
        }]
    },
    "_GUIImageList_DrawEx": {
        "documentation": "Draws an image list item in the specified device context",
        "label": "_GUIImageList_DrawEx ( $hWnd, $iIndex, $hDC, $iX, $iY [, $iDX = 0 [, $iDY = 0 [, $iRGBBk = 0xFFFFFFFF [, $iRGBFg = 0xFFFFFFFF [, $iStyle = 0]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the image to draw"
        }, {
            "label": "$hDC",
            "documentation": "Handle to the destination device context"
        }, {
            "label": "$iX",
            "documentation": "X coordinate where the image will be drawn"
        }, {
            "label": "$iY",
            "documentation": "Y coordinate where the image will be drawn"
        }, {
            "label": "$iDX",
            "documentation": "**[optional]** The width of the portion of the image to draw relative to the upper-left corner of the image.If $iDX and $iDY are zero, the function draws the entire image. The function does not ensure that the parameters are valid."
        }, {
            "label": "$iDY",
            "documentation": "**[optional]** The height of the portion of the image to draw, relative to the upper-left corner of the image.If $iDX and $iDY are zero, the function draws the entire image. The function does not ensure that the parameters are valid."
        }, {
            "label": "$iRGBBk",
            "documentation": "**[optional]** The background color of the image. This parameter can be an application-defined RGB value or one of the following values:    $CLR_NONE - No background color. The image is drawn transparently.    $CLR_DEFAULT - The default background color. The image is drawn using the background color of the image list."
        }, {
            "label": "$iRGBFg",
            "documentation": "**[optional]** The foreground color of the image. This parameter can be an application-defined RGB value or one of the following values:    $CLR_NONE - No blend color. The image is blended with the color of the destination device context.    $CLR_DEFAULT - The default foreground color. The image is drawn using the system highlight color as the foreground color."
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Drawing style and overlay image:    1 - Draws the image transparently using the mask, regardless of the background color    2 - Draws the image, blending 25 percent with the system highlight color    4 - Draws the image, blending 50 percent with the system highlight color    8 - Draws the mask"
        }]
    },
    "_GUIImageList_Duplicate": {
        "documentation": "Creates a duplicate of an existing image list",
        "label": "_GUIImageList_Duplicate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }]
    },
    "_GUIImageList_EndDrag": {
        "documentation": "Ends a drag operation",
        "label": "_GUIImageList_EndDrag (  )",
        "params": []
    },
    "_GUIImageList_GetBkColor": {
        "documentation": "Retrieves the current background color for an image list",
        "label": "_GUIImageList_GetBkColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }]
    },
    "_GUIImageList_GetIcon": {
        "documentation": "Creates an icon from an image and mask in an image list",
        "label": "_GUIImageList_GetIcon ( $hWnd, $iIndex [, $iStyle = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the image"
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** Drawing style and overlay image:    1 - Draws the image transparently using the mask, regardless of the background color    2 - Draws the image, blending 25 percent with the system highlight color    4 - Draws the image, blending 50 percent with the system highlight color    8 - Draws the mask"
        }]
    },
    "_GUIImageList_GetIconHeight": {
        "documentation": "Retrieves the height of the images in an image list",
        "label": "_GUIImageList_GetIconHeight ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }]
    },
    "_GUIImageList_GetIconSize": {
        "documentation": "Retrieves the dimensions of images in an image list",
        "label": "_GUIImageList_GetIconSize ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }]
    },
    "_GUIImageList_GetIconSizeEx": {
        "documentation": "Retrieves the dimensions of images in an image list",
        "label": "_GUIImageList_GetIconSizeEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }]
    },
    "_GUIImageList_GetIconWidth": {
        "documentation": "Retrieves the width of the images in an image list",
        "label": "_GUIImageList_GetIconWidth ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }]
    },
    "_GUIImageList_GetImageCount": {
        "documentation": "Retrieves the number of images in an image list",
        "label": "_GUIImageList_GetImageCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }]
    },
    "_GUIImageList_GetImageInfoEx": {
        "documentation": "Retrieves information about an image",
        "label": "_GUIImageList_GetImageInfoEx ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iIndex",
            "documentation": "Index of the image"
        }]
    },
    "_GUIImageList_Remove": {
        "documentation": "Remove Image(s) from the ImageList",
        "label": "_GUIImageList_Remove ( $hWnd [, $iIndex = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** The index of the image to remove. If this parameter is -1, the function removes all images"
        }]
    },
    "_GUIImageList_ReplaceIcon": {
        "documentation": "Replaces an image with an icon or cursor",
        "label": "_GUIImageList_ReplaceIcon ( $hWnd, $iIndex, $hIcon )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iIndex",
            "documentation": "Index of the image to replace. If -1, the function appends the image to the end of the list."
        }, {
            "label": "$hIcon",
            "documentation": "Handle to the icon or cursor that contains the bitmap and mask for the new image"
        }]
    },
    "_GUIImageList_SetBkColor": {
        "documentation": "Sets the background color for an image list",
        "label": "_GUIImageList_SetBkColor ( $hWnd, $iClrBk )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iClrBk",
            "documentation": "The background color to set.This parameter can be the $CLR_NONE value; in that case, images are drawn transparently using the mask."
        }]
    },
    "_GUIImageList_SetIconSize": {
        "documentation": "Sets the dimensions of images in an image list and removes all images from the list",
        "label": "_GUIImageList_SetIconSize ( $hWnd, $iCX, $iCY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iCX",
            "documentation": "The width, in pixels, of the images in the image list"
        }, {
            "label": "$iCY",
            "documentation": "The height, in pixels, of the images in the image list"
        }]
    },
    "_GUIImageList_SetImageCount": {
        "documentation": "Resizes an existing image list",
        "label": "_GUIImageList_SetImageCount ( $hWnd, $iNewCount )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iNewCount",
            "documentation": "The new size of the image list"
        }]
    },
    "_GUIImageList_Swap": {
        "documentation": "Swap image between Source and Destination image's index",
        "label": "_GUIImageList_Swap ( $hWnd, $iSource, $iDestination )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the imagelist"
        }, {
            "label": "$iSource",
            "documentation": "The 0-based index of the image to be used as the source of the swap operation"
        }, {
            "label": "$iDestination",
            "documentation": "The 0-based index of the image to be used as the destination of the swap operation"
        }]
    },
    "_GUIScrollBars_EnableScrollBar": {
        "documentation": "Enable/Disable scrollbar",
        "label": "_GUIScrollBars_EnableScrollBar ( $hWnd [, $iSBflags = $SB_BOTH [, $iArrows = $ESB_ENABLE_BOTH]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iSBflags",
            "documentation": "**[optional]** Specifies the scroll bar type. This parameter can be one of the following values:    $SB_BOTH - Enables or disables the arrows on the horizontal and vertical scroll bars associated with the specified window.    $SB_CTL - Indicates that the scroll bar is a scroll bar control. The $hWnd must be the handle to the scroll bar control.    $SB_HORZ - Enables or disables the arrows on the horizontal scroll bar associated with the specified window.    $SB_VERT - Enables or disables the arrows on the vertical scroll bar associated with the specified window."
        }, {
            "label": "$iArrows",
            "documentation": "**[optional]** Specifies whether the scroll bar arrows are enabled or disabled and indicates which arrows are enabled or disabled.This parameter can be one of the following values    $ESB_DISABLE_BOTH - Disables both arrows on a scroll bar.    $ESB_DISABLE_DOWN - Disables the down arrow on a vertical scroll bar.    $ESB_DISABLE_LEFT - Disables the left arrow on a horizontal scroll bar.    $ESB_DISABLE_LTUP - Disables the left arrow on a horizontal scroll bar or the up arrow of a vertical scroll bar.    $ESB_DISABLE_RIGHT - Disables the right arrow on a horizontal scroll bar.    $ESB_DISABLE_RTDN - Disables the right arrow on a horizontal scroll bar or the down arrow of a vertical scroll bar.    $ESB_DISABLE_UP - Disables the up arrow on a vertical scroll bar.    $ESB_ENABLE_BOTH - Enables both arrows on a scroll bar."
        }]
    },
    "_GUIScrollBars_GetScrollBarInfoEx": {
        "documentation": "Retrieves information about the specified scroll bar",
        "label": "_GUIScrollBars_GetScrollBarInfoEx ( $hWnd, $iObject )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iObject",
            "documentation": "Specifies the scroll bar object. This parameter can be one of the following values:    $OBJID_CLIENT - The $hWnd parameter is a handle to a scroll bar control.    $OBJID_HSCROLL - The horizontal scroll bar of the $hWnd window.    $OBJID_VSCROLL - The vertical scroll bar of the $hWnd window."
        }]
    },
    "_GUIScrollBars_GetScrollBarRect": {
        "documentation": "Retrieves coordinates of the scroll bar",
        "label": "_GUIScrollBars_GetScrollBarRect ( $hWnd, $iObject )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iObject",
            "documentation": "Specifies the scroll bar object. This parameter can be one of the following values:    $OBJID_CLIENT - The $hWnd parameter is a handle to a scroll bar control.    $OBJID_HSCROLL - The horizontal scroll bar of the $hWnd window.    $OBJID_VSCROLL - The vertical scroll bar of the $hWnd window."
        }]
    },
    "_GUIScrollBars_GetScrollBarRGState": {
        "documentation": "Retrieves the state of a scroll bar component",
        "label": "_GUIScrollBars_GetScrollBarRGState ( $hWnd, $iObject )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iObject",
            "documentation": "Specifies the scroll bar object. This parameter can be one of the following values:    $OBJID_CLIENT - The $hWnd parameter is a handle to a scroll bar control.    $OBJID_HSCROLL - The horizontal scroll bar of the $hWnd window.    $OBJID_VSCROLL - The vertical scroll bar of the $hWnd window."
        }]
    },
    "_GUIScrollBars_GetScrollBarXYLineButton": {
        "documentation": "Retrieves the Height or width of the thumb",
        "label": "_GUIScrollBars_GetScrollBarXYLineButton ( $hWnd, $iObject )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iObject",
            "documentation": "Specifies the scroll bar object. This parameter can be one of the following values:    $OBJID_CLIENT - The $hWnd parameter is a handle to a scroll bar control.    $OBJID_HSCROLL - The horizontal scroll bar of the $hWnd window.    $OBJID_VSCROLL - The vertical scroll bar of the $hWnd window."
        }]
    },
    "_GUIScrollBars_GetScrollBarXYThumbBottom": {
        "documentation": "Retrieves the Position of the bottom or right of the thumb",
        "label": "_GUIScrollBars_GetScrollBarXYThumbBottom ( $hWnd, $iObject )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iObject",
            "documentation": "Specifies the scroll bar object. This parameter can be one of the following values:    $OBJID_CLIENT - The $hWnd parameter is a handle to a scroll bar control.    $OBJID_HSCROLL - The horizontal scroll bar of the $hWnd window.    $OBJID_VSCROLL - The vertical scroll bar of the $hWnd window."
        }]
    },
    "_GUIScrollBars_GetScrollBarXYThumbTop": {
        "documentation": "Retrieves the Position of the top or left of the thumb",
        "label": "_GUIScrollBars_GetScrollBarXYThumbTop ( $hWnd, $iObject )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iObject",
            "documentation": "Specifies the scroll bar object. This parameter can be one of the following values:    $OBJID_CLIENT - The $hWnd parameter is a handle to a scroll bar control.    $OBJID_HSCROLL - The horizontal scroll bar of the $hWnd window.    $OBJID_VSCROLL - The vertical scroll bar of the $hWnd window."
        }]
    },
    "_GUIScrollBars_GetScrollInfo": {
        "documentation": "Retrieves the parameters of a scroll bar",
        "label": "_GUIScrollBars_GetScrollInfo ( $hWnd, $iBar, ByRef $tSCROLLINFO )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Retrieves the parameters for a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Retrieves the parameters for the window's standard horizontal scroll bar.    $SB_VERT - Retrieves the parameters for the window's standard vertical scroll bar."
        }, {
            "label": "$tSCROLLINFO",
            "documentation": "Structure of type $tagSCROLLINFO"
        }]
    },
    "_GUIScrollBars_GetScrollInfoEx": {
        "documentation": "Retrieves the parameters of a scroll bar",
        "label": "_GUIScrollBars_GetScrollInfoEx ( $hWnd, $iBar )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Retrieves the parameters for a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Retrieves the parameters for the window's standard horizontal scroll bar.    $SB_VERT - Retrieves the parameters for the window's standard vertical scroll bar."
        }]
    },
    "_GUIScrollBars_GetScrollInfoMax": {
        "documentation": "Retrieves the maximum scrolling position",
        "label": "_GUIScrollBars_GetScrollInfoMax ( $hWnd, $iBar )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Retrieves the parameters for a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Retrieves the parameters for the window's standard horizontal scroll bar.    $SB_VERT - Retrieves the parameters for the window's standard vertical scroll bar."
        }]
    },
    "_GUIScrollBars_GetScrollInfoMin": {
        "documentation": "Retrieves the minimum scrolling position",
        "label": "_GUIScrollBars_GetScrollInfoMin ( $hWnd, $iBar )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Retrieves the parameters for a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Retrieves the parameters for the window's standard horizontal scroll bar.    $SB_VERT - Retrieves the parameters for the window's standard vertical scroll bar."
        }]
    },
    "_GUIScrollBars_GetScrollInfoPage": {
        "documentation": "Retrieves the page size",
        "label": "_GUIScrollBars_GetScrollInfoPage ( $hWnd, $iBar )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Retrieves the parameters for a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Retrieves the parameters for the window's standard horizontal scroll bar.    $SB_VERT - Retrieves the parameters for the window's standard vertical scroll bar."
        }]
    },
    "_GUIScrollBars_GetScrollInfoPos": {
        "documentation": "Retrieves the position of the scroll box",
        "label": "_GUIScrollBars_GetScrollInfoPos ( $hWnd, $iBar )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Retrieves the parameters for a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Retrieves the parameters for the window's standard horizontal scroll bar.    $SB_VERT - Retrieves the parameters for the window's standard vertical scroll bar."
        }]
    },
    "_GUIScrollBars_GetScrollInfoTrackPos": {
        "documentation": "Retrieves the immediate position of a scroll box that the user is dragging",
        "label": "_GUIScrollBars_GetScrollInfoTrackPos ( $hWnd, $iBar )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Retrieves the parameters for a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Retrieves the parameters for the window's standard horizontal scroll bar.    $SB_VERT - Retrieves the parameters for the window's standard vertical scroll bar."
        }]
    },
    "_GUIScrollBars_GetScrollPos": {
        "documentation": "Retrieves the current position of the scroll box (thumb) in the specified scroll bar",
        "label": "_GUIScrollBars_GetScrollPos ( $hWnd, $iBar )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Retrieves the position of the scroll box in a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Retrieves the position of the scroll box in a window's standard horizontal scroll bar    $SB_VERT - Retrieves the position of the scroll box in a window's standard vertical scroll bar."
        }]
    },
    "_GUIScrollBars_GetScrollRange": {
        "documentation": "Retrieves the current minimum and maximum scroll box (thumb) positions for the specified scroll bar",
        "label": "_GUIScrollBars_GetScrollRange ( $hWnd, $iBar )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Retrieves the positions of a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Retrieves the positions of the window's standard horizontal scroll bar.    $SB_VERT - Retrieves the positions of the window's standard vertical scroll bar."
        }]
    },
    "_GUIScrollBars_Init": {
        "documentation": "Initialize the scrollbars for the window",
        "label": "_GUIScrollBars_Init ( $hWnd [, $iMaxH = -1 [, $iMaxV = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iMaxH",
            "documentation": "**[optional]** Max size of Horizontal scrollbar"
        }, {
            "label": "$iMaxV",
            "documentation": "**[optional]** Max size of Vertical scrollbar"
        }]
    },
    "_GUIScrollBars_ScrollWindow": {
        "documentation": "Scrolls the contents of the specified window's client area",
        "label": "_GUIScrollBars_ScrollWindow ( $hWnd, $iXAmount, $iYAmount )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iXAmount",
            "documentation": "Specifies the amount, in device units, of horizontal scrolling"
        }, {
            "label": "$iYAmount",
            "documentation": "Specifies the amount, in device units, of vertical scrolling"
        }]
    },
    "_GUIScrollBars_SetScrollInfo": {
        "documentation": "Sets the parameters of a scroll bar",
        "label": "_GUIScrollBars_SetScrollInfo ( $hWnd, $iBar, $tSCROLLINFO [, $bRedraw = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Sets the parameters of a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Sets the parameters of the window's standard horizontal scroll bar.    $SB_VERT - Sets the parameters of the window's standard vertical scroll bar."
        }, {
            "label": "$tSCROLLINFO",
            "documentation": "Structure of type $tagSCROLLINFO"
        }, {
            "label": "$bRedraw",
            "documentation": "**[optional]** Specifies whether the scroll bar is redrawn to reflect the changes to the scroll bar"
        }]
    },
    "_GUIScrollBars_SetScrollInfoMax": {
        "documentation": "Sets the maximum scrolling position",
        "label": "_GUIScrollBars_SetScrollInfoMax ( $hWnd, $iBar, $iMax )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Sets the parameters of a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Sets the parameters of the window's standard horizontal scroll bar.    $SB_VERT - Sets the parameters of the window's standard vertical scroll bar."
        }, {
            "label": "$iMax",
            "documentation": "Maximum scrolling position"
        }]
    },
    "_GUIScrollBars_SetScrollInfoMin": {
        "documentation": "Sets the minimum scrolling position",
        "label": "_GUIScrollBars_SetScrollInfoMin ( $hWnd, $iBar, $iMin )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Sets the parameters of a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Sets the parameters of the window's standard horizontal scroll bar.    $SB_VERT - Sets the parameters of the window's standard vertical scroll bar."
        }, {
            "label": "$iMin",
            "documentation": "Minimum scrolling position"
        }]
    },
    "_GUIScrollBars_SetScrollInfoPage": {
        "documentation": "Sets the page size",
        "label": "_GUIScrollBars_SetScrollInfoPage ( $hWnd, $iBar, $iPage )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Sets the parameters of a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Sets the parameters of the window's standard horizontal scroll bar.    $SB_VERT - Sets the parameters of the window's standard vertical scroll bar."
        }, {
            "label": "$iPage",
            "documentation": "Page size"
        }]
    },
    "_GUIScrollBars_SetScrollInfoPos": {
        "documentation": "Sets the position of the scroll box (thumb) in the specified scroll bar",
        "label": "_GUIScrollBars_SetScrollInfoPos ( $hWnd, $iBar, $iPos )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Sets the parameters of a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Sets the parameters of the window's standard horizontal scroll bar.    $SB_VERT - Sets the parameters of the window's standard vertical scroll bar."
        }, {
            "label": "$iPos",
            "documentation": "Position of the scroll box"
        }]
    },
    "_GUIScrollBars_SetScrollRange": {
        "documentation": "Sets the minimum and maximum scroll box positions for the specified scroll bar",
        "label": "_GUIScrollBars_SetScrollRange ( $hWnd, $iBar, $iMinPos, $iMaxPos )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_CTL - Sets the range of a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Sets the range of a window's standard horizontal scroll bar.    $SB_VERT - Sets the range of a window's standard vertical scroll bar."
        }, {
            "label": "$iMinPos",
            "documentation": "Specifies the minimum scrolling position"
        }, {
            "label": "$iMaxPos",
            "documentation": "Specifies the maximum scrolling position"
        }]
    },
    "_GUIScrollBars_ShowScrollBar": {
        "documentation": "Shows or hides the specified scroll bar",
        "label": "_GUIScrollBars_ShowScrollBar ( $hWnd, $iBar [, $bShow = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window"
        }, {
            "label": "$iBar",
            "documentation": "Specifies the type of scroll bar. This parameter can be one of the following values:    $SB_BOTH - Shows or hides a window's standard horizontal and vertical scroll bars.    $SB_CTL - Shows or hides a scroll bar control. The $hWnd parameter must be the handle to the scroll bar control.    $SB_HORZ - Shows or hides a window's standard horizontal scroll bars.    $SB_VERT - Shows or hides a window's standard vertical scroll bar."
        }, {
            "label": "$bShow",
            "documentation": "**[optional]** Specifies whether the scroll bar is shown or hidden"
        }]
    },
    "_GUIToolTip_Activate": {
        "documentation": "Activates a ToolTip control",
        "label": "_GUIToolTip_Activate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_AddTool": {
        "documentation": "Registers a tool with the ToolTip control",
        "label": "_GUIToolTip_AddTool ( $hTool, $hWnd, $sText [, $iID = 0 [, $iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0 [, $iFlags = Default [, $iParam = 0]]]]]]] )",
        "params": [{
            "label": "$hTool",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hWnd",
            "documentation": "Handle of the window that contains the tool, or 0"
        }, {
            "label": "$sText",
            "documentation": "Text for the ToolTip control. See remark."
        }, {
            "label": "$iID",
            "documentation": "**[optional]** Identifier of the tool, or Window handle of the control the tool is to be assigned to"
        }, {
            "label": "$iLeft",
            "documentation": "**[optional]** X coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iTop",
            "documentation": "**[optional]** Y coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** X coordinate of the lower right corner of the rectangle"
        }, {
            "label": "$iBottom",
            "documentation": "**[optional]** Y coordinate of the lower right corner of the rectangle"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Flags that control the ToolTip display"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Application-defined value that is associated with the tool"
        }]
    },
    "_GUIToolTip_AdjustRect": {
        "documentation": "Calculates the text display rectangle from the window rectangle",
        "label": "_GUIToolTip_AdjustRect ( $hWnd, ByRef $tRECT [, $bLarger = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that holds a window or text display rectangle"
        }, {
            "label": "$bLarger",
            "documentation": "**[optional]** Value that specifies which operation to perform. If True, $tRECT is used to specify a text display rectangle and it receives the corresponding window rectangle. If False, $tRECT is used to specify a window rectangle and it receives the corresponding text display rectangle."
        }]
    },
    "_GUIToolTip_BitsToTTF": {
        "documentation": "Decode bit flags to TTF_* strings",
        "label": "_GUIToolTip_BitsToTTF ( $iFlags )",
        "params": [{
            "label": "$iFlags",
            "documentation": "A value representing the ToolTip constants needing decoding"
        }]
    },
    "_GUIToolTip_Create": {
        "documentation": "Creates a ToolTip control",
        "label": "_GUIToolTip_Create ( $hWnd [, $iStyle = $_TT_ghTTDefaultStyle] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that will own the tool tip control. See remarks."
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** ToolTip style"
        }]
    },
    "_GUIToolTip_Deactivate": {
        "documentation": "Deactivates a ToolTip control",
        "label": "_GUIToolTip_Deactivate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_DelTool": {
        "documentation": "Deletes a tool from a tooltip control",
        "label": "_GUIToolTip_DelTool ( $hWnd, $hTool [, $iID = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hTool",
            "documentation": "Handle to the window that contains the tool (see Remarks)"
        }, {
            "label": "$iID",
            "documentation": "**[optional]** Handle of the tool to delete (see Remarks)"
        }]
    },
    "_GUIToolTip_Destroy": {
        "documentation": "Delete a ToolTip control",
        "label": "_GUIToolTip_Destroy ( ByRef $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_EnumTools": {
        "documentation": "Retrieves information about the current tool",
        "label": "_GUIToolTip_EnumTools ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the tool for which to retrieve information"
        }]
    },
    "_GUIToolTip_GetBubbleHeight": {
        "documentation": "Returns the height of the control",
        "label": "_GUIToolTip_GetBubbleHeight ( $hWnd, $hTool, $iID [, $iFlags = 0x00000001 + 0x00000010] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hTool",
            "documentation": "Handle to the window that contains the tool"
        }, {
            "label": "$iID",
            "documentation": "Handle of the control that the tool is associated with, or the ID of the tool"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Flags that control the ToolTip display:    $TTF_IDISHWND = Indicates that $iID is the window handle to the tool instead of the ID    $TTF_CENTERTIP = Centers the window below the tool specified by $iID    $TTF_RTLREADING = Indicates that text will be displayed in the opposite direction    $TTF_SUBCLASS = Indicates that the control should subclass the tool's window to intercept messages    $TTF_TRACK = Positions the control next to the tool to which it corresponds    $TTF_ABSOLUTE = Positions the window at the same coordinates provided by TTM_TRACKPOSITION    $TTF_TRANSPARENT = Causes the control to forward mouse messages to the parent window    $TTF_PARSELINKS = Indicates that links in the control text should be parsed"
        }]
    },
    "_GUIToolTip_GetBubbleSize": {
        "documentation": "Returns the width and height of a ToolTip control",
        "label": "_GUIToolTip_GetBubbleSize ( $hWnd, $hTool, $iID [, $iFlags = 0x00000001 + 0x00000010] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hTool",
            "documentation": "Handle to the window that contains the tool"
        }, {
            "label": "$iID",
            "documentation": "Handle of the control that the tool is associated with, or the ID of the tool"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Flags that control the ToolTip display"
        }]
    },
    "_GUIToolTip_GetBubbleWidth": {
        "documentation": "Returns the width of a ToolTip control",
        "label": "_GUIToolTip_GetBubbleWidth ( $hWnd, $hTool, $iID [, $iFlags = 0x00000001 + 0x00000010] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hTool",
            "documentation": "Handle to the window that contains the tool"
        }, {
            "label": "$iID",
            "documentation": "Handle of the control that the tool is associated with, or the ID of the tool"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Flags that control the ToolTip display"
        }]
    },
    "_GUIToolTip_GetCurrentTool": {
        "documentation": "Retrieves information for the current tool",
        "label": "_GUIToolTip_GetCurrentTool ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_GetDelayTime": {
        "documentation": "Retrieves the initial, pop-up or reshow durations of a ToolTip control",
        "label": "_GUIToolTip_GetDelayTime ( $hWnd, $iDuration )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$iDuration",
            "documentation": "Flag that specifies which duration value will be retrieved"
        }]
    },
    "_GUIToolTip_GetMargin": {
        "documentation": "Retrieves the top, left, bottom, and right margins of a ToolTip control",
        "label": "_GUIToolTip_GetMargin ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_GetMarginEx": {
        "documentation": "Retrieves the top, left, bottom, and right margins of a ToolTip control",
        "label": "_GUIToolTip_GetMarginEx ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_GetMaxTipWidth": {
        "documentation": "Retrieves the maximum width of a ToolTip window",
        "label": "_GUIToolTip_GetMaxTipWidth ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_GetText": {
        "documentation": "Retrieves the text of a tool",
        "label": "_GUIToolTip_GetText ( $hWnd, $hTool, $iID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hTool",
            "documentation": "Handle to the window that contains the tool"
        }, {
            "label": "$iID",
            "documentation": "Identifier of the tool, or Window handle of the control the tool is assigned to"
        }]
    },
    "_GUIToolTip_GetTipBkColor": {
        "documentation": "Retrieves the background color",
        "label": "_GUIToolTip_GetTipBkColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_GetTipTextColor": {
        "documentation": "Retrieves the text color of a ToolTip control",
        "label": "_GUIToolTip_GetTipTextColor ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_GetTitleBitMap": {
        "documentation": "Retrieves the title bitmap icon",
        "label": "_GUIToolTip_GetTitleBitMap ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_GetTitleText": {
        "documentation": "Retrieve the title",
        "label": "_GUIToolTip_GetTitleText ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_GetToolCount": {
        "documentation": "Returns the count of tools maintained by the ToolTip control",
        "label": "_GUIToolTip_GetToolCount ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_GetToolInfo": {
        "documentation": "Retrieves the information about a specific tool",
        "label": "_GUIToolTip_GetToolInfo ( $hWnd, $hTool, $iID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hTool",
            "documentation": "Handle to the window that contains the tool"
        }, {
            "label": "$iID",
            "documentation": "Identifier of the tool, or Window handle of the control the tool is assigned to"
        }]
    },
    "_GUIToolTip_HitTest": {
        "documentation": "Retrieves the information that a ToolTip control maintains about a tool",
        "label": "_GUIToolTip_HitTest ( $hWnd, $hTool, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hTool",
            "documentation": "Handle to the window that contains the tool"
        }, {
            "label": "$iX",
            "documentation": "X position to test"
        }, {
            "label": "$iY",
            "documentation": "Y position to test"
        }]
    },
    "_GUIToolTip_NewToolRect": {
        "documentation": "Sets a new bounding rectangle for a tool",
        "label": "_GUIToolTip_NewToolRect ( $hWnd, $hTool, $iID, $iLeft, $iTop, $iRight, $iBottom )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hTool",
            "documentation": "Handle of the window that contains the tool, or 0"
        }, {
            "label": "$iID",
            "documentation": "Identifier of the tool, or Window handle of the control the tool is to be assigned to"
        }, {
            "label": "$iLeft",
            "documentation": "X coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iTop",
            "documentation": "Y coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iRight",
            "documentation": "X coordinate of the lower right corner of the rectangle"
        }, {
            "label": "$iBottom",
            "documentation": "Y coordinate of the lower right corner of the rectangle"
        }]
    },
    "_GUIToolTip_Pop": {
        "documentation": "Removes a displayed ToolTip from view",
        "label": "_GUIToolTip_Pop ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_PopUp": {
        "documentation": "Causes the ToolTip to display at the coordinates of the last mouse message",
        "label": "_GUIToolTip_PopUp ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_SetDelayTime": {
        "documentation": "Sets the initial, pop-up, and reshow durations of a ToolTip",
        "label": "_GUIToolTip_SetDelayTime ( $hWnd, $iDuration, $iTime )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$iDuration",
            "documentation": "Flag that specifies which duration value will be set:    $TTDT_AUTOMATIC (0) - Set all three delay times to default proportions. (see remarks)    $TTDT_RESHOW (1) - Time it takes for subsequent ToolTip windows to appear as the pointer moves from one tool to another    $TTDT_AUTOPOP (2) - Time the ToolTip window remains visible if the pointer is stationary within a tool's bounding rectangle    $TTDT_INITIAL (3) - Time the pointer must remain stationary within a tool's bounding rectangle before the window appears"
        }, {
            "label": "$iTime",
            "documentation": "Delay time in milliseconds"
        }]
    },
    "_GUIToolTip_SetMargin": {
        "documentation": "Sets the top, left, bottom, and right margins of a ToolTip",
        "label": "_GUIToolTip_SetMargin ( $hWnd, $iLeft, $iTop, $iRight, $iBottom )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$iLeft",
            "documentation": "Distance between left border and left end of text, in pixels"
        }, {
            "label": "$iTop",
            "documentation": "Distance between top border and top of text, in pixels"
        }, {
            "label": "$iRight",
            "documentation": "Distance between right border and right end of text, in pixels"
        }, {
            "label": "$iBottom",
            "documentation": "Distance between bottom border and bottom of text, in pixels"
        }]
    },
    "_GUIToolTip_SetMaxTipWidth": {
        "documentation": "Sets the maximum width for a ToolTip window",
        "label": "_GUIToolTip_SetMaxTipWidth ( $hWnd, $iWidth )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$iWidth",
            "documentation": "Maximum ToolTip window width to be set (in pixels)"
        }]
    },
    "_GUIToolTip_SetTipBkColor": {
        "documentation": "Sets the background color of a ToolTip",
        "label": "_GUIToolTip_SetTipBkColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$iColor",
            "documentation": "New text color (see remarks)"
        }]
    },
    "_GUIToolTip_SetTipTextColor": {
        "documentation": "Sets the text color",
        "label": "_GUIToolTip_SetTipTextColor ( $hWnd, $iColor )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$iColor",
            "documentation": "New text color (see remarks)"
        }]
    },
    "_GUIToolTip_SetTitle": {
        "documentation": "Adds a standard icon and title string",
        "label": "_GUIToolTip_SetTitle ( $hWnd, $sTitle [, $iIcon = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$sTitle",
            "documentation": "Title string"
        }, {
            "label": "$iIcon",
            "documentation": "**[optional]** Set to one of the values below:.    $TTI_NONE (0) - No icon [default]    $TTI_INFO (1) - Information icon    $TTI_WARNING (2) - Warning icon    $TTI_ERROR (3) - Error Icon    $TTI_INFO_LARGE (4) - Large Information Icon    $TTI_WARNING_LARGE (5) - Large Warning Icon    $TTI_ERROR_LARGE (6) - Large Error Icon"
        }]
    },
    "_GUIToolTip_SetToolInfo": {
        "documentation": "Sets the information for a tool",
        "label": "_GUIToolTip_SetToolInfo ( $hWnd, $sText [, $iID = 0 [, $iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0 [, $iFlags = Default [, $iParam = 0]]]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window that contains the tool, or 0"
        }, {
            "label": "$sText",
            "documentation": "Text for the ToolTip control"
        }, {
            "label": "$iID",
            "documentation": "**[optional]** Identifier of the tool, or Window handle of the control the tool is assigned to"
        }, {
            "label": "$iLeft",
            "documentation": "**[optional]** X coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iTop",
            "documentation": "**[optional]** Y coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** X coordinate of the lower right corner of the rectangle"
        }, {
            "label": "$iBottom",
            "documentation": "**[optional]** Y coordinate of the lower right corner of the rectangle"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Flags that control the ToolTip display:    $TTF_IDISHWND - Indicates that $iID is a window or control handle, instead of the ID of the tool [default]    $TTF_CENTERTIP - Centers the tooltip below the control specified by $iID    $TTF_RTLREADING - Indicates that text will be displayed in the opposite direction (right to left)    $TTF_SUBCLASS - Indicates that the control should subclass the tool's window [default]    $TTF_TRACK    - Positions the tooltip window next to the tool to which it corresponds    $TTF_ABSOLUTE - Positions the window at the same coordinates provided by TTM_TRACKPOSITION. (see Remarks)    $TTF_TRANSPARENT- Causes the control to forward mouse messages to the parent window    $TTF_PARSELINKS - Indicates that links in the control text should be displayed as links"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** Application-defined value that is associated with the tool"
        }]
    },
    "_GUIToolTip_SetWindowTheme": {
        "documentation": "Sets the visual style",
        "label": "_GUIToolTip_SetWindowTheme ( $hWnd, $sStyle )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$sStyle",
            "documentation": "String that contains the ToolTip visual style to set"
        }]
    },
    "_GUIToolTip_ToolExists": {
        "documentation": "Determines whether a tool currently exists (is displayed)",
        "label": "_GUIToolTip_ToolExists ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_ToolToArray": {
        "documentation": "Transfers a ToolInfo structure to an array",
        "label": "_GUIToolTip_ToolToArray ( $hWnd, ByRef $tToolInfo, $iError )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$tToolInfo",
            "documentation": "$tagTOOLINFO structure"
        }, {
            "label": "$iError",
            "documentation": "Error code to be returned"
        }]
    },
    "_GUIToolTip_TrackActivate": {
        "documentation": "Activates or deactivates a tracking ToolTip",
        "label": "_GUIToolTip_TrackActivate ( $hWnd [, $bActivate = True [, $hTool = 0 [, $iID = 0]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$bActivate",
            "documentation": "**[optional]** True to activate, False to deactivate"
        }, {
            "label": "$hTool",
            "documentation": "**[optional]** Handle to the window that contains the tool"
        }, {
            "label": "$iID",
            "documentation": "**[optional]** Control handle that the tool is assigned to, or application-defined identifier of the tool"
        }]
    },
    "_GUIToolTip_TrackPosition": {
        "documentation": "Sets the position of a tracking ToolTip",
        "label": "_GUIToolTip_TrackPosition ( $hWnd, $iX, $iY )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$iX",
            "documentation": "X position in screen coordinates"
        }, {
            "label": "$iY",
            "documentation": "Y position in screen coordinates"
        }]
    },
    "_GUIToolTip_Update": {
        "documentation": "Forces the current tool to be redrawn",
        "label": "_GUIToolTip_Update ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }]
    },
    "_GUIToolTip_UpdateTipText": {
        "documentation": "Sets the ToolTip text for a tool",
        "label": "_GUIToolTip_UpdateTipText ( $hWnd, $hTool, $iID, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the ToolTip control (returned by _GUIToolTip_Create.)"
        }, {
            "label": "$hTool",
            "documentation": "Handle of the window that contains the tool, or 0"
        }, {
            "label": "$iID",
            "documentation": "Identifier of the tool, or Window handle of the control the tool is to be assigned to"
        }, {
            "label": "$sText",
            "documentation": "Text for the ToolTip control."
        }]
    },
    "_HexToString": {
        "documentation": "Convert a hex string to a string",
        "label": "_HexToString ( $sHex )",
        "params": [{
            "label": "$sHex",
            "documentation": "A hexadecimal string"
        }]
    },
    "_IEAction": {
        "documentation": "Perform any of a set of simple actions on the Browser",
        "label": "_IEAction ( ByRef $oObject, $sAction )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application"
        }, {
            "label": "$sAction",
            "documentation": "Action selection (see remarks)"
        }]
    },
    "_IEAttach": {
        "documentation": "Attach to the specified instance of Internet Explorer where the search string sub-string matches (based on the selected mode)",
        "label": "_IEAttach ( $sString [, $sMode = \"title\" [, $iInstance = 1]] )",
        "params": [{
            "label": "$sString",
            "documentation": "String to search for (for \"embedded\" or \"dialogbox\", use Title sub-string or HWND of window)"
        }, {
            "label": "$sMode",
            "documentation": "**[optional]** specifies search mode    \"title\" = (Default) sub-string of main document title    \"windowtitle\" = sub-string of full window title (instead of document title)    \"url\" = sub-string or url of the current page    \"text\" = sub-string in text from the body of the current page    \"html\" = sub-string in html from the body of the current page    \"hwnd\" = hwnd of the browser window    \"embedded\" = title sub-string or hwnd of the window embedding the control    \"dialogbox\" = title sub-string or hwnd of modal/modeless dialogbox    \"instance\" = $sString is ignored, one browser reference returned (by matching instance number) from all available browser instances"
        }, {
            "label": "$iInstance",
            "documentation": "**[optional]** 1-based index into group of browsers or embedded browsers matching $sString and $sMode. See Remarks."
        }]
    },
    "_IEBodyReadHTML": {
        "documentation": "Returns the HTML inside the <body> tag of the document",
        "label": "_IEBodyReadHTML ( ByRef $oObject )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }]
    },
    "_IEBodyReadText": {
        "documentation": "Returns the Text inside the <body> tag of the document",
        "label": "_IEBodyReadText ( ByRef $oObject )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }]
    },
    "_IEBodyWriteHTML": {
        "documentation": "Replaces the HTML inside the <body> tag of the document",
        "label": "_IEBodyWriteHTML ( ByRef $oObject, $sHTML )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sHTML",
            "documentation": "The HTML string to write to the document"
        }]
    },
    "_IECreate": {
        "documentation": "Create an Internet Explorer Browser Window",
        "label": "_IECreate ( [$sUrl = \"about:blank\" [, $iTryAttach = 0 [, $iVisible = 1 [, $iWait = 1 [, $iTakeFocus = 1]]]]] )",
        "params": [{
            "label": "$sUrl",
            "documentation": "**[optional]** specifies the Url to navigate to upon creation"
        }, {
            "label": "$iTryAttach",
            "documentation": "**[optional]** specifies whether to try to attach to an existing window    0 = (Default) do not try to attach    1 = Try to attach to an existing window"
        }, {
            "label": "$iVisible",
            "documentation": "**[optional]** specifies whether the browser window will be visible    0 = Browser Window is hidden    1 = (Default) Browser Window is visible"
        }, {
            "label": "$iWait",
            "documentation": "**[optional]** specifies whether to wait for page to load before returning    0 = Return immediately, not waiting for page to load    1 = (Default) Wait for page load to complete before returning"
        }, {
            "label": "$iTakeFocus",
            "documentation": "**[optional]** specifies whether to bring the attached window to focus    0 = Do not bring window into focus    1 = (Default) bring window into focus"
        }]
    },
    "_IECreateEmbedded": {
        "documentation": "Create a Webbrowser object suitable for embedding in an AutoIt GUI with GUICtrlCreateObj()",
        "label": "_IECreateEmbedded (  )",
        "params": []
    },
    "_IEDocGetObj": {
        "documentation": "Given any DOM object, returns a reference to the associated document object",
        "label": "_IEDocGetObj ( ByRef $oObject )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window, Frame or any DOM object"
        }]
    },
    "_IEDocInsertHTML": {
        "documentation": "Inserts HTML Text in or around an element",
        "label": "_IEDocInsertHTML ( ByRef $oObject, $sString [, $sWhere = \"beforeend\"] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable pointing to a document element."
        }, {
            "label": "$sString",
            "documentation": "The string containing the HTML text to insert."
        }, {
            "label": "$sWhere",
            "documentation": "**[optional]** specifies the string insertion point    \"beforebegin\" = Inserts string immediately before the object.    \"afterbegin\" = Inserts string after the start of the object but before all other content in the object.    \"beforeend\" = (Default) Inserts string immediately before the end of the object but after all other content in the object.    \"afterend\" = Inserts string immediately after the end of the object."
        }]
    },
    "_IEDocInsertText": {
        "documentation": "Inserts Text in or around an element",
        "label": "_IEDocInsertText ( ByRef $oObject, $sString [, $sWhere = \"beforeend\"] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable pointing to a document element."
        }, {
            "label": "$sString",
            "documentation": "The string containing the text to insert."
        }, {
            "label": "$sWhere",
            "documentation": "**[optional]** specifies the string insertion point    \"beforebegin\" = Inserts string immediately before the object.    \"afterbegin\" = Inserts string after the start of the object but before all other content in the object.    \"beforeend\" = (Default) Inserts string immediately before the end of the object but after all other content in the object.    \"afterend\" = Inserts string immediately after the end of the object."
        }]
    },
    "_IEDocReadHTML": {
        "documentation": "Returns the full HTML source of a document",
        "label": "_IEDocReadHTML ( ByRef $oObject )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }]
    },
    "_IEDocWriteHTML": {
        "documentation": "Replaces the HTML for the entire document",
        "label": "_IEDocWriteHTML ( ByRef $oObject, $sHTML )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sHTML",
            "documentation": "The HTML string to write to the document"
        }]
    },
    "_IEErrorNotify": {
        "documentation": "Specifies whether IE.au3 automatically notifies of Warnings and Errors (to the console)",
        "label": "_IEErrorNotify ( [$vNotify = Default] )",
        "params": [{
            "label": "$vNotify",
            "documentation": "**[optional]** specifies whether notification should be on or off    -1 = (Default) return current setting    True = Turn On    False = Turn Off"
        }]
    },
    "_IEFormElementCheckBoxSelect": {
        "documentation": "Set the value of a specified form element",
        "label": "_IEFormElementCheckBoxSelect ( ByRef $oObject, $sString [, $sName = \"\" [, $iSelect = 1 [, $sMode = \"byValue\" [, $iFireEvent = 1]]]] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Form object"
        }, {
            "label": "$sString",
            "documentation": "Value used to match element - treatment based on $sMode"
        }, {
            "label": "$sName",
            "documentation": "**[optional]** Name or Id of checkbox(es)"
        }, {
            "label": "$iSelect",
            "documentation": "**[optional]** specifies whether element should be checked or unchecked    -1 = Return checked state     0 = Uncheck the element     1 = (Default) Check the element"
        }, {
            "label": "$sMode",
            "documentation": "**[optional]** specify search mode    \"byValue\" = (Default) value of the checkbox you wish to select    \"byIndex\" = 0-based index of checkbox you wish to select"
        }, {
            "label": "$iFireEvent",
            "documentation": "**[optional]** specifies whether to fire OnChange and OnClick events after changing value    0 = do not fire OnChange or OnClick event after setting value    1 = (Default) fire OnChange and OnClick events after setting value"
        }]
    },
    "_IEFormElementGetCollection": {
        "documentation": "Returns a collection object variable representing all Form Elements within a given Form",
        "label": "_IEFormElementGetCollection ( ByRef $oObject [, $iIndex = -1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Form object"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** specifies whether to return a collection or indexed instance     0 or positive integer returns an indexed instance    -1 = (Default) returns a collection"
        }]
    },
    "_IEFormElementGetObjByName": {
        "documentation": "Returns an object reference to a Form Element by name",
        "label": "_IEFormElementGetObjByName ( ByRef $oObject, $sName [, $iIndex = 0] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Form object"
        }, {
            "label": "$sName",
            "documentation": "Specifies the name of the Form Element you wish to match"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** If the Form Element name occurs more than once, specifies instance by 0-based index     0 (Default) or positive integer returns an indexed instance    -1 returns a collection of the specified Form Elements"
        }]
    },
    "_IEFormElementGetValue": {
        "documentation": "Returns the value of a given Form Element",
        "label": "_IEFormElementGetValue ( ByRef $oObject )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Form Element object"
        }]
    },
    "_IEFormElementOptionSelect": {
        "documentation": "Set the value of a specified form element",
        "label": "_IEFormElementOptionSelect ( ByRef $oObject, $sString [, $iSelect = 1 [, $sMode = \"byValue\" [, $iFireEvent = 1]]] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Form Element Object of type \"Select Option\""
        }, {
            "label": "$sString",
            "documentation": "Value used to match element - treatment based on $sMode"
        }, {
            "label": "$iSelect",
            "documentation": "**[optional]** specifies whether element should be selected or deselected    -1 = Return selected state     0 = Deselect the element     1 = (Default) Select the element"
        }, {
            "label": "$sMode",
            "documentation": "**[optional]** specifies search mode    \"byValue\" = (Default) value of the option you wish to select    \"byText\" = text of the option you wish to select    \"byIndex\" = 0-based index of option you wish to select"
        }, {
            "label": "$iFireEvent",
            "documentation": "**[optional]** specifies whether to fire OnChange and OnClick events after changing value    0 = do not fire OnChange or OnClick event after setting value    1 = (Default) fire OnChange and OnClick events after setting value"
        }]
    },
    "_IEFormElementRadioSelect": {
        "documentation": "Set the value of a specified form element",
        "label": "_IEFormElementRadioSelect ( ByRef $oObject, $sString, $sName [, $iSelect = 1 [, $sMode = \"byValue\" [, $iFireEvent = 1]]] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Form object"
        }, {
            "label": "$sString",
            "documentation": "Value used to match element - treatment based on $sMode"
        }, {
            "label": "$sName",
            "documentation": "Name or Id of Radio Group"
        }, {
            "label": "$iSelect",
            "documentation": "**[optional]** specifies whether element should be selected or deselected    -1 = Return selected state     0 = Unselect the element     1 = (Default) Select the element"
        }, {
            "label": "$sMode",
            "documentation": "**[optional]** specifies search mode    \"byValue\" = (Default) value of the radio you wish to select    \"byIndex\" = 0-based index of radio you wish to select"
        }, {
            "label": "$iFireEvent",
            "documentation": "**[optional]** specifies whether to fire OnChange and OnClick events after changing value    0 = do not fire OnChange or OnClick event after setting value    1 = (Default) fire OnChange and OnClick events after setting value"
        }]
    },
    "_IEFormElementSetValue": {
        "documentation": "Set the value of a specified Form Element",
        "label": "_IEFormElementSetValue ( ByRef $oObject, $sNewValue [, $iFireEvent = 1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Form Element object"
        }, {
            "label": "$sNewValue",
            "documentation": "The new value to be set into the Form Element"
        }, {
            "label": "$iFireEvent",
            "documentation": "**[optional]** specifies whether to fire an OnChange event after changing value    0 = Do not fire OnChange or OnClick event after setting value    1 = (Default) fire OnChange and OnClick event after setting value"
        }]
    },
    "_IEFormGetCollection": {
        "documentation": "Returns a collection object variable representing the Forms in the document or a single form by index",
        "label": "_IEFormGetCollection ( ByRef $oObject [, $iIndex = -1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window, Frame or iFrame object"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** specifies whether to return a collection or indexed instance 0 or positive integer returns an indexed instance-1 = (Default) returns a collection"
        }]
    },
    "_IEFormGetObjByName": {
        "documentation": "Returns an object reference to a Form by name",
        "label": "_IEFormGetObjByName ( ByRef $oObject, $sName [, $iIndex = 0] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sName",
            "documentation": "Specifies the name of the Form you wish to match"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** If Form name occurs more than once, specifies instance by 0-based index     0 (Default) or positive integer returns an indexed instance    -1 returns a collection of the specified Forms"
        }]
    },
    "_IEFormImageClick": {
        "documentation": "Simulate a mouse click on an <input type=image>. Match by sub-string match of alt text, name or src",
        "label": "_IEFormImageClick ( ByRef $oObject, $sLinkText [, $sMode = \"src\" [, $iIndex = 0 [, $iWait = 1]]] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of any DOM element (will be converted to the associated document object)"
        }, {
            "label": "$sLinkText",
            "documentation": "Value used to match element - treatment based on $sMode"
        }, {
            "label": "$sMode",
            "documentation": "**[optional]** specifies search mode    \"src\" = (Default) match the url of the image    \"id\" = match the id of the image (see remarks)    \"alt\" = match the alternate text of the image"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** If the img text occurs more than once, specifies which instance you want by 0-based index"
        }, {
            "label": "$iWait",
            "documentation": "**[optional]** specifies whether to wait for page to load before returning    0 = Return immediately, not waiting for page to load    1 = (Default) Wait for page load to complete before returning"
        }]
    },
    "_IEFormReset": {
        "documentation": "Reset a specified Form setting the values back to their loaded defaults",
        "label": "_IEFormReset ( ByRef $oObject )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Form object"
        }]
    },
    "_IEFormSubmit": {
        "documentation": "Submit a specified Form",
        "label": "_IEFormSubmit ( ByRef $oObject [, $iWait = 1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Form object"
        }, {
            "label": "$iWait",
            "documentation": "**[optional]** specifies whether to wait for page to load before returning    0 = Return immediately, not waiting for page to load    1 = (Default) Wait for page load to complete before returning"
        }]
    },
    "_IEFrameGetCollection": {
        "documentation": "Returns a collection object containing the frames in a FrameSet or the iFrames on a normal page or a single Frame or iFrame by index",
        "label": "_IEFrameGetCollection ( ByRef $oObject [, $iIndex = -1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** specifies whether to return a collection or indexed instance     0 or positive integer returns an indexed instance    -1 = (Default) returns a collection"
        }]
    },
    "_IEFrameGetObjByName": {
        "documentation": "Returns an object reference to a Frame or iFrame by name",
        "label": "_IEFrameGetObjByName ( ByRef $oObject, $sName )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sName",
            "documentation": "Name of the Frame you wish to match"
        }]
    },
    "_IEGetObjById": {
        "documentation": "Returns an object variable by id",
        "label": "_IEGetObjById ( ByRef $oObject, $sID )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sID",
            "documentation": "Specifies id of the object you wish to match"
        }]
    },
    "_IEGetObjByName": {
        "documentation": "Returns an object variable by name",
        "label": "_IEGetObjByName ( ByRef $oObject, $sName [, $iIndex = 0] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sName",
            "documentation": "Specifies name of the object you wish to match"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** If name occurs more than once, specifies instance by 0-based index     0 (Default) or positive integer returns an indexed instance    -1 returns a collection of the specified objects"
        }]
    },
    "_IEHeadInsertEventScript": {
        "documentation": "Inserts a Javascript into the Head of the document",
        "label": "_IEHeadInsertEventScript ( ByRef $oObject, $sHTMLFor, $sEvent, $sScript )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sHTMLFor",
            "documentation": "The HTML element for event monitoring (e.g. \"document\", \"window\" or an element ID)"
        }, {
            "label": "$sEvent",
            "documentation": "The event to monitor (e.g. \"onclick\" or \"oncontextmenu\")"
        }, {
            "label": "$sScript",
            "documentation": "Javascript string to be executed"
        }]
    },
    "_IEImgClick": {
        "documentation": "Simulate a mouse click on an image. Match by sub-string match of alt text, name, or src",
        "label": "_IEImgClick ( ByRef $oObject, $sLinkText [, $sMode = \"src\" [, $iIndex = 0 [, $iWait = 1]]] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sLinkText",
            "documentation": "Text to match the content of the attribute specified in $sMode"
        }, {
            "label": "$sMode",
            "documentation": "**[optional]** specifies search mode    \"src\" = (Default) match the url of the image    \"id\" = match the id of the image (see remarks)    \"alt\" = match the alternate text of the image"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** If the img text occurs more than once, specify which instance you want by 0-based index"
        }, {
            "label": "$iWait",
            "documentation": "**[optional]** specifies whether to wait for page to load before returning    0 = Return immediately, not waiting for page to load    1 = (Default) Wait for page load to complete before returning"
        }]
    },
    "_IEImgGetCollection": {
        "documentation": "Returns a collection object variable representing the IMG tags in the document or a single image by index",
        "label": "_IEImgGetCollection ( ByRef $oObject [, $iIndex = -1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window, Frame or iFrame object"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** specifies whether to return a collection or indexed instance     0 or positive integer returns an indexed instance    -1 = (Default) returns a collection"
        }]
    },
    "_IEIsFrameSet": {
        "documentation": "Checks to see if the specified Window contains a FrameSet",
        "label": "_IEIsFrameSet ( ByRef $oObject )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }]
    },
    "_IELinkClickByIndex": {
        "documentation": "Simulate a mouse click on a link by 0-based index (in source order)",
        "label": "_IELinkClickByIndex ( ByRef $oObject, $iIndex [, $iWait = 1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$iIndex",
            "documentation": "0-based index of the link you wish to match"
        }, {
            "label": "$iWait",
            "documentation": "**[optional]** specifies whether to wait for page to load before returning    0 = Return immediately, not waiting for page to load    1 = (Default) Wait for page load to complete before returning"
        }]
    },
    "_IELinkClickByText": {
        "documentation": "Simulate a mouse click on a link with text sub-string matching the string provided",
        "label": "_IELinkClickByText ( ByRef $oObject, $sLinkText [, $iIndex = 0 [, $iWait = 1]] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sLinkText",
            "documentation": "Text displayed on the web page for the desired link to click"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** If the link text occurs more than once, specify which instance you want by 0-based index"
        }, {
            "label": "$iWait",
            "documentation": "**[optional]** specifies whether to wait for page to load before returning    0 = Return immediately, not waiting for page to load    1 = (Default) Wait for page load to complete before returning"
        }]
    },
    "_IELinkGetCollection": {
        "documentation": "Returns a collection object containing all links in the document or a single link by index",
        "label": "_IELinkGetCollection ( ByRef $oObject [, $iIndex = -1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** specifies whether to return a collection or indexed instance     0 or positive integer returns an indexed instance    -1 = (Default) returns a collection"
        }]
    },
    "_IELoadWait": {
        "documentation": "Wait for a browser page load to complete before returning",
        "label": "_IELoadWait ( ByRef $oObject [, $iDelay = 0 [, $iTimeout = -1]] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application or DOM element"
        }, {
            "label": "$iDelay",
            "documentation": "**[optional]** Milliseconds to wait before checking status"
        }, {
            "label": "$iTimeout",
            "documentation": "**[optional]** Period of time to wait before exiting function (default = 300000 ms aka 5 min)"
        }]
    },
    "_IELoadWaitTimeout": {
        "documentation": "Retrieve or set the current value in milliseconds _IELoadWait() will try before timing out",
        "label": "_IELoadWaitTimeout ( [$iTimeout = -1] )",
        "params": [{
            "label": "$iTimeout",
            "documentation": "**[optional]** retrieve or specify the number of milliseconds     0 or positive integer sets timeout to this value    -1 = (Default) returns the current timeout value (stored in global variable $__IELoadWaitTimeout)"
        }]
    },
    "_IENavigate": {
        "documentation": "Directs an existing browser window to navigate to the specified URL",
        "label": "_IENavigate ( ByRef $oObject, $sUrl [, $iWait = 1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$sUrl",
            "documentation": "URL to navigate to (e.g. \"http://www.autoitscript.com\")"
        }, {
            "label": "$iWait",
            "documentation": "**[optional]** specifies whether to wait for page to load before returning    0 = Return immediately, not waiting for page to load    1 = (Default) Wait for page load to complete before returning"
        }]
    },
    "_IEPropertyGet": {
        "documentation": "Returns a select property of the Browser or DOM element",
        "label": "_IEPropertyGet ( ByRef $oObject, $sProperty )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application or DOM element"
        }, {
            "label": "$sProperty",
            "documentation": "Property selection (see remarks)"
        }]
    },
    "_IEPropertySet": {
        "documentation": "Set a select property of the Browser or DOM element",
        "label": "_IEPropertySet ( ByRef $oObject, $sProperty, $vValue )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application"
        }, {
            "label": "$sProperty",
            "documentation": "Property selection (see remarks)"
        }, {
            "label": "$vValue",
            "documentation": "The new value to be set into the Browser Property"
        }]
    },
    "_IEQuit": {
        "documentation": "Close the browser and remove the object reference to it",
        "label": "_IEQuit ( ByRef $oObject )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application"
        }]
    },
    "_IETableGetCollection": {
        "documentation": "Returns a collection object variable representing all the tables in a document or a single table by index",
        "label": "_IETableGetCollection ( ByRef $oObject [, $iIndex = -1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window or Frame object"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** specifies whether to return a collection or indexed instance     0 or positive integer returns an indexed instance    -1 = (Default) returns a collection"
        }]
    },
    "_IETableWriteToArray": {
        "documentation": "Reads the contents of a Table into an array",
        "label": "_IETableWriteToArray ( ByRef $oObject [, $bTranspose = False] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Table object"
        }, {
            "label": "$bTranspose",
            "documentation": "**[optional]** Boolean value specifying whether to swap the rows and columns in the output array"
        }]
    },
    "_IETagNameAllGetCollection": {
        "documentation": "Returns a collection object all elements in the document or document hierarchy in source order or a single element by index",
        "label": "_IETagNameAllGetCollection ( ByRef $oObject [, $iIndex = -1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window, Frame, iFrame or any object in the DOM"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** specifies whether to return a collection or indexed instance     0 or positive integer returns an indexed instance    -1 = (Default) returns a collection"
        }]
    },
    "_IETagNameGetCollection": {
        "documentation": "Returns a collection object of all elements in the object with the specified TagName or a single element by index",
        "label": "_IETagNameGetCollection ( ByRef $oObject, $sTagName [, $iIndex = -1] )",
        "params": [{
            "label": "$oObject",
            "documentation": "Object variable of an InternetExplorer.Application, Window, Frame, iFrame or any object in the DOM"
        }, {
            "label": "$sTagName",
            "documentation": "TagName of collection to return (e.g. IMG, TR etc.)"
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** specifies whether to return a collection or indexed instance     0 or positive integer returns an indexed instance    -1 = (Default) returns a collection"
        }]
    },
    "_IE_Example": {
        "documentation": "Display a new browser window pre-loaded with documents to be used in IE.au3 examples or your own testing",
        "label": "_IE_Example ( [$sModule = \"basic\"] )",
        "params": [{
            "label": "$sModule",
            "documentation": "**[optional]** specifies which module to run    \"basic\" = (Default) simple HTML page with text, links and images    \"form\" = simple HTML page with multiple form elements    \"frameset\" = simple HTML page with frames    \"iframe\" = simple HTML page with iframes    \"table\" = simple HTML page with tables"
        }]
    },
    "_IE_Introduction": {
        "documentation": "Display introductory information about IE.au3 in a new browser window",
        "label": "_IE_Introduction ( [$sModule = \"basic\"] )",
        "params": [{
            "label": "$sModule",
            "documentation": "**[optional]** specifies which module to run    \"basic\" = (Default) basic introduction"
        }]
    },
    "_IE_VersionInfo": {
        "documentation": "Returns an array of information about the IE.au3 version",
        "label": "_IE_VersionInfo (  )",
        "params": []
    },
    "_INetExplorerCapable": {
        "documentation": "Converts a string to IE(Internet Explorer) capable line",
        "label": "_INetExplorerCapable ( $sIEString )",
        "params": [{
            "label": "$sIEString",
            "documentation": "String to be converted"
        }]
    },
    "_INetGetSource": {
        "documentation": "Gets the source from an URL without writing a temp file",
        "label": "_INetGetSource ( $sURL [, $bString = True] )",
        "params": [{
            "label": "$sURL",
            "documentation": "(The URL of the site.) eg 'http://www.autoitscript.com'"
        }, {
            "label": "$bString",
            "documentation": "**[optional]** If True the data is returned in string format, otherwise binary format."
        }]
    },
    "_INetMail": {
        "documentation": "Opens default user's mail client with given address, subject, and body",
        "label": "_INetMail ( $sMailTo, $sMailSubject, $sMailBody )",
        "params": [{
            "label": "$sMailTo",
            "documentation": "Address for the E-Mail"
        }, {
            "label": "$sMailSubject",
            "documentation": "Subject for the E-Mail"
        }, {
            "label": "$sMailBody",
            "documentation": "Body for the E-Mail"
        }]
    },
    "_INetSmtpMail": {
        "documentation": "Sends an email without using an external email program",
        "label": "_INetSmtpMail ( $sSMTPServer, $sFromName, $sFromAddress, $sToAddress [, $sSubject = \"\" [, $aBody = \"\" [, $sEHLO = \"\" [, $sFirst = \"\" [, $bTrace = 0]]]]] )",
        "params": [{
            "label": "$sSMTPServer",
            "documentation": "Smtp server the eMail is to be sent though May be either alpha or a numeric IP address. In order to fight spam, many ISPs require this to be their server.eg \"smtp.ispdomain.com\", \"mail.ispdomain.com\" or \"192.168.1.1\""
        }, {
            "label": "$sFromName",
            "documentation": "The name you wish the message to appear to be sent from.eg \"Bob Smith\""
        }, {
            "label": "$sFromAddress",
            "documentation": "The email address you wish the message to appear to be sent from.eg \"bob.smith@mydomain.com\"."
        }, {
            "label": "$sToAddress",
            "documentation": "The email address the message is to go to.eg \"jane.brown@yourdomain.com\""
        }, {
            "label": "$sSubject",
            "documentation": "**[optional]** The subject of the email."
        }, {
            "label": "$aBody",
            "documentation": "**[optional]** The body of the email as a single dimensional array of strings. Each value in the array will be terminated with a @CRLF in the email."
        }, {
            "label": "$sEHLO",
            "documentation": "**[optional]** identifier for the smtp server connection (by default @ComputerName). If Smtp server require a \"EHLO\" string just set the string to \"EHLO \" & @ComputerName."
        }, {
            "label": "$sFirst",
            "documentation": "**[optional]** string sent before helo for the smtp server connection (by default {SPACE}). To not send any character this parameter must equal -1, some SMTP server required it."
        }, {
            "label": "$bTrace",
            "documentation": "**[optional]** trace the dialog in a splash window"
        }]
    },
    "_IsPressed": {
        "documentation": "Check if key has been pressed",
        "label": "_IsPressed ( $sHexKey [, $vDLL = 'user32.dll'] )",
        "params": [{
            "label": "$sHexKey",
            "documentation": "Key to check for"
        }, {
            "label": "$vDLL",
            "documentation": "**[optional]** Handle to DLL or default to user32.dll"
        }]
    },
    "_MathCheckDiv": {
        "documentation": "Checks if first number is divisible by the second number",
        "label": "_MathCheckDiv ( $iNum1 [, $iNum2 = 2] )",
        "params": [{
            "label": "$iNum1",
            "documentation": "Integer value to check"
        }, {
            "label": "$iNum2",
            "documentation": "**[optional]** Integer value to divide by (default = 2)"
        }]
    },
    "_Max": {
        "documentation": "Evaluates which of the two numbers is higher",
        "label": "_Max ( $iNum1, $iNum2 )",
        "params": [{
            "label": "$iNum1",
            "documentation": "First number."
        }, {
            "label": "$iNum2",
            "documentation": "Second number."
        }]
    },
    "_MemGlobalAlloc": {
        "documentation": "Allocates the specified number of bytes from the heap",
        "label": "_MemGlobalAlloc ( $iBytes [, $iFlags = 0] )",
        "params": [{
            "label": "$iBytes",
            "documentation": "The number of bytes to allocate. If this parameter is zero and the $iFlags parameter specifies $GMEM_MOVEABLE, the function returns a handle to a memory object that is marked as discarded."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The memory allocation attributes"
        }]
    },
    "_MemGlobalFree": {
        "documentation": "Frees the specified global memory object and invalidates its handle",
        "label": "_MemGlobalFree ( $hMemory )",
        "params": [{
            "label": "$hMemory",
            "documentation": "Handle to the global memory object"
        }]
    },
    "_MemGlobalLock": {
        "documentation": "Locks a global memory object and returns a pointer to the first byte of the object's memory block",
        "label": "_MemGlobalLock ( $hMemory )",
        "params": [{
            "label": "$hMemory",
            "documentation": "Handle to the global memory object"
        }]
    },
    "_MemGlobalSize": {
        "documentation": "Retrieves the current size of the specified global memory object",
        "label": "_MemGlobalSize ( $hMemory )",
        "params": [{
            "label": "$hMemory",
            "documentation": "Handle to the global memory object"
        }]
    },
    "_MemGlobalUnlock": {
        "documentation": "Decrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE",
        "label": "_MemGlobalUnlock ( $hMemory )",
        "params": [{
            "label": "$hMemory",
            "documentation": "Handle to the global memory object"
        }]
    },
    "_MemMoveMemory": {
        "documentation": "Moves memory either forward or backward, aligned or unaligned",
        "label": "_MemMoveMemory ( $pSource, $pDest, $iLength )",
        "params": [{
            "label": "$pSource",
            "documentation": "Pointer to the source of the move"
        }, {
            "label": "$pDest",
            "documentation": "Pointer to the destination of the move"
        }, {
            "label": "$iLength",
            "documentation": "Specifies the number of bytes to be copied"
        }]
    },
    "_MemVirtualAlloc": {
        "documentation": "Reserves or commits a region of pages in the virtual address space of the calling process",
        "label": "_MemVirtualAlloc ( $pAddress, $iSize, $iAllocation, $iProtect )",
        "params": [{
            "label": "$pAddress",
            "documentation": "Specifies the desired starting address of the region to allocate"
        }, {
            "label": "$iSize",
            "documentation": "Specifies the size, in bytes, of th region"
        }, {
            "label": "$iAllocation",
            "documentation": "Specifies the type of allocation"
        }, {
            "label": "$iProtect",
            "documentation": "Type of access protection"
        }]
    },
    "_MemVirtualAllocEx": {
        "documentation": "Reserves a region of memory within the virtual address space of a specified process",
        "label": "_MemVirtualAllocEx ( $hProcess, $pAddress, $iSize, $iAllocation, $iProtect )",
        "params": [{
            "label": "$hProcess",
            "documentation": "Handle to process"
        }, {
            "label": "$pAddress",
            "documentation": "Specifies the desired starting address of the region to allocate"
        }, {
            "label": "$iSize",
            "documentation": "Specifies the size, in bytes, of th region"
        }, {
            "label": "$iAllocation",
            "documentation": "Specifies the type of allocation:    $MEM_COMMIT - Allocates physical storage in memory or in the paging file on disk for the specified region of pages.    $MEM_RESERVE - Reserves a range of the process's virtual address space without allocating any physical storage.    $MEM_TOP_DOWN - Allocates memory at the highest possible address"
        }, {
            "label": "$iProtect",
            "documentation": "Type of access protection:    $PAGE_READONLY - Enables read access to the committed region of pages    $PAGE_READWRITE - Enables read and write access to the committed region    $PAGE_EXECUTE - Enables execute access to the committed region    $PAGE_EXECUTE_READ - Enables execute and read access to the committed region    $PAGE_EXECUTE_READWRITE - Enables execute, read, and write access to the committed region of pages    $PAGE_GUARD - Pages in the region become guard pages    $PAGE_NOACCESS - Disables all access to the committed region of pages    $PAGE_NOCACHE - Allows no caching of the committed regions of pages"
        }]
    },
    "_MemVirtualFree": {
        "documentation": "Releases a region of pages within the virtual address space of a process",
        "label": "_MemVirtualFree ( $pAddress, $iSize, $iFreeType )",
        "params": [{
            "label": "$pAddress",
            "documentation": "Points to the base address of the region of pages to be freed"
        }, {
            "label": "$iSize",
            "documentation": "Specifies the size, in bytes, of the region to be freed"
        }, {
            "label": "$iFreeType",
            "documentation": "Specifies the type of free operation:    $MEM_DECOMMIT - Decommits the specified region of committed pages    $MEM_RELEASE - Releases the specified region of reserved pages"
        }]
    },
    "_MemVirtualFreeEx": {
        "documentation": "Releases a region of pages within the virtual address space of a process",
        "label": "_MemVirtualFreeEx ( $hProcess, $pAddress, $iSize, $iFreeType )",
        "params": [{
            "label": "$hProcess",
            "documentation": "Handle to a process"
        }, {
            "label": "$pAddress",
            "documentation": "A pointer to the starting address of the region of memory to be freed"
        }, {
            "label": "$iSize",
            "documentation": "The size of the region of memory to free, in bytes"
        }, {
            "label": "$iFreeType",
            "documentation": "Specifies the type of free operation:    $MEM_DECOMMIT - Decommits the specified region of committed pages    $MEM_RELEASE - Releases the specified region of reserved pages"
        }]
    },
    "_Min": {
        "documentation": "Evaluates which of the two numbers is lower",
        "label": "_Min ( $iNum1, $iNum2 )",
        "params": [{
            "label": "$iNum1",
            "documentation": "First number."
        }, {
            "label": "$iNum2",
            "documentation": "Second number."
        }]
    },
    "_MouseTrap": {
        "documentation": "Confine the Mouse Cursor to specified coords",
        "label": "_MouseTrap ( [$iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0]]]] )",
        "params": [{
            "label": "$iLeft",
            "documentation": "**[optional]** Left coord"
        }, {
            "label": "$iTop",
            "documentation": "**[optional]** Top coord"
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** Right coord"
        }, {
            "label": "$iBottom",
            "documentation": "**[optional]** Bottom coord"
        }]
    },
    "_NamedPipes_CallNamedPipe": {
        "documentation": "Performs a read/write operation on a named pipe",
        "label": "_NamedPipes_CallNamedPipe ( $sPipeName, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize, ByRef $iRead [, $iTimeOut = 0] )",
        "params": [{
            "label": "$sPipeName",
            "documentation": "Pipe name"
        }, {
            "label": "$pInpBuf",
            "documentation": "Pointer to the buffer containing the data written to the pipe"
        }, {
            "label": "$iInpSize",
            "documentation": "Size of the write buffer, in bytes"
        }, {
            "label": "$pOutBuf",
            "documentation": "Pointer to the buffer that receives the data read from the pipe"
        }, {
            "label": "$iOutSize",
            "documentation": "Size of the read buffer, in bytes"
        }, {
            "label": "$iRead",
            "documentation": "On return, contains the number of bytes read from the pipe"
        }, {
            "label": "$iTimeOut",
            "documentation": "**[optional]** Number of milliseconds to wait for the named pipe to be available.In addition to numeric values, the following special values can be specified:    -1 - Wait indefinitely     0 - Uses the default time-out specified in the call to the CreateNamedPipe     1 - Do not wait. If the pipe is not available, return an error"
        }]
    },
    "_NamedPipes_ConnectNamedPipe": {
        "documentation": "Enables a named pipe server process to wait for a client process to connect",
        "label": "_NamedPipes_ConnectNamedPipe ( $hNamedPipe [, $tOverlapped = 0] )",
        "params": [{
            "label": "$hNamedPipe",
            "documentation": "Handle to the server end of a named pipe instance"
        }, {
            "label": "$tOverlapped",
            "documentation": "**[optional]** a $tagOVERLAPPED structure.    If $hNamedPipe was opened with $PIPE_FLAG_OVERLAPPED, $pOverlapped must not be 0.    If $hNamedPipe was created with $PIPE_FLAG_OVERLAPPED and $pOverlapped is not 0, the $tagOVERLAPPED structure should contain a handle to a manual reset event object.    If $hNamedPipe was not opened with $PIPE_FLAG_OVERLAPPED, the function does not return until a client is connected or an error occurs.Successful synchronous operations result in the function returning a nonzero value if a client connects after the function is called."
        }]
    },
    "_NamedPipes_CreateNamedPipe": {
        "documentation": "Creates an instance of a named pipe",
        "label": "_NamedPipes_CreateNamedPipe ( $sName [, $iAccess = 2 [, $iFlags = 2 [, $iACL = 0 [, $iType = 1 [, $iRead = 1 [, $iWait = 0 [, $iMaxInst = 25 [, $iOutBufSize = 4096 [, $iInpBufSize = 4096 [, $iDefaultTimeout = 5000 [, $tSecurity = 0]]]]]]]]]]] )",
        "params": [{
            "label": "$sName",
            "documentation": "Pipe name with the following format: \\\\.\\pipe\\pipename.The pipename part of the name can include any character other than a backslash, including numbers and special characters.The pipe name string can be up to 256 characters long.Pipe names are not case sensitive."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The pipe access mode. Must be one of the following:    0 - The flow of data in the pipe goes from client to server only (inbound)    1 - The flow of data in the pipe goes from server to client only (outbound)    2 - The pipe is bi-directional (duplex)"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The pipe flags. Can be any combination of the following:    1 - If you attempt to create multiple instances of a pipe with this flag, creation of the first instance succeeds, but creation of the next instance fails.    2 - Overlapped mode is enabled. If this mode is enabled functions performing read, write, and connect operations that may take a significant time to be completed can return immediately.    4 - Write-through mode is enabled. This mode affects only write operations on byte type pipes and only when the client and server are on different computers."
        }, {
            "label": "$iACL",
            "documentation": "**[optional]** Security ACL flags. Can be any combination of the following:    1 - The caller will have write access to the named pipe's discretionary ACL    2 - The caller will have write access to the named pipe's owner    4 - The caller will have write access to the named pipe's security ACL"
        }, {
            "label": "$iType",
            "documentation": "**[optional]** Pipe type mode. Must be one of the following:    0 - Data is written to the pipe as a stream of bytes    1 - Data is written to the pipe as a stream of messages"
        }, {
            "label": "$iRead",
            "documentation": "**[optional]** Pipe read mode. Must be one of the following:    0 - Data is read from the pipe as a stream of bytes    1 - Data is read from the pipe as a stream of messages"
        }, {
            "label": "$iWait",
            "documentation": "**[optional]** Pipe wait mode. Must be one of the following:    0 - Blocking mode is enabled. When the pipe handle is specified in ReadFile, WriteFile, or ConnectNamedPipe, the operation is not completed until there is data to read, all data is written, or a client is connected.    1 - Nonblocking mode is enabled. ReadFile, WriteFile, and ConnectNamedPipe always return immediately."
        }, {
            "label": "$iMaxInst",
            "documentation": "**[optional]** The maximum number of instances that can be created for this pipe"
        }, {
            "label": "$iOutBufSize",
            "documentation": "**[optional]** The number of bytes to reserve for the output buffer"
        }, {
            "label": "$iInpBufSize",
            "documentation": "**[optional]** The number of bytes to reserve for the input buffer"
        }, {
            "label": "$iDefaultTimeOut",
            "documentation": "**[optional]** The default time out value, in milliseconds"
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** a $tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new named pipe and determines whether child processes can inherit the returned handle.If $tSecurity is 0, the named pipe gets a default security descriptor and the handle cannot be inherited.The ACLs in the default security descriptor for a named pipe grant full control to the LocalSystem account administrators, and the creator owner.They also grant read access to members of the Everyone group and the anonymous account."
        }]
    },
    "_NamedPipes_CreatePipe": {
        "documentation": "Creates an anonymous pipe",
        "label": "_NamedPipes_CreatePipe ( ByRef $hReadPipe, ByRef $hWritePipe [, $tSecurity = 0 [, $iSize = 0]] )",
        "params": [{
            "label": "$hReadPipe",
            "documentation": "Variable that receives the read handle for the pipe"
        }, {
            "label": "$hWritePipe",
            "documentation": "Variable that receives the write handle for the pipe"
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that determines if the returned handle can be inherited by child processes.If 0, the handles cannot be inherited."
        }, {
            "label": "$iSize",
            "documentation": "**[optional]** The size of the buffer for the pipe, in bytes.If 0, the system uses the default buffer size."
        }]
    },
    "_NamedPipes_DisconnectNamedPipe": {
        "documentation": "Disconnects the server end of a named pipe instance from a client process",
        "label": "_NamedPipes_DisconnectNamedPipe ( $hNamedPipe )",
        "params": [{
            "label": "$hNamedPipe",
            "documentation": "Handle to the server end of a named pipe instance."
        }]
    },
    "_NamedPipes_GetNamedPipeHandleState": {
        "documentation": "Retrieves information about a specified named pipe",
        "label": "_NamedPipes_GetNamedPipeHandleState ( $hNamedPipe )",
        "params": [{
            "label": "$hNamedPipe",
            "documentation": "Handle to the server end of a named pipe instance"
        }]
    },
    "_NamedPipes_GetNamedPipeInfo": {
        "documentation": "Retrieves information about the specified named pipe",
        "label": "_NamedPipes_GetNamedPipeInfo ( $hNamedPipe )",
        "params": [{
            "label": "$hNamedPipe",
            "documentation": "Handle to the named pipe instance. The handle must have GENERIC_READ access to the named pipe"
        }]
    },
    "_NamedPipes_PeekNamedPipe": {
        "documentation": "Copies data from a pipe into a buffer without removing it from the pipe",
        "label": "_NamedPipes_PeekNamedPipe ( $hNamedPipe )",
        "params": [{
            "label": "$hNamedPipe",
            "documentation": "Handle to the pipe"
        }]
    },
    "_NamedPipes_SetNamedPipeHandleState": {
        "documentation": "Sets the read mode and the blocking mode of the specified named pipe",
        "label": "_NamedPipes_SetNamedPipeHandleState ( $hNamedPipe, $iRead, $iWait [, $iBytes = 0 [, $iTimeOut = 0]] )",
        "params": [{
            "label": "$hNamedPipe",
            "documentation": "Handle to the named pipe instance"
        }, {
            "label": "$iRead",
            "documentation": "Pipe read mode. Must be one of the following:    0 - Data is read from the pipe as a stream of bytes    1 - Data is read from the pipe as a stream of messages"
        }, {
            "label": "$iWait",
            "documentation": "Pipe wait mode. Must be one of the following:    0 - Blocking mode is enabled    1 - Nonblocking mode is enabled"
        }, {
            "label": "$iBytes",
            "documentation": "**[optional]** Maximum number of bytes collected on the client computer before transmission to the server"
        }, {
            "label": "$iTimeout",
            "documentation": "**[optional]** Maximum time, in milliseconds, that can pass before a remote named pipe transfers information"
        }]
    },
    "_NamedPipes_TransactNamedPipe": {
        "documentation": "Reads and writes to a named pipe in one network operation",
        "label": "_NamedPipes_TransactNamedPipe ( $hNamedPipe, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize [, $tOverlapped = 0] )",
        "params": [{
            "label": "$hNamedPipe",
            "documentation": "The handle to the named pipe"
        }, {
            "label": "$pInpBuf",
            "documentation": "Pointer to the buffer containing the data to be written to the pipe"
        }, {
            "label": "$iInpSize",
            "documentation": "Size of the write buffer, in bytes"
        }, {
            "label": "$pOutBuf",
            "documentation": "Pointer to the buffer that receives the data read from the pipe"
        }, {
            "label": "$iOutSize",
            "documentation": "Size of the read buffer, in bytes"
        }, {
            "label": "$tOverlapped",
            "documentation": "**[optional]** a $tagOVERLAPPED structure.    This structure is required if $hNamedPipe was opened with $PIPE_FLAG_OVERLAPPED.    If $hNamedPipe was opened with $PIPE_FLAG_OVERLAPPED, $tOverlapped must not be 0.    If $hNamedPipe was opened with $PIPE_FLAG_OVERLAPPED and $tOverlapped is not 0, TransactNamedPipe is executed as an overlapped operation.    The $tagOVERLAPPED structure should contain a manual reset event object.    If the operation cannot be completed immediately, TransactNamedPipe returns False and GetLastError will return ERROR_IO_PENDING."
        }]
    },
    "_NamedPipes_WaitNamedPipe": {
        "documentation": "Waits for an instance of a named pipe to become available",
        "label": "_NamedPipes_WaitNamedPipe ( $sPipeName [, $iTimeOut = 0] )",
        "params": [{
            "label": "$sPipeName",
            "documentation": "The name of the named pipe. The string must include the name of the computer on which the server process is executing.A period may be used for the servername if the pipe is local."
        }, {
            "label": "$iTimeout",
            "documentation": "**[optional]** The number of milliseconds that the function will wait for the named pipe to be available.You can also use one of the following values:    -1 - The function does not return until an instance of the named pipe is available     0 - The time-out interval is the default value specified by the server process"
        }]
    },
    "_Net_Share_ConnectionEnum": {
        "documentation": "Lists all connections made to a shared resource",
        "label": "_Net_Share_ConnectionEnum ( $sServer, $sQualifier )",
        "params": [{
            "label": "$sServer",
            "documentation": "String that specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank the local computer is used."
        }, {
            "label": "$sQualifier",
            "documentation": "Specifies a share name or computer name of interest.If it is a share name, then all of the connections made to that share name are listed.If it is a computer name, the function lists all connections made from that computer to the server specified."
        }]
    },
    "_Net_Share_FileClose": {
        "documentation": "Forces a resource to close",
        "label": "_Net_Share_FileClose ( $sServer, $iFileID )",
        "params": [{
            "label": "$sServer",
            "documentation": "Specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank, the local computer is used."
        }, {
            "label": "$iFileID",
            "documentation": "Specifies the file identifier of the opened resource instance to close"
        }]
    },
    "_Net_Share_FileEnum": {
        "documentation": "Returns information about open files on a server",
        "label": "_Net_Share_FileEnum ( [$sServer = \"\" [, $sBaseName = \"\" [, $sUserName = \"\"]]] )",
        "params": [{
            "label": "$sServer",
            "documentation": "**[optional]** String that contains the name of the server on which the function is to execute.A blank specifies the local computer."
        }, {
            "label": "$sBaseName",
            "documentation": "**[optional]** String containing a qualifier for the returned information.If blank all open resources are enumerated.If not blank, the function enumerates only resources that have $sBaseName as a prefix."
        }, {
            "label": "$sUserName",
            "documentation": "**[optional]** String that specifies the name of the user.If not blank $sUserName serves as a qualifier to the enumeration."
        }]
    },
    "_Net_Share_FileGetInfo": {
        "documentation": "Retrieves information about a particular opening of a server resource",
        "label": "_Net_Share_FileGetInfo ( $sServer, $iFileID )",
        "params": [{
            "label": "$sServer",
            "documentation": "Specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank, the local computer is used."
        }, {
            "label": "$iFileID",
            "documentation": "File identifier of the resource for which to return information.The value of this parameter must have been returned in a previous enumeration call."
        }]
    },
    "_Net_Share_PermStr": {
        "documentation": "Returns the string representation of a resource's permissions",
        "label": "_Net_Share_PermStr ( $iPerm )",
        "params": [{
            "label": "$iPerm",
            "documentation": "The resource's permissions:    1 - Permission to read data from a resource and to execute    2 - Permission to write data to the resource    4 - Permission to create an instance of the resource    8 - Permission to execute the resource    16 - Permission to delete the resource    32 - Permission to modify the resource's attributes    64 - Permission to modify the permissions assigned to a resource"
        }]
    },
    "_Net_Share_ResourceStr": {
        "documentation": "Returns the string representation of a resource",
        "label": "_Net_Share_ResourceStr ( $iResource )",
        "params": [{
            "label": "$iResource",
            "documentation": "Resource type. Can be a combination of:    $STYPE_DISKTREE - Print queue    $STYPE_PRINTQ - Disk drive    $STYPE_DEVICE - Communication device    $STYPE_IPC - IPC    $STYPE_SPECIAL - Special share reserved for IPC$ or remote administration of the server    $STYPE_TEMPORARY - A temporary share"
        }]
    },
    "_Net_Share_SessionDel": {
        "documentation": "Ends a network session between a server and a workstation",
        "label": "_Net_Share_SessionDel ( [$sServer = \"\" [, $sClientName = \"\" [, $sUserName = \"\"]]] )",
        "params": [{
            "label": "$sServer",
            "documentation": "**[optional]** Specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank, the local computer is used."
        }, {
            "label": "$sClientName",
            "documentation": "**[optional]** Specifies the computer name of the client to disconnect.If blank, then all the sessions of the user identified by the username parameter will be deleted on the server specified by $sServer."
        }, {
            "label": "$sUserName",
            "documentation": "**[optional]** Specifies the name of the user whose session is to be terminated.If this parameter is blank, all user sessions from the client specified by the $sClientName parameter are to be terminated."
        }]
    },
    "_Net_Share_SessionEnum": {
        "documentation": "Provides information about sessions established on a server",
        "label": "_Net_Share_SessionEnum ( [$sServer = \"\" [, $sClientName = \"\" [, $sUserName = \"\"]]] )",
        "params": [{
            "label": "$sServer",
            "documentation": "**[optional]** String that specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank the local computer is used."
        }, {
            "label": "$sClientName",
            "documentation": "**[optional]** Specifies the name of the computer session for which information is to be returned.If this parameter is blank, the function returns information for all computer sessions on the server."
        }, {
            "label": "$sUserName",
            "documentation": "**[optional]** Specifies the name of the user for which information is to be returned.If this parameter is blank, the function returns information for all users."
        }]
    },
    "_Net_Share_SessionGetInfo": {
        "documentation": "Retrieves information about a session established between a server and workstation",
        "label": "_Net_Share_SessionGetInfo ( $sServer, $sClientName, $sUserName )",
        "params": [{
            "label": "$sServer",
            "documentation": "String that specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank the local computer is used."
        }, {
            "label": "$sClientName",
            "documentation": "Specifies the name of the computer session for which information is to be returned.This parameter cannot be blank."
        }, {
            "label": "$sUserName",
            "documentation": "String that specifies the name of the user whose session information is to be returned.This parameter cannot be blank."
        }]
    },
    "_Net_Share_ShareAdd": {
        "documentation": "Shares a server resource",
        "label": "_Net_Share_ShareAdd ( $sServer, $sShare, $iType, $sResourcePath [, $sComment = \"\" [, $iMaxUses = -1]] )",
        "params": [{
            "label": "$sServer",
            "documentation": "Specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank, the local computer is used."
        }, {
            "label": "$sShare",
            "documentation": "Share name of a resource"
        }, {
            "label": "$iType",
            "documentation": "Contains the type of the shared resource. Can be a combination of:    $STYPE_DISKTREE - Disk drive    $STYPE_PRINTQ - Print queue    $STYPE_DEVICE - Communication device    $STYPE_IPC - IPC    $STYPE_SPECIAL - Special share reserved for IPC$ or remote administration of the server    $STYPE_TEMPORARY - A temporary share"
        }, {
            "label": "$sResourcePath",
            "documentation": "Local path for the shared resource. For disks, this is the path being shared.For print queues, this is the name of the print queue being shared."
        }, {
            "label": "$sComment",
            "documentation": "**[optional]** String that contains an comment about the shared resource"
        }, {
            "label": "$iMaxUses",
            "documentation": "**[optional]** The maximum number of concurrent connections that the shared resource can accommodate.The number of connections is unlimited if the value specified is –1."
        }]
    },
    "_Net_Share_ShareCheck": {
        "documentation": "Checks whether or not a server is sharing a device",
        "label": "_Net_Share_ShareCheck ( $sServer, $sShare )",
        "params": [{
            "label": "$sServer",
            "documentation": "Specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank, the local computer is used."
        }, {
            "label": "$sShare",
            "documentation": "Specifies the name of the device to check for shared access"
        }]
    },
    "_Net_Share_ShareDel": {
        "documentation": "Deletes a share name from a server's list of shared resources",
        "label": "_Net_Share_ShareDel ( $sServer, $sShare )",
        "params": [{
            "label": "$sServer",
            "documentation": "Specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank, the local computer is used."
        }, {
            "label": "$sShare",
            "documentation": "Specifies the name of the share to delete"
        }]
    },
    "_Net_Share_ShareEnum": {
        "documentation": "Retrieves information about each shared resource on a server",
        "label": "_Net_Share_ShareEnum ( [$sServer = \"\"] )",
        "params": [{
            "label": "$sServer",
            "documentation": "**[optional]** String that specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank the local computer is used."
        }]
    },
    "_Net_Share_ShareGetInfo": {
        "documentation": "Retrieves information about a particular shared resource on a server",
        "label": "_Net_Share_ShareGetInfo ( $sServer, $sShare )",
        "params": [{
            "label": "$sServer",
            "documentation": "String that specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank the local computer is used."
        }, {
            "label": "$sShare",
            "documentation": "Name of the share for which to return information"
        }]
    },
    "_Net_Share_ShareSetInfo": {
        "documentation": "Shares a server resource",
        "label": "_Net_Share_ShareSetInfo ( $sServer, $sShare, $sComment, $iMaxUses )",
        "params": [{
            "label": "$sServer",
            "documentation": "Specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank, the local computer is used."
        }, {
            "label": "$sShare",
            "documentation": "Specifies the name of the share to set information on"
        }, {
            "label": "$sComment",
            "documentation": "String that contains an optional comment about the shared resource"
        }, {
            "label": "$iMaxUses",
            "documentation": "Indicates the maximum number of connections that the resource can accommodate.The number of connections is unlimited if this value is –1."
        }]
    },
    "_Net_Share_StatisticsGetSvr": {
        "documentation": "Retrieves operating statistics for a server",
        "label": "_Net_Share_StatisticsGetSvr ( [$sServer = \"\"] )",
        "params": [{
            "label": "$sServer",
            "documentation": "**[optional]** Specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank, the local computer is used."
        }]
    },
    "_Net_Share_StatisticsGetWrk": {
        "documentation": "Retrieves operating statistics for a workstation",
        "label": "_Net_Share_StatisticsGetWrk ( [$sWorkStation = \"\"] )",
        "params": [{
            "label": "$sWorkStation",
            "documentation": "**[optional]** Specifies the DNS or NetBIOS name of the remote server on which the function is to execute.If this parameter is blank, the local computer is used."
        }]
    },
    "_Now": {
        "documentation": "Returns the current Date and Time in PC's format",
        "label": "_Now (  )",
        "params": []
    },
    "_NowCalc": {
        "documentation": "Returns the current Date and Time in format YYYY/MM/DD HH:MM:SS for use in date calculations",
        "label": "_NowCalc (  )",
        "params": []
    },
    "_NowCalcDate": {
        "documentation": "Returns the current Date in format YYYY/MM/DD",
        "label": "_NowCalcDate (  )",
        "params": []
    },
    "_NowDate": {
        "documentation": "Returns the current Date in the Pc's format",
        "label": "_NowDate (  )",
        "params": []
    },
    "_NowTime": {
        "documentation": "Returns the current Time in the requested format",
        "label": "_NowTime ( [$sType = 3] )",
        "params": [{
            "label": "$sType",
            "documentation": "**[optional]**    3 = (default) Display a time using the time format specified in your computer's regional settings.    4 - Display a time using the 24-hour format (hh:mm).    5 - Display a time using the 24-hour format (hh:mm:ss)."
        }]
    },
    "_PathFull": {
        "documentation": "Creates a path based on the relative path you provide. The newly created absolute path is returned",
        "label": "_PathFull ( $sRelativePath [, $sBasePath = @WorkingDir] )",
        "params": [{
            "label": "$sRelativePath",
            "documentation": "The relative path to be created"
        }, {
            "label": "$sBasePath",
            "documentation": "**[optional]** The base path to be used. Default = @WorkingDir"
        }]
    },
    "_PathGetRelative": {
        "documentation": "Returns the relative path to a directory",
        "label": "_PathGetRelative ( $sFrom, $sTo )",
        "params": [{
            "label": "$sFrom",
            "documentation": "Path to the source directory"
        }, {
            "label": "$sTo",
            "documentation": "Path to the destination file or directory"
        }]
    },
    "_PathMake": {
        "documentation": "Creates a path from drive, directory, file name and file extension parts",
        "label": "_PathMake ( $sDrive, $sDir, $sFileName, $sExtension )",
        "params": [{
            "label": "$sDrive",
            "documentation": "Drive (Can be UNC). If it's a drive letter, a : is automatically appended"
        }, {
            "label": "$sDir",
            "documentation": "Directory. A trailing and preceding slash are added if not found."
        }, {
            "label": "$sFileName",
            "documentation": "The name of the file"
        }, {
            "label": "$sExtension",
            "documentation": "The file extension. A period is supplied if not found in the extension"
        }]
    },
    "_PathSplit": {
        "documentation": "Splits a path into the drive, directory, file name and file extension parts. An empty string is set if a part is missing",
        "label": "_PathSplit ( $sFilePath, ByRef $sDrive, ByRef $sDir, ByRef  $sFileName, ByRef  $sExtension )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be split (Can contain a UNC server or drive letter)"
        }, {
            "label": "$sDrive",
            "documentation": "String to hold the drive"
        }, {
            "label": "$sDir",
            "documentation": "String to hold the directory"
        }, {
            "label": "$sFileName",
            "documentation": "String to hold the file name"
        }, {
            "label": "$sExtension",
            "documentation": "String to hold the file extension"
        }]
    },
    "_ProcessGetName": {
        "documentation": "Returns a string containing the process name that belongs to a given PID",
        "label": "_ProcessGetName ( $iPID )",
        "params": [{
            "label": "$iPID",
            "documentation": "The PID of a currently running process."
        }]
    },
    "_ProcessGetPriority": {
        "documentation": "Get the priority of an open process",
        "label": "_ProcessGetPriority ( $vProcess )",
        "params": [{
            "label": "$vProcess",
            "documentation": "The name or PID of the process to be examined."
        }]
    },
    "_Radian": {
        "documentation": "Converts degrees to radians",
        "label": "_Radian ( $iDegrees )",
        "params": [{
            "label": "$iDegrees",
            "documentation": "Degrees to be converted into radians."
        }]
    },
    "_ReplaceStringInFile": {
        "documentation": "Replaces substrings in a file",
        "label": "_ReplaceStringInFile ( $sFilePath, $sSearchString, $sReplaceString [, $iCaseSensitive = 0 [, $iOccurance = 1]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Full path of file to replace substrings."
        }, {
            "label": "$sSearchString",
            "documentation": "The string to evaluate."
        }, {
            "label": "$sReplaceString",
            "documentation": "The replacement string."
        }, {
            "label": "$iCaseSensitive",
            "documentation": "**[optional]** Flag to indicate if the operations should be case sensitive.    $STR_NOCASESENSE (0) = not case sensitive, using the user's locale (default)    $STR_CASESENSE (1) = case sensitive    $STR_NOCASESENSEBASIC (2) = not case sensitive, using a basic/faster comparisonConstants are defined in StringConstants.au3"
        }, {
            "label": "$iOccurance",
            "documentation": "**[optional]** 0 - Only the first occurrence is replaced or 1 - all occurrences are replaced (default)"
        }]
    },
    "_RunDos": {
        "documentation": "Executes a DOS command in a hidden command window",
        "label": "_RunDos ( $sCommand )",
        "params": [{
            "label": "$sCommand",
            "documentation": "Command to execute"
        }]
    },
    "_ScreenCapture_Capture": {
        "documentation": "Captures a region of the screen",
        "label": "_ScreenCapture_Capture ( [$sFileName = \"\" [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $bCursor = True]]]]]] )",
        "params": [{
            "label": "$sFileName",
            "documentation": "**[optional]** Full path and extension of the image file"
        }, {
            "label": "$iLeft",
            "documentation": "**[optional]** X coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iTop",
            "documentation": "**[optional]** Y coordinate of the upper left corner of the rectangle"
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** X coordinate of the lower right corner of the rectangle. If this is -1, the current screen width will be used."
        }, {
            "label": "$iBottom",
            "documentation": "**[optional]** Y coordinate of the lower right corner of the rectangle. If this is -1, the current screen height will be used."
        }, {
            "label": "$bCursor",
            "documentation": "**[optional]** If True the cursor will be captured with the image"
        }]
    },
    "_ScreenCapture_CaptureWnd": {
        "documentation": "Captures a screen shot of a specified window or controlID",
        "label": "_ScreenCapture_CaptureWnd ( $sFileName, $hWnd [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $bCursor = True]]]]] )",
        "params": [{
            "label": "$sFileName",
            "documentation": "Full path and extension of the image file"
        }, {
            "label": "$hWnd",
            "documentation": "Handle to the window to be captured"
        }, {
            "label": "$iLeft",
            "documentation": "**[optional]** X coordinate of the upper left corner of the client rectangle"
        }, {
            "label": "$iTop",
            "documentation": "**[optional]** Y coordinate of the upper left corner of the client rectangle"
        }, {
            "label": "$iRight",
            "documentation": "**[optional]** X coordinate of the lower right corner of the rectangle"
        }, {
            "label": "$iBottom",
            "documentation": "**[optional]** Y coordinate of the lower right corner of the rectangle"
        }, {
            "label": "$bCursor",
            "documentation": "**[optional]** If True the cursor will be captured with the image"
        }]
    },
    "_ScreenCapture_SaveImage": {
        "documentation": "Saves an image to file",
        "label": "_ScreenCapture_SaveImage ( $sFileName, $hBitmap [, $bFreeBmp = True] )",
        "params": [{
            "label": "$sFileName",
            "documentation": "Full path and extension of the bitmap file to be saved"
        }, {
            "label": "$hBitmap",
            "documentation": "HBITMAP handle"
        }, {
            "label": "$bFreeBmp",
            "documentation": "**[optional]** If True, $hBitmap will be freed on a successful save (default)"
        }]
    },
    "_ScreenCapture_SetBMPFormat": {
        "documentation": "Sets the bit format that will be used for BMP screen captures",
        "label": "_ScreenCapture_SetBMPFormat ( $iFormat )",
        "params": [{
            "label": "$iFormat",
            "documentation": "Image bits per pixel (bpp) setting:    0 = 16 bpp; 5 bits for each RGB component    1 = 16 bpp; 5 bits for red, 6 bits for green and 5 bits blue    2 = 24 bpp; 8 bits for each RGB component    3 = 32 bpp; 8 bits for each RGB component. No alpha component.    4 = 32 bpp; 8 bits for each RGB and alpha component"
        }]
    },
    "_ScreenCapture_SetJPGQuality": {
        "documentation": "Sets the quality level that will be used for JPEG screen captures",
        "label": "_ScreenCapture_SetJPGQuality ( $iQuality )",
        "params": [{
            "label": "$iQuality",
            "documentation": "The quality level of the image. Must be in the range of 0 to 100."
        }]
    },
    "_ScreenCapture_SetTIFColorDepth": {
        "documentation": "Sets the color depth used for TIFF screen captures",
        "label": "_ScreenCapture_SetTIFColorDepth ( $iDepth )",
        "params": [{
            "label": "$iDepth",
            "documentation": "Image color depth:    0 - Default encoder color depth    24 - 24 bit    32 - 32 bit"
        }]
    },
    "_ScreenCapture_SetTIFCompression": {
        "documentation": "Sets the compression used for TIFF screen captures",
        "label": "_ScreenCapture_SetTIFCompression ( $iCompress )",
        "params": [{
            "label": "$iCompress",
            "documentation": "Image compression type:    0 - Default encoder compression    1 - No compression    2 - LZW compression"
        }]
    },
    "_Security__AdjustTokenPrivileges": {
        "documentation": "Enables or disables privileges in the specified access token",
        "label": "_Security__AdjustTokenPrivileges ( $hToken, $bDisableAll, $tNewState, $iBufferLen [, $tPrevState = 0 [, $pRequired = 0]] )",
        "params": [{
            "label": "$hToken",
            "documentation": "Handle to the access token that contains privileges to be modified"
        }, {
            "label": "$bDisableAll",
            "documentation": "If True, the function disables all privileges and ignores the NewState parameter.If False, the function modifies privileges based on the information pointed to by the $pNewState parameter."
        }, {
            "label": "$tNewState",
            "documentation": "A $tagTOKEN_PRIVILEGES structure or a pointer to it that contains the privilege and it's attributes"
        }, {
            "label": "$iBufferLen",
            "documentation": "Size, in bytes, of the buffer pointed to by $pNewState"
        }, {
            "label": "$tPrevState",
            "documentation": "**[optional]** A $tagTOKEN_PRIVILEGES structure or a pointer to it that specifies the previous state of the privilege that the function modified. This can be 0."
        }, {
            "label": "$pRequired",
            "documentation": "**[optional]** Pointer to a variable that receives the required size, in bytes, of the buffer pointed to by $tPrevState.This parameter can be 0 if $tPrevState is 0."
        }]
    },
    "_Security__CreateProcessWithToken": {
        "documentation": "Creates a new process and its primary thread running in the security context of the specified token",
        "label": "_Security__CreateProcessWithToken ( $hToken, $iLogonFlags, $sCommandLine, $iCreationFlags, $sCurDir, $tSTARTUPINFO, $tPROCESS_INFORMATION )",
        "params": [{
            "label": "$hToken",
            "documentation": "A handle to the primary token that represents a user"
        }, {
            "label": "$iLogonFlags",
            "documentation": "The logon option"
        }, {
            "label": "$sCommandLine",
            "documentation": "The command line to be executed"
        }, {
            "label": "$iCreationFlags",
            "documentation": "The flags that control how the process is created"
        }, {
            "label": "$sCurDir",
            "documentation": "The full path to the current directory for the process"
        }, {
            "label": "$tSTARTUPINFO",
            "documentation": "A (pointer to a) STARTUPINFO structure"
        }, {
            "label": "$tPROCESS_INFORMATION",
            "documentation": "A (pointer to a) PROCESS_INFORMATION structure that receives identification information for the new process"
        }]
    },
    "_Security__DuplicateTokenEx": {
        "documentation": "Creates a new access token that duplicates an existing token",
        "label": "_Security__DuplicateTokenEx ( $hExistingToken, $iDesiredAccess, $iImpersonationLevel, $iTokenType )",
        "params": [{
            "label": "$hExistingToken",
            "documentation": "A handle to an access token opened with TOKEN_DUPLICATE access"
        }, {
            "label": "$iDesiredAccess",
            "documentation": "The requested access rights for the new token"
        }, {
            "label": "$iImpersonationLevel",
            "documentation": "The impersonation level of the new token"
        }, {
            "label": "$iTokenType",
            "documentation": "The type of new token"
        }]
    },
    "_Security__GetAccountSid": {
        "documentation": "Retrieves the security identifier (SID) for an account",
        "label": "_Security__GetAccountSid ( $sAccount [, $sSystem = \"\"] )",
        "params": [{
            "label": "$sAccount",
            "documentation": "Specifies the account name.Use a fully qualified string in the domain_name\\user_name format to ensure that the function finds the account in the desired domain."
        }, {
            "label": "$sSystem",
            "documentation": "**[optional]** Name of the system. This string can be the name of a remote computer.If this string is blank, the account name translation begins on the local system.If the name cannot be resolved on the local system, this function will try to resolve the name using domain controllers trusted by the local system."
        }]
    },
    "_Security__GetLengthSid": {
        "documentation": "Returns the length, in bytes, of a valid SID",
        "label": "_Security__GetLengthSid ( $pSID )",
        "params": [{
            "label": "$pSID",
            "documentation": "Pointer to a SID"
        }]
    },
    "_Security__GetTokenInformation": {
        "documentation": "Retrieves a specified type of information about an access token",
        "label": "_Security__GetTokenInformation ( $hToken, $iClass )",
        "params": [{
            "label": "$hToken",
            "documentation": "A handle to an access token from which information is retrieved.If $iClass specifies $sTokenSource, the handle must have $TOKEN_QUERY_SOURCE access.For all other $iClass values, the handle must have $TOKEN_QUERY access."
        }, {
            "label": "$iClass",
            "documentation": "Specifies a value to identify the type of information the function retrieves"
        }]
    },
    "_Security__ImpersonateSelf": {
        "documentation": "Obtains an access token that impersonates the calling process security context",
        "label": "_Security__ImpersonateSelf ( [$iLevel = $SECURITYIMPERSONATION] )",
        "params": [{
            "label": "$iLevel",
            "documentation": "**[optional]** Impersonation level of the new token:    $SECURITYANONYMOUS. The server process cannot obtain identification information about the client, and it cannot impersonate the client.    $SECURITYIDENTIFICATION. The server process can obtain information about the client, such as security identifiers and privileges, but it cannot impersonate the client.    $SECURITYIMPERSONATION. The server process can impersonate the clients security context on its local system. The server cannot impersonate the client on remote systems.    $SECURITYDELEGATION. The server process can impersonate the client's security context on remote systems."
        }]
    },
    "_Security__IsValidSid": {
        "documentation": "Validates a SID",
        "label": "_Security__IsValidSid ( $pSID )",
        "params": [{
            "label": "$pSID",
            "documentation": "Pointer to a SID"
        }]
    },
    "_Security__LookupAccountName": {
        "documentation": "Retrieves a security identifier (SID) for the account and the name of the domain",
        "label": "_Security__LookupAccountName ( $sAccount [, $sSystem = \"\"] )",
        "params": [{
            "label": "$sAccount",
            "documentation": "Specifies the account name.Use a fully qualified string in the domain_name\\user_name format to ensure that the function finds the account in the desired domain."
        }, {
            "label": "$sSystem",
            "documentation": "**[optional]** Name of the system.This string can be the name of a remote computer.If this string is blank, the account name translation begins on the local system.If the name cannot be resolved on the local system, this function will try to resolve the name using domain controllers trusted by the local system."
        }]
    },
    "_Security__LookupAccountSid": {
        "documentation": "Retrieves the name of the account for a SID",
        "label": "_Security__LookupAccountSid ( $vSID [, $sSystem = \"\"] )",
        "params": [{
            "label": "$vSID",
            "documentation": "Either a binary SID or a string SID"
        }, {
            "label": "$sSystem",
            "documentation": "**[optional]** The name of a remote computer. By default the local system."
        }]
    },
    "_Security__LookupPrivilegeValue": {
        "documentation": "Retrieves the locally unique identifier (LUID) for a privilege value in form of 64bit integer",
        "label": "_Security__LookupPrivilegeValue ( $sSystem, $sName )",
        "params": [{
            "label": "$sSystem",
            "documentation": "Specifies the name of the system on which the privilege name is retrieved.If blank, the function attempts to find the privilege name on the local system."
        }, {
            "label": "$sName",
            "documentation": "Specifies the name of the privilege."
        }]
    },
    "_Security__OpenProcessToken": {
        "documentation": "Returns the access token associated with a process",
        "label": "_Security__OpenProcessToken ( $hProcess, $iAccess )",
        "params": [{
            "label": "$hProcess",
            "documentation": "A handle to the process whose access token is opened.The process must have been given the $PROCESS_QUERY_INFORMATION access permission."
        }, {
            "label": "$iAccess",
            "documentation": "Specifies an access mask that specifies the requested types of access to the access token."
        }]
    },
    "_Security__OpenThreadToken": {
        "documentation": "Opens the access token associated with a thread",
        "label": "_Security__OpenThreadToken ( $iAccess [, $hThread = 0 [, $bOpenAsSelf = False]] )",
        "params": [{
            "label": "$iAccess",
            "documentation": "Access mask that specifies the requested types of access to the access token.These requested access types are reconciled against the token's discretionary access control list (DACL) to determine which accesses are granted or denied."
        }, {
            "label": "$hThread",
            "documentation": "**[optional]** Handle to the thread whose access token is opened"
        }, {
            "label": "$bOpenAsSelf",
            "documentation": "**[optional]** Indicates whether the access check is to be made against the security context of the thread calling the OpenThreadToken function or against the security context of the process for the calling thread.If this parameter is False, the access check is performed using the security context for the calling thread.If the thread is impersonating a client, this security context can be that of a client process.If this parameter is True, the access check is made using the security context of the process for the calling thread."
        }]
    },
    "_Security__OpenThreadTokenEx": {
        "documentation": "Opens the access token associated with a thread, impersonating the client's security context if required",
        "label": "_Security__OpenThreadTokenEx ( $iAccess [, $hThread = 0 [, $bOpenAsSelf = False]] )",
        "params": [{
            "label": "$iAccess",
            "documentation": "Access mask that specifies the requested types of access to the access token.These requested access types are reconciled against the token's discretionary access control list (DACL) to determine which accesses are granted or denied."
        }, {
            "label": "$hThread",
            "documentation": "**[optional]** Handle to the thread whose access token is opened"
        }, {
            "label": "$bOpenAsSelf",
            "documentation": "**[optional]** Indicates whether the access check is to be made against the security context of the thread calling the OpenThreadToken function or against the security context of the process for the calling thread.If this parameter is False, the access check is performed using the security context for the calling thread.If the thread is impersonating a client, this security context can be that of a client process.If this parameter is True, the access check is made using the security context of the process for the calling thread."
        }]
    },
    "_Security__SetPrivilege": {
        "documentation": "Enables or disables a local token privilege",
        "label": "_Security__SetPrivilege ( $hToken, $sPrivilege, $bEnable )",
        "params": [{
            "label": "$hToken",
            "documentation": "Handle to a token"
        }, {
            "label": "$sPrivilege",
            "documentation": "Privilege name"
        }, {
            "label": "$bEnable",
            "documentation": "Privilege setting:    True - Enable privilege    False - Disable privilege"
        }]
    },
    "_Security__SetTokenInformation": {
        "documentation": "Sets various types of information for a specified access token",
        "label": "_Security__SetTokenInformation ( $hToken, $iTokenInformation, $vTokenInformation, $iTokenInformationLength )",
        "params": [{
            "label": "$hToken",
            "documentation": "A handle to the access token for which information is to be set"
        }, {
            "label": "$iTokenInformation",
            "documentation": "The type of information the function sets"
        }, {
            "label": "$vTokenInformation",
            "documentation": "A (pointer to a) structure that contains the information set in the access token"
        }, {
            "label": "$iTokenInformationLength",
            "documentation": "The length, in bytes, of the buffer pointed to by $vTokenInformation"
        }]
    },
    "_Security__SidToStringSid": {
        "documentation": "Converts a binary SID to a string",
        "label": "_Security__SidToStringSid ( $pSID )",
        "params": [{
            "label": "$pSID",
            "documentation": "Pointer to a binary SID to be converted"
        }]
    },
    "_Security__SidTypeStr": {
        "documentation": "Converts a SID type to string form",
        "label": "_Security__SidTypeStr ( $iType )",
        "params": [{
            "label": "$iType",
            "documentation": "SID type"
        }]
    },
    "_Security__StringSidToSid": {
        "documentation": "Converts a String SID to a binary SID",
        "label": "_Security__StringSidToSid ( $sSID )",
        "params": [{
            "label": "$sSID",
            "documentation": "String SID to be converted"
        }]
    },
    "_SendMessage": {
        "documentation": "Wrapper for commonly used DLL Call",
        "label": "_SendMessage ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = \"wparam\" [, $lParamType = \"lparam\" [, $sReturnType = \"lresult\"]]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Window/control handle"
        }, {
            "label": "$iMsg",
            "documentation": "Message to send to control (number)"
        }, {
            "label": "$wParam",
            "documentation": "**[optional]** Specifies additional message-specific information"
        }, {
            "label": "$lParam",
            "documentation": "**[optional]** Specifies additional message-specific information"
        }, {
            "label": "$iReturn",
            "documentation": "**[optional]** What to return:    0 - Return value from DLL call    1 - $ihWnd    2 - $iMsg    3 - $wParam    4 - $lParam     4 - array same as DllCall()"
        }, {
            "label": "$wParamType",
            "documentation": "**[optional]** See DllCall in Related"
        }, {
            "label": "$lParamType",
            "documentation": "**[optional]** See DllCall in Related"
        }, {
            "label": "$sReturnType",
            "documentation": "**[optional]** See DllCall in Related"
        }]
    },
    "_SendMessageA": {
        "documentation": "Send a Message to a Window/Control (Force Ansi Call)",
        "label": "_SendMessageA ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = \"wparam\" [, $lParamType = \"lparam\" [, $sReturnType = \"lresult\"]]]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Window/control handle"
        }, {
            "label": "$iMsg",
            "documentation": "Message to send to control (number)"
        }, {
            "label": "$wParam",
            "documentation": "**[optional]** Specifies additional message-specific information"
        }, {
            "label": "$lParam",
            "documentation": "**[optional]** Specifies additional message-specific information"
        }, {
            "label": "$iReturn",
            "documentation": "**[optional]** What to return:    0 - Return value from DLL call    1 - $ihWnd    2 - $iMsg    3 - $wParam    4 - $lParam     4 - array same as DllCall"
        }, {
            "label": "$wParamType",
            "documentation": "**[optional]** See DllCall in Related"
        }, {
            "label": "$lParamType",
            "documentation": "**[optional]** See DllCall in Related"
        }, {
            "label": "$sReturnType",
            "documentation": "**[optional]** See DllCall in Related"
        }]
    },
    "_SetDate": {
        "documentation": "Sets the current date of the system",
        "label": "_SetDate ( $iDay [, $iMonth = 0 [, $iYear = 0]] )",
        "params": [{
            "label": "$iDay",
            "documentation": "Day of the month. Values: 1-31"
        }, {
            "label": "$iMonth",
            "documentation": "**[optional]** month. Values: 1-12"
        }, {
            "label": "$iYear",
            "documentation": "**[optional]** year. Values: > 0 (windows might restrict this further!!)"
        }]
    },
    "_SetTime": {
        "documentation": "Sets the current time of the system",
        "label": "_SetTime ( $iHour, $iMinute [, $iSecond = 0 [, $iMSeconds = 0]] )",
        "params": [{
            "label": "$iHour",
            "documentation": "the hour. Values: 0-23"
        }, {
            "label": "$iMinute",
            "documentation": "the minute. Values: 0-59"
        }, {
            "label": "$iSecond",
            "documentation": "**[optional]** the seconds. Values: 0-59"
        }, {
            "label": "$iMSeconds",
            "documentation": "**[optional]** the milliseconds. Values: 0-999"
        }]
    },
    "_Singleton": {
        "documentation": "Enforce a design paradigm where only one instance of the script may be running",
        "label": "_Singleton ( $sOccurrenceName [, $iFlag = 0] )",
        "params": [{
            "label": "$sOccurrenceName",
            "documentation": "String to identify the occurrence of the script. This string may not contain the \\ character unless you are placing the object in a namespace (See Remarks)."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** Behavior options.0 - Exit the script with the exit code -1 if another instance already exists.1 - Return from the function without exiting the script.2 - Allow the object to be accessed by anybody in the system. This is useful if specifying a \"Global\\\" object in a multi-user environment."
        }]
    },
    "_SoundClose": {
        "documentation": "Closes a sound previously opened with _SoundOpen",
        "label": "_SoundClose ( $aSndID )",
        "params": [{
            "label": "$aSndID",
            "documentation": "Sound ID array as returned by _SoundOpen()"
        }]
    },
    "_SoundLength": {
        "documentation": "Returns the length of the soundfile",
        "label": "_SoundLength ( $aSndID [, $iMode = 1] )",
        "params": [{
            "label": "$aSndID",
            "documentation": "Sound ID array as returned by _SoundOpen() or a file name"
        }, {
            "label": "$iMode",
            "documentation": "**[optional]** This flag determines the format of the returned sound length    1 = (by default) hh:mm:ss where h = hours, m = minutes and s = seconds (default)    2 = milliseconds"
        }]
    },
    "_SoundOpen": {
        "documentation": "Opens a sound file for use with other _Sound functions",
        "label": "_SoundOpen ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Path to sound file"
        }]
    },
    "_SoundPause": {
        "documentation": "Pause a playing sound",
        "label": "_SoundPause ( $aSndID )",
        "params": [{
            "label": "$aSndID",
            "documentation": "Sound ID array as returned by _SoundOpen() or a file name"
        }]
    },
    "_SoundPlay": {
        "documentation": "Play a sound file",
        "label": "_SoundPlay ( $aSndID [, $iWait = 0] )",
        "params": [{
            "label": "$aSndID",
            "documentation": "Sound ID array as returned by _SoundOpen() or a file name"
        }, {
            "label": "$iWait",
            "documentation": "**[optional]** This flag determines if the script should wait for the sound to finish before continuing:    0 = continue script while sound is playing (default)    1 = wait until sound has finished"
        }]
    },
    "_SoundPos": {
        "documentation": "Returns the current position of the sound",
        "label": "_SoundPos ( $aSndID [, $iMode = 1] )",
        "params": [{
            "label": "$aSndID",
            "documentation": "Sound ID array as returned by _SoundOpen() or a file name"
        }, {
            "label": "$iMode",
            "documentation": "**[optional]** This flag determines which format the position of the sound is returned in    1 = (by default) hh:mm:ss where h = hours, m = minutes and s = seconds (default)    2 = milliseconds"
        }]
    },
    "_SoundResume": {
        "documentation": "Resume a paused sound",
        "label": "_SoundResume ( $aSndID )",
        "params": [{
            "label": "$aSndID",
            "documentation": "Sound ID array as returned by _SoundOpen() or a file name"
        }]
    },
    "_SoundSeek": {
        "documentation": "Seeks the sound to the specified position",
        "label": "_SoundSeek ( ByRef $aSndID, $iHour, $iMin, $iSec )",
        "params": [{
            "label": "$aSndID",
            "documentation": "Sound ID array as returned by _SoundOpen()"
        }, {
            "label": "$iHour",
            "documentation": "Hour to seek to"
        }, {
            "label": "$iMin",
            "documentation": "Minute to seek to"
        }, {
            "label": "$iSec",
            "documentation": "Second to seek to"
        }]
    },
    "_SoundStatus": {
        "documentation": "Returns the status of the sound",
        "label": "_SoundStatus ( $aSndID )",
        "params": [{
            "label": "$aSndID",
            "documentation": "Sound ID array as returned by _SoundOpen() or a file name"
        }]
    },
    "_SoundStop": {
        "documentation": "Stop a playing sound",
        "label": "_SoundStop ( ByRef $aSndID )",
        "params": [{
            "label": "$aSndID",
            "documentation": "Sound ID array as returned by _SoundOpen() or a file name (must be a variable)"
        }]
    },
    "_SQLite_Changes": {
        "documentation": "Returns the number of database rows that were changed by the most recently completed statement with this connection",
        "label": "_SQLite_Changes ( [$hDB = -1] )",
        "params": [{
            "label": "$hDB",
            "documentation": "**[optional]** An open database, default is the last opened database"
        }]
    },
    "_SQLite_Close": {
        "documentation": "Close an open database",
        "label": "_SQLite_Close ( [$hDB = -1] )",
        "params": [{
            "label": "$hDB",
            "documentation": "**[optional]** Database handle."
        }]
    },
    "_SQLite_Display2DResult": {
        "documentation": "Returns or prints to Console a formated display of a 2Dimensional array",
        "label": "_SQLite_Display2DResult ( $aResult [, $iCellWidth = 0 [, $bReturn = False]] )",
        "params": [{
            "label": "$aResult",
            "documentation": "The array to be displayed"
        }, {
            "label": "$iCellWidth",
            "documentation": "**[optional]** specifies the size of a data field"
        }, {
            "label": "$bReturn",
            "documentation": "**[optional]** if True the formated string is returned, not displayedIf False the formatted string is send to StdOut"
        }]
    },
    "_SQLite_Encode": {
        "documentation": "Binary encodes a string, number or binary data for use as BLOB in SQLite statements",
        "label": "_SQLite_Encode ( $vData )",
        "params": [{
            "label": "$vData",
            "documentation": "Data To be encoded (String, Number or Binary)"
        }]
    },
    "_SQLite_ErrCode": {
        "documentation": "Returns last error code (numeric)",
        "label": "_SQLite_ErrCode ( [$hDB = -1] )",
        "params": [{
            "label": "$hDB",
            "documentation": "**[optional]** An open database, default is the last opened database"
        }]
    },
    "_SQLite_ErrMsg": {
        "documentation": "Returns a string describing in english the error condition for the most recent sqlite3_* API call",
        "label": "_SQLite_ErrMsg ( [$hDB = -1] )",
        "params": [{
            "label": "$hDB",
            "documentation": "**[optional]** An open database, default is the last opened database"
        }]
    },
    "_SQLite_Escape": {
        "documentation": "Escapes a string or number for use as TEXT in SQLite statements",
        "label": "_SQLite_Escape ( $sString [, $iBuffSize = Default] )",
        "params": [{
            "label": "$sString",
            "documentation": "string to escape"
        }, {
            "label": "$iBuffSize",
            "documentation": "**[optional]** Size of the escaped string to be returned (Default = complete escaped string)"
        }]
    },
    "_SQLite_Exec": {
        "documentation": "Executes a SQLite query, does not handle results",
        "label": "_SQLite_Exec ( $hDB, $sSQL [, $sCallBack = \"\"] )",
        "params": [{
            "label": "$hDB",
            "documentation": "An open database, use -1 to use last opened database"
        }, {
            "label": "$sSQL",
            "documentation": "SQL statement to be executed"
        }, {
            "label": "$sCallback",
            "documentation": "**[optional]** if specified the function will be called for each row"
        }]
    },
    "_SQLite_FastEncode": {
        "documentation": "Fast encodes binary data (exclusively) for use in SQLite statements",
        "label": "_SQLite_FastEncode ( $vData )",
        "params": [{
            "label": "$vData",
            "documentation": "Data To be encoded (Binary only)"
        }]
    },
    "_SQLite_FastEscape": {
        "documentation": "Fast escapes a string or number for use as TEXT in SQLite statements",
        "label": "_SQLite_FastEscape ( $sString )",
        "params": [{
            "label": "$sString",
            "documentation": "string to escape"
        }]
    },
    "_SQLite_FetchData": {
        "documentation": "Fetches 1 row of data from a _SQLite_Query() based query",
        "label": "_SQLite_FetchData ( $hQuery, ByRef $aRow [, $bBinary = False [, $bDoNotFinalize = False [, $iColumns = 0]]] )",
        "params": [{
            "label": "$hQuery",
            "documentation": "Queryhandle passed out by _SQLite_Query()"
        }, {
            "label": "$aRow",
            "documentation": "A 1 dimensional array containing a row of data"
        }, {
            "label": "$bBinary",
            "documentation": "**[optional]** Switch for binary mode ($aRow will be an array of binary strings)"
        }, {
            "label": "$bDoNotFinalize",
            "documentation": "**[optional]** Switch can be set to True if you need to keep the query unfinalized for further use.(It is then the caller's responsability to invoke _SQLite_QueryFinalize() before closing database.)"
        }, {
            "label": "$iColumns",
            "documentation": "**[optional]** Number of columns to be returned ((Default = all)"
        }]
    },
    "_SQLite_FetchNames": {
        "documentation": "Read out the Column names of a _SQLite_Query() based query",
        "label": "_SQLite_FetchNames ( $hQuery, ByRef $aNames )",
        "params": [{
            "label": "$hQuery",
            "documentation": "Query handle generated by SQLite_Query()"
        }, {
            "label": "$aNames",
            "documentation": "1 dimensional array containing the Column names"
        }]
    },
    "_SQLite_GetTable": {
        "documentation": "Passes Out a 1Dimensional Array Containing Tablenames and Data of Executed Query",
        "label": "_SQLite_GetTable ( $hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1] )",
        "params": [{
            "label": "$hDB",
            "documentation": "An open database, use -1 to use last opened database"
        }, {
            "label": "$sSQL",
            "documentation": "SQL Statement to be executed"
        }, {
            "label": "$aResult",
            "documentation": "Passes out the result"
        }, {
            "label": "$iRows",
            "documentation": "Passes out the amount of 'data' Rows"
        }, {
            "label": "$iColumns",
            "documentation": "Passes out the amount of columns"
        }, {
            "label": "$iCharSize",
            "documentation": "**[optional]** Specifies the maximal size of a data field"
        }]
    },
    "_SQLite_GetTable2d": {
        "documentation": "Passes out a 2Dimensional array containing column names and data of executed query",
        "label": "_SQLite_GetTable2d ( $hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1 [, $bSwichDimensions = False]] )",
        "params": [{
            "label": "$hDB",
            "documentation": "An Open Database, Use -1 To use Last Opened Database"
        }, {
            "label": "$sSQL",
            "documentation": "SQL Statement to be executed"
        }, {
            "label": "$aResult",
            "documentation": "Passes out the result"
        }, {
            "label": "$iRows",
            "documentation": "Passes out the amount of 'data' Rows"
        }, {
            "label": "$iColumns",
            "documentation": "Passes out the amount of columns"
        }, {
            "label": "$iCharSize",
            "documentation": "**[optional]** Specifies the maximal size of a data field"
        }, {
            "label": "$bSwichDimensions",
            "documentation": "**[optional]** Switches dimensions of $aResult"
        }]
    },
    "_SQLite_LastInsertRowID": {
        "documentation": "Returns the ROWID of the most recent insert in the database by this connection",
        "label": "_SQLite_LastInsertRowID ( [$hDB = -1] )",
        "params": [{
            "label": "$hDB",
            "documentation": "**[optional]** An open database, use -1 to use last opened database"
        }]
    },
    "_SQLite_LibVersion": {
        "documentation": "Returns the version number of the library",
        "label": "_SQLite_LibVersion (  )",
        "params": []
    },
    "_SQLite_Open": {
        "documentation": "Opens/creates a SQLite database",
        "label": "_SQLite_Open ( [$sDatabase_Filename = \":memory:\" [, $iAccessMode = Default [, $iEncoding = $SQLITE_ENCODING_UTF8]]] )",
        "params": [{
            "label": "$sDatabase_Filename",
            "documentation": "**[optional]** Database filename, by default will open a memory database."
        }, {
            "label": "$iAccessMode",
            "documentation": "**[optional]** access mode flags. Defaults to $SQLITE_OPEN_READWRITE + $SQLITE_OPEN_CREATE"
        }, {
            "label": "$iEncoding",
            "documentation": "**[optional]** encoding mode flag, only used at creation time. Defaults to $SQLITE_ENCODING_UTF8"
        }]
    },
    "_SQLite_Query": {
        "documentation": "Prepares a SQLite Query",
        "label": "_SQLite_Query ( $hDB, $sSQL, ByRef $hQuery )",
        "params": [{
            "label": "$hDB",
            "documentation": "An open database, use -1 to use last opened database"
        }, {
            "label": "$sSQL",
            "documentation": "SQL statement to be executed"
        }, {
            "label": "$hQuery",
            "documentation": "Passes out a query handle"
        }]
    },
    "_SQLite_QueryFinalize": {
        "documentation": "Finalizes an _SQLite_Query() based query. The query is interrupted",
        "label": "_SQLite_QueryFinalize ( $hQuery )",
        "params": [{
            "label": "$hQuery",
            "documentation": "Query handle generated by _SQLite_Query()"
        }]
    },
    "_SQLite_QueryReset": {
        "documentation": "Reset a _SQLite_Query() based query",
        "label": "_SQLite_QueryReset ( $hQuery )",
        "params": [{
            "label": "$hQuery",
            "documentation": "Query handle generated by _SQLite_Query()"
        }]
    },
    "_SQLite_QuerySingleRow": {
        "documentation": "Read out the first row of the result from the specified query",
        "label": "_SQLite_QuerySingleRow ( $hDB, $sSQL, ByRef $aRow )",
        "params": [{
            "label": "$hDB",
            "documentation": "An open database, use -1 to use last opened database"
        }, {
            "label": "$sSQL",
            "documentation": "SQL statement to be executed"
        }, {
            "label": "$aRow",
            "documentation": "Passes out the amount of 'data' rows"
        }]
    },
    "_SQLite_SafeMode": {
        "documentation": "Disable or Enable Safe mode",
        "label": "_SQLite_SafeMode ( $bSafeModeState )",
        "params": [{
            "label": "$bSafeModeState",
            "documentation": "True or False to enable or disable SafeMode"
        }]
    },
    "_SQLite_SetTimeout": {
        "documentation": "Sets timeout for busy handler",
        "label": "_SQLite_SetTimeout ( [$hDB = -1 [, $iTimeout = 1000]] )",
        "params": [{
            "label": "$hDB",
            "documentation": "**[optional]** An open database, use -1 to use last opened database"
        }, {
            "label": "$iTimeout",
            "documentation": "**[optional]** Timeout [msec]"
        }]
    },
    "_SQLite_Shutdown": {
        "documentation": "Unloads SQLite.dll",
        "label": "_SQLite_Shutdown (  )",
        "params": []
    },
    "_SQLite_SQLiteExe": {
        "documentation": "Executes commands in sqlite3.exe",
        "label": "_SQLite_SQLiteExe ( $sDatabaseFile, $sInput, ByRef $sOutput [, $sSQLiteExeFilename = \"sqlite3.exe\" [, $bDebug = False]] )",
        "params": [{
            "label": "$sDatabaseFile",
            "documentation": "Database filename"
        }, {
            "label": "$sInput",
            "documentation": "Commands for sqlite3.exe"
        }, {
            "label": "$sOutput",
            "documentation": "Raw output from sqlite3.exe"
        }, {
            "label": "$sSQLiteExeFilename",
            "documentation": "**[optional]** Path to sqlite3.exe"
        }, {
            "label": "$bDebug",
            "documentation": "**[optional]** Write sqlite3.exe exitcode through the callback function specified in _SQLite_Startup() (default is don't print)"
        }]
    },
    "_SQLite_Startup": {
        "documentation": "Loads SQLite3.dll",
        "label": "_SQLite_Startup ( [$sDll_Filename = \"\" [, $bUTF8ErrorMsg = False [, $iForceLocal = 0 [, $hPrintCallback = $__g_hPrintCallback_SQLite]]]] )",
        "params": [{
            "label": "$sDll_Filename",
            "documentation": "**[optional]** DLL filename. Default is \"sqlite3.dll\" or \"sqlite3_x64.dll\" in X64 mode."
        }, {
            "label": "$bUTF8ErrorMsg",
            "documentation": "**[optional]** to force ConsoleWrite() to display UTF8 chars"
        }, {
            "label": "$iForceLocal",
            "documentation": "**[optional]** 1 = use the defined DLL file. No version checking. Automatic \"_x64.dll\" in X64 mode.0 = the DLL will be search in @ScriptDir, @SystemDir, @WindowsDir, and @WorkingDir."
        }, {
            "label": "$hPrintCallback",
            "documentation": "**[optional]** A variable assigned to the user defined function to display a SQLite diagnostic message. Default = __SQLite_ConsoleWrite(). See remarks."
        }]
    },
    "_SQLite_TotalChanges": {
        "documentation": "Returns number of all changes (including via triggers and foreign keys) from start of connection",
        "label": "_SQLite_TotalChanges ( [$hDB = -1] )",
        "params": [{
            "label": "$hDB",
            "documentation": "**[optional]** An open database, default is the last opened database"
        }]
    },
    "_StringBetween": {
        "documentation": "Find strings between two string delimiters",
        "label": "_StringBetween ( $sString, $sStart, $sEnd [, $iMode = $STR_ENDISSTART [, $bCase = False]] )",
        "params": [{
            "label": "$sString",
            "documentation": "The string to search."
        }, {
            "label": "$sStart",
            "documentation": "The beginning of the string to find. Passing an empty string starts at the beginning"
        }, {
            "label": "$sEnd",
            "documentation": "The end of the string to find. Passing an empty string searches from $sStart to end of string"
        }, {
            "label": "$iMode",
            "documentation": "**[optional]** Search mode when $sStart = $sEnd\n$STR_ENDISSTART (0) the $sEnd string at the end of a match starts the next possible match (default)\n$STR_ENDNOTSTART (1) a further instance of the $sStart starts the next match"
        }, {
            "label": "$bCase",
            "documentation": "**[optional]** False (default setting) = case-insensitive. True = case-sensitive."
        }]
    },
    "_StringExplode": {
        "documentation": "Splits up a string into substrings depending on the given delimiters as PHP Explode v5",
        "label": "_StringExplode ( $sString, $sDelimiter [, $iLimit = 0] )",
        "params": [{
            "label": "$sString",
            "documentation": "String to be split"
        }, {
            "label": "$sDelimiter",
            "documentation": "Delimiter to split on (split is performed on entire string, not individual characters)"
        }, {
            "label": "$iLimit",
            "documentation": "**[optional]** Maximum elements to be returned    =0 : (default) Split on every instance of the delimiter    >0 : Split until limit, last element will contain remaining portion of the string    "
        }]
    },
    "_StringInsert": {
        "documentation": "Inserts a string within another string",
        "label": "_StringInsert ( $sString, $sInsertString, $iPosition )",
        "params": [{
            "label": "$sString",
            "documentation": "Original string"
        }, {
            "label": "$sInsertString",
            "documentation": "String to be inserted"
        }, {
            "label": "$iPosition",
            "documentation": "Position to insert string (negatives values count from right hand side)"
        }]
    },
    "_StringProper": {
        "documentation": "Changes a string to proper case, same as the =Proper function in Excel",
        "label": "_StringProper ( $sString )",
        "params": [{
            "label": "$sString",
            "documentation": "Input string"
        }]
    },
    "_StringRepeat": {
        "documentation": "Repeats a string a specified number of times",
        "label": "_StringRepeat ( $sString, $iRepeatCount )",
        "params": [{
            "label": "$sString",
            "documentation": "String to repeat"
        }, {
            "label": "$iRepeatCount",
            "documentation": "Number of times to repeat the string"
        }]
    },
    "_StringTitleCase": {
        "documentation": "Changes a string to a title case string",
        "label": "_StringTitleCase ( $sString )",
        "params": [{
            "label": "$sString",
            "documentation": "Input string"
        }]
    },
    "_StringToHex": {
        "documentation": "Convert a string to a hex string",
        "label": "_StringToHex ( $sString )",
        "params": [{
            "label": "$sString",
            "documentation": "String to be converted."
        }]
    },
    "_TCPIpToName": {
        "documentation": "Resolves IP address to Hostname(s)",
        "label": "_TCPIpToName ( $sIp [, $iOption = 0 [, $hDll = \"Ws2_32.dll\"]] )",
        "params": [{
            "label": "$sIp",
            "documentation": "Ip Adress in dotted (v4) Format"
        }, {
            "label": "$iOption",
            "documentation": "**[optional]** Default = 00 = Return String Hostname1 = Return Array (see Remarks)"
        }, {
            "label": "$hDll",
            "documentation": "**[optional]** Handle to Ws2_32.dll"
        }]
    },
    "_TempFile": {
        "documentation": "Generate a name for a temporary file. The file is guaranteed not to exist yet",
        "label": "_TempFile ( [$sDirectoryName = @TempDir [, $sFilePrefix = \"~\" [, $sFileExtension = \".tmp\" [, $iRandomLength = 7]]]] )",
        "params": [{
            "label": "$sDirectoryName",
            "documentation": "**[optional]** Name of directory for filename, defaults to the users %TEMP% directory"
        }, {
            "label": "$sFilePrefix",
            "documentation": "**[optional]** Filename prefix, defaults to \"~\""
        }, {
            "label": "$sFileExtension",
            "documentation": "**[optional]** File extenstion, defaults to \".tmp\""
        }, {
            "label": "$iRandomLength",
            "documentation": "**[optional]** Number of characters to use to generate a unique name, defaults to 7"
        }]
    },
    "_TicksToTime": {
        "documentation": "Converts the specified tick amount to hours, minutes and seconds",
        "label": "_TicksToTime ( $iTicks, ByRef $iHours, ByRef $iMins, ByRef $iSecs )",
        "params": [{
            "label": "$iTicks",
            "documentation": "Tick amount."
        }, {
            "label": "$iHours",
            "documentation": "Variable to store the hours."
        }, {
            "label": "$iMins",
            "documentation": "Variable to store the minutes."
        }, {
            "label": "$iSecs",
            "documentation": "Variable to store the seconds."
        }]
    },
    "_Timer_Diff": {
        "documentation": "Returns the difference in time from a previous call to _Timer_Init",
        "label": "_Timer_Diff ( $iTimeStamp )",
        "params": [{
            "label": "$iTimeStamp",
            "documentation": "Timestamp returned from a previous call to _Timer_Init()."
        }]
    },
    "_Timer_GetIdleTime": {
        "documentation": "Returns the number of ticks since last user activity (i.e. KYBD/Mouse)",
        "label": "_Timer_GetIdleTime (  )",
        "params": []
    },
    "_Timer_GetTimerID": {
        "documentation": "Returns the Timer ID from $wParam",
        "label": "_Timer_GetTimerID ( $wParam )",
        "params": [{
            "label": "$wParam",
            "documentation": "Specifies the timer identifier event."
        }]
    },
    "_Timer_Init": {
        "documentation": "Returns a timestamp (in milliseconds)",
        "label": "_Timer_Init (  )",
        "params": []
    },
    "_Timer_KillAllTimers": {
        "documentation": "Destroys all the timers",
        "label": "_Timer_KillAllTimers ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window associated with the timers.This value must be the same as the $hWnd value passed to the _Timer_SetTimer() function that created the timer"
        }]
    },
    "_Timer_KillTimer": {
        "documentation": "Destroys the specified timer",
        "label": "_Timer_KillTimer ( $hWnd, $iTimerID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window associated with the specified timer.This value must be the same as the $hWnd value passed to the _Timer_SetTimer() function that created the timer"
        }, {
            "label": "$iTimerID",
            "documentation": "Specifies the timer to be destroyed"
        }]
    },
    "_Timer_SetTimer": {
        "documentation": "Creates a timer with the specified time-out value",
        "label": "_Timer_SetTimer ( $hWnd [, $iElapse = 250 [, $sTimerFunc = \"\" [, $iTimerID = -1]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be associated with the timer.This window must be owned by the calling thread"
        }, {
            "label": "$iElapse",
            "documentation": "**[optional]** Specifies the time-out value, in milliseconds"
        }, {
            "label": "$sTimerFunc",
            "documentation": "**[optional]** Function name to be notified when the time-out value elapses"
        }, {
            "label": "$iTimerID",
            "documentation": "**[optional]** Specifies a timer identifier.If $iTimerID = -1 then a new timer is createdIf $iTimerID matches an existing timer then the timer is replacedIf $iTimerID = -1 and $sTimerFunc = \"\" then timer will use WM_TIMER events"
        }]
    },
    "_TimeToTicks": {
        "documentation": "Converts the specified hours, minutes, and seconds to ticks",
        "label": "_TimeToTicks ( [$iHours = @HOUR [, $iMins = @MIN [, $iSecs = @SEC]]] )",
        "params": [{
            "label": "$iHours",
            "documentation": "**[optional]** The hours."
        }, {
            "label": "$iMins",
            "documentation": "**[optional]** The minutes."
        }, {
            "label": "$iSecs",
            "documentation": "**[optional]** The seconds."
        }]
    },
    "_VersionCompare": {
        "documentation": "Compares two file versions for equality",
        "label": "_VersionCompare ( $sVersion1, $sVersion2 )",
        "params": [{
            "label": "$sVersion1",
            "documentation": "The first version value"
        }, {
            "label": "$sVersion2",
            "documentation": "The second version value"
        }]
    },
    "_viClose": {
        "documentation": "Closes a VISA connection to an Instrument/Device",
        "label": "_viClose ( $hSession )",
        "params": [{
            "label": "$hSession",
            "documentation": "A VISA session handle as returned by _viOpen()"
        }]
    },
    "_viExecCommand": {
        "documentation": "Send a Command/Query to an Instrument/Device through the VISA interface (GPIB / TCP)",
        "label": "_viExecCommand ( $hSession, $sCommand [, $iTimeoutMS = -1 [, $sMode = @LF]] )",
        "params": [{
            "label": "$hSession",
            "documentation": "A VISA descriptor (STRING) OR a VISA session handle (INTEGER)This it can be a string or an integer (a handle):* STRING -&gr; A VISA DESCRIPTOR is a string which specifies the resource with which to establish a communication session.An example descriptor is \"GPIB::20::0\".This function supports all valid VISA descriptors, including GPIB, TCP, VXI and Serial Interface instruments (ASRL).A detailed explanation of VISA descriptors is shown in the Remarks section of this function.As a SHORTCUT you can also use a STRING containing the address number (e.g. \"20\") of a GPIB instrument instead of typing the full descriptor (in that case, \"GPIB::20::0\")* INTEGER -&gr; A VISA session handle is an integer value returned by _viOpen().It is recommended that instead you use _viOpen() and VISA session handles instead of descriptors if you plan to communicate repeteadly with an Instrument or Device, as otherwise each time that you contact the instrument you would incur the overhead of opening and closing the communication link.Once you are done using the instrument you must remember to close the link with _viClose()."
        }, {
            "label": "$sCommand",
            "documentation": "Command/Query to execute (e.g. \"*IDN?\" or \"SOURCE:POWER -20 dBM\")A query MUST contain a QUESTION MARK (?)When the command is a QUERY the function will automatically wait for the instrument's answer (or until the operation times out)"
        }, {
            "label": "$iTimeoutMS",
            "documentation": "**[optional]** The operation timeout in MILISECONDS.This is mostly important for QUERIES only.If it is not specified the last set timeout will be used. If it was never set before the default timeout (which depends on the VISA implementation) will be used.Timeouts can also be set separatelly with the _viSetTimeout() function.Depending on the bus type (GPIB, TCP, etc) the timeout might not be set to the exact value that you request. Instead the closest valid timeout bigger than the one that you requested will be used."
        }, {
            "label": "$sMode",
            "documentation": "**[optional]** Control the mode in which the VISA viPrintf is called when $sCommand is not a query.Default is @LF, which means \"attach @LF mode\".Some instruments and in particular many GPIB cards do not honor the terminator character attribute in those cases an @LF terminator needs to be added.As this is the most common case, by default the mode is set to @LF, which appends @LF to the SCPI command you can also set this mode to @CR and @CRLF if your card uses those terminators.If you do not want to use a terminator, set this parameter to an empty string (\"\")Also, some cards support the execution of a \"sprintf\" on the SCPI string prior to sending it through the VISA interface.For those who do, it is possible, by setting this parameter to \"str\" to \"protect\" the VISa interface from accidentally applying an escape sequence when a \"/\" is found within the VISA command string.This is normally NOT necessary and should only be set if your GPIB card or instrument require it."
        }]
    },
    "_viFindGpib": {
        "documentation": "Send a Command/Query to an Instrument/Device through the VISA interface (GPIB / TCP)",
        "label": "_viFindGpib ( ByRef $aDescriptorList, ByRef $aIDNList [, $iShow_Search_Results = 0] )",
        "params": [{
            "label": "$aDescriptorList",
            "documentation": "RETURNS an array of the VISA resource descriptors of the instruments that were found in the GPIB bus (see the Remarks of the _viExecCommand() for more info)"
        }, {
            "label": "$aIDNList",
            "documentation": "RETURNS an array of the IDNs (i.e names) of the instruments that were found in the GPIB bus"
        }, {
            "label": "$iShow_Search_Results",
            "documentation": "**[optional]** If 1 a message box showing the results of the search will be shown.The default is 0, which means that the results are not shown"
        }]
    },
    "_viGpibBusReset": {
        "documentation": "GPIB BUS \"reset\": Use this function when the GPIB BUS gets stuck for some reason. You might be lucky and resolve the problem by calling this function",
        "label": "_viGpibBusReset (  )",
        "params": []
    },
    "_viGTL": {
        "documentation": "Go To Local mode: Instruments that accept this command will exit the \"Remote Control mode\" and go to \"Local mode\". If the instrument is already in \"Local mode\" this is simply ignored. Normally, if an instrument does not support this command it will simply stay in the \"Remote Control mode\"",
        "label": "_viGTL ( $hSession )",
        "params": [{
            "label": "$hSession",
            "documentation": "A VISA descriptor (STRING) OR a VISA session handle (INTEGER).See the Remarks of the _viExecCommand() for more info."
        }]
    },
    "_viInteractiveControl": {
        "documentation": "Interactive VISA control to test your SCPI commands",
        "label": "_viInteractiveControl ( [$sCommand_Save_FilePath = \"\"] )",
        "params": [{
            "label": "$sCommand_Save_FilePath",
            "documentation": "**[optional]** The name of the file in which the SCPI commands issued during the interactive session will be saved.If no filename is passed the funcion asks the user where does he wants to save the issued commands."
        }]
    },
    "_viOpen": {
        "documentation": "Opens a VISA connection to an Instrument/Device",
        "label": "_viOpen ( $sVisa_Address [, $sVisa_Secondary_Address = 0] )",
        "params": [{
            "label": "$sVisa_Address",
            "documentation": "A VISA resource descriptor STRING (see the NOTES of _viExecCommand() above for more info)As as shortcut you can also directly pass a GPIB address as an integer"
        }, {
            "label": "$sVisa_Secondary_Address",
            "documentation": "**[optional]** The \"secondary GPIB address\". Only used if the primary address is passed as an integer.Only some GPIB instruments have secondary addresses. In those cases this optional parameter can be used to specify it.This parameter is ZERO by default, which means NO SECONDARY ADDRESS."
        }]
    },
    "_viSetAttribute": {
        "documentation": "Set any VISA attribute This function, which is called by _viSetTimeout, can ALSO be used to set the other VISA specific attributes. Read the VISA documentation for more information and a list of VISA attributes and their corresponding values",
        "label": "_viSetAttribute ( $hSession, $iAttribute, $iValue )",
        "params": [{
            "label": "$hSession",
            "documentation": "A VISA descriptor (STRING) OR a VISA session handle (INTEGER).See the Remarks of the _viExecCommand() for more info."
        }, {
            "label": "$iAttribute",
            "documentation": "The index of the attribute that must be changed.Attributes are defined in the VISA library.This AutoIt library only defines a CONSTANT for the TIMEOUT attribute ($VI_ATTR_TMO_VALUE) and for the Serial Interface attributes and values (see the remarks) but you can pass any other valid index (as an integer) if you want to."
        }, {
            "label": "$iValue",
            "documentation": "The value of the attribute. It must be an integer and the possible values depend on the attribute type and are defined in the VISA documentation."
        }]
    },
    "_viSetTimeout": {
        "documentation": "Sets the VISA timeout in MILISECONDS",
        "label": "_viSetTimeout ( $hSession, $iTimeoutMS )",
        "params": [{
            "label": "$hSession",
            "documentation": "A VISA descriptor (STRING) OR a VISA session handle (INTEGER).See the Remarks of the _viExecCommand() for more info."
        }, {
            "label": "$iTimeoutMS",
            "documentation": "The timeout IN MILISECONDS for VISA operations (mainly for GPIB queries)If you set it to 0 the tiemouts are DISABLED.If you set it to \"INF\" the VISA operations will NEVER timeout.Be careful with this as it could easly hung your program ifv your instrument does not respond to one of your queries.Depending on the bus type (GPIB, TCP, etc) the timeout might not be set to the exact value that you request. Instead the closest valid timeout bigger than the one that you requested will be used."
        }]
    },
    "_WeekNumberISO": {
        "documentation": "Calculate the weeknumber of a given date",
        "label": "_WeekNumberISO ( [$iYear = @YEAR [, $iMonth = @MON [, $iDay = @MDAY]]] )",
        "params": [{
            "label": "$iYear",
            "documentation": "**[optional]** Year value (default = current year)"
        }, {
            "label": "$iMonth",
            "documentation": "**[optional]** Month value (default = current month)"
        }, {
            "label": "$iDay",
            "documentation": "**[optional]** Day value (default = current day)"
        }]
    },
    "_WinAPI_AbortPath": {
        "documentation": "Closes and discards any paths in the specified device context",
        "label": "_WinAPI_AbortPath ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context from which a path will be discarded."
        }]
    },
    "_WinAPI_ActivateKeyboardLayout": {
        "documentation": "Sets the input locale identifier for the calling thread or the current process",
        "label": "_WinAPI_ActivateKeyboardLayout ( $hLocale [, $iFlag = 0] )",
        "params": [{
            "label": "$hLocale",
            "documentation": "The input locale identifier to be activated.This parameter must be either the handle to a keyboard layout or one of the following values:    $HKL_NEXT    $HKL_PREV"
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The flag that specifies how the input locale identifier is to be activated.This parameter can be one of the following values:    $KLF_REORDER    $KLF_RESET    $KLF_SETFORPROCESS    $KLF_SHIFTLOCK"
        }]
    },
    "_WinAPI_AddClipboardFormatListener": {
        "documentation": "Places the given window in the system-maintained clipboard format listener list",
        "label": "_WinAPI_AddClipboardFormatListener ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be placed."
        }]
    },
    "_WinAPI_AddFontMemResourceEx": {
        "documentation": "Adds the font resource from a memory image to the system",
        "label": "_WinAPI_AddFontMemResourceEx ( $pData, $iSize )",
        "params": [{
            "label": "$pData",
            "documentation": "The pointer to a font resource."
        }, {
            "label": "$iSize",
            "documentation": "The number of bytes in the font resource."
        }]
    },
    "_WinAPI_AddFontResourceEx": {
        "documentation": "Adds the font resource from the specified file to the system font table",
        "label": "_WinAPI_AddFontResourceEx ( $sFont [, $iFlag = 0 [, $bNotify = False]] )",
        "params": [{
            "label": "$sFont",
            "documentation": "String that contains a valid font file name. This parameter can specify any of the following files:\n.fon - Font resource file.\n.fnt - Raw bitmap font file.\n.ttf - Raw TrueType file.\n.ttc - East Asian Windows: TrueType font collection.\n.fot - TrueType resource file.\n.otf - PostScript OpenType font.\n.mmm - Multiple master Type1 font resource file. It must be used with .pfm and .pfb files.\n.pfb - Type 1 font bits file. It is used with a .pfm file.\n.pfm - Type 1 font metrics file. It is used with a .pfb file.\n\nTo add a font whose information comes from several resource files, they must be separated by a \"|\".\nFor example, abcxxxxx.pfm|abcxxxxx.pfb."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The characteristics of the font to be added to the system. This parameter can be one of the following values.\n$FR_PRIVATE\n$FR_NOT_ENUM"
        }, {
            "label": "$bNotify",
            "documentation": "**[optional]** Specifies whether sends a WM_FONTCHANGE message, valid values:\n\tTrue - Send the WM_FONTCHANGE message to all top-level windows after changing the pool of font resources.\n\tFalse - Don't send (Default)."
        }]
    },
    "_WinAPI_AddIconOverlay": {
        "documentation": "Creates an icon by merging the source icon and overlay mask",
        "label": "_WinAPI_AddIconOverlay ( $hIcon, $hOverlay )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the source icon."
        }, {
            "label": "$hOverlay",
            "documentation": "Handle to the icon to use as an overlay mask."
        }]
    },
    "_WinAPI_AddIconTransparency": {
        "documentation": "Adds a transparency to the specified 32 bits-per-pixel icon",
        "label": "_WinAPI_AddIconTransparency ( $hIcon [, $iPercent = 50 [, $bDelete = False]] )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the icon."
        }, {
            "label": "$iPercent",
            "documentation": "**[optional]** A value (in percent) that specifies how much to decrease the values of the alpha channel for the specified icon. If this parameter is 0, the function returns a fully transparent icon. Default is 80."
        }, {
            "label": "$bDelete",
            "documentation": "**[optional]** Specifies whether to delete the icon after the function is successful, valid values:    True - Icon will be deleted if the function succeeds.    False - Do not delete, you must release the icon when you are finished using it (Default)."
        }]
    },
    "_WinAPI_AddMRUString": {
        "documentation": "Adds a string to the top of the most recently used (MRU) list",
        "label": "_WinAPI_AddMRUString ( $hMRU, $sStr )",
        "params": [{
            "label": "$hMRU",
            "documentation": "Handle of the MRU list."
        }, {
            "label": "$sStr",
            "documentation": "The string be added."
        }]
    },
    "_WinAPI_AdjustBitmap": {
        "documentation": "Creates a new device-depended bitmap (DDB) from the source bitmap with new dimensions and color adjustment",
        "label": "_WinAPI_AdjustBitmap ( $hBitmap, $iWidth, $iHeight [, $iMode = 3 [, $tAdjustment = 0]] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "A handle to the source bitmap."
        }, {
            "label": "$iWidth",
            "documentation": "The width of the new bitmap, in pixels.If this parameter is (-1), the width will be the same as in the source bitmap."
        }, {
            "label": "$iHeight",
            "documentation": "The height of the new bitmap, in pixels.If this parameter is (-1), the height will be the same as in the source bitmap."
        }, {
            "label": "$iMode",
            "documentation": "**[optional]** The stretching mode.This parameter can be one of the following values:    $BLACKONWHITE    $COLORONCOLOR (Default)    $HALFTONE    $WHITEONBLACK    $STRETCH_ANDSCANS    $STRETCH_DELETESCANS    $STRETCH_HALFTONE    $STRETCH_ORSCANS"
        }, {
            "label": "$tAdjustment",
            "documentation": "**[optional]** $tagCOLORADJUSTMENT structure containing the color adjustment values.This color adjustment is used only if $HALFTONE ($STRETCH_HALFTONE) stretching mode are set."
        }]
    },
    "_WinAPI_AdjustTokenPrivileges": {
        "documentation": "Enables or disables privileges in the specified access token",
        "label": "_WinAPI_AdjustTokenPrivileges ( $hToken, $aPrivileges, $iAttributes, ByRef $aAdjust )",
        "params": [{
            "label": "$hToken",
            "documentation": "Handle to the access token that contains the privileges to be modified.The handle must have $TOKEN_ADJUST_PRIVILEGES and $TOKEN_QUERY accesses to the token."
        }, {
            "label": "$aPrivileges",
            "documentation": "The variable that specifies a privileges.If this parameter is (-1), the function disables of the token's privileges and ignores the $iAttributes parameter.$aPrivileges can be one of the following types.The privilege constant ($SE_*).1D array of $SE_* constants.2D array of $SE_* constants and their attributes (see below).[0][0] - Privilege[0][1] - Attributes[n][0] - Privilege[n][1] - Attributes"
        }, {
            "label": "$iAttributes",
            "documentation": "The privilege attributes. If $aPrivileges parameter is 1D array, $iAttributes applied to the entire array.If $aPrivileges parameter is (-1) or 2D array, the function ignores this parameter and will use the attributes that specified in this array.This parameter can be 0 (disables privilege) or any combination of the following values:    $SE_PRIVILEGE_ENABLED    $SE_PRIVILEGE_ENABLED_BY_DEFAULT    $SE_PRIVILEGE_REMOVED    $SE_PRIVILEGE_USED_FOR_ACCESS"
        }, {
            "label": "$aAdjust",
            "documentation": "2D array of the previous state of any privileges that the function modifies. That is, if a privilege has been modified by this function, the privilege and its previous state are contained in this array."
        }]
    },
    "_WinAPI_AdjustWindowRectEx": {
        "documentation": "Calculates the required size of the window rectangle, based on the desired size of the client rectangle",
        "label": "_WinAPI_AdjustWindowRectEx ( ByRef $tRECT, $iStyle [, $iExStyle = 0 [, $bMenu = False]] )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the coordinates of the desired client area. This structure must be created before function call."
        }, {
            "label": "$iStyle",
            "documentation": "The window style of the window whose required size is to be calculated. Note that you cannot specify the $WS_OVERLAPPED style."
        }, {
            "label": "$iExStyle",
            "documentation": "**[optional]** The extended window style of the window whose required size is to be calculated."
        }, {
            "label": "$bMenu",
            "documentation": "**[optional]** Specifies whether the window has a menu, valid values:True - The window has a menu.False - The window does not has a menu (Default)."
        }]
    },
    "_WinAPI_AlphaBlend": {
        "documentation": "Displays bitmaps that have transparent or semitransparent pixels",
        "label": "_WinAPI_AlphaBlend ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iAlpha [, $bAlpha = False] )",
        "params": [{
            "label": "$hDestDC",
            "documentation": "Handle to the destination device context."
        }, {
            "label": "$iXDest",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iYDest",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iWidthDest",
            "documentation": "The width, in logical units, of the destination rectangle."
        }, {
            "label": "$iHeightDest",
            "documentation": "The height, in logical units, of the destination rectangle."
        }, {
            "label": "$hSrcDC",
            "documentation": "Handle to the source device context."
        }, {
            "label": "$iXSrc",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the source rectangle."
        }, {
            "label": "$iYSrc",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the source rectangle."
        }, {
            "label": "$iWidthSrc",
            "documentation": "The width, in logical units, of the source rectangle."
        }, {
            "label": "$iHeightSrc",
            "documentation": "The height, in logical units, of the source rectangle."
        }, {
            "label": "$iAlpha",
            "documentation": "The alpha transparency value to be used on the entire source bitmap.This value is combined with any per-pixel alpha values in the source bitmap.If you set $iAlpha to 0, it is assumed that your image is transparent.Set $iAlpha value to 255 (opaque) when you only want to use per-pixel alpha values."
        }, {
            "label": "$bAlpha",
            "documentation": "**[optional]** Specifies whether uses an alpha channel from the source bitmap, valid values:    True    - Use the alpha channel (that is, per-pixel alpha).        Note that the APIs use premultiplied alpha, which means that the red, green and blue channel values in the bitmap must be premultiplied with the alpha channel value.        For example, if the alpha channel value is x, the red, green and blue channels must be multiplied by x and divided by 255 prior to the call.    False - Do not use the alpha channel (Default)."
        }]
    },
    "_WinAPI_AngleArc": {
        "documentation": "Draws a line segment and an arc",
        "label": "_WinAPI_AngleArc ( $hDC, $iX, $iY, $iRadius, $nStartAngle, $nSweepAngle )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in logical units, of the center of the circle."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical units, of the center of the circle."
        }, {
            "label": "$iRadius",
            "documentation": "The radius, in logical units, of the circle."
        }, {
            "label": "$nStartAngle",
            "documentation": "The start angle, in degrees, relative to the x-axis."
        }, {
            "label": "$nSweepAngle",
            "documentation": "The sweep angle, in degrees, relative to the starting angle."
        }]
    },
    "_WinAPI_AnimateWindow": {
        "documentation": "Enables you to produce special effects when showing or hiding windows",
        "label": "_WinAPI_AnimateWindow ( $hWnd, $iFlags [, $iDuration = 1000] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to animate."
        }, {
            "label": "$iFlags",
            "documentation": "The flags that specify the type of animation.This parameter can be one or more of the following values. Note that, by default, these flags take effect when showing a window.To take effect when hiding a window, use AW_HIDE and a logical OR operator with the appropriate flags:    $AW_ACTIVATE    $AW_BLEND    $AW_CENTER    $AW_HIDE    $AW_HOR_NEGATIVE    $AW_HOR_POSITIVE    $AW_SLIDE    $AW_VER_NEGATIVE    $AW_VER_POSITIVE"
        }, {
            "label": "$iDuration",
            "documentation": "**[optional]** Specifies how long it takes to play the animation, in milliseconds. Default is 1000."
        }]
    },
    "_WinAPI_Arc": {
        "documentation": "Draws an elliptical arc",
        "label": "_WinAPI_Arc ( $hDC, $tRECT, $iXStartArc, $iYStartArc, $iXEndArc, $iYEndArc )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the bounding rectangle."
        }, {
            "label": "$iXStartArc",
            "documentation": "The x-coordinate, in logical units, of the ending point of the radial line defining the starting point of the arc."
        }, {
            "label": "$iYStartArc",
            "documentation": "The y-coordinate, in logical units, of the ending point of the radial line defining the starting point of the arc."
        }, {
            "label": "$iXEndArc",
            "documentation": "The x-coordinate, in logical units, of the ending point of the radial line defining the ending point of the arc."
        }, {
            "label": "$iYEndArc",
            "documentation": "The y-coordinate, in logical units, of the ending point of the radial line defining the ending point of the arc."
        }]
    },
    "_WinAPI_ArcTo": {
        "documentation": "Draws an elliptical arc",
        "label": "_WinAPI_ArcTo ( $hDC, $tRECT, $iXRadial1, $iYRadial1, $iXRadial2, $iYRadial2 )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the bounding rectangle."
        }, {
            "label": "$iXRadial1",
            "documentation": "The x-coordinate, in logical units, of the endpoint of the radial defining the starting point of the arc."
        }, {
            "label": "$iYRadial1",
            "documentation": "The y-coordinate, in logical units, of the endpoint of the radial defining the starting point of the arc."
        }, {
            "label": "$iXRadial2",
            "documentation": "The x-coordinate, in logical units, of the endpoint of the radial defining the ending point of the arc."
        }, {
            "label": "$iYRadial2",
            "documentation": "The y-coordinate, in logical units, of the endpoint of the radial defining the ending point of the arc."
        }]
    },
    "_WinAPI_ArrayToStruct": {
        "documentation": "Converts an array of strings to the structure",
        "label": "_WinAPI_ArrayToStruct ( Const ByRef $aData [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$aData",
            "documentation": "The array to convert."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start converting at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop converting at."
        }]
    },
    "_WinAPI_AssignProcessToJobObject": {
        "documentation": "Assigns a process to an existing job object",
        "label": "_WinAPI_AssignProcessToJobObject ( $hJob, $hProcess )",
        "params": [{
            "label": "$hJob",
            "documentation": "Handle to the job object to which the process will be associated. The handle must have the$JOB_OBJECT_ASSIGN_PROCESS access right."
        }, {
            "label": "$hProcess",
            "documentation": "Handle to the process to associate with the job object. The process must not already be assigned to a job."
        }]
    },
    "_WinAPI_AssocGetPerceivedType": {
        "documentation": "Retrieves a file's perceived type based on its extension",
        "label": "_WinAPI_AssocGetPerceivedType ( $sExt )",
        "params": [{
            "label": "$sExt",
            "documentation": "The file's extension. This should include the leading period, for example \".txt\"."
        }]
    },
    "_WinAPI_AssocQueryString": {
        "documentation": "Searches for and retrieves a file or protocol association-related string from the registry",
        "label": "_WinAPI_AssocQueryString ( $sAssoc, $iType [, $iFlags = 0 [, $sExtra = '']] )",
        "params": [{
            "label": "$sAssoc",
            "documentation": "The string that is used to determine the root key. The following four types of strings can be used.The file name extension, such as \".txt\".The class identifier (CLSID) GUID in the standard \"{GUID}\" format.The application's ProgID, such as Word.Document.8.The name of an application's .exe file. The $ASSOCF_OPEN_BYEXENAME flag must be set."
        }, {
            "label": "$iType",
            "documentation": "The value that specifies the type of string that is to be returned. This parameter can be one of the following values:    $ASSOCSTR_COMMAND    $ASSOCSTR_EXECUTABLE    $ASSOCSTR_FRIENDLYDOCNAME    $ASSOCSTR_FRIENDLYAPPNAME    $ASSOCSTR_NOOPEN    $ASSOCSTR_SHELLNEWVALUE    $ASSOCSTR_DDECOMMAND    $ASSOCSTR_DDEIFEXEC    $ASSOCSTR_DDEAPPLICATION    $ASSOCSTR_DDETOPIC    $ASSOCSTR_INFOTIP    $ASSOCSTR_QUICKTIP    $ASSOCSTR_TILEINFO    $ASSOCSTR_CONTENTTYPE    $ASSOCSTR_DEFAULTICON    $ASSOCSTR_SHELLEXTENSION"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that can be used to control the search. It can be any combination of the following values, except that only one $ASSOCF_INIT_* value can be included.    $ASSOCF_INIT_NOREMAPCLSID    $ASSOCF_INIT_BYEXENAME    $ASSOCF_OPEN_BYEXENAME    $ASSOCF_INIT_DEFAULTTOSTAR    $ASSOCF_INIT_DEFAULTTOFOLDER    $ASSOCF_NOUSERSETTINGS    $ASSOCF_NOTRUNCATE    $ASSOCF_VERIFY    $ASSOCF_REMAPRUNDLL    $ASSOCF_NOFIXUPS    $ASSOCF_IGNOREBASECLASS    $ASSOCF_INIT_IGNOREUNKNOWN"
        }, {
            "label": "$sExtra",
            "documentation": "**[optional]** The string with additional information about the location of the string.It is typically set to a Shell verb such as open."
        }]
    },
    "_WinAPI_AttachConsole": {
        "documentation": "Attaches the calling process to the console of the specified process",
        "label": "_WinAPI_AttachConsole ( [$iPID = -1] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** Identifier of the process. Set to -1 to attach to the current process."
        }]
    },
    "_WinAPI_AttachThreadInput": {
        "documentation": "Attaches the input processing mechanism of one thread to that of another thread",
        "label": "_WinAPI_AttachThreadInput ( $iAttach, $iAttachTo, $bAttach )",
        "params": [{
            "label": "$iAttach",
            "documentation": "Identifier of the thread to be attached to another thread"
        }, {
            "label": "$iAttachTo",
            "documentation": "Identifier of the thread to be attached to"
        }, {
            "label": "$bAttach",
            "documentation": "Attachment mode:    True - The threads are attached    False - The threads are detached"
        }]
    },
    "_WinAPI_BackupRead": {
        "documentation": "Backs up a file or directory, including the security information",
        "label": "_WinAPI_BackupRead ( $hFile, $pBuffer, $iLength, ByRef $iBytes, ByRef $pContext [, $bSecurity = False] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file or directory to be backed up.To obtain the handle, call the _WinAPI_CreateFileEx() function.The SACLs are not read unless the file handle was created with the $ACCESS_SYSTEM_SECURITY access right."
        }, {
            "label": "$pBuffer",
            "documentation": "A pointer to a buffer that receives the data."
        }, {
            "label": "$iLength",
            "documentation": "The size of the buffer, in bytes.The buffer size must be greater than the size of the $tagWIN32_STREAM_ID structure.(see also MSDN for more information)"
        }, {
            "label": "$iBytes",
            "documentation": "The number of bytes read."
        }, {
            "label": "$pContext",
            "documentation": "A pointer to an internal data structure used by this function to maintain context information during a backup operation.You must set this variable to 0 before the first call to _WinAPI_BackupRead() for the specified file or directory.The function allocates memory for the data structure, and then sets the variable to point to that structure.You must not change this variable or the variable that it points to between calls to _WinAPI_BackupRead()."
        }, {
            "label": "$bSecurity",
            "documentation": "**[optional]** Specifies whether the function will backup the access-control list (ACL) data, valid values:    True - The ACL data will be backed up.    False - The ACL data will be omitted (Default)."
        }]
    },
    "_WinAPI_BackupReadAbort": {
        "documentation": "Finishes the use of _WinAPI_BackupRead() on the handle",
        "label": "_WinAPI_BackupReadAbort ( ByRef $pContext )",
        "params": [{
            "label": "$pContext",
            "documentation": "A pointer to an internal data structure used by _WinAPI_BackupRead() function to maintain context information during a backup operation."
        }]
    },
    "_WinAPI_BackupSeek": {
        "documentation": "Seeks forward in a data stream initially accessed by using the _WinAPI_BackupRead() or _WinAPI_BackupWrite() function",
        "label": "_WinAPI_BackupSeek ( $hFile, $iSeek, ByRef $iBytes, ByRef $pContext )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file or directory."
        }, {
            "label": "$iSeek",
            "documentation": "The number of bytes to seek."
        }, {
            "label": "$iBytes",
            "documentation": "The number of bytes the function actually seeks."
        }, {
            "label": "$pContext",
            "documentation": "A pointer to an internal data structure. This structure must be the same structure that was initialized by the _WinAPI_BackupRead().An application must not touch the contents of this structure."
        }]
    },
    "_WinAPI_BackupWrite": {
        "documentation": "Restore a file or directory that was backed up using _WinAPI_BackupRead()",
        "label": "_WinAPI_BackupWrite ( $hFile, $pBuffer, $iLength, ByRef $iBytes, ByRef $pContext [, $bSecurity = False] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file or directory to be restored. To obtain the handle, call the _WinAPI_CreateFileEx() function.The SACLs are not restored unless the file handle was created with the $ACCESS_SYSTEM_SECURITY access right.To ensure that the integrity ACEs are restored correctly, the file handle must also have been created with the $WRITE_OWNER access right."
        }, {
            "label": "$pBuffer",
            "documentation": "A pointer to a buffer that the function writes data from."
        }, {
            "label": "$iLength",
            "documentation": "The size of the buffer, in bytes. The buffer size must be greater than the size of the $tagWIN32_STREAM_ID structure.(see MSDN for more information)"
        }, {
            "label": "$iBytes",
            "documentation": "The number of bytes written."
        }, {
            "label": "$pContext",
            "documentation": "A pointer to an internal data structure used by this function to maintain context information during a restore operation.You must set this variable to 0 before the first call to _WinAPI_BackupWrite() for the specified file or directory.The function allocates memory for the data structure, and then sets the variable to point to that structure.You must not change this variable or the variable that it points to between calls to _WinAPI_BackupWrite()."
        }, {
            "label": "$bSecurity",
            "documentation": "**[optional]** Specifies whether the function will restore the access-control list (ACL) data, valid values:    True - The ACL data will be restored.        Furthermore, you need to specify $WRITE_OWNER and $WRITE_DAC access when opening the file or directory handle.        If the handle does not have those access rights, the operating system denies access to the ACL data, and ACL data restoration will not occur.    False - The ACL data will be omitted (Default)."
        }]
    },
    "_WinAPI_BackupWriteAbort": {
        "documentation": "Finishes the use of _WinAPI_BackupWrite() on the handle",
        "label": "_WinAPI_BackupWriteAbort ( ByRef $pContext )",
        "params": [{
            "label": "$pContext",
            "documentation": "A pointer to an internal data structure used by _WinAPI_BackupWrite() function to maintain context information during a restore operation."
        }]
    },
    "_WinAPI_Beep": {
        "documentation": "Generates simple tones on the speaker",
        "label": "_WinAPI_Beep ( [$iFreq = 500 [, $iDuration = 1000]] )",
        "params": [{
            "label": "$iFreq",
            "documentation": "**[optional]** The frequency of the sound, in hertz. This parameter must be in the range 37 through 32,767."
        }, {
            "label": "$iDuration",
            "documentation": "**[optional]** The duration of the sound, in milliseconds. Windows Me/98/95: This parameter is ignored."
        }]
    },
    "_WinAPI_BeginDeferWindowPos": {
        "documentation": "Allocates memory for a multiple-window-position structure",
        "label": "_WinAPI_BeginDeferWindowPos ( [$iAmount = 1] )",
        "params": [{
            "label": "$iAmount",
            "documentation": "**[optional]** The initial number of windows for which to store position information. Default is 1."
        }]
    },
    "_WinAPI_BeginPaint": {
        "documentation": "Prepares the specified window for painting",
        "label": "_WinAPI_BeginPaint ( $hWnd, ByRef $tPAINTSTRUCT )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be repainted."
        }, {
            "label": "$tPAINTSTRUCT",
            "documentation": "$tagPAINTSTRUCT structure that will receive painting information.When the function call, this parameter should be any valid variable, the function creates this structure itself."
        }]
    },
    "_WinAPI_BeginPath": {
        "documentation": "Opens a path bracket in the specified device context",
        "label": "_WinAPI_BeginPath ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_BeginUpdateResource": {
        "documentation": "Retrieves a handle that can be used to add, delete, or replace resources in a binary module",
        "label": "_WinAPI_BeginUpdateResource ( $sFilePath [, $bDelete = False] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The binary file in which to update resources.An application must be able to obtain write-access to this file; the file referenced by $sFilePath cannot be currently executing."
        }, {
            "label": "$bDelete",
            "documentation": "**[optional]** Specifies whether to delete existing resources, valid values:True- The resources are deleted and the updated file includes only resources added with the _WinAPI_UpdateResource().False - The updated file includes existing resources (Default)."
        }]
    },
    "_WinAPI_BitBlt": {
        "documentation": "Performs a bit-block transfer of color data",
        "label": "_WinAPI_BitBlt ( $hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $iROP )",
        "params": [{
            "label": "$hDestDC",
            "documentation": "Handle to the destination device context"
        }, {
            "label": "$iXDest",
            "documentation": "X value of the upper-left corner of the destination rectangle"
        }, {
            "label": "$iYDest",
            "documentation": "Y value of the upper-left corner of the destination rectangle"
        }, {
            "label": "$iWidth",
            "documentation": "Width of the source and destination rectangles"
        }, {
            "label": "$iHeight",
            "documentation": "Height of the source and destination rectangles"
        }, {
            "label": "$hSrcDC",
            "documentation": "Handle to the source device context"
        }, {
            "label": "$iXSrc",
            "documentation": "X value of the upper-left corner of the source rectangle"
        }, {
            "label": "$iYSrc",
            "documentation": "Y value of the upper-left corner of the source rectangle"
        }, {
            "label": "$iROP",
            "documentation": "Specifies a raster operation code. These codes define how the color data for the source rectangle is to be combined with the color data for the destination rectangle to achieve the final color:$BLACKNESS - Fills the destination rectangle using the color associated with palette index 0$CAPTUREBLT - Includes any window that are layered on top of your window in the resulting image$DSTINVERT - Inverts the destination rectangle$MERGECOPY - Merges the color of the source rectangle with the brush currently selected in hDest, by using the AND operator.$MERGEPAINT - Merges the color of the inverted source rectangle with the colors of the destination rectangle by using the OR operator.$NOMIRRORBITMAP - Prevents the bitmap from being mirrored$NOTSRCCOPY - Copies the inverted source rectangle to the destination$NOTSRCERASE - Combines the colors of the source and destination rectangles by using the OR operator and then inverts the resultant color.$PATCOPY - Copies the brush selected in hdcDest, into the destination bitmap$PATINVERT - Combines the colors of the brush currently selected in hDest, with the colors of the destination rectangle by using the XOR operator.$PATPAINT - Combines the colors of the brush currently selected in hDest, with the colors of the inverted source rectangle by using the OR operator. The result of this operation is combined with the color of the destination rectangle by using the OR operator.$SRCAND - Combines the colors of the source and destination rectangles by using the AND operator$SRCCOPY - Copies the source rectangle directly to the destination rectangle$SRCERASE - Combines the inverted color of the destination rectangle with the colors of the source rectangle by using the AND operator.$SRCINVERT - Combines the colors of the source and destination rectangles by using the XOR operator$SRCPAINT - Combines the colors of the source and destination rectangles by using the OR operator$WHITENESS - Fills the destination rectangle using the color associated with index 1 in the physical palette."
        }]
    },
    "_WinAPI_BringWindowToTop": {
        "documentation": "Brings the specified window to the top of the Z order",
        "label": "_WinAPI_BringWindowToTop ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to bring to the top of the Z order."
        }]
    },
    "_WinAPI_BroadcastSystemMessage": {
        "documentation": "Sends a message to the specified recipients",
        "label": "_WinAPI_BroadcastSystemMessage ( $iMsg [, $wParam = 0 [, $lParam = 0 [, $iFlags = 0 [, $iRecipients = 0]]]] )",
        "params": [{
            "label": "$iMsg",
            "documentation": "The message to be sent."
        }, {
            "label": "$wParam",
            "documentation": "**[optional]** The message-specific information."
        }, {
            "label": "$lParam",
            "documentation": "**[optional]** The message-specific information."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The broadcast option. This parameter can be one or more of the following values:    $BSF_ALLOWSFW    $BSF_FLUSHDISK    $BSF_FORCEIFHUNG    $BSF_IGNORECURRENTTASK    $BSF_NOHANG    $BSF_NOTIMEOUTIFNOTHUNG    $BSF_POSTMESSAGE    $BSF_QUERY    $BSF_SENDNOTIFYMESSAGE"
        }, {
            "label": "$iRecipients",
            "documentation": "**[optional]** The recipients of the message. This parameter can be one or more of the following values:    $BSM_ALLCOMPONENTS (Default)    $BSM_ALLDESKTOPS    $BSM_APPLICATIONS    $BSM_INSTALLABLEDRIVERS    $BSM_NETDRIVER    $BSM_VXDS"
        }]
    },
    "_WinAPI_BrowseForFolderDlg": {
        "documentation": "Displays a dialog box that enables the user to select a Shell folder",
        "label": "_WinAPI_BrowseForFolderDlg ( [$sRoot = '' [, $sText = '' [, $iFlags = 0 [, $pBrowseProc = 0 [, $lParam = 0 [, $hParent = 0]]]]]] )",
        "params": [{
            "label": "$sRoot",
            "documentation": "**[optional]** The root folder from which to start browsing.Only the specified folder and its subfolders in the namespace hierarchy appear in the dialog box.If this parameter is 0, the namespace root (the Desktop folder) is used."
        }, {
            "label": "$sText",
            "documentation": "**[optional]** The string that is displayed above the tree view control in the dialog box."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Flags that specify the options for the dialog box. This parameter can a combination of the following values:    $BIF_BROWSEFORCOMPUTER    $BIF_BROWSEFORPRINTER    $BIF_BROWSEINCLUDEFILES    $BIF_BROWSEINCLUDEURLS    $BIF_DONTGOBELOWDOMAIN    $BIF_EDITBOX    $BIF_NEWDIALOGSTYLE    $BIF_NONEWFOLDERBUTTON    $BIF_NOTRANSLATETARGETS    $BIF_RETURNFSANCESTORS    $BIF_RETURNONLYFSDIRS    $BIF_SHAREABLE    $BIF_STATUSTEXT    $BIF_USENEWUI    $BIF_UAHINT    $BIF_VALIDATEWindows 7 or later    $BIF_BROWSEFILEJUNCTIONS"
        }, {
            "label": "$pBrowseProc",
            "documentation": "**[optional]** Pointer to a callback function that the dialog box calls when an event occurs.This function will receive one of the following event messages:    $BFFM_INITIALIZED    $BFFM_IUNKNOWN    $BFFM_SELCHANGED    $BFFM_VALIDATEFAILED(See MSDN for more information)"
        }, {
            "label": "$lParam",
            "documentation": "**[optional]** The value that the dialog box passes to the callback function."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to the parent window for the dialog box."
        }]
    },
    "_WinAPI_CallNextHookEx": {
        "documentation": "Passes the hook information to the next hook procedure in the current hook chain",
        "label": "_WinAPI_CallNextHookEx ( $hHook, $iCode, $wParam, $lParam )",
        "params": [{
            "label": "$hHook",
            "documentation": "Parameter ignored."
        }, {
            "label": "$iCode",
            "documentation": "Specifies the hook code passed to the current hook procedure. The next hook procedure uses this code to determine how to process the hook information"
        }, {
            "label": "$wParam",
            "documentation": "Specifies the wParam value passed to the current hook procedure.The meaning of this parameter depends on the type of hook associated with the current hook chain"
        }, {
            "label": "$lParam",
            "documentation": "Specifies the lParam value passed to the current hook procedure.The meaning of this parameter depends on the type of hook associated with the current hook chain"
        }]
    },
    "_WinAPI_CallWindowProc": {
        "documentation": "Passes the hook information to the next hook procedure in the current hook chain",
        "label": "_WinAPI_CallWindowProc ( $pPrevWndFunc, $hWnd, $iMsg, $wParam, $lParam )",
        "params": [{
            "label": "$pPrevWndFunc",
            "documentation": "Pointer to the previous window procedure.If this value is obtained by calling the _WinAPI_GetWindowLong() function with the $iIndex parameter set to $GWL_WNDPROC or $DWL_DLGPROC, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to _WinAPI_CallWindowProc()."
        }, {
            "label": "$hWnd",
            "documentation": "Handle to the window procedure to receive the message"
        }, {
            "label": "$iMsg",
            "documentation": "Specifies the message"
        }, {
            "label": "$wParam",
            "documentation": "Specifies additional message-specific information. The contents of this parameter depend on the value of the Msg parameter"
        }, {
            "label": "$lParam",
            "documentation": "Specifies additional message-specific information. The contents of this parameter depend on the value of the Msg parameter"
        }]
    },
    "_WinAPI_CallWindowProcW": {
        "documentation": "Passes message information to the specified window procedure",
        "label": "_WinAPI_CallWindowProcW ( $pPrevWndProc, $hWnd, $iMsg, $wParam, $lParam )",
        "params": [{
            "label": "$pPrevWndProc",
            "documentation": "The address of a previous window procedure, or a special internal value meaningful only to _WinAPI_CallWindowProcW() function."
        }, {
            "label": "$hWnd",
            "documentation": "A handle to the window procedure that received the message."
        }, {
            "label": "$iMsg",
            "documentation": "The message."
        }, {
            "label": "$wParam",
            "documentation": "Additional message-specific information. The content of this parameter depends on the message."
        }, {
            "label": "$lParam",
            "documentation": "Additional message-specific information. The content of this parameter depends on the message."
        }]
    },
    "_WinAPI_CascadeWindows": {
        "documentation": "Cascades the specified child windows of the specified parent window",
        "label": "_WinAPI_CascadeWindows ( $aWnds [, $tRECT = 0 [, $hParent = 0 [, $iFlags = 0 [, $iStart = 0 [, $iEnd = -1]]]]] )",
        "params": [{
            "label": "$aWnds",
            "documentation": "The array of handles to the child windows to arrange.If a specified child window is a top-level window with the style $WS_EX_TOPMOST or $WS_EX_TOOLWINDOW, the child window is not arranged.If this parameter is 0, all child windows of the specified parent window (or of the desktop window) are arranged."
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** $tagRECT structure that specifies the rectangular area, in client coordinates, within which the windows are arranged.This parameter can be 0 (Default), in which case the client area of the parent window is used."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to the parent window. If this parameter is 0 (Default), the desktop window is assumed."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** A cascade flag. This parameter can be one or more of the following values:    $MDITILE_SKIPDISABLED    $MDITILE_ZORDER"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start arranging at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop arranging at."
        }]
    },
    "_WinAPI_ChangeWindowMessageFilterEx": {
        "documentation": "Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window",
        "label": "_WinAPI_ChangeWindowMessageFilterEx ( $hWnd, $iMsg, $iAction )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose UIPI message filter is to be modified.If this parameter is 0, the UIPI message filter will be modified in a process-wide manner.Moreover, under Windows Vista this parameter is not used and should be set to 0."
        }, {
            "label": "$iMsg",
            "documentation": "The message that the message filter allows through or blocks."
        }, {
            "label": "$iAction",
            "documentation": "The action to be performed. This parameter can be one of the following values:    $MSGFLT_ALLOW    $MSGFLT_DISALLOWWindows 7 or later    $MSGFLT_RESET"
        }]
    },
    "_WinAPI_CharToOem": {
        "documentation": "Converts a string into the OEM-defined character set",
        "label": "_WinAPI_CharToOem ( $sStr )",
        "params": [{
            "label": "$sStr",
            "documentation": "The string that must be converted."
        }]
    },
    "_WinAPI_ChildWindowFromPointEx": {
        "documentation": "Determines which, if any, of the child windows belonging to the specified parent window contains the specified point",
        "label": "_WinAPI_ChildWindowFromPointEx ( $hWnd, $tPOINT [, $iFlags = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the parent window."
        }, {
            "label": "$tPOINT",
            "documentation": "$tagPOINT structure that defines the client coordinates (relative to hwndParent) of the point to be checked."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify which child windows to skip. This parameter can be one or more of the following values:    $CWP_ALL (Default)    $CWP_SKIPINVISIBLE    $CWP_SKIPDISABLED    $CWP_SKIPTRANSPARENT"
        }]
    },
    "_WinAPI_ClientToScreen": {
        "documentation": "Converts the client coordinates of a specified point to screen coordinates",
        "label": "_WinAPI_ClientToScreen ( $hWnd, ByRef $tPoint )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Identifies the window that will be used for the conversion"
        }, {
            "label": "$tPoint",
            "documentation": "$tagPOINT structure that contains the client coordinates to be converted"
        }]
    },
    "_WinAPI_ClipCursor": {
        "documentation": "Confines the cursor to a rectangular area on the screen",
        "label": "_WinAPI_ClipCursor ( $tRECT )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the screen coordinates of the confining rectangle.If this parameter is 0, the cursor is free to move anywhere on the screen."
        }]
    },
    "_WinAPI_CloseDesktop": {
        "documentation": "Closes an open handle to a desktop object",
        "label": "_WinAPI_CloseDesktop ( $hDesktop )",
        "params": [{
            "label": "$hDesktop",
            "documentation": "Handle to the desktop to be closed."
        }]
    },
    "_WinAPI_CloseEnhMetaFile": {
        "documentation": "Closes an enhanced-metafile device context and returns a handle that identifies an enhanced-format metafile",
        "label": "_WinAPI_CloseEnhMetaFile ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to an enhanced-metafile device context."
        }]
    },
    "_WinAPI_CloseFigure": {
        "documentation": "Closes an open figure in a path",
        "label": "_WinAPI_CloseFigure ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context in which the figure will be closed."
        }]
    },
    "_WinAPI_CloseHandle": {
        "documentation": "Closes an open object handle",
        "label": "_WinAPI_CloseHandle ( $hObject )",
        "params": [{
            "label": "$hObject",
            "documentation": "Handle of object to close"
        }]
    },
    "_WinAPI_CloseWindow": {
        "documentation": "Minimizes (but does not destroy) the specified window",
        "label": "_WinAPI_CloseWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be minimized."
        }]
    },
    "_WinAPI_CloseWindowStation": {
        "documentation": "Closes an open window station handle",
        "label": "_WinAPI_CloseWindowStation ( $hStation )",
        "params": [{
            "label": "$hStation",
            "documentation": "Handle to the window station to be closed."
        }]
    },
    "_WinAPI_CLSIDFromProgID": {
        "documentation": "Looks up a CLSID in the registry, given a ProgID",
        "label": "_WinAPI_CLSIDFromProgID ( $sProgID )",
        "params": [{
            "label": "$sProgID",
            "documentation": "The string containing the ProgID whose CLSID is requested."
        }]
    },
    "_WinAPI_CoInitialize": {
        "documentation": "Initializes the COM library for use by the calling process",
        "label": "_WinAPI_CoInitialize ( [$iFlags = 0] )",
        "params": [{
            "label": "$iFlags",
            "documentation": "**[optional]** This parameter can be one or more of the following values.    $COINIT_APARTMENTTHREADED    $COINIT_DISABLE_OLE1DDE    $COINIT_MULTITHREADED (Default)    $COINIT_SPEED_OVER_MEMORY"
        }]
    },
    "_WinAPI_ColorAdjustLuma": {
        "documentation": "Changes the luminance of a RGB value",
        "label": "_WinAPI_ColorAdjustLuma ( $iRGB, $iPercent [, $bScale = True] )",
        "params": [{
            "label": "$iRGB",
            "documentation": "The initial RGB value."
        }, {
            "label": "$iPercent",
            "documentation": "The luminance of the total range, in percent, or absolute luminance."
        }, {
            "label": "$bScale",
            "documentation": "**[optional]** Specifies how to use the $iPercent parameter, valid values:    True - The $iPercent specifies how much to increment or decrement the current luminance, $iPercent can range from -1000 to +1000.    False - The $iPercent specifies the absolute luminance, $iPercent can range 0 to 1000. Available luminance values range from 0 to a maximum. If the requested value is negative or exceeds the maximum, the luminance will be set to either zero or the maximum value, respectively.        Default is True."
        }]
    },
    "_WinAPI_ColorHLSToRGB": {
        "documentation": "Converts colors from hue-luminance-saturation (HLS) to RGB format",
        "label": "_WinAPI_ColorHLSToRGB ( $iHue, $iLuminance, $iSaturation )",
        "params": [{
            "label": "$iHue",
            "documentation": "HLS hue value."
        }, {
            "label": "$iLuminance",
            "documentation": "HLS luminance value."
        }, {
            "label": "$iSaturation",
            "documentation": "HLS saturation value."
        }]
    },
    "_WinAPI_ColorRGBToHLS": {
        "documentation": "Converts colors from RGB to hue-luminance-saturation (HLS) format",
        "label": "_WinAPI_ColorRGBToHLS ( $iRGB, ByRef $iHue, ByRef $iLuminance, ByRef $iSaturation )",
        "params": [{
            "label": "$iRGB",
            "documentation": "RGB color."
        }, {
            "label": "$iHue",
            "documentation": "Returns HLS hue value."
        }, {
            "label": "$iLuminance",
            "documentation": "Returns HLS luminance value."
        }, {
            "label": "$iSaturation",
            "documentation": "Returns HLS saturation value."
        }]
    },
    "_WinAPI_CombineRgn": {
        "documentation": "Combines two regions and stores the result in a third region",
        "label": "_WinAPI_CombineRgn ( $hRgnDest, $hRgnSrc1, $hRgnSrc2, $iCombineMode )",
        "params": [{
            "label": "$hRgnDest",
            "documentation": "Handle to a new region with dimensions defined by combining two other regions. (This region must exist before CombineRgn is called.)"
        }, {
            "label": "$hRgnSrc1",
            "documentation": "Handle to the first of two regions to be combined."
        }, {
            "label": "$hRgnSrc2",
            "documentation": "Handle to the second of two regions to be combined."
        }, {
            "label": "$iCombineMode",
            "documentation": "Specifies a mode indicating how the two regions will be combined. This parameter can be one of the following values.$RGN_AND - Creates the intersection of the two combined regions.$RGN_COPY - Creates a copy of the region identified by $hRgnSrc1.$RGN_DIFF - Combines the parts of $hRgnSrc1 that are not part of $hRgnSrc2.$RGN_OR - Creates the union of two combined regions.$RGN_XOR - Creates the union of two combined regions except for any overlapping areas."
        }]
    },
    "_WinAPI_CombineTransform": {
        "documentation": "Concatenates two world-space to page-space transformations",
        "label": "_WinAPI_CombineTransform ( $tXFORM1, $tXFORM2 )",
        "params": [{
            "label": "$tXFORM1",
            "documentation": "$tagXFORM structure that specifies the first transformation."
        }, {
            "label": "$tXFORM2",
            "documentation": "$tagXFORM structure that specifies the second transformation."
        }]
    },
    "_WinAPI_CommandLineToArgv": {
        "documentation": "Parses a command-line string and returns an array of the command-line arguments",
        "label": "_WinAPI_CommandLineToArgv ( $sCmd )",
        "params": [{
            "label": "$sCmd",
            "documentation": "The string that contains the full command line. If this parameter is an empty string the function returns an empty array (zeroth element is 0)."
        }]
    },
    "_WinAPI_CommDlgExtendedError": {
        "documentation": "Returns a common dialog box error string. This string indicates the most recent error to occur during the execution of one of the common dialog box functions",
        "label": "_WinAPI_CommDlgExtendedError (  )",
        "params": []
    },
    "_WinAPI_CommDlgExtendedErrorEx": {
        "documentation": "Returns a common dialog box error code",
        "label": "_WinAPI_CommDlgExtendedErrorEx (  )",
        "params": []
    },
    "_WinAPI_CompareString": {
        "documentation": "Compares two character strings for a specified locale",
        "label": "_WinAPI_CompareString ( $iLCID, $sString1, $sString2 [, $iFlags = 0] )",
        "params": [{
            "label": "$iLCID",
            "documentation": "The locale identifier (LCID) that specifies the locale or one of the following predefined values:    $LOCALE_INVARIANT    $LOCALE_SYSTEM_DEFAULT    $LOCALE_USER_DEFAULTWindows Vista or later    $LOCALE_CUSTOM_DEFAULT    $LOCALE_CUSTOM_UI_DEFAULT    $LOCALE_CUSTOM_UNSPECIFIED"
        }, {
            "label": "$sString1",
            "documentation": "The first string to compare."
        }, {
            "label": "$sString2",
            "documentation": "The second string to compare."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that indicate how the function compares the two strings. This parameter can be 0 or combination of the following values:    $LINGUISTIC_IGNORECASE    $LINGUISTIC_IGNOREDIACRITIC    $NORM_IGNORECASE    $NORM_IGNOREKANATYPE    $NORM_IGNORENONSPACE    $NORM_IGNORESYMBOLS    $NORM_IGNOREWIDTH    $NORM_LINGUISTIC_CASING    $SORT_STRINGSORTWindows 7 or later    $SORT_DIGITSASNUMBERS"
        }]
    },
    "_WinAPI_CompressBitmapBits": {
        "documentation": "Creates a compressed data block from the specified bitmap",
        "label": "_WinAPI_CompressBitmapBits ( $hBitmap, ByRef $pBuffer [, $iCompression = 0 [, $iQuality = 100]] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "A handle to the bitmap to be compressed."
        }, {
            "label": "$pBuffer",
            "documentation": "A pointer to a memory block (buffer) that receives the compressed data. Optionaly, you can set this parameter to 0 before function call, then the function will allocate the required memory block itself.Otherwise, it must be a valid memory pointer returned by the _WinAPI_CreateBuffer() function, or by previously calling this function."
        }, {
            "label": "$iCompression",
            "documentation": "**[optional]** The compression method. This parameter can be one of the following values.    $COMPRESSION_BITMAP_PNG (Default)    $COMPRESSION_BITMAP_JPEG"
        }, {
            "label": "$iQuality",
            "documentation": "**[optional]** The quality of JPEG image, in percent. This value is ignored for non JPEG compression. Default is 100."
        }]
    },
    "_WinAPI_CompressBuffer": {
        "documentation": "Compresses a buffer with specified compression format and engine type",
        "label": "_WinAPI_CompressBuffer ( $pUncompressedBuffer, $iUncompressedSize, $pCompressedBuffer, $iCompressedSize [, $iFormatAndEngine = 0x0002] )",
        "params": [{
            "label": "$pUncompressedBuffer",
            "documentation": "A pointer to a caller-allocated buffer that contains the data to be compressed."
        }, {
            "label": "$iUncompressedSize",
            "documentation": "The size of the uncompressed buffer, in bytes."
        }, {
            "label": "$pCompressedBuffer",
            "documentation": "A pointer to a caller-allocated buffer that receives the compressed data."
        }, {
            "label": "$iCompressedSize",
            "documentation": "The size of the compressed buffer, in bytes."
        }, {
            "label": "$iFormatAndEngine",
            "documentation": "**[optional]** A bitmask that specifies the compression format and engine type.This parameter must be set to a valid bitwise OR combination of one format type and one engine type.    $COMPRESSION_FORMAT_LZNT1 (Default)    $COMPRESSION_FORMAT_XPRESS    $COMPRESSION_FORMAT_XPRESS_HUFF    $COMPRESSION_ENGINE_STANDARD (Default)    $COMPRESSION_ENGINE_MAXIMUM"
        }]
    },
    "_WinAPI_ComputeCrc32": {
        "documentation": "Calculates the CRC32 checksum of a block of memory",
        "label": "_WinAPI_ComputeCrc32 ( $pMemory, $iLength )",
        "params": [{
            "label": "$pMemory",
            "documentation": "A pointer to the memory block to calculate the checksum."
        }, {
            "label": "$iLength",
            "documentation": "The number of bytes to be calculated."
        }]
    },
    "_WinAPI_ConfirmCredentials": {
        "documentation": "Confirms the validity of the credential harvested",
        "label": "_WinAPI_ConfirmCredentials ( $sTarget, $bConfirm )",
        "params": [{
            "label": "$sTarget",
            "documentation": "The string that contains the name of the target for the credentials, typically a domain or server name.This must be the same value passed to _WinAPI_ShellUserAuthenticationDlg() function."
        }, {
            "label": "$bConfirm",
            "documentation": "Specifies whether the credentials returned from the prompt function are valid, valid values:    True - The credentials are stored in the credential manager.    False - The credentials are not stored and various pieces of memory are cleaned up."
        }]
    },
    "_WinAPI_CopyBitmap": {
        "documentation": "Creates a duplicate of a specified bitmap with a device-independent bitmap (DIB) section",
        "label": "_WinAPI_CopyBitmap ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap to be duplicated."
        }]
    },
    "_WinAPI_CopyCursor": {
        "documentation": "Creates a duplicate of a specified cursor",
        "label": "_WinAPI_CopyCursor ( $hCursor )",
        "params": [{
            "label": "$hCursor",
            "documentation": "Handle to the cursor to be duplicated."
        }]
    },
    "_WinAPI_CopyEnhMetaFile": {
        "documentation": "Copies the contents of an enhanced-format metafile to a specified file",
        "label": "_WinAPI_CopyEnhMetaFile ( $hEmf [, $sFilePath = ''] )",
        "params": [{
            "label": "$hEmf",
            "documentation": "Handle to the enhanced metafile to be copied."
        }, {
            "label": "$sFilePath",
            "documentation": "**[optional]** The name of the destination file (.emf). If this parameter is '' (Default), the source metafile is copied to memory."
        }]
    },
    "_WinAPI_CopyFileEx": {
        "documentation": "Copies an existing file to a new file, notifying the application of its progress through a callback function",
        "label": "_WinAPI_CopyFileEx ( $sExistingFile, $sNewFile [, $iFlags = 0 [, $pProgressProc = 0 [, $pData = 0]]] )",
        "params": [{
            "label": "$sExistingFile",
            "documentation": "The name of an existing file."
        }, {
            "label": "$sNewFile",
            "documentation": "The name of the new file."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify how the file is to be copied. This parameter can be a combination of the following values:    $COPY_FILE_ALLOW_DECRYPTED_DESTINATION (0x0008)    $COPY_FILE_COPY_SYMLINK (0x0800)    $COPY_FILE_FAIL_IF_EXISTS (0x0001)    $COPY_FILE_NO_BUFFERING (0x1000)    $COPY_FILE_OPEN_SOURCE_FOR_WRITE (0x0004)    $COPY_FILE_RESTARTABLE (0x0002)"
        }, {
            "label": "$pProgressProc",
            "documentation": "**[optional]** The address of a callback function that is called each time another portion of the file has been copied.(See MSDN for more information)"
        }, {
            "label": "$pData",
            "documentation": "**[optional]** pointer to an argument to be passed to the callback function. Can be NULL."
        }]
    },
    "_WinAPI_CopyIcon": {
        "documentation": "Copies the specified icon from another module",
        "label": "_WinAPI_CopyIcon ( $hIcon )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the icon to be copied"
        }]
    },
    "_WinAPI_CopyImage": {
        "documentation": "Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one",
        "label": "_WinAPI_CopyImage ( $hImage [, $iType = 0 [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] )",
        "params": [{
            "label": "$hImage",
            "documentation": "Handle to the image to be copied."
        }, {
            "label": "$iType",
            "documentation": "**[optional]** Specifies the type of image to be copied. This parameter can be one of the following values:    $IMAGE_BITMAP 'Default)    $IMAGE_CURSOR    $IMAGE_ICON"
        }, {
            "label": "$iXDesiredPixels",
            "documentation": "**[optional]** Specifies the desired width, in pixels, of the image. If this is zero (Default), then the returned image will have the same width as the original $hImage."
        }, {
            "label": "$iYDesiredPixels",
            "documentation": "**[optional]** Specifies the desired height, in pixels, of the image. If this is zero (Default), then the returned image will have the same height as the original $hImage."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** This parameter can be one or more of the following values.$LR_DEFAULTCOLOR (Default)$LR_COPYDELETEORG$LR_COPYFROMRESOURCE$LR_COPYRETURNORG$LR_CREATEDIBSECTION$LR_DEFAULTSIZE$LR_MONOCHROME"
        }]
    },
    "_WinAPI_CopyRect": {
        "documentation": "Copies the coordinates of one rectangle to another",
        "label": "_WinAPI_CopyRect ( $tRECT )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure whose coordinates are to be copied in logical units."
        }]
    },
    "_WinAPI_CopyStruct": {
        "documentation": "Creates a duplicate of a specified structure",
        "label": "_WinAPI_CopyStruct ( $tStruct [, $sStruct = ''] )",
        "params": [{
            "label": "$tStruct",
            "documentation": "The structure to be duplicated."
        }, {
            "label": "$sStruct",
            "documentation": "**[optional]** The string representing the structure (same as for the DllStructCreate() function)."
        }]
    },
    "_WinAPI_CoTaskMemAlloc": {
        "documentation": "Allocates a block of task memory",
        "label": "_WinAPI_CoTaskMemAlloc ( $iSize )",
        "params": [{
            "label": "$iSize",
            "documentation": "The size of the memory block to be allocated, in bytes."
        }]
    },
    "_WinAPI_CoTaskMemFree": {
        "documentation": "Frees a block of task memory",
        "label": "_WinAPI_CoTaskMemFree ( $pMemory )",
        "params": [{
            "label": "$pMemory",
            "documentation": "The pointer to the memory block to be freed."
        }]
    },
    "_WinAPI_CoTaskMemRealloc": {
        "documentation": "Changes the size of a previously allocated block of task memory",
        "label": "_WinAPI_CoTaskMemRealloc ( $pMemory, $iSize )",
        "params": [{
            "label": "$pMemory",
            "documentation": "The pointer to the memory block to be reallocated."
        }, {
            "label": "$iSize",
            "documentation": "The size of the memory block to be reallocated, in bytes."
        }]
    },
    "_WinAPI_CoUninitialize": {
        "documentation": "Closes the COM library on the current process",
        "label": "_WinAPI_CoUninitialize (  )",
        "params": []
    },
    "_WinAPI_Create32BitHBITMAP": {
        "documentation": "Creates a 32 bits-per-pixel bitmap from the specified icon",
        "label": "_WinAPI_Create32BitHBITMAP ( $hIcon [, $bDib = False [, $bDelete = False]] )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the source icon."
        }, {
            "label": "$bDib",
            "documentation": "**[optional]** Specifies whether to create device-independent (DIB) or device-dependent (DDB) bitmap, valid values: True - Creates DIB.False - Creates DDB (Default)."
        }, {
            "label": "$bDelete",
            "documentation": "**[optional]** Specifies whether to delete the icon after the function is successful, valid values:    True - Icon will be deleted if the function succeeds.    False - Do not delete, you must release the icon when you are finished using it (Default)."
        }]
    },
    "_WinAPI_Create32BitHICON": {
        "documentation": "Converts an icon to a 32 bits-per-pixel format and copies to the new icon",
        "label": "_WinAPI_Create32BitHICON ( $hIcon [, $bDelete = False] )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the icon to be converted."
        }, {
            "label": "$bDelete",
            "documentation": "**[optional]** Specifies whether to delete the icon after the function is successful, valid values:    True - Icon will be deleted if the function succeeds.    False - Do not delete, you must release the icon themselves when you are finished using it (Default)."
        }]
    },
    "_WinAPI_CreateANDBitmap": {
        "documentation": "Creates AND bitmask device-independent bitmap (DIB) from the specified bitmap",
        "label": "_WinAPI_CreateANDBitmap ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap from which to create AND bitmask DIB."
        }]
    },
    "_WinAPI_CreateBitmap": {
        "documentation": "Creates a bitmap with the specified width, height, and color format",
        "label": "_WinAPI_CreateBitmap ( $iWidth, $iHeight [, $iPlanes = 1 [, $iBitsPerPel = 1 [, $pBits = 0]]] )",
        "params": [{
            "label": "$iWidth",
            "documentation": "Specifies the bitmap width, in pixels"
        }, {
            "label": "$iHeight",
            "documentation": "Specifies the bitmap height, in pixels"
        }, {
            "label": "$iPlanes",
            "documentation": "**[optional]** Specifies the number of color planes used by the device"
        }, {
            "label": "$iBitsPerPel",
            "documentation": "**[optional]** Specifies the number of bits required to identify the color of a single pixel"
        }, {
            "label": "$pBits",
            "documentation": "**[optional]** Pointer to an array of color data used to set the colors in a rectangle of pixels.Each scan line in the rectangle must be word aligned (scan lines that are not word aligned must be padded with zeros).If this parameter is 0, the contents of the new bitmap is undefined."
        }]
    },
    "_WinAPI_CreateBitmapIndirect": {
        "documentation": "Creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel)",
        "label": "_WinAPI_CreateBitmapIndirect ( $tBITMAP )",
        "params": [{
            "label": "$tBITMAP",
            "documentation": "$tagBITMAP structure that contains information about the bitmap.If an application sets the \"bmWidth\" or \"bmHeight\" members to zero, _WinAPI_CreateBitmapIndirect() returns the handle to a 1-by-1 pixel, monochrome bitmap."
        }]
    },
    "_WinAPI_CreateBrushIndirect": {
        "documentation": "Creates a logical brush that has the specified style, color, and pattern",
        "label": "_WinAPI_CreateBrushIndirect ( $iStyle, $iRGB [, $iHatch = 0] )",
        "params": [{
            "label": "$iStyle",
            "documentation": "The brush style. This parameter can be one of the following styles:    $BS_DIBPATTERN    $BS_DIBPATTERN8X8    $BS_DIBPATTERNPT    $BS_HATCHED    $BS_HOLLOW    $BS_NULL    $BS_PATTERN    $BS_PATTERN8X8    $BS_SOLID"
        }, {
            "label": "$iRGB",
            "documentation": "The color of a brush, in RGB, or one of the following values.    $DIB_PAL_COLORS    $DIB_RGB_COLORS"
        }, {
            "label": "$iHatch",
            "documentation": "**[optional]** A hatch style. The meaning depends on the brush style defined by $iStyle parameter.$BS_DIBPATTERNContains a handle to a packed DIB.$BS_DIBPATTERNPTContains a pointer to a packed DIB.$BS_HATCHEDSpecifies the orientation of the lines used to create the hatch. It can be one of the orientation constants ($HS_*).$BS_PATTERNContains a handle to the bitmap that defines the pattern. The bitmap cannot be a DIB section bitmap.$BS_HOLLOW$BS_SOLID (Default)Ignored."
        }]
    },
    "_WinAPI_CreateBuffer": {
        "documentation": "Allocates a block of memory from the internal library heap",
        "label": "_WinAPI_CreateBuffer ( $iLength [, $pBuffer = 0 [, $bAbort = True]] )",
        "params": [{
            "label": "$iLength",
            "documentation": "The required buffer length, in bytes."
        }, {
            "label": "$pBuffer",
            "documentation": "**[optional]** A pointer to the existing buffer that to be replaced by a new buffer.If this parameter is a valid buffer pointer, the memory will be reallocated for a new buffer.However, the new memory is allocated at a different location. Therefore, you should always use the pointer that returns this function.If this parameter is 0 (Default) or invalid buffer pointer, the function just allocates a new memory."
        }, {
            "label": "$bAbort",
            "documentation": "**[optional]** Specifies whether to exit the script if not enough memory, valid values:    True - Displaying an error message and exit the script with error code 1 (Default).    False - Continue the script and return an error."
        }]
    },
    "_WinAPI_CreateBufferFromStruct": {
        "documentation": "Allocates a block of memory from the internal library heap and initializes it with the structure's data",
        "label": "_WinAPI_CreateBufferFromStruct ( $tStruct [, $pBuffer = 0 [, $bAbort = True]] )",
        "params": [{
            "label": "$tStruct",
            "documentation": "The structure that contains data to initialize the buffer."
        }, {
            "label": "$pBuffer",
            "documentation": "**[optional]** A pointer to the existing buffer that to be replaced by a new buffer.If this parameter is a valid buffer pointer, the memory will be reallocated for a new buffer. However, the new memory is allocated at a different location.Therefore, you should always use the pointer that returns this function.If this parameter is 0 (Default) or invalid buffer pointer, the function just allocates a new memory."
        }, {
            "label": "$bAbort",
            "documentation": "**[optional]** Specifies whether to exit the script if not enough memory, valid values:    True - Displaying an error message and exit the script with error code 1 (Default).    False - Continue the script and return an error."
        }]
    },
    "_WinAPI_CreateCaret": {
        "documentation": "Creates a new shape for the system caret and assigns ownership of the caret to the specified window",
        "label": "_WinAPI_CreateCaret ( $hWnd, $hBitmap [, $iWidth = 0 [, $iHeight = 0]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that owns the caret."
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap that defines the caret shape.If this parameter is 0, the caret is solid.If this parameter is 1, the caret is gray. If this parameter is a bitmap handle, the caret is the specified bitmap."
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** The width of the caret in logical units.If this parameter is 0 (Default), the width is set to the system-defined window border width.If $hBitmap is a bitmap handle, _WinAPI_CreateCaret() ignores this parameter."
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** The height of the caret in logical units.If this parameter is 0 (Default), the height is set to the system-defined window border height.If $hBitmap is a bitmap handle, _WinAPI_CreateCaret() ignores this parameter."
        }]
    },
    "_WinAPI_CreateColorAdjustment": {
        "documentation": "Creates $tagCOLORADJUSTMENT structure specifies the color adjustment",
        "label": "_WinAPI_CreateColorAdjustment ( [$iFlags = 0 [, $iIlluminant = 0 [, $iGammaR = 10000 [, $iGammaG = 10000 [, $iGammaB = 10000 [, $iBlack = 0 [, $iWhite = 10000 [, $iContrast = 0 [, $iBrightness = 0 [, $iColorfulness = 0 [, $iTint = 0]]]]]]]]]]] )",
        "params": [{
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify how the output image should be prepared. This parameter can be 0 or any combination of the following values:    $CA_NEGATIVE    $CA_LOG_FILTER"
        }, {
            "label": "$iIlluminant",
            "documentation": "**[optional]** The type of standard light source under which the image is viewed. This parameter can be only one of the following values:    $ILLUMINANT_DEVICE_DEFAULT (Default)    $ILLUMINANT_A    $ILLUMINANT_B    $ILLUMINANT_C    $ILLUMINANT_D50    $ILLUMINANT_D55    $ILLUMINANT_D65    $ILLUMINANT_D75    $ILLUMINANT_F2    $ILLUMINANT_TUNGSTEN    $ILLUMINANT_DAYLIGHT    $ILLUMINANT_FLUORESCENT    $ILLUMINANT_NTSC"
        }, {
            "label": "$iGammaR",
            "documentation": "**[optional]** The n(th) power gamma-correction value for the red primary of the source colors.The value must be in the range from 2500 to 65,000.A value of 10,000 (Default) means no gamma correction."
        }, {
            "label": "$iGammaG",
            "documentation": "**[optional]** The n(th) power gamma-correction value for the green primary of the source colors.The value must be in the range from 2500 to 65,000.A value of 10,000 (Default) means no gamma correction."
        }, {
            "label": "$iGammaB",
            "documentation": "**[optional]** The n(th) power gamma-correction value for the blue primary of the source colors.The value must be in the range from 2500 to 65,000.A value of 10,000 (Default) means no gamma correction."
        }, {
            "label": "$iBlack",
            "documentation": "**[optional]** The black reference for the source colors. Any colors that are darker than this are treated as black.The value must be in the range from 0 to 4000.Default is 0."
        }, {
            "label": "$iWhite",
            "documentation": "**[optional]** The white reference for the source colors. Any colors that are lighter than this are treated as white.The value must be in the range from 6000 to 10,000.Default is 10,000"
        }, {
            "label": "$iContrast",
            "documentation": "**[optional]** The amount of contrast to be applied to the source object.The value must be in the range from -100 to 100.A value of 0 (Default) means no contrast adjustment."
        }, {
            "label": "$iBrightness",
            "documentation": "**[optional]** The amount of brightness to be applied to the source object.The value must be in the range from -100 to 100.A value of 0 (Default) means no brightness adjustment."
        }, {
            "label": "$iColorfulness",
            "documentation": "**[optional]** The amount of colorfulness to be applied to the source object.The value must be in the range from -100 to 100.A value of 0 (Default) means no colorfulness adjustment)."
        }, {
            "label": "$iTint",
            "documentation": "**[optional]** The amount of red or green tint adjustment to be applied to the source object.The value must be in the range from -100 to 100.Positive numbers adjust toward red and negative numbers adjust toward green.A value of 0 (Default) means no tint adjustment."
        }]
    },
    "_WinAPI_CreateCompatibleBitmap": {
        "documentation": "Creates a bitmap compatible with the specified device context",
        "label": "_WinAPI_CreateCompatibleBitmap ( $hDC, $iWidth, $iHeight )",
        "params": [{
            "label": "$hDC",
            "documentation": "Identifies a device context"
        }, {
            "label": "$iWidth",
            "documentation": "Specifies the bitmap width, in pixels"
        }, {
            "label": "$iHeight",
            "documentation": "Specifies the bitmap height, in pixels"
        }]
    },
    "_WinAPI_CreateCompatibleBitmapEx": {
        "documentation": "Creates a bitmap compatible with the device and fills it the specified color",
        "label": "_WinAPI_CreateCompatibleBitmapEx ( $hDC, $iWidth, $iHeight, $iRGB )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context."
        }, {
            "label": "$iWidth",
            "documentation": "The bitmap width, in pixels."
        }, {
            "label": "$iHeight",
            "documentation": "The bitmap height, in pixels."
        }, {
            "label": "$iRGB",
            "documentation": "The bitmap color, in RGB."
        }]
    },
    "_WinAPI_CreateCompatibleDC": {
        "documentation": "Creates a memory device context compatible with the specified device",
        "label": "_WinAPI_CreateCompatibleDC ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to an existing DC. If this handle is 0, the function creates a memory DC compatible with the application's current screen."
        }]
    },
    "_WinAPI_CreateDesktop": {
        "documentation": "Creates a new desktop, associates it with the current window station of the calling process",
        "label": "_WinAPI_CreateDesktop ( $sName [, $iAccess = 0x0002 [, $iFlags = 0 [, $iHeap = 0 [, $tSecurity = 0]]]] )",
        "params": [{
            "label": "$sName",
            "documentation": "The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\\)."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The requested access to the desktop. This parameter can be one or more of the following values:    $DESKTOP_ALL_ACCESS    $DESKTOP_CREATEMENU    $DESKTOP_CREATEWINDOW (Default)    $DESKTOP_ENUMERATE    $DESKTOP_HOOKCONTROL    $DESKTOP_JOURNALPLAYBACK    $DESKTOP_JOURNALRECORD    $DESKTOP_READOBJECTS    $DESKTOP_SWITCHDESKTOP    $DESKTOP_WRITEOBJECTS"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The optional flags. It can be zero or the following value:    $DF_ALLOWOTHERACCOUNTHOOK"
        }, {
            "label": "$iHeap",
            "documentation": "**[optional]** The size of the desktop heap, in kilobytes. Default is 0."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes.If this parameter is 0 (Default), the handle cannot be inherited ."
        }]
    },
    "_WinAPI_CreateDIB": {
        "documentation": "Creates an uncompressed device-independent bitmap (DIB) with the specified width, height, and color depth",
        "label": "_WinAPI_CreateDIB ( $iWidth, $iHeight [, $iBitsPerPel = 32 [, $tColorTable = 0 [, $iColorCount = 0]]] )",
        "params": [{
            "label": "$iWidth",
            "documentation": "The width of the bitmap, in pixels."
        }, {
            "label": "$iHeight",
            "documentation": "The height of the bitmap, in pixels. If this value is positive, the bitmap is a bottom-up DIB and its origin is the lower-left corner, otherwise, the bitmap is a top-down DIB and its origin is the upper-left corner."
        }, {
            "label": "$iBitsPerPel",
            "documentation": "**[optional]** The number of bits that define each pixel and the maximum number of colors in the bitmap. Default is 32."
        }, {
            "label": "$tColorTable",
            "documentation": "**[optional]** \"dword[n]\" structure that represents a DIB color table.The number of colors in this table depends on the values of the $iBitsPerPel parameters."
        }, {
            "label": "$iColorCount",
            "documentation": "**[optional]** The number of color indexes in the DIB color table that are actually used by the bitmap.The value of this parameter should not exceed the number of colors in the color table pointed to by the $pColorTable parameter. Default is 0."
        }]
    },
    "_WinAPI_CreateDIBColorTable": {
        "documentation": "Creates RGB color table from the specified array of colors",
        "label": "_WinAPI_CreateDIBColorTable ( Const ByRef $aColorTable [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$aColorTable",
            "documentation": "The array of colors, in RGB, that to be make up the DIB color table."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start creating at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop creating at."
        }]
    },
    "_WinAPI_CreateDIBitmap": {
        "documentation": "Creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits",
        "label": "_WinAPI_CreateDIBitmap ( $hDC, $tBITMAPINFO, $iUsage [, $pBits = 0] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context."
        }, {
            "label": "$tBITMAPINFO",
            "documentation": "$tagBITMAPINFO structure that specifies various attributes of the DIB, including the bitmap dimensions and colors.Note that a positive value for the height indicates a bottom-up DIB while a negative value for the height indicates a top-down DIB."
        }, {
            "label": "$iUsage",
            "documentation": "The type of colors used. This parameter must be one of the following values:    $DIB_PAL_COLORS    $DIB_RGB_COLORS"
        }, {
            "label": "$pBits",
            "documentation": "**[optional]** A pointer to an array of bytes containing the initial bitmap data."
        }]
    },
    "_WinAPI_CreateDIBSection": {
        "documentation": "Creates a DIB that applications can write to directly",
        "label": "_WinAPI_CreateDIBSection ( $hDC, $tBITMAPINFO, $iUsage, ByRef $pBits [, $hSection = 0 [, $iOffset = 0]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context. If the value of $iUsage is $DIB_PAL_COLORS, the function uses this device context's logical palette to initialize the DIB colors."
        }, {
            "label": "$tBITMAPINFO",
            "documentation": "$tagBITMAPINFO structure that specifies various attributes of the DIB, including the bitmap dimensions and colors."
        }, {
            "label": "$iUsage",
            "documentation": "The type of colors used (either logical palette indexes or literal RGB values). The following values are defined:    $DIB_PAL_COLORS    $DIB_RGB_COLORS"
        }, {
            "label": "$pBits",
            "documentation": "Returns a pointer to the location of the DIB bit values."
        }, {
            "label": "$hSection",
            "documentation": "**[optional]** Handle to a file-mapping object that the function will use to create the DIB."
        }, {
            "label": "$iOffset",
            "documentation": "**[optional]** The offset from the beginning of the file-mapping object referenced by $hSection where storage for the bitmap bit values is to begin. This value is ignored if $hSection is 0 (Default)."
        }]
    },
    "_WinAPI_CreateDirectory": {
        "documentation": "Creates a new directory",
        "label": "_WinAPI_CreateDirectory ( $sDir [, $tSecurity = 0] )",
        "params": [{
            "label": "$sDir",
            "documentation": "The path of the directory to be created."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new directory.If this parameter is 0 (Default), the directory gets a default security descriptor. The ACL in the default security descriptor for a directory are inherited from its parent directory."
        }]
    },
    "_WinAPI_CreateDirectoryEx": {
        "documentation": "Creates a new directory with the attributes of a specified template directory",
        "label": "_WinAPI_CreateDirectoryEx ( $sNewDir, $sTemplateDir [, $tSecurity = 0] )",
        "params": [{
            "label": "$sNewDir",
            "documentation": "The path of the directory to be created."
        }, {
            "label": "$sTemplateDir",
            "documentation": "The path of the directory to use as a template when creating the new directory."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new directory.If this parameter is 0 (Default), the directory gets a default security descriptor.The ACL in the default security descriptor for a directory are inherited from its parent directory."
        }]
    },
    "_WinAPI_CreateEllipticRgn": {
        "documentation": "Creates an elliptical region",
        "label": "_WinAPI_CreateEllipticRgn ( $tRECT )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the coordinates of the upper-left and lower-right corners of the bounding rectangle of the ellipse in logical units."
        }]
    },
    "_WinAPI_CreateEmptyIcon": {
        "documentation": "Creates a fully transparent icon with the specified width, height, and color depth",
        "label": "_WinAPI_CreateEmptyIcon ( $iWidth, $iHeight [, $iBitsPerPel = 32] )",
        "params": [{
            "label": "$iWidth",
            "documentation": "The width, in pixels, of the icon."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in pixels, of the icon."
        }, {
            "label": "$iBitsPerPel",
            "documentation": "**[optional]** The number of bits-per-pixel in the XOR bitmask of the icon. Default is 32."
        }]
    },
    "_WinAPI_CreateEnhMetaFile": {
        "documentation": "Creates a device context for an enhanced-format metafile",
        "label": "_WinAPI_CreateEnhMetaFile ( [$hDC = 0 [, $tRECT = 0 [, $bPixels = False [, $sFilePath = '' [, $sDescription = '']]]]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "**[optional]** Handle to a reference device for the enhanced metafile. The system uses this device context to record the resolution and units of the device on which a picture originally appeared.If this parameter is 0 (Default), it uses the current display device for reference."
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** $tagRECT structure that specifies the dimensions of the picture to be stored in the enhanced metafile.If this parameter is 0 (Default), the graphics device interface computes the dimensions of the smallest rectangle that surrounds the picture drawn by the application."
        }, {
            "label": "$bPixels",
            "documentation": "**[optional]** Specifies whether the $tRECT structure defined in pixels, valid values:    True     - In logical units (pixels).    False    - In .01-millimeter units (Default)."
        }, {
            "label": "$sFilePath",
            "documentation": "**[optional]** The file name for the enhanced metafile to be created.If this parameter is '' (Default), the enhanced metafile is memory based and its contents are lost when it is deleted by using the _WinAPI_DeleteEnhMetaFile() function."
        }, {
            "label": "$sDescription",
            "documentation": "**[optional]** The string that specifies the name of the application that created the picture, as well as the picture's title. This string must be an empty string or represented as follows:    \"application name|picture name\""
        }]
    },
    "_WinAPI_CreateEvent": {
        "documentation": "Creates or opens a named or unnamed event object",
        "label": "_WinAPI_CreateEvent ( [$tAttributes = 0 [, $bManualReset = True [, $bInitialState = True [, $sName = \"\"]]]] )",
        "params": [{
            "label": "$tAttributes",
            "documentation": "**[optional]** a $tagSECURITY_ATTRIBUTES structure or a pointer to it. If 0, the handle cannot be inherited by child processes.The Descriptor member of the structure specifies a security descriptor for the new event.If $tAttributes is 0, the event gets a default security descriptor.The ACLs in the default security descriptor for an event come from the primary or impersonation token of the creator."
        }, {
            "label": "$bManualReset",
            "documentation": "**[optional]** If True, the function creates a manual-reset event object, which requires the use of the ResetEvent function to set the event state to nonsignaled.If False, the function creates an auto-reset event object and system automatically resets the event state to nonsignaled after a single waiting thread has been released."
        }, {
            "label": "$bInitialState",
            "documentation": "**[optional]** If True, the initial state of the event object is signaled; otherwise, it is nonsignaled"
        }, {
            "label": "$sName",
            "documentation": "**[optional]** The name of the event object. Name comparison is case sensitive.If $sName matches the name of an existing named event object, this function requests the EVENT_ALL_ACCESS access right.In this case the $bManualReset and $bInitialState parameters are ignored because they have already been set by the creating process.If the $tAttributes parameter is not 0, it determines whether the handle can be inherited, but its security-descriptor member is ignored.If Name is blank, the event object is created without a name."
        }]
    },
    "_WinAPI_CreateFile": {
        "documentation": "Creates or opens a file or other device",
        "label": "_WinAPI_CreateFile ( $sFileName, $iCreation [, $iAccess = 4 [, $iShare = 0 [, $iAttributes = 0 [, $tSecurity = 0]]]] )",
        "params": [{
            "label": "$sFileName",
            "documentation": "Name of an object to create or open"
        }, {
            "label": "$iCreation",
            "documentation": "Action to take on files that exist and do not exist:    0 - Creates a new file. The function fails if the file exists    1 - Creates a new file. If a file exists, it is overwritten    2 - Opens a file. The function fails if the file does not exist    3 - Opens a file. If the file does not exist, the function creates the file    4 - Opens a file and truncates it so that its size is 0 bytes. The function fails if the file does not exist."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** Access to the object:    1 - Execute    2 - Read    4 - Write"
        }, {
            "label": "$iShare",
            "documentation": "**[optional]** Sharing mode of an object:    1 - Delete    2 - Read    4 - Write"
        }, {
            "label": "$iAttributes",
            "documentation": "**[optional]** The file attributes:    1 - File should be archived    2 - File is hidden    4 - File is read only    8 - File is part of or used exclusively by an operating system."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** a $tagSECURITY_ATTRIBUTES structure or a pointer to it that determines if the returned handle can be inherited by child processes.If $tSecurity is 0, the handle cannot be inherited."
        }]
    },
    "_WinAPI_CreateFileEx": {
        "documentation": "Creates or opens a file or I/O device",
        "label": "_WinAPI_CreateFileEx ( $sFilePath, $iCreation [, $iAccess = 0 [, $iShare = 0 [, $iFlagsAndAttributes = 0 [, $tSecurity = 0 [, $hTemplate = 0]]]]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file or device to be created or opened."
        }, {
            "label": "$iCreation",
            "documentation": "The action to take on a file or device that exists or does not exist. This parameter must be one of the following values, which cannot be combined.    $CREATE_NEW    $CREATE_ALWAYS    $OPEN_EXISTING    $OPEN_ALWAYS    $TRUNCATE_EXISTING"
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The requested access to the file or device, which can be summarized as read, write, both or neither (zero) (Default).    $GENERIC_READ    $GENERIC_WRITE    (See MSDN for more information)"
        }, {
            "label": "$iShare",
            "documentation": "**[optional]** The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none.If this parameter is 0 (Default) and _WinAPI_CreateFileEx() succeeds, the file or device cannot be shared and cannot be opened again until the handle to the file or device is closed.    $FILE_SHARE_DELETE    $FILE_SHARE_READ    $FILE_SHARE_WRITE"
        }, {
            "label": "$iFlagsAndAttributes",
            "documentation": "**[optional]** The file or device attributes and flags. This parameter can be one or more of the following values:    $FILE_ATTRIBUTE_READONLY    $FILE_ATTRIBUTE_HIDDEN    $FILE_ATTRIBUTE_SYSTEM    $FILE_ATTRIBUTE_DIRECTORY    $FILE_ATTRIBUTE_ARCHIVE    $FILE_ATTRIBUTE_DEVICE    $FILE_ATTRIBUTE_NORMAL    $FILE_ATTRIBUTE_TEMPORARY    $FILE_ATTRIBUTE_SPARSE_FILE    $FILE_ATTRIBUTE_REPARSE_POINT    $FILE_ATTRIBUTE_COMPRESSED    $FILE_ATTRIBUTE_OFFLINE    $FILE_ATTRIBUTE_NOT_CONTENT_INDEXED    $FILE_ATTRIBUTE_ENCRYPTED    $FILE_FLAG_BACKUP_SEMANTICS    $FILE_FLAG_DELETE_ON_CLOSE    $FILE_FLAG_NO_BUFFERING    $FILE_FLAG_OPEN_NO_RECALL    $FILE_FLAG_OPEN_REPARSE_POINT    $FILE_FLAG_OVERLAPPED    $FILE_FLAG_POSIX_SEMANTICS    $FILE_FLAG_RANDOM_ACCESS    $FILE_FLAG_SEQUENTIAL_SCAN    $FILE_FLAG_WRITE_THROUGH    $SECURITY_ANONYMOUS (Default)    $SECURITY_CONTEXT_TRACKING    $SECURITY_DELEGATION    $SECURITY_EFFECTIVE_ONLY    $SECURITY_IDENTIFICATION    $SECURITY_IMPERSONATION"
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that contains two separate but related data members: an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes.If this parameter is 0 (Default), the handle cannot be inherited by any child processes the application may create and the file or device associated with the returned handle gets a default security descriptor."
        }, {
            "label": "$hTemplate",
            "documentation": "**[optional]** Handle to a template file with the $GENERIC_READ access right. The template file supplies file attributes and extended attributes for the file that is being created."
        }]
    },
    "_WinAPI_CreateFileMapping": {
        "documentation": "Creates or opens a named or unnamed file mapping object for a specified file",
        "label": "_WinAPI_CreateFileMapping ( $hFile [, $iSize = 0 [, $sName = '' [, $iProtect = 0x0004 [, $tSecurity = 0]]]] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file from which to create a file mapping object.If this parameter is (-1), the calling process must also specify a size for the file mapping object in the $iSize parameters.In this scenario, _WinAPI_CreateFileMapping() creates a file mapping object of a specified size that is backed by the system paging file instead of by a file in the file system."
        }, {
            "label": "$iSize",
            "documentation": "**[optional]** The maximum size of the file mapping object.If this parameter is 0 (Default), the maximum size of the file mapping object is equal to the current size of the file that $hFile identifies."
        }, {
            "label": "$sName",
            "documentation": "**[optional]** The name of the file mapping object."
        }, {
            "label": "$iProtect",
            "documentation": "**[optional]** Specifies the page protection of the file mapping object and can be one of the following values.    $PAGE_EXECUTE_READ    $PAGE_EXECUTE_READWRITE    $PAGE_EXECUTE_WRITECOPY    $PAGE_READONLY    $PAGE_READWRITE (Default)    $PAGE_WRITECOPYAn application can specify one or more of the following attributes for the file mapping object by combining them with one of the preceding page protection values.    $SEC_COMMIT    $SEC_IMAGE    $SEC_LARGE_PAGES    $SEC_NOCACHE    $SEC_RESERVE    $SEC_WRITECOMBINE"
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that determines whether a returned handle can be inherited by child processes.If this parameter is 0 (Default), the handle cannot be inherited and the file mapping object gets a default security descriptor."
        }]
    },
    "_WinAPI_CreateFont": {
        "documentation": "Creates a logical font with the specified characteristics",
        "label": "_WinAPI_CreateFont ( $iHeight, $iWidth [, $iEscape = 0 [, $iOrientn = 0 [, $iWeight = $FW_NORMAL [, $bItalic = False [, $bUnderline = False [, $bStrikeout = False [, $iCharset = $DEFAULT_CHARSET [, $iOutputPrec = $OUT_DEFAULT_PRECIS [, $iClipPrec = $CLIP_DEFAULT_PRECIS [, $iQuality = $DEFAULT_QUALITY [, $iPitch = 0 [, $sFace = 'Arial']]]]]]]]]]]] )",
        "params": [{
            "label": "$iHeight",
            "documentation": "height of font"
        }, {
            "label": "$iWidth",
            "documentation": "average character width"
        }, {
            "label": "$iEscape",
            "documentation": "**[optional]** angle of escapement"
        }, {
            "label": "$iOrientn",
            "documentation": "**[optional]** base-line orientation angle"
        }, {
            "label": "$iWeight",
            "documentation": "**[optional]** font weight, The following values are defined for convenience:$FW_DONTCARE - 0$FW_THIN - 100$FW_EXTRALIGHT - 200$FW_LIGHT - 300$FW_NORMAL - 400$FW_MEDIUM - 500$FW_SEMIBOLD - 600$FW_BOLD - 700$FW_EXTRABOLD - 800$FW_HEAVY - 900"
        }, {
            "label": "$bItalic",
            "documentation": "**[optional]** italic attribute option"
        }, {
            "label": "$bUnderline",
            "documentation": "**[optional]** underline attribute option"
        }, {
            "label": "$bStrikeout",
            "documentation": "**[optional]** strikeout attribute option"
        }, {
            "label": "$iCharset",
            "documentation": "**[optional]** Specifies the character set. The following values are predefined:$ANSI_CHARSET - 0$BALTIC_CHARSET - 186$CHINESEBIG5_CHARSET - 136$DEFAULT_CHARSET - 1$EASTEUROPE_CHARSET - 238$GB2312_CHARSET - 134$GREEK_CHARSET - 161$HANGEUL_CHARSET - 129$MAC_CHARSET - 77$OEM_CHARSET - 255$RUSSIAN_CHARSET - 204$SHIFTJIS_CHARSET - 128$SYMBOL_CHARSET - 2$TURKISH_CHARSET - 162$VIETNAMESE_CHARSET - 163"
        }, {
            "label": "$iOutputPrec",
            "documentation": "**[optional]** Specifies the output precision, It can be one of the following values:$OUT_CHARACTER_PRECIS - Not used$OUT_DEFAULT_PRECIS - Specifies the default font mapper behavior$OUT_DEVICE_PRECIS - Instructs the font mapper to choose a Device font when the system contains multiple fonts with the same name$OUT_OUTLINE_PRECIS - This value instructs the font mapper to choose from TrueType and other outline-based fonts$OUT_PS_ONLY_PRECIS - Instructs the font mapper to choose from only PostScript fonts.If there are no PostScript fonts installed in the system, the font mapper returns to default behavior$OUT_RASTER_PRECIS - Instructs the font mapper to choose a raster font when the system contains multiple fonts with the same name$OUT_STRING_PRECIS - This value is not used by the font mapper, but it is returned when raster fonts are enumerated$OUT_STROKE_PRECIS - This value is not used by the font mapper, but it is returned when TrueType, other outline-based fonts, and vector fonts are enumerated$OUT_TT_ONLY_PRECIS - Instructs the font mapper to choose from only TrueType fonts. If there are no TrueType fonts installed in the system, the font mapper returns to default behavior$OUT_TT_PRECIS - Instructs the font mapper to choose a TrueType font when the system contains multiple fonts with the same name"
        }, {
            "label": "$iClipPrec",
            "documentation": "**[optional]** Specifies the clipping precision, It can be one or more of the following values:$CLIP_CHARACTER_PRECIS - Not used$CLIP_DEFAULT_PRECIS - Specifies default clipping behavior$CLIP_EMBEDDED - You must specify this flag to use an embedded read-only font$CLIP_LH_ANGLES - When this value is used, the rotation for all fonts depends on whether the orientation of the coordinate system is left-handed or right-handed.If not used, device fonts always rotate counterclockwise, but the rotation of other fonts is dependent on the orientation of the coordinate system.$CLIP_MASK - Not used$CLIP_STROKE_PRECIS - Not used by the font mapper, but is returned when raster, vector, or TrueType fonts are enumeratedFor compatibility, this value is always returned when enumerating fonts$CLIP_TT_ALWAYS - Not used"
        }, {
            "label": "$iQuality",
            "documentation": "**[optional]** Specifies the output quality, It can be one of the following values:$ANTIALIASED_QUALITY - Font is antialiased, or smoothed, if the font supports it and the size of the font is not too small or too large.In addition, you must select a TrueType font into a screen DC prior to using it in a DIBSection, otherwise antialiasing does not happen$DEFAULT_QUALITY - Appearance of the font does not matter$DRAFT_QUALITY - Appearance of the font is less important than when the PROOF_QUALITY value is used.For GDI raster fonts, scaling is enabled, which means that more font sizes are available, but the quality may be lower.Bold, italic, underline, and strikeout fonts are synthesized, if necessary$NONANTIALIASED_QUALITY - Font is never antialiased, that is, font smoothing is not done$PROOF_QUALITY - Character quality of the font is more important than exact matching of the logical-font attributes.For GDI raster fonts, scaling is disabled and the font closest in size is chosen.Although the chosen font size may not be mapped exactly when PROOF_QUALITY is used, the quality of the font is high and there is no distortion of appearance.Bold, italic, underline, and strikeout fonts are synthesized, if necessary"
        }, {
            "label": "$iPitch",
            "documentation": "**[optional]** Specifies the pitch and family of the font. The two low-order bits specify the pitch of the font and can be one of the following values:$DEFAULT_PITCH, $FIXED_PITCH, $VARIABLE_PITCHThe four high-order bits specify the font family and can be one of the following values:$FF_DECORATIVE - Novelty fonts. Old English is an example$FF_DONTCARE - Use default font$FF_MODERN - Fonts with constant stroke width, with or without serifs. Pica, Elite, and Courier New are examples$FF_ROMAN - Fonts with variable stroke width and with serifs. MS Serif is an example$FF_SCRIPT - Fonts designed to look like handwriting. Script and Cursive are examples$FF_SWISS - Fonts with variable stroke width and without serifs. MS Sans Serif is an example"
        }, {
            "label": "$sFace",
            "documentation": "**[optional]** typeface name"
        }]
    },
    "_WinAPI_CreateFontEx": {
        "documentation": "Creates a logical font with the specified characteristics",
        "label": "_WinAPI_CreateFontEx ( $iHeight [, $iWidth = 0 [, $iEscapement = 0 [, $iOrientation = 0 [, $iWeight = 400 [, $bItalic = False [, $bUnderline = False [, $bStrikeOut = False [, $iCharSet = 1 [, $iOutPrecision = 0 [, $iClipPrecision = 0 [, $iQuality = 0 [, $iPitchAndFamily = 0 [, $sFaceName = '' [, $iStyle = 0]]]]]]]]]]]]]] )",
        "params": [{
            "label": "$iHeight",
            "documentation": "The height of the font's character cell or character, in logical units."
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** The average width, in logical units. Default is 0."
        }, {
            "label": "$iEscapement",
            "documentation": "**[optional]** The angle, in tenths of degrees, between the escapement vector and the x-axis of the device. Default is 0"
        }, {
            "label": "$iOrientation",
            "documentation": "**[optional]** The angle, in tenths of degrees, between each character's base line and the x-axis of the device. Default is 0"
        }, {
            "label": "$iWeight",
            "documentation": "**[optional]** The weight of the font in the range 0 through 1000, or one of the following values.    $FW_DONTCARE    $FW_THIN    $FW_EXTRALIGHT    $FW_ULTRALIGHT    $FW_LIGHT    $FW_NORMAL (Default)    $FW_REGULAR    $FW_MEDIUM    $FW_SEMIBOLD    $FW_DEMIBOLD    $FW_BOLD    $FW_EXTRABOLD    $FW_ULTRABOLD    $FW_HEAVY    $FW_BLACK"
        }, {
            "label": "$bItalic",
            "documentation": "**[optional]** Specifies whether to set italic font attribute, valid values:    True - The attribute is set.    False - The attribute is not set (Default)."
        }, {
            "label": "$bUnderline",
            "documentation": "**[optional]** Specifies whether to set underlined font attribute, valid values:    True - The attribute is set.    False - The attribute is not set (Default)."
        }, {
            "label": "$bStrikeOut",
            "documentation": "**[optional]** Specifies whether to set strikeout font attribute, valid values:    True - The attribute is set.    False - The attribute is not set (Default)."
        }, {
            "label": "$iCharSet",
            "documentation": "**[optional]** The character set. It can be one of the following values.    $ANSI_CHARSET    $BALTIC_CHARSET    $CHINESEBIG5_CHARSET    $DEFAULT_CHARSET (Default)    $EASTEUROPE_CHARSET    $GB2312_CHARSET    $GREEK_CHARSET    $HANGEUL_CHARSET    $MAC_CHARSET    $OEM_CHARSET    $RUSSIAN_CHARSET    $SHIFTJIS_CHARSET    $SYMBOL_CHARSET    $TURKISH_CHARSET    $VIETNAMESE_CHARSETKorean language edition of Windows:    $JOHAB_CHARSETMiddle East language edition of Windows:    $ARABIC_CHARSET    $HEBREW_CHARSETThai language edition of Windows:    $THAI_CHARSET"
        }, {
            "label": "$iOutPrecision",
            "documentation": "**[optional]** The output precision. It can be one of the following values.    $OUT_CHARACTER_PRECIS    $OUT_DEFAULT_PRECIS (Default)    $OUT_DEVICE_PRECIS    $OUT_OUTLINE_PRECIS    $OUT_PS_ONLY_PRECIS    $OUT_RASTER_PRECIS    $OUT_STRING_PRECIS    $OUT_STROKE_PRECIS    $OUT_TT_ONLY_PRECIS    $OUT_TT_PRECIS"
        }, {
            "label": "$iClipPrecision",
            "documentation": "**[optional]** The clipping precision. It can be one or more of the following values.    $CLIP_CHARACTER_PRECIS    $CLIP_DEFAULT_PRECIS (Default)    $CLIP_DFA_DISABLE    $CLIP_EMBEDDED    $CLIP_LH_ANGLES    $CLIP_DFA_OVERRIDE    $CLIP_STROKE_PRECIS"
        }, {
            "label": "$iQuality",
            "documentation": "**[optional]** The output quality. It can be one of the following values.    $ANTIALIASED_QUALITY    $CLEARTYPE_QUALITY    $DEFAULT_QUALITY (Default)    $DRAFT_QUALITY    $NONANTIALIASED_QUALITY    $PROOF_QUALITY"
        }, {
            "label": "$iPitchAndFamily",
            "documentation": "**[optional]** The pitch and family of the font. The two low-order bits specify the pitch of the font and can be one of the following values.    $DEFAULT_PITCH (Default    $FIXED_PITCH    $VARIABLE_PITCHThe four high-order bits specify the font family and can be one of the following values.    $FF_DECORATIVE    $FF_DONTCARE    $FF_MODERN    $FF_ROMAN    $FF_SCRIPT    $FF_SWISS"
        }, {
            "label": "$sFaceName",
            "documentation": "**[optional]** The typeface name of the font (not including style). For example, \"Arial\", \"Tahoma\", etc."
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** The style of the font. It can be one or more of the following values.    $FS_REGULAR (Default)    $FS_BOLD    $FS_ITALIC"
        }]
    },
    "_WinAPI_CreateFontIndirect": {
        "documentation": "Creates a logical font that has specific characteristics",
        "label": "_WinAPI_CreateFontIndirect ( $tLogFont )",
        "params": [{
            "label": "$tLogFont",
            "documentation": "$tagLOGFONT structure that defines the characteristics of the logical font"
        }]
    },
    "_WinAPI_CreateGUID": {
        "documentation": "Creates a globally unique identifier (GUID)",
        "label": "_WinAPI_CreateGUID (  )",
        "params": []
    },
    "_WinAPI_CreateHardLink": {
        "documentation": "Establishes a hard link between an existing file and a new file",
        "label": "_WinAPI_CreateHardLink ( $sNewFile, $sExistingFile )",
        "params": [{
            "label": "$sNewFile",
            "documentation": "The name of the new file."
        }, {
            "label": "$sExistingFile",
            "documentation": "The name of the existing file."
        }]
    },
    "_WinAPI_CreateIcon": {
        "documentation": "Creates an icon that has the specified size, colors, and bit patterns",
        "label": "_WinAPI_CreateIcon ( $hInstance, $iWidth, $iHeight, $iPlanes, $iBitsPixel, $pANDBits, $pXORBits )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to the instance of the module creating the icon."
        }, {
            "label": "$iWidth",
            "documentation": "The width, in pixels, of the icon."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in pixels, of the icon."
        }, {
            "label": "$iPlanes",
            "documentation": "The number of planes in the XOR bitmask of the icon."
        }, {
            "label": "$iBitsPixel",
            "documentation": "The number of bits-per-pixel in the XOR bitmask of the icon."
        }, {
            "label": "$pANDBits",
            "documentation": "An array of bytes that contains the bit values for the AND bitmask of the icon. This bitmask describes a monochrome bitmap."
        }, {
            "label": "$pXORBits",
            "documentation": "An array of bytes that contains the bit values for the XOR bitmask of the icon. This bitmask describes a monochrome or device-dependent color bitmap."
        }]
    },
    "_WinAPI_CreateIconFromResourceEx": {
        "documentation": "Creates an icon or cursor from resource bits describing the icon",
        "label": "_WinAPI_CreateIconFromResourceEx ( $pData, $iSize [, $bIcon = True [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] )",
        "params": [{
            "label": "$pData",
            "documentation": "The icon or cursor resource bits. These bits are typically loaded by calls to the _WinAPI_LookupIconIdFromDirectoryEx() and _WinAPI_LoadResource() functions."
        }, {
            "label": "$iSize",
            "documentation": "The size, in bytes, of the set of bits pointed to by the $pData parameter."
        }, {
            "label": "$bIcon",
            "documentation": "**[optional]** Specifies whether an icon or a cursor is to be created, valid values:    True - An icon is to be created (Default).    False - A cursor is to be created."
        }, {
            "label": "$iXDesiredPixels",
            "documentation": "**[optional]** The desired width, in pixels, of the icon or cursor. If this parameter is zero (Default), the function uses the system metric value to set the width."
        }, {
            "label": "$iYDesiredPixels",
            "documentation": "**[optional]** The desired height, in pixels, of the icon or cursor. If this parameter is zero (Default), the function uses the system metric value to set the height."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** This parameter can be one or more of the following values.    $LR_DEFAULTCOLOR (Default)    $LR_DEFAULTSIZE    $LR_MONOCHROME    $LR_SHARED"
        }]
    },
    "_WinAPI_CreateIconIndirect": {
        "documentation": "Creates an icon or cursor that has the specified size, colors, and bit patterns",
        "label": "_WinAPI_CreateIconIndirect ( $hBitmap, $hMask [, $iXHotspot = 0 [, $iYHotspot = 0 [, $bIcon = True]]] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to the icon color bitmap."
        }, {
            "label": "$hMask",
            "documentation": "Handle to the icon bitmask bitmap."
        }, {
            "label": "$iXHotspot",
            "documentation": "**[optional]** Specifies the x-coordinate of a cursor's hot spot. If creates an icon, the hot spot is always in the center of the icon, and this parameter is ignored. Default is 0."
        }, {
            "label": "$iYHotspot",
            "documentation": "**[optional]** Specifies the y-coordinate of a cursor's hot spot. If creates an icon, the hot spot is always in the center of the icon, and this parameter is ignored. Default is 0."
        }, {
            "label": "$bIcon",
            "documentation": "**[optional]** Specifies whether creates an icon or a cursor, valid values:    True - Creates an icon (Default).    False - Creates a cursor."
        }]
    },
    "_WinAPI_CreateJobObject": {
        "documentation": "Creates or opens a job object",
        "label": "_WinAPI_CreateJobObject ( [$sName = '' [, $tSecurity = 0]] )",
        "params": [{
            "label": "$sName",
            "documentation": "**[optional]** The name of the job. Name comparison is case-sensitive. If this parameter is '', the job is created without a name."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that specifies the security descriptor for the job object and determines whether child processes can inherit the returned handle.If this parameter is 0 (Default), the job object gets a default security descriptor and the handle cannot be inherited."
        }]
    },
    "_WinAPI_CreateMargins": {
        "documentation": "Creates $tagMARGINS structure with specified left, right, top, and bottom retaining borders",
        "label": "_WinAPI_CreateMargins ( $iLeftWidth, $iRightWidth, $iTopHeight, $iBottomHeight )",
        "params": [{
            "label": "$iLeftWidth",
            "documentation": "The width of the left border that retains its size."
        }, {
            "label": "$iRightWidth",
            "documentation": "The width of the right border that retains its size."
        }, {
            "label": "$iTopHeight",
            "documentation": "The height of the top border that retains its size."
        }, {
            "label": "$iBottomHeight",
            "documentation": "The height of the bottom border that retains its size."
        }]
    },
    "_WinAPI_CreateMRUList": {
        "documentation": "Creates a new most recently used (MRU) list",
        "label": "_WinAPI_CreateMRUList ( $hKey, $sSubKey [, $iMax = 26] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to the currently open key, or one of the following predefined values under which to store the MRU data.$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE"
        }, {
            "label": "$sSubKey",
            "documentation": "The subkey under which to store the MRU data."
        }, {
            "label": "$iMax",
            "documentation": "**[optional]** The maximum number of entries in the MRU list. Default is 26 (A..Z)."
        }]
    },
    "_WinAPI_CreateMutex": {
        "documentation": "Creates or opens a named or unnamed mutex object",
        "label": "_WinAPI_CreateMutex ( $sMutex [, $bInitial = True [, $tSecurity = 0]] )",
        "params": [{
            "label": "$sMutex",
            "documentation": "The name of the mutex object. Name comparisons are case sensitive."
        }, {
            "label": "$bInitial",
            "documentation": "**[optional]** Specifies whether the calling process obtains the initial ownership of the mutex object, valid values:    True - The calling thread obtains initial ownership of the mutex object (Default).    False - The calling thread does not obtain ownership of the mutex object."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new mutex.If this parameter is 0 (Default), the mutex gets a default security descriptor."
        }]
    },
    "_WinAPI_CreateNullRgn": {
        "documentation": "Creates an empty region",
        "label": "_WinAPI_CreateNullRgn (  )",
        "params": []
    },
    "_WinAPI_CreateNumberFormatInfo": {
        "documentation": "Creates a $tagNUMBERFMT structure with the specified number formatting information",
        "label": "_WinAPI_CreateNumberFormatInfo ( $iNumDigits, $iLeadingZero, $iGrouping, $sDecimalSep, $sThousandSep, $iNegativeOrder )",
        "params": [{
            "label": "$iNumDigits",
            "documentation": "The number of fractional digits placed after the decimal separator."
        }, {
            "label": "$iLeadingZero",
            "documentation": "Specifier for leading zeros in decimal fields, valid values:    0 - No leading zeros.    1 - Leading zeros."
        }, {
            "label": "$iGrouping",
            "documentation": "The number of digits in each group of numbers to the left of the decimal separator.The values in the range 0 through 9 and 32 are valid.Typical examples are:    0 to group digits as in 123456789.00;    3 to group digits as in 123,456,789.00;    and 32 to group digits as in 12,34,56,789.00."
        }, {
            "label": "$sDecimalSep",
            "documentation": "The decimal separator string."
        }, {
            "label": "$sThousandSep",
            "documentation": "The thousand separator string."
        }, {
            "label": "$iNegativeOrder",
            "documentation": "The negative number mode, valid values:    0 - Left parenthesis, number, right parenthesis; for example, (1.1).    1 - Negative sign, number; for example, -1.1.    2 - Negative sign, space, number; for example, - 1.1.    3 - Number, negative sign; for example, 1.1-.    4 - Number, space, negative sign; for example, 1.1 -."
        }]
    },
    "_WinAPI_CreateObjectID": {
        "documentation": "Creates or retrieves the object identifier for the specified file or directory",
        "label": "_WinAPI_CreateObjectID ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Path to the file or directory to create or retrieve object identifier."
        }]
    },
    "_WinAPI_CreatePen": {
        "documentation": "Creates a logical pen that has the specified style, width, and color",
        "label": "_WinAPI_CreatePen ( $iPenStyle, $iWidth, $iColor )",
        "params": [{
            "label": "$iPenStyle",
            "documentation": "Specifies the pen style. It can be any one of the following values.PS_SOLID - The pen is solid.PS_DASH - The pen is dashed. This style is valid only when the pen width is one or less in device units.PS_DOT - The pen is dotted. This style is valid only when the pen width is one or less in device units.PS_DASHDOT - The pen has alternating dashes and dots. This style is valid only when the pen width is one or less in device units.PS_DASHDOTDOT - The pen has alternating dashes and double dots. This style is valid only when the pen width is one or less in device units.PS_NULL - The pen is invisible.PS_INSIDEFRAME - The pen is solid. When this pen is used in any GDI drawing function that takes a bounding rectangle, the dimensions of the figure are shrunk so that it fits entirely in the bounding rectangle, taking into account the width of the pen. This applies only to geometric pens."
        }, {
            "label": "$iWidth",
            "documentation": "Specifies the width of the pen, in logical units."
        }, {
            "label": "$iColor",
            "documentation": "Specifies the color of the pen (BGR)"
        }]
    },
    "_WinAPI_CreatePoint": {
        "documentation": "Creates $tagPOINT structure with the x- and y-coordinates of the specified point",
        "label": "_WinAPI_CreatePoint ( $iX, $iY )",
        "params": [{
            "label": "$iX",
            "documentation": "The x-coordinate of the point."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate of the point."
        }]
    },
    "_WinAPI_CreatePolygonRgn": {
        "documentation": "Creates a polygonal region",
        "label": "_WinAPI_CreatePolygonRgn ( Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1 [, $iMode = 1]]] )",
        "params": [{
            "label": "$aPoint",
            "documentation": "The 2D array ([x1, y1], [x2, y2], ... [xN, yN]) that contains the vertices of the polygon in logical units.The polygon is presumed closed. Each vertex can be specified only once."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start creating at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop creating at."
        }, {
            "label": "$iMode",
            "documentation": "**[optional]** The fill mode used to determine which pixels are in the region. This parameter can be one of the following values:    $ALTERNATE (Default)    $WINDING"
        }]
    },
    "_WinAPI_CreateProcess": {
        "documentation": "Creates a new process and its primary thread",
        "label": "_WinAPI_CreateProcess ( $sAppName, $sCommand, $tSecurity, $tThread, $bInherit, $iFlags, $pEnviron, $sDir, $tStartupInfo, $tProcess )",
        "params": [{
            "label": "$sAppName",
            "documentation": "The name of the module to be executed"
        }, {
            "label": "$sCommand",
            "documentation": "The command line to be executed"
        }, {
            "label": "$tSecurity",
            "documentation": "a $tagSECURITY_ATTRIBUTES structure or a pointer to it that determines whether the returned handle to the new process can be inherited by child processes."
        }, {
            "label": "$tThread",
            "documentation": "a $tagSECURITY_ATTRIBUTES structure or a pointer to it that determines whether the returned handle to the new thread can be inherited by child processes."
        }, {
            "label": "$bInherit",
            "documentation": "If True, each inheritable handle in the calling process is inherited by the new process"
        }, {
            "label": "$iFlags",
            "documentation": "Flags that control the priority class and creation of the process"
        }, {
            "label": "$pEnviron",
            "documentation": "Pointer to the environment block for the new process"
        }, {
            "label": "$sDir",
            "documentation": "The full path to the current directory for the process"
        }, {
            "label": "$tStartupInfo",
            "documentation": "a $tagSTARTUPINFO structure or a pointer to it"
        }, {
            "label": "$tProcess",
            "documentation": "a $tagPROCESS_INFORMATION structure or a pointer to it"
        }]
    },
    "_WinAPI_CreateProcessWithToken": {
        "documentation": "Creates a new process and its primary thread in the security context of the specified token",
        "label": "_WinAPI_CreateProcessWithToken ( $sApp, $sCmd, $iFlags, $tStartupInfo, $tProcessInfo, $hToken [, $iLogon = 0 [, $pEnvironment = 0 [, $sDir = '']]] )",
        "params": [{
            "label": "$sApp",
            "documentation": "The name of the module to be executed. If this parameter is an empty string, the module name must be the first white space–delimited token in the command line string."
        }, {
            "label": "$sCmd",
            "documentation": "The command line to be executed. If this parameter is an empty string, the function uses the module name as the command line."
        }, {
            "label": "$iFlags",
            "documentation": "The flags that control how the process is created.The $CREATE_DEFAULT_ERROR_MODE, $CREATE_NEW_CONSOLE, and $CREATE_NEW_PROCESS_GROUP are enabled by default.You can specify additional flags as noted:    $CREATE_DEFAULT_ERROR_MODE    $CREATE_NEW_CONSOLE    $CREATE_NEW_PROCESS_GROUP    $CREATE_SEPARATE_WOW_VDM    $CREATE_SUSPENDED    $CREATE_UNICODE_ENVIRONMENT"
        }, {
            "label": "$tStartupInfo",
            "documentation": "a $tagSTARTUPINFO structure or a pointer to it."
        }, {
            "label": "$tProcessInfo",
            "documentation": "a $tagPROCESS_INFORMATION structure or a pointer to it that receives information for the new process, including a handle to the process."
        }, {
            "label": "$hToken",
            "documentation": "A handle to the primary token that represents a user. The handle must have the $TOKEN_QUERY, $TOKEN_DUPLICATE, and $TOKEN_ASSIGN_PRIMARY access rights."
        }, {
            "label": "$iLogon",
            "documentation": "**[optional]** The logon option. This parameter can be zero or one of the following values:    $LOGON_WITH_PROFILE    $LOGON_NETCREDENTIALS_ONLY"
        }, {
            "label": "$pEnvironment",
            "documentation": "**[optional]** A pointer to an environment block for the new process."
        }, {
            "label": "$sDir",
            "documentation": "**[optional]** The path to the current directory for the process.If this parameter is an empty string (Default), the new process will have the same current drive and directory as the calling process."
        }]
    },
    "_WinAPI_CreateRect": {
        "documentation": "Creates $tagRECT structure with the coordinates of the specified rectangle",
        "label": "_WinAPI_CreateRect ( $iLeft, $iTop, $iRight, $iBottom )",
        "params": [{
            "label": "$iLeft",
            "documentation": "The x-coordinate of the upper-left corner of the rectangle."
        }, {
            "label": "$iTop",
            "documentation": "The y-coordinate of the upper-left corner of the rectangle."
        }, {
            "label": "$iRight",
            "documentation": "The x-coordinate of the lower-right corner of the rectangle."
        }, {
            "label": "$iBottom",
            "documentation": "The y-coordinate of the lower-right corner of the rectangle."
        }]
    },
    "_WinAPI_CreateRectEx": {
        "documentation": "Creates $tagRECT structure with the coordinates of the specified rectangle",
        "label": "_WinAPI_CreateRectEx ( $iX, $iY, $iWidth, $iHeight )",
        "params": [{
            "label": "$iX",
            "documentation": "The x-coordinate of the upper-left corner of the rectangle."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate of the upper-left corner of the rectangle."
        }, {
            "label": "$iWidth",
            "documentation": "The width of the rectangle."
        }, {
            "label": "$iHeight",
            "documentation": "The height of the rectangle."
        }]
    },
    "_WinAPI_CreateRectRgn": {
        "documentation": "Creates a rectangular region",
        "label": "_WinAPI_CreateRectRgn ( $iLeftRect, $iTopRect, $iRightRect, $iBottomRect )",
        "params": [{
            "label": "$iLeftRect",
            "documentation": "X-coordinate of the upper-left corner of the region"
        }, {
            "label": "$iTopRect",
            "documentation": "Y-coordinate of the upper-left corner of the region"
        }, {
            "label": "$iRightRect",
            "documentation": "X-coordinate of the lower-right corner of the region"
        }, {
            "label": "$iBottomRect",
            "documentation": "Y-coordinate of the lower-right corner of the region"
        }]
    },
    "_WinAPI_CreateRectRgnIndirect": {
        "documentation": "Creates a rectangular region",
        "label": "_WinAPI_CreateRectRgnIndirect ( $tRECT )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the coordinates of the upper-left and lower-right corners of the rectangle that defines the region in logical units."
        }]
    },
    "_WinAPI_CreateRoundRectRgn": {
        "documentation": "Creates a rectangular region with rounded corners",
        "label": "_WinAPI_CreateRoundRectRgn ( $iLeftRect, $iTopRect, $iRightRect, $iBottomRect, $iWidthEllipse, $iHeightEllipse )",
        "params": [{
            "label": "$iLeftRect",
            "documentation": "X-coordinate of the upper-left corner of the region"
        }, {
            "label": "$iTopRect",
            "documentation": "Y-coordinate of the upper-left corner of the region"
        }, {
            "label": "$iRightRect",
            "documentation": "X-coordinate of the lower-right corner of the region"
        }, {
            "label": "$iBottomRect",
            "documentation": "Y-coordinate of the lower-right corner of the region"
        }, {
            "label": "$iWidthEllipse",
            "documentation": "Width of the ellipse used to create the rounded corners"
        }, {
            "label": "$iHeightEllipse",
            "documentation": "Height of the ellipse used to create the rounded corners"
        }]
    },
    "_WinAPI_CreateSemaphore": {
        "documentation": "Creates or opens a named or unnamed semaphore object",
        "label": "_WinAPI_CreateSemaphore ( $sSemaphore, $iInitial, $iMaximum [, $tSecurity = 0] )",
        "params": [{
            "label": "$sSemaphore",
            "documentation": "The name of the semaphore to be opened. Name comparisons are case sensitive."
        }, {
            "label": "$iInitial",
            "documentation": "The initial count for the semaphore object. This value must be greater than or equal to zero and less than or equal to $iMaximum."
        }, {
            "label": "$iMaximum",
            "documentation": "The maximum count for the semaphore object. This value must be greater than zero."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new semaphore.If this parameter is 0 (Default), the semaphore gets a default security descriptor."
        }]
    },
    "_WinAPI_CreateSize": {
        "documentation": "Creates $tagSIZE structure with the width and height of the specified rectangle",
        "label": "_WinAPI_CreateSize ( $iWidth, $iHeight )",
        "params": [{
            "label": "$iWidth",
            "documentation": "The width of the rectangle."
        }, {
            "label": "$iHeight",
            "documentation": "The height of the rectangle."
        }]
    },
    "_WinAPI_CreateSolidBitmap": {
        "documentation": "Creates a solid color bitmap",
        "label": "_WinAPI_CreateSolidBitmap ( $hWnd, $iColor, $iWidth, $iHeight [, $bRGB = 1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window where the bitmap will be displayed"
        }, {
            "label": "$iColor",
            "documentation": "The color of the bitmap, stated in RGB"
        }, {
            "label": "$iWidth",
            "documentation": "The width of the bitmap"
        }, {
            "label": "$iHeight",
            "documentation": "The height of the bitmap"
        }, {
            "label": "$bRGB",
            "documentation": "**[optional]** If True converts to COLOREF (0x00bbggrr)"
        }]
    },
    "_WinAPI_CreateSolidBrush": {
        "documentation": "Creates a logical brush that has the specified solid color",
        "label": "_WinAPI_CreateSolidBrush ( $iColor )",
        "params": [{
            "label": "$iColor",
            "documentation": "Specifies the color of the brush"
        }]
    },
    "_WinAPI_CreateStreamOnHGlobal": {
        "documentation": "Creates a stream object that uses a memory handle to store the stream contents",
        "label": "_WinAPI_CreateStreamOnHGlobal ( [$hGlobal = 0 [, $bDeleteOnRelease = True]] )",
        "params": [{
            "label": "$hGlobal",
            "documentation": "**[optional]** The memory handle, or if 0 (Default) a new handle is to be allocated instead. The handle must be allocated as moveable and nondiscardable."
        }, {
            "label": "$bDeleteOnRelease",
            "documentation": "**[optional]** Specifies whether the underlying handle for this stream object should be automatically freed when the stream object is released, valid values:    True - The final release will automatically free the $hGlobal parameter (Default).    False - The user must free the $hGlobal after the final release."
        }]
    },
    "_WinAPI_CreateString": {
        "documentation": "Copies a specified string to the newly allocated memory block and returns its pointer",
        "label": "_WinAPI_CreateString ( $sString [, $pString = 0 [, $iLength = -1 [, $bUnicode = True [, $bAbort = True]]]] )",
        "params": [{
            "label": "$sString",
            "documentation": "The source string to be copied."
        }, {
            "label": "$pString",
            "documentation": "**[optional]** A pointer to the existing string that to be replaced by a new string.If this parameter is a valid string pointer, the memory will be reallocated for a new string.However, the new memory is allocated at a different location. Therefore, you should always use the pointer that returns this function.If this parameter is 0 (Default) or invalid string pointer, the function just allocates a new memory."
        }, {
            "label": "$iLength",
            "documentation": "**[optional]** The required buffer length, in TCHARs, without null-terminating character.If this parameter is (-1), the buffer length will be equal to the length of the source string.If $iLength is less than a source string, the string will be truncated to the specified length. Default is 1."
        }, {
            "label": "$bUnicode",
            "documentation": "**[optional]** Specifies whether a string is Unicode or ASCII code of a character, valid values:    True - Unicode (Default).    False - ASCII."
        }, {
            "label": "$bAbort",
            "documentation": "**[optional]** Specifies whether to exit the script if not enough memory, valid values:    True - Displaying an error message and exit the script with error code 1 (Default).    False - Continue the script and return an error."
        }]
    },
    "_WinAPI_CreateSymbolicLink": {
        "documentation": "Creates a symbolic link",
        "label": "_WinAPI_CreateSymbolicLink ( $sSymlink, $sTarget [, $bDirectory = False] )",
        "params": [{
            "label": "$sSymlink",
            "documentation": "The name of the new file."
        }, {
            "label": "$sTarget",
            "documentation": "The name of the existing file."
        }, {
            "label": "$bDirectory",
            "documentation": "**[optional]** Specifies whether the link target is a directory.    True - The link target is a directory.    False - The link target is a file (Default)."
        }]
    },
    "_WinAPI_CreateTransform": {
        "documentation": "Creates $tagXFORM structure specifies a world-space to page-space transformation",
        "label": "_WinAPI_CreateTransform ( [$nM11 = 1 [, $nM12 = 0 [, $nM21 = 0 [, $nM22 = 1 [, $nDX = 0 [, $nDY = 0]]]]]] )",
        "params": [{
            "label": "$nM11",
            "documentation": "**[optional]** The following.Rotation - Cosine of rotation angle.Scaling - Horizontal scaling component.Shear - Not used. Reflection - Horizontal component."
        }, {
            "label": "$nM12",
            "documentation": "**[optional]** The following.Rotation - Sine of the rotation angle.Scaling - Not used. Shear - Horizontal proportionality constant.Reflection - Not used."
        }, {
            "label": "$nM21",
            "documentation": "**[optional]** The following.Rotation - Negative sine of the rotation angle.Scaling - Not used. Shear - Vertical proportionality constant.Reflection - Not used."
        }, {
            "label": "$nM22",
            "documentation": "**[optional]** The following.Rotation - Cosine of rotation angle.Scaling - Vertical scaling component.Shear - Not used.Reflection - Vertical reflection component."
        }, {
            "label": "$nDx",
            "documentation": "**[optional]** The horizontal translation component, in logical units. Default is 0."
        }, {
            "label": "$nDy",
            "documentation": "**[optional]** The vertical translation component, in logical units. Default is 0."
        }]
    },
    "_WinAPI_CreateWindowEx": {
        "documentation": "Creates an overlapped, pop-up, or child window",
        "label": "_WinAPI_CreateWindowEx ( $iExStyle, $sClass, $sName, $iStyle, $iX, $iY, $iWidth, $iHeight, $hParent [, $hMenu = 0 [, $hInstance = 0 [, $pParam = 0]]] )",
        "params": [{
            "label": "$iExStyle",
            "documentation": "Extended window style"
        }, {
            "label": "$sClass",
            "documentation": "Registered class name"
        }, {
            "label": "$sName",
            "documentation": "Window name"
        }, {
            "label": "$iStyle",
            "documentation": "Window style"
        }, {
            "label": "$iX",
            "documentation": "Horizontal position of window"
        }, {
            "label": "$iY",
            "documentation": "Vertical position of window"
        }, {
            "label": "$iWidth",
            "documentation": "Window width"
        }, {
            "label": "$iHeight",
            "documentation": "Window height"
        }, {
            "label": "$hParent",
            "documentation": "Handle to parent or owner window"
        }, {
            "label": "$hMenu",
            "documentation": "**[optional]** Handle to menu or child-window identifier"
        }, {
            "label": "$hInstance",
            "documentation": "**[optional]** Handle to application instance"
        }, {
            "label": "$pParam",
            "documentation": "**[optional]** Pointer to window-creation data"
        }]
    },
    "_WinAPI_CreateWindowStation": {
        "documentation": "Creates a window station object, associates it with the calling process, and assigns it to the current session",
        "label": "_WinAPI_CreateWindowStation ( [$sName = '' [, $iAccess = 0 [, $iFlags = 0 [, $tSecurity = 0]]]] )",
        "params": [{
            "label": "$sName",
            "documentation": "**[optional]** The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\\).Only members of the Administrators group are allowed to specify a name.If this parameter is empty string (Default), the system forms a window station name using the logon session identifier for the calling process."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The type of access the returned handle has to the window station. This parameter can be one or more of the following values:    $WINSTA_ALL_ACCESS    $WINSTA_ACCESSCLIPBOARD    $WINSTA_ACCESSGLOBALATOMS    $WINSTA_CREATEDESKTOP    $WINSTA_ENUMDESKTOPS    $WINSTA_ENUMERATE    $WINSTA_EXITWINDOWS    $WINSTA_READATTRIBUTES    $WINSTA_READSCREEN    $WINSTA_WRITEATTRIBUTES"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The optional flags. It can be zero (Default) or the following value:    $CWF_CREATE_ONLY"
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If this parameter is 0 (Default), the handle cannot be inherited."
        }]
    },
    "_WinAPI_DecompressBuffer": {
        "documentation": "Decompresses an entire compressed buffer",
        "label": "_WinAPI_DecompressBuffer ( $pUncompressedBuffer, $iUncompressedSize, $pCompressedBuffer, $iCompressedSize [, $iFormat = 0x0002] )",
        "params": [{
            "label": "$pUncompressedBuffer",
            "documentation": "A pointer to a caller-allocated buffer that receives the decompressed data from compressed buffer."
        }, {
            "label": "$iUncompressedSize",
            "documentation": "The size of the uncompressed buffer, in bytes."
        }, {
            "label": "$pCompressedBuffer",
            "documentation": "A pointer to the buffer that contains the data to decompress."
        }, {
            "label": "$iCompressedSize",
            "documentation": "The size of the compressed buffer, in bytes."
        }, {
            "label": "$iFormat",
            "documentation": "**[optional]** The compression format of the data in compressed buffer. This parameter must be one of the following values:    $COMPRESSION_FORMAT_LZNT1 (Default)    $COMPRESSION_FORMAT_XPRESS    $COMPRESSION_FORMAT_XPRESS_HUFF"
        }]
    },
    "_WinAPI_DecryptFile": {
        "documentation": "Decrypts an encrypted file or directory",
        "label": "_WinAPI_DecryptFile ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file or directory to be decrypted. If $sFilePath specifies a read-only file, the function fails and the last error code is ERROR_FILE_READ_ONLY (6009). If $sFilePath specifies a directory that contains a read-only file, the functions succeeds but the directory is not decrypted."
        }]
    },
    "_WinAPI_DeferWindowPos": {
        "documentation": "Updates the specified multiple-window-position structure for the specified window",
        "label": "_WinAPI_DeferWindowPos ( $hInfo, $hWnd, $hAfter, $iX, $iY, $iWidth, $iHeight, $iFlags )",
        "params": [{
            "label": "$hInfo",
            "documentation": "Handle to a multiple-window-position structure that contains size and position information for one or more windows. This structure is returned by _WinAPI_BeginDeferWindowPos() or by the most recent call to _WinAPI_DeferWindowPos()."
        }, {
            "label": "$hWnd",
            "documentation": "Handle to the window for which update information is stored in the structure.All windows in a multiple-window-position structure must have the same parent."
        }, {
            "label": "$hAfter",
            "documentation": "Handle to the window that precedes the positioned window in the Z order.This parameter must be a window handle or one of the following values. This parameter is ignored if the $SWP_NOZORDER flag is set in the $iFlags parameter.    $HWND_BOTTOM    $HWND_NOTOPMOST    $HWND_TOP    $HWND_TOPMOST"
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate of the window's upper-left corner."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate of the window's upper-left corner."
        }, {
            "label": "$iWidth",
            "documentation": "The window's new width, in pixels."
        }, {
            "label": "$iHeight",
            "documentation": "The window's new height, in pixels."
        }, {
            "label": "$iFlags",
            "documentation": "A combination of the following values that affect the size and position of the window.    $SWP_DRAWFRAME    $SWP_FRAMECHANGED    $SWP_HIDEWINDOW    $SWP_NOACTIVATE    $SWP_NOCOPYBITS    $SWP_NOMOVE    $SWP_NOOWNERZORDER    $SWP_NOREDRAW    $SWP_NOREPOSITION    $SWP_NOSENDCHANGING    $SWP_NOSIZE    $SWP_NOZORDER    $SWP_SHOWWINDOW"
        }]
    },
    "_WinAPI_DefineDosDevice": {
        "documentation": "Defines, redefines, or deletes MS-DOS device names",
        "label": "_WinAPI_DefineDosDevice ( $sDevice, $iFlags [, $sFilePath = ''] )",
        "params": [{
            "label": "$sDevice",
            "documentation": "The name of the MS-DOS device."
        }, {
            "label": "$iFlags",
            "documentation": "This parameter can be one or more of the following values.$DDD_EXACT_MATCH_ON_REMOVE$DDD_NO_BROADCAST_SYSTEM$DDD_RAW_TARGET_PATH$DDD_REMOVE_DEFINITION"
        }, {
            "label": "$sFilePath",
            "documentation": "**[optional]** The path that will implement device."
        }]
    },
    "_WinAPI_DefRawInputProc": {
        "documentation": "Calls the default raw input procedure to process the raw input messages that an application does not process",
        "label": "_WinAPI_DefRawInputProc ( $paRawInput, $iInput )",
        "params": [{
            "label": "$paRawInput",
            "documentation": "A pointer to an array of $tagRAWINPUT structures that is returned by _WinAPI_GetRawInputBuffer()."
        }, {
            "label": "$iInput",
            "documentation": "The number of structures in array."
        }]
    },
    "_WinAPI_DefSubclassProc": {
        "documentation": "Calls the next handler in a window's subclass chain",
        "label": "_WinAPI_DefSubclassProc ( $hWnd, $iMsg, $wParam, $lParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window being subclassed."
        }, {
            "label": "$iMsg",
            "documentation": "The message to be sent."
        }, {
            "label": "$wParam",
            "documentation": "The message-specific information."
        }, {
            "label": "$lParam",
            "documentation": "The message-specific information."
        }]
    },
    "_WinAPI_DefWindowProc": {
        "documentation": "Call the default window procedure to provide default processing",
        "label": "_WinAPI_DefWindowProc ( $hWnd, $iMsg, $wParam, $lParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window procedure that received the message"
        }, {
            "label": "$iMsg",
            "documentation": "Specifies the message"
        }, {
            "label": "$wParam",
            "documentation": "Specifies additional message information"
        }, {
            "label": "$lParam",
            "documentation": "Specifies additional message information"
        }]
    },
    "_WinAPI_DefWindowProcW": {
        "documentation": "Calls the default window procedure to provide default processing for any window messages",
        "label": "_WinAPI_DefWindowProcW ( $hWnd, $iMsg, $wParam, $lParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "A handle to the window procedure that received the message."
        }, {
            "label": "$iMsg",
            "documentation": "The message."
        }, {
            "label": "$wParam",
            "documentation": "Additional message-specific information. The content of this parameter depends on the message."
        }, {
            "label": "$lParam",
            "documentation": "Additional message-specific information. The content of this parameter depends on the message."
        }]
    },
    "_WinAPI_DeleteDC": {
        "documentation": "Deletes the specified device context",
        "label": "_WinAPI_DeleteDC ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Identifies the device context to be deleted"
        }]
    },
    "_WinAPI_DeleteEnhMetaFile": {
        "documentation": "Deletes an enhanced-format metafile or an enhanced-format metafile handle",
        "label": "_WinAPI_DeleteEnhMetaFile ( $hEmf )",
        "params": [{
            "label": "$hEmf",
            "documentation": "Handle to an enhanced metafile."
        }]
    },
    "_WinAPI_DeleteFile": {
        "documentation": "Deletes an existing file",
        "label": "_WinAPI_DeleteFile ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file to be deleted."
        }]
    },
    "_WinAPI_DeleteObject": {
        "documentation": "Deletes a logical pen, brush, font, bitmap, region, or palette",
        "label": "_WinAPI_DeleteObject ( $hObject )",
        "params": [{
            "label": "$hObject",
            "documentation": "Identifies a logical pen, brush, font, bitmap, region, or palette"
        }]
    },
    "_WinAPI_DeleteObjectID": {
        "documentation": "Removes the object identifier from a specified file or directory",
        "label": "_WinAPI_DeleteObjectID ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Path to the file or directory from the object identifier that is to be deleted."
        }]
    },
    "_WinAPI_DeleteVolumeMountPoint": {
        "documentation": "Deletes a drive letter or mounted folder",
        "label": "_WinAPI_DeleteVolumeMountPoint ( $sMountedPath )",
        "params": [{
            "label": "$sMountedPath",
            "documentation": "The drive letter or mounted folder to be deleted (for example, X:\\ or Y:\\MountX\\)."
        }]
    },
    "_WinAPI_DeregisterShellHookWindow": {
        "documentation": "Unregisters a specified Shell window that is registered to receive Shell hook messages",
        "label": "_WinAPI_DeregisterShellHookWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to unregister from receiving Shell hook messages."
        }]
    },
    "_WinAPI_DestroyCaret": {
        "documentation": "Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen",
        "label": "_WinAPI_DestroyCaret (  )",
        "params": []
    },
    "_WinAPI_DestroyCursor": {
        "documentation": "Destroys a cursor and frees any memory the cursor occupied",
        "label": "_WinAPI_DestroyCursor ( $hCursor )",
        "params": [{
            "label": "$hCursor",
            "documentation": "Handle to the cursor to be destroyed. The cursor must not be in use."
        }]
    },
    "_WinAPI_DestroyIcon": {
        "documentation": "Destroys an icon and frees any memory the icon occupied",
        "label": "_WinAPI_DestroyIcon ( $hIcon )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the icon to be destroyed. The icon must not be in use."
        }]
    },
    "_WinAPI_DestroyWindow": {
        "documentation": "Destroys the specified window",
        "label": "_WinAPI_DestroyWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be destroyed"
        }]
    },
    "_WinAPI_DeviceIoControl": {
        "documentation": "Sends a control code directly to a specified device driver",
        "label": "_WinAPI_DeviceIoControl ( $hDevice, $iControlCode [, $pInBuffer = 0 [, $iInBufferSize = 0 [, $pOutBuffer = 0 [, $iOutBufferSize = 0]]]] )",
        "params": [{
            "label": "$hDevice",
            "documentation": "Handle to the device on which the operation is to be performed.The device is typically a volume, directory, file, or stream. To retrieve a device handle, use the _WinAPI_CreateFileEx() function.To specify a device name, use the following format:    _WinAPI_CreateFileEx(\"\\\\.\\DeviceName\", ...)"
        }, {
            "label": "$iControlCode",
            "documentation": "The control code for the operation.This value identifies the specific operation to be performed and the type of device on which to perform it."
        }, {
            "label": "$pInBuffer",
            "documentation": "**[optional]** A pointer to the input buffer that contains the data required to perform the operation."
        }, {
            "label": "$iInBufferSize",
            "documentation": "**[optional]** The size of the input buffer, in bytes. Default is 0."
        }, {
            "label": "$pOutBuffer",
            "documentation": "**[optional]** A pointer to the output buffer that is to receive the data returned by the operation."
        }, {
            "label": "$iOutBufferSize",
            "documentation": "**[optional]** The size of the output buffer, in bytes. Default is 0."
        }]
    },
    "_WinAPI_DisplayStruct": {
        "documentation": "Displays data from the specified structure or memory address as a list",
        "label": "_WinAPI_DisplayStruct ( $tStruct [, $sStruct = '' [, $sTitle = '' [, $iItem = 0 [, $iSubItem = 0 [, $iFlags = 0 [, $bTop = True [, $hParent = 0]]]]]]] )",
        "params": [{
            "label": "$tStruct",
            "documentation": "A structure that was created by DllStructCreate(), or memory address to be display its data."
        }, {
            "label": "$sStruct",
            "documentation": "**[optional]** A string representing the structure.If $tStruct is a structure, this parameter can be omitted or be an empty string. In this case, the structure will display as \"byte[n]\" structure.If $tStruct is a memory address, $sStruct should be a string representing the structure, otherwise, the function fail, and @error set to 10."
        }, {
            "label": "$sTitle",
            "documentation": "**[optional]** The title of the window, deault is \"Structure: ListView Display\"."
        }, {
            "label": "$iItem",
            "documentation": "**[optional]** The 1-based index or name of the structure member to be selected in the list.If this parameter is 0 (Default), or an incorrect index or name, the first element of the structure will be selected."
        }, {
            "label": "$iSubItem",
            "documentation": "**[optional]** The 1-based index of the array in the structure member pointed to by the $iItem parameter to be selected.If $iItem was not defined as an array in the $sStruct, or invalid array index, the element pointed to by the $iItem parameter will be selected."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** A set of bit flags that specifies an additional displaying options.This parameter can be 0, or any combination of the following values:    1 - Prevent displaying \"\" and \"\" fields at the beginning and end of the list.    2 - Prevent displaying \"\" fields.    4 - Prevent displaying \"\" in \"Member\" column of the list if the structure element has no name.    8 - Prevent highlighting structure elements that are defined as an array.    16 - Prevent perceiving structure elements named \"Reserved*\" as unused elements.    32 - Prevent using double-click to copy values of the structure elements to the clipboard.    64 - Forced to expand structure elements of BYTE[n] and BOOLEAN[n] types (elements of CHAR[n] and WCHAR[n] types always displays as a string).    128 - Forced to display the values of the structure elements in the hexadecimal representation, if possible.    256 - Forced to return error code instead of displaying a message box if a memory access error occurred.    512 - Forced to disable checking the read access memory allocated to a given structure."
        }, {
            "label": "$bTop",
            "documentation": "**[optional]** Specifies whether create a window with \"Always On Top\" attribute, valid values:    True - The window is created with the $WS_EX_TOPMOST extended style (Default).    False - The window will not have the \"TOPMOST\" flag set."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to the parent window."
        }]
    },
    "_WinAPI_DllGetVersion": {
        "documentation": "Retrieves a DLL-specific version information",
        "label": "_WinAPI_DllGetVersion ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the DLL file from which information is retrieved."
        }]
    },
    "_WinAPI_DllInstall": {
        "documentation": "Registers OLE controls such as DLL or ActiveX Controls (OCX) files",
        "label": "_WinAPI_DllInstall ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the DLL file that will be registered."
        }]
    },
    "_WinAPI_DllUninstall": {
        "documentation": "Unregisters OLE controls such as DLL or ActiveX Controls (OCX) files",
        "label": "_WinAPI_DllUninstall ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the DLL file that will be unregistered."
        }]
    },
    "_WinAPI_DPtoLP": {
        "documentation": "Converts device coordinates into logical coordinates",
        "label": "_WinAPI_DPtoLP ( $hDC, ByRef $tPOINT [, $iCount = 1] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tPOINT",
            "documentation": "$tagPOINT structure or structure of points (\"long x1;long y1;...long xN;long yN\") containing the x- and y-coordinates to be transformed."
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** The number of points. Default is 1."
        }]
    },
    "_WinAPI_DragAcceptFiles": {
        "documentation": "Registers whether a window accepts dropped files",
        "label": "_WinAPI_DragAcceptFiles ( $hWnd [, $bAccept = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that is registering whether it will accept dropped files."
        }, {
            "label": "$bAccept",
            "documentation": "**[optional]** Specifies whether a window accepts dropped files, valid values:    True - Accept dropped files (Default).    False - Discontinue accepting dropped files."
        }]
    },
    "_WinAPI_DragFinish": {
        "documentation": "Releases memory that the system allocated for use in transferring file names to the application",
        "label": "_WinAPI_DragFinish ( $hDrop )",
        "params": [{
            "label": "$hDrop",
            "documentation": "Handle of the drop structure that describes the dropped file. This parameter is passed toWM_DROPFILES message with WPARAM parameter."
        }]
    },
    "_WinAPI_DragQueryFileEx": {
        "documentation": "Retrieves the names of dropped files that result from a successful drag-and-drop operation",
        "label": "_WinAPI_DragQueryFileEx ( $hDrop [, $iFlag = 0] )",
        "params": [{
            "label": "$hDrop",
            "documentation": "Handle of the drop structure that describes the dropped file. This parameter is passed toWM_DROPFILES message with WPARAM parameter."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The flag that specifies whether to return files folders or both, valid values:0 - Return both files and folders (Default).1 - Return files only.2 - Return folders only."
        }]
    },
    "_WinAPI_DragQueryPoint": {
        "documentation": "Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation",
        "label": "_WinAPI_DragQueryPoint ( $hDrop )",
        "params": [{
            "label": "$hDrop",
            "documentation": "Handle of the drop structure that describes the dropped file. This parameter is passed to WM_DROPFILES message with WPARAM parameter."
        }]
    },
    "_WinAPI_DrawAnimatedRects": {
        "documentation": "Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window",
        "label": "_WinAPI_DrawAnimatedRects ( $hWnd, $tRectFrom, $tRectTo )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose caption should be animated on the screen."
        }, {
            "label": "$tRectFrom",
            "documentation": "$tagRECT structure specifying the location and size of the icon or minimized window."
        }, {
            "label": "$tRectTo",
            "documentation": "$tagRECT structure specifying the location and size of the restored window."
        }]
    },
    "_WinAPI_DrawBitmap": {
        "documentation": "Draws a bitmap into the specified device context",
        "label": "_WinAPI_DrawBitmap ( $hDC, $iX, $iY, $hBitmap [, $iRop = 0x00CC0020] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context into which the bitmap will be drawn."
        }, {
            "label": "$iX",
            "documentation": "Specifies the logical x-coordinate of the upper-left corner of the bitmap."
        }, {
            "label": "$iY",
            "documentation": "Specifies the logical y-coordinate of the upper-left corner of the bitmap."
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap to be drawn."
        }, {
            "label": "$iRop",
            "documentation": "**[optional]** The raster-operation code (same as for _WinAPI_BitBlt()). Default is $SRCCOPY."
        }]
    },
    "_WinAPI_DrawEdge": {
        "documentation": "Draws one or more edges of rectangle",
        "label": "_WinAPI_DrawEdge ( $hDC, $tRECT, $iEdgeType, $iFlags )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context into which the edge is drawn"
        }, {
            "label": "$tRECT",
            "documentation": "a $tagRECT structure or a pointer to it that contains the logical coordinates of the rectangle"
        }, {
            "label": "$iEdgeType",
            "documentation": "Specifies the type of inner and outer edges to draw. This parameter must be a combination of one inner-border flag and one outer-border flag.The inner-border flags are as follows:    $BDR_RAISEDINNER - Raised inner edge    $BDR_SUNKENINNER - Sunken inner edgeThe outer-border flags are as follows:    $BDR_RAISEDOUTER - Raised outer edge    $BDR_SUNKENOUTER - Sunken outer edgeAlternatively, the edge parameter can specify one of the following flags:    $EDGE_BUMP - Combination of $BDR_RAISEDOUTER and $BDR_SUNKENINNER    $EDGE_ETCHED - Combination of $BDR_SUNKENOUTER and $BDR_RAISEDINNER    $EDGE_RAISED - Combination of $BDR_RAISEDOUTER and $BDR_RAISEDINNER    $EDGE_SUNKEN - Combination of $BDR_SUNKENOUTER and $BDR_SUNKENINNER"
        }, {
            "label": "$iFlags",
            "documentation": "Specifies the type of border. This parameter can be a combination of the following values:    $BF_ADJUST - If this flag is passed, shrink the rectangle pointed to by the $pRECT parameter to exclude the edges that were drawn.If this flag is not passed, then do not change the rectangle pointed to by the $pRECT parameter    $BF_BOTTOM - Bottom of border rectangle    $BF_BOTTOMLEFT - Bottom and left side of border rectangle    $BF_BOTTOMRIGHT - Bottom and right side of border rectangle    $BF_DIAGONAL - Diagonal border    $BF_DIAGONAL_ENDBOTTOMLEFT - Diagonal border. The end point is the bottom-left corner of the rectangle; the origin is top-right corner    $BF_DIAGONAL_ENDBOTTOMRIGHT - Diagonal border. The end point is the bottom-right corner of the rectangle; the origin is top-left corner    $BF_DIAGONAL_ENDTOPLEFT - Diagonal border. The end point is the top-left corner of the rectangle; the origin is bottom-right corner    $BF_DIAGONAL_ENDTOPRIGHT - Diagonal border. The end point is the top-right corner of the rectangle; the origin is bottom-left corner    $BF_FLAT - Flat border    $BF_LEFT - Left side of border rectangle    $BF_MIDDLE - Interior of rectangle to be filled    $BF_MONO - One-dimensional border    $BF_RECT - Entire border rectangle    $BF_RIGHT - Right side of border rectangle    $BF_SOFT - Soft buttons instead of tiles    $BF_TOP - Top of border rectangle    $BF_TOPLEFT - Top and left side of border rectangle    $BF_TOPRIGHT - Top and right side of border rectangle"
        }]
    },
    "_WinAPI_DrawFocusRect": {
        "documentation": "Draws a rectangle in the style used to indicate that the rectangle has the focus",
        "label": "_WinAPI_DrawFocusRect ( $hDC, $tRECT )",
        "params": [{
            "label": "$hDC",
            "documentation": "A handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that specifies the logical coordinates of the rectangle that is to be drawn."
        }]
    },
    "_WinAPI_DrawFrameControl": {
        "documentation": "Draws a frame control of the specified type and style",
        "label": "_WinAPI_DrawFrameControl ( $hDC, $tRECT, $iType, $iState )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context into which the frame is drawn"
        }, {
            "label": "$tRECT",
            "documentation": "a $tagRECT structure or a pointer to it that contains the logical coordinates of the rectangle"
        }, {
            "label": "$iType",
            "documentation": "Specifies the type of frame control to draw. This parameter can be one of the following values:    $DFC_BUTTON - Standard button    $DFC_CAPTION - Title bar    $DFC_MENU - Menu bar    $DFC_POPUPMENU - Popup menu item    $DFC_SCROLL - Scroll bar"
        }, {
            "label": "$iState",
            "documentation": "Specifies the initial state of the frame control. If $iType is $DFC_BUTTON, $iState can be one of the following values:    $DFCS_BUTTON3STATE - Three-state button    $DFCS_BUTTONCHECK - Check box    $DFCS_BUTTONPUSH - Push button    $DFCS_BUTTONRADIO - Radio button    $DFCS_BUTTONRADIOIMAGE - Image for radio button (nonsquare needs image)    $DFCS_BUTTONRADIOMASK - Mask for radio button (nonsquare needs mask)If $iType is $DFC_CAPTION, $iState can be one of the following values:    $DFCS_CAPTIONCLOSE - Close button    $DFCS_CAPTIONHELP - Help button    $DFCS_CAPTIONMAX - Maximize button    $DFCS_CAPTIONMIN - Minimize button    $DFCS_CAPTIONRESTORE - Restore buttonIf $iType is $DFC_MENU, $iState can be one of the following values:    $DFCS_MENUARROW - Submenu arrow    $DFCS_MENUARROWRIGHT - Submenu arrow pointing left. This is used for the right-to-left cascading menus used with right-to-left languages such as Arabic or Hebrew    $DFCS_MENUBULLET - Bullet    $DFCS_MENUCHECK - Check markIf $iType is $DFC_SCROLL, $iState can be one of the following values:    $DFCS_SCROLLCOMBOBOX - Combo box scroll bar    $DFCS_SCROLLDOWN - Down arrow of scroll bar    $DFCS_SCROLLLEFT - Left arrow of scroll bar    $DFCS_SCROLLRIGHT - Right arrow of scroll bar    $DFCS_SCROLLSIZEGRIP - Size grip in bottom-right corner of window    $DFCS_SCROLLSIZEGRIPRIGHT - Size grip in bottom-left corner of window. This is used with right-to-left languages such as Arabic or Hebrew    $DFCS_SCROLLUP - Up arrow of scroll barThe following style can be used to adjust the bounding rectangle of the push button:    $DFCS_ADJUSTRECT - Bounding rectangle is adjusted to exclude the surrounding edge of the push buttonOne or more of the following values can be used to set the state of the control to be drawn:    $DFCS_CHECKED - Button is checked    $DFCS_FLAT - Button has a flat border    $DFCS_HOT - Button is hot-tracked    $DFCS_INACTIVE - Button is inactive (grayed)    $DFCS_PUSHED - Button is pushed    $DFCS_TRANSPARENT - The background remains untouched. This flag can only be combined with $DFCS_MENUARROWUP or $DFCS_MENUARROWDOWN"
        }]
    },
    "_WinAPI_DrawIcon": {
        "documentation": "Draws an icon or cursor into the specified device context",
        "label": "_WinAPI_DrawIcon ( $hDC, $iX, $iY, $hIcon )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context into which the icon or cursor is drawn"
        }, {
            "label": "$iX",
            "documentation": "X coordinate of the upper-left corner of the icon"
        }, {
            "label": "$iY",
            "documentation": "Y coordinate of the upper-left corner of the icon"
        }, {
            "label": "$hIcon",
            "documentation": "Handle to the icon to be drawn"
        }]
    },
    "_WinAPI_DrawIconEx": {
        "documentation": "Draws an icon or cursor into the specified device context",
        "label": "_WinAPI_DrawIconEx ( $hDC, $iX, $iY, $hIcon [, $iWidth = 0 [, $iHeight = 0 [, $iStep = 0 [, $hBrush = 0 [, $iFlags = 3]]]]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context into which the icon or cursor is drawn"
        }, {
            "label": "$iX",
            "documentation": "X coordinate of the upper-left corner of the icon"
        }, {
            "label": "$iY",
            "documentation": "Y coordinate of the upper-left corner of the icon"
        }, {
            "label": "$hIcon",
            "documentation": "Handle to the icon to be drawn"
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** Specifies the logical width of the icon or cursor.If this parameter is zero and the $iFlags parameter is \"default size\", the function uses the $SM_CXICON or $SM_CXCURSOR system metric value to set the width.If this is zero and \"default size\" is not used, the function uses the actual resource width."
        }, {
            "label": "$iHeight",
            "documentation": "**[optional]** Specifies the logical height of the icon or cursor.If this parameter is zero and the $iFlags parameter is \"default size\", the function uses the $SM_CYICON or $SM_CYCURSOR system metric value to set the width.If this is zero and \"default size\" is not used, the function uses the actual resource height."
        }, {
            "label": "$iStep",
            "documentation": "**[optional]** Specifies the index of the frame to draw if $hIcon identifies an animated cursor.This parameter is ignored if $hIcon does not identify an animated cursor."
        }, {
            "label": "$hBrush",
            "documentation": "**[optional]** Handle to a brush that the system uses for flicker-free drawing.If $hBrush is a valid brush handle, the system creates an offscreen bitmap using the specified brush for the background color, draws the icon or cursor into the bitmap, and then copies the bitmap into the device context identified by $hDC.If $hBrush is 0, the system draws the icon or cursor directly into the device context."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Specifies the drawing flags. This parameter can be one of the following values:1 - Draws the icon or cursor using the mask2 - Draws the icon or cursor using the image3 - Draws the icon or cursor using the mask and image4 - Draws the icon or cursor using the system default image rather than the user-specified image5 - Draws the icon or cursor using the width and height specified by the system metric values for cursors or icons, if the width and height parameters are set to zero.If this flag is not specified and width and height are set to zero, the function uses the actual resource size.6 - Draws the icon as an unmirrored icon"
        }]
    },
    "_WinAPI_DrawLine": {
        "documentation": "Draws a line",
        "label": "_WinAPI_DrawLine ( $hDC, $iX1, $iY1, $iX2, $iY2 )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to device context"
        }, {
            "label": "$iX1",
            "documentation": "X coordinate of the line's starting point."
        }, {
            "label": "$iY1",
            "documentation": "Y coordinate of the line's starting point."
        }, {
            "label": "$iX2",
            "documentation": "X coordinate of the line's ending point."
        }, {
            "label": "$iY2",
            "documentation": "Y coordinate of the line's ending point."
        }]
    },
    "_WinAPI_DrawShadowText": {
        "documentation": "Draws formatted text in the specified rectangle with a drop shadow",
        "label": "_WinAPI_DrawShadowText ( $hDC, $sText, $iRGBText, $iRGBShadow [, $iXOffset = 0 [, $iYOffset = 0 [, $tRECT = 0 [, $iFlags = 0]]]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context."
        }, {
            "label": "$sText",
            "documentation": "The string that contains the text to be drawn."
        }, {
            "label": "$iRGBText",
            "documentation": "The color of the text, in RGB."
        }, {
            "label": "$iRGBShadow",
            "documentation": "The color of the shadow, in RGB."
        }, {
            "label": "$iXOffset",
            "documentation": "**[optional]** The x-coordinate of where the text should begin. Default is 0."
        }, {
            "label": "$iYOffset",
            "documentation": "**[optional]** The y-coordinate of where the text should begin. Default is 0."
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** $tagRECT structure that contains, in logical coordinates, the rectangle in which the text is to be drawn.If this parameter is 0 (Default), the size will be equal size of the device context ($hDC)."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specifies how the text is to be drawn. This parameter can be a combination of the formatting text constants ($DT_*)."
        }]
    },
    "_WinAPI_DrawText": {
        "documentation": "Draws formatted text in the specified rectangle",
        "label": "_WinAPI_DrawText ( $hDC, $sText, ByRef $tRECT, $iFlags )",
        "params": [{
            "label": "$hDC",
            "documentation": "Identifies the device context"
        }, {
            "label": "$sText",
            "documentation": "The string to be drawn"
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the rectangle for the text"
        }, {
            "label": "$iFlags",
            "documentation": "Specifies the method of formatting the text:$DT_BOTTOM - Justifies the text to the bottom of the rectangle$DT_CALCRECT - Determines the width and height of the rectangle$DT_CENTER - Centers text horizontally in the rectangle$DT_EDITCONTROL - Duplicates the text-displaying characteristics of a multiline edit control$DT_END_ELLIPSIS - Replaces part of the given string with ellipses if necessary$DT_EXPANDTABS - Expands tab characters$DT_EXTERNALLEADING - Includes the font external leading in line height$DT_HIDEPREFIX - Ignores the ampersand (&) prefix character in the text.The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.$DT_INTERNAL - Uses the system font to calculate text metrics$DT_LEFT - Aligns text to the left$DT_MODIFYSTRING - Modifies the given string to match the displayed text$DT_NOCLIP - Draws without clipping$DT_NOFULLWIDTHCHARBREAK - Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings.For example, this can be used in Korean windows, for more readability of icon labels.This value has no effect unless $DT_WORDBREAK is specified$DT_NOPREFIX - Turns off processing of prefix characters$DT_PATH_ELLIPSIS - For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle.If the string contains backslash (\\) characters, $DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.The string is not modified unless the $DT_MODIFYSTRING flag is specified$DT_PREFIXONLY - Draws only an underline at the position of the character following the ampersand (&) prefix character.Does not draw any other characters in the string$DT_RIGHT - Aligns text to the right$DT_RTLREADING - Layout in right to left reading order for bi-directional text$DT_SINGLELINE - Displays text on a single line only$DT_TABSTOP - Sets tab stops. Bits 15-8 of $iFlags specify the number of characters for each tab$DT_TOP - Top-justifies text (single line only)$DT_VCENTER - Centers text vertically (single line only)$DT_WORDBREAK - Breaks words$DT_WORD_ELLIPSIS - Truncates any word that does not fit in the rectangle and adds ellipses"
        }]
    },

    "_WinAPI_DuplicateEncryptionInfoFile": {
        "documentation": "Copies the EFS metadata from one file or directory to another",
        "label": "_WinAPI_DuplicateEncryptionInfoFile ( $sSrcFilePath, $sDestFilePath [, $iCreation = 2 [, $iAttributes = 0 [, $tSecurity = 0]]] )",
        "params": [{
            "label": "$sSrcFilePath",
            "documentation": "The name of the file or directory from which the EFS metadata is to be copied.This source file or directory must be encrypted."
        }, {
            "label": "$sDestFilePath",
            "documentation": "The name of the file or directory to which the EFS metadata is to be copied.This destination file or directory does not have to be encrypted before the call to this function.If the source is a file, this parameter must also specify a file, and likewise for directories."
        }, {
            "label": "$iCreation",
            "documentation": "**[optional]** Specifies how the destination file or directory is to be opened.The following are the valid values of this parameter:    $CREATE_NEW    $CREATE_ALWAYS (Default)"
        }, {
            "label": "$iAttributes",
            "documentation": "**[optional]** The file attributes of the destination file or directory.The $FILE_READ_ONLY attribute is currently not processed by this function."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that specifies the security attributes of the destination file or directory, if it does not already exist.If this parameter is 0 (Default), the file or directory gets a default security descriptor.The access-control lists (ACL) in the default security descriptor for a file or directory are inherited from its parent directory."
        }]
    },
    "_WinAPI_DuplicateHandle": {
        "documentation": "Duplicates an object handle",
        "label": "_WinAPI_DuplicateHandle ( $hSourceProcessHandle, $hSourceHandle, $hTargetProcessHandle, $iDesiredAccess, $iInheritHandle, $iOptions )",
        "params": [{
            "label": "$hSourceProcessHandle",
            "documentation": "A handle to the process with the handle to be duplicated"
        }, {
            "label": "$hSourceHandle",
            "documentation": "The handle to be duplicated"
        }, {
            "label": "$hTargetProcessHandle",
            "documentation": "A handle to the process that is to receive the duplicated handle"
        }, {
            "label": "$iDesiredAccess",
            "documentation": "The access requested for the new handle"
        }, {
            "label": "$iInheritHandle",
            "documentation": "A variable that indicates whether the handle is inheritable"
        }, {
            "label": "$iOptions",
            "documentation": "Optional actions"
        }]
    },
    "_WinAPI_DuplicateTokenEx": {
        "documentation": "Creates a new primary or impersonation access token that duplicates an existing token",
        "label": "_WinAPI_DuplicateTokenEx ( $hToken, $iAccess, $iLevel [, $iType = 1 [, $tSecurity = 0]] )",
        "params": [{
            "label": "$hToken",
            "documentation": "A handle to an access token opened with $TOKEN_DUPLICATE access."
        }, {
            "label": "$iAccess",
            "documentation": "The requested access rights for the new token. To request the same access rights as the existing token, specify zero.To request all access rights that are valid for the caller, specify the $TOKEN_ALL_ACCESS access."
        }, {
            "label": "$iLevel",
            "documentation": "The security impersonation levels.    $SECURITYANONYMOUS    $SECURITYIDENTIFICATION    $SECURITYIMPERSONATION    $SECURITYDELEGATION"
        }, {
            "label": "$iType",
            "documentation": "**[optional]** The token type.    $TOKENPRIMARY    $TOKENIMPERSONATION"
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new token and determines whether child processes can inherit the token.If this parameter is 0 (Default), the token gets a default security descriptor and the handle cannot be inherited.If the security descriptor contains a system access control list, the token gets $ACCESS_SYSTEM_SECURITY access right, even if it was not requested."
        }]
    },
    "_WinAPI_DwmDefWindowProc": {
        "documentation": "Default window procedure for Desktop Window Manager (DWM) hit testing within the non-client area",
        "label": "_WinAPI_DwmDefWindowProc ( $hWnd, $iMsg, $wParam, $lParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "A handle to the window procedure that received the message."
        }, {
            "label": "$iMsg",
            "documentation": "The message."
        }, {
            "label": "$wParam",
            "documentation": "Additional message-specific information. The content of this parameter depends on the message."
        }, {
            "label": "$lParam",
            "documentation": "Additional message-specific information. The content of this parameter depends on the message."
        }]
    },
    "_WinAPI_DwmEnableBlurBehindWindow": {
        "documentation": "Enables the blur effect on a specified window",
        "label": "_WinAPI_DwmEnableBlurBehindWindow ( $hWnd [, $bEnable = True [, $bTransition = False [, $hRgn = 0]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window on which the blur behind data is applied."
        }, {
            "label": "$bEnable",
            "documentation": "**[optional]** Specifies whether register or unregister the window handle to DWM blur behind, valid values:    True    - Register (Default).    False - Unregister."
        }, {
            "label": "$bTransition",
            "documentation": "**[optional]** Specifies whether colorize transition to match the maximized windows, valid values:    True    - The window's should be colorized.    False - Otherwise (Default)."
        }, {
            "label": "$hRgn",
            "documentation": "**[optional]** The region within the client area to apply the blur behind.A value of zero (Default) will apply the blur behind the entire client area."
        }]
    },
    "_WinAPI_DwmEnableComposition": {
        "documentation": "Enables or disables Desktop Window Manager (DWM) composition",
        "label": "_WinAPI_DwmEnableComposition ( $bEnable )",
        "params": [{
            "label": "$bEnable",
            "documentation": "Specifies whether enable or disable DWM composition, valid values:    True - Enable.    False - Disable."
        }]
    },
    "_WinAPI_DwmExtendFrameIntoClientArea": {
        "documentation": "Extends the window frame behind the client area",
        "label": "_WinAPI_DwmExtendFrameIntoClientArea ( $hWnd [, $tMARGINS = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window for which the frame is extended into the client area."
        }, {
            "label": "$tMARGINS",
            "documentation": "**[optional]** $tagMARGINS structure that describes the margins to use when extending the frame into the client area.Negative margins are used to create the \"sheet of glass\" effect where the client area is rendered as a solid surface with no window border (Default)."
        }]
    },
    "_WinAPI_DwmGetColorizationColor": {
        "documentation": "Retrieves the current color used for Desktop Window Manager (DWM) glass composition",
        "label": "_WinAPI_DwmGetColorizationColor (  )",
        "params": []
    },
    "_WinAPI_DwmGetColorizationParameters": {
        "documentation": "Retrieves the colorization parameters used for Desktop Window Manager (DWM)",
        "label": "_WinAPI_DwmGetColorizationParameters (  )",
        "params": []
    },
    "_WinAPI_DwmGetWindowAttribute": {
        "documentation": "Retrieves the current value of a specified attribute applied to the window",
        "label": "_WinAPI_DwmGetWindowAttribute ( $hWnd, $iAttribute )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window for which the attribute data is retrieved."
        }, {
            "label": "$iAttribute",
            "documentation": "The attribute to retrieve. This parameter can be one of the following values:    $DWMWA_NCRENDERING_ENABLED    $DWMWA_CAPTION_BUTTON_BOUNDS    $DWMWA_EXTENDED_FRAME_BOUNDS"
        }]
    },
    "_WinAPI_DwmInvalidateIconicBitmaps": {
        "documentation": "Indicates that all previously provided iconic bitmaps from a window, both thumbnails and peek representations, should be refreshed",
        "label": "_WinAPI_DwmInvalidateIconicBitmaps ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window or tab whose bitmaps are being invalidated through this call."
        }]
    },
    "_WinAPI_DwmIsCompositionEnabled": {
        "documentation": "Determines whether Desktop Window Manager (DWM) composition is enabled",
        "label": "_WinAPI_DwmIsCompositionEnabled (  )",
        "params": []
    },
    "_WinAPI_DwmQueryThumbnailSourceSize": {
        "documentation": "Returns the source size of the Desktop Window Manager (DWM) thumbnail",
        "label": "_WinAPI_DwmQueryThumbnailSourceSize ( $hThumbnail )",
        "params": [{
            "label": "$hThumbnail",
            "documentation": "Handle of the thumbnail to retrieve the source window size from."
        }]
    },
    "_WinAPI_DwmRegisterThumbnail": {
        "documentation": "Creates a Desktop Window Manager (DWM) thumbnail relationship between the destination and source windows",
        "label": "_WinAPI_DwmRegisterThumbnail ( $hDestination, $hSource )",
        "params": [{
            "label": "$hDestination",
            "documentation": "Handle to the window that will use the DWM thumbnail."
        }, {
            "label": "$hSource",
            "documentation": "Handle to the window to use as the thumbnail source."
        }]
    },
    "_WinAPI_DwmSetColorizationParameters": {
        "documentation": "Sets the colorization parameters for Desktop Window Manager (DWM)",
        "label": "_WinAPI_DwmSetColorizationParameters ( $tDWMCP )",
        "params": [{
            "label": "$tDWMCP",
            "documentation": "$tagDWM_COLORIZATION_PARAMETERS containing the colorization parameters to be set."
        }]
    },
    "_WinAPI_DwmSetIconicLivePreviewBitmap": {
        "documentation": "Sets a static, iconic bitmap to display a live preview (also known as a Peek preview) of a window or tab",
        "label": "_WinAPI_DwmSetIconicLivePreviewBitmap ( $hWnd, $hBitmap [, $bFrame = False [, $tClient = 0]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window or tab."
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the device-independent bitmap (DIB) to represent the specified window."
        }, {
            "label": "$bFrame",
            "documentation": "**[optional]** Specifies whether display a frame around the provided bitmap, valid values:    True - Display frame.    False - Do not display frame (Default)."
        }, {
            "label": "$tClient",
            "documentation": "**[optional]** $tagPOINT structure that contains The offset of a tab window's client region from the host window's frame.This offset enables the tab window's contents to be drawn correctly in a live preview when it is drawn without its frame."
        }]
    },
    "_WinAPI_DwmSetIconicThumbnail": {
        "documentation": "Sets a static, iconic bitmap on a window or tab to use as a thumbnail representation",
        "label": "_WinAPI_DwmSetIconicThumbnail ( $hWnd, $hBitmap [, $bFrame = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window or tab."
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the device-independent bitmap (DIB) to represent the specified window."
        }, {
            "label": "$bFrame",
            "documentation": "**[optional]** Specifies whether display a frame around the provided thumbnail, valid values:    True - Display frame.    False - Do not display frame (Default)."
        }]
    },
    "_WinAPI_DwmSetWindowAttribute": {
        "documentation": "Sets the value of the specified attributes for non-client rendering to apply to the window",
        "label": "_WinAPI_DwmSetWindowAttribute ( $hWnd, $iAttribute, $iData )",
        "params": [{
            "label": "$hWnd",
            "documentation": "The window handle to apply the given attribute."
        }, {
            "label": "$iAttribute",
            "documentation": "The attribute to apply to the window. This parameter can be one of the following values:    $DWMWA_NCRENDERING_POLICY    $DWMWA_TRANSITIONS_FORCEDISABLED    $DWMWA_ALLOW_NCPAINT    $DWMWA_NONCLIENT_RTL_LAYOUT    $DWMWA_FORCE_ICONIC_REPRESENTATION    $DWMWA_FLIP3D_POLICYWindows 7 or later    $DWMWA_HAS_ICONIC_BITMAP    $DWMWA_DISALLOW_PEEK    $DWMWA_EXCLUDED_FROM_PEEK"
        }, {
            "label": "$iData",
            "documentation": "The value of the attribute."
        }]
    },
    "_WinAPI_DwmUnregisterThumbnail": {
        "documentation": "Removes a Desktop Window Manager (DWM) thumbnail relationship",
        "label": "_WinAPI_DwmUnregisterThumbnail ( $hThumbnail )",
        "params": [{
            "label": "$hThumbnail",
            "documentation": "Handle to the thumbnail relationship to be removed."
        }]
    },
    "_WinAPI_DwmUpdateThumbnailProperties": {
        "documentation": "Specifies Desktop Window Manager (DWM) thumbnail properties",
        "label": "_WinAPI_DwmUpdateThumbnailProperties ( $hThumbnail [, $bVisible = True [, $bClientAreaOnly = False [, $iOpacity = 255 [, $tRectDest = 0 [, $tRectSrc = 0]]]]] )",
        "params": [{
            "label": "$hThumbnail",
            "documentation": "Handle of the thumbnail to retrieve the source window size from."
        }, {
            "label": "$bVisible",
            "documentation": "**[optional]** Specifies whether make the thumbnail visible or invisible, valid values:    True  - Visible (Default).    False     - Invisible."
        }, {
            "label": "$bClientAreaOnly",
            "documentation": "**[optional]** Specifies whether use only the thumbnail source's client area or entire window, valid values:    True - Use only source's client area.    False     - Use entire window (Default)."
        }, {
            "label": "$iOpacity",
            "documentation": "**[optional]** The opacity with which to render the thumbnail. 0 is fully transparent while 255 (Default) is fully opaque."
        }, {
            "label": "$tRectDest",
            "documentation": "**[optional]** $tagRECT structure containing the rectangle in the destination window the thumbnail will be rendered.By default, the size of this rectangle equal to the source size of the DWM thumbnail which returns the _WinAPI_DwmQueryThumbnailSourceSize() function."
        }, {
            "label": "$tRectSrc",
            "documentation": "**[optional]** $tagRECT structure containing the rectangle that specifies the region of the source window to use as the thumbnail.By default, the entire window is used as the thumbnail."
        }]
    },
    "_WinAPI_DWordToFloat": {
        "documentation": "Converts a value of type DWORD to a value of type FLOAT",
        "label": "_WinAPI_DWordToFloat ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "The value to be converted."
        }]
    },
    "_WinAPI_DWordToInt": {
        "documentation": "Converts a value of type DWORD to a value of type INT",
        "label": "_WinAPI_DWordToInt ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "The value to be converted."
        }]
    },
    "_WinAPI_EjectMedia": {
        "documentation": "Ejects media from a device",
        "label": "_WinAPI_EjectMedia ( $sDrive )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive letter of the CD tray to eject, in the format D:, E:, etc."
        }]
    },
    "_WinAPI_Ellipse": {
        "documentation": "Draws an ellipse",
        "label": "_WinAPI_Ellipse ( $hDC, $tRECT )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the bounding rectangle."
        }]
    },
    "_WinAPI_EmptyWorkingSet": {
        "documentation": "Removes as many pages as possible from the working set of the specified process",
        "label": "_WinAPI_EmptyWorkingSet ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_EnableWindow": {
        "documentation": "Enables or disables mouse and keyboard input to the specified window or control",
        "label": "_WinAPI_EnableWindow ( $hWnd [, $bEnable = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be enabled or disabled"
        }, {
            "label": "$bEnable",
            "documentation": "**[optional]** Specifies whether to enable or disable the window:True - The window or control is enabledFalse - The window or control is disabled"
        }]
    },
    "_WinAPI_EncryptFile": {
        "documentation": "Encrypts a file or directory",
        "label": "_WinAPI_EncryptFile ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file or directory to be encrypted.If $sFilePath specifies a read-only file, the function fails and the last error code is ERROR_FILE_READ_ONLY (6009).If $sFilePath specifies a directory that contains a read-only file, the functions succeeds but the directory is not encrypted."
        }]
    },
    "_WinAPI_EncryptionDisable": {
        "documentation": "Disables or enables encryption of the specified directory and the files in it",
        "label": "_WinAPI_EncryptionDisable ( $sDir, $bDisable )",
        "params": [{
            "label": "$sDir",
            "documentation": "The name of the directory for which to enable or disable encryption.If this parameter specifies a file, the attempt will fail."
        }, {
            "label": "$bDisable",
            "documentation": "Specifies whether to disable or enable encryption, valid values:    True - Disable.    False - Enable."
        }]
    },
    "_WinAPI_EndDeferWindowPos": {
        "documentation": "Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle",
        "label": "_WinAPI_EndDeferWindowPos ( $hInfo )",
        "params": [{
            "label": "$hInfo",
            "documentation": "Handle to a multiple-window-position structure that contains size and position information for one or more windows.This internal structure is returned by the _WinAPI_BeginDeferWindowPos() function or by the most recent call to the _WinAPI_DeferWindowPos() function."
        }]
    },
    "_WinAPI_EndPaint": {
        "documentation": "Marks the end of painting in the specified window",
        "label": "_WinAPI_EndPaint ( $hWnd, ByRef $tPAINTSTRUCT )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that has been repainted."
        }, {
            "label": "$tPAINTSTRUCT",
            "documentation": "$tagPAINTSTRUCT structure that contains the painting information retrieved by _WinAPI_BeginPaint()."
        }]
    },
    "_WinAPI_EndPath": {
        "documentation": "Closes a path bracket and selects the path defined by the bracket into the specified device context",
        "label": "_WinAPI_EndPath ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context into which the new path is selected."
        }]
    },
    "_WinAPI_EndUpdateResource": {
        "documentation": "Commits or discards a changes of the resources within module",
        "label": "_WinAPI_EndUpdateResource ( $hUpdate [, $bDiscard = False] )",
        "params": [{
            "label": "$hUpdate",
            "documentation": "A module handle returned by the _WinAPI_BeginUpdateResource(), and used by _WinAPI_UpdateResource(), referencing the file to be updated."
        }, {
            "label": "$bDiscard",
            "documentation": "**[optional]** Specifies whether to write the resource updates to the file, valid values:    True - The changes are discarded.    False - The changes are made: the resource updates will take effect (Default)."
        }]
    },
    "_WinAPI_EnumChildProcess": {
        "documentation": "Enumerates a child processes that belong to the specified process",
        "label": "_WinAPI_EnumChildProcess ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_EnumChildWindows": {
        "documentation": "Enumerates a child windows that belong to the specified parent window",
        "label": "_WinAPI_EnumChildWindows ( $hWnd [, $bVisible = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the parent window whose child windows are to be enumerated.If this parameter is 0, this function is equivalent to _WinAPI_EnumWindows()."
        }, {
            "label": "$bVisible",
            "documentation": "**[optional]** Specifies whether enumerates the invisible window, valid values:    True - Enumerate only visible windows (Default).    False - Enumerate all windows."
        }]
    },
    "_WinAPI_EnumDesktops": {
        "documentation": "Enumerates all desktops associated with the specified window station of the calling process",
        "label": "_WinAPI_EnumDesktops ( $hStation )",
        "params": [{
            "label": "$hStation",
            "documentation": "Handle to the window station whose desktops are to be enumerated. This handle must have the$WINSTA_ENUMDESKTOPS access right."
        }]
    },
    "_WinAPI_EnumDesktopWindows": {
        "documentation": "Enumerates all top-level windows associated with the specified desktop",
        "label": "_WinAPI_EnumDesktopWindows ( $hDesktop [, $bVisible = True] )",
        "params": [{
            "label": "$hDesktop",
            "documentation": "Handle to the desktop whose top-level windows are to be enumerated. This handle must have the$DESKTOP_READOBJECTS access right."
        }, {
            "label": "$bVisible",
            "documentation": "**[optional]** Specifies whether enumerates the invisible window, valid values:    True - Enumerate only visible windows (Default).    False - Enumerate all windows."
        }]
    },
    "_WinAPI_EnumDeviceDrivers": {
        "documentation": "Retrieves the load address for each device driver in the system",
        "label": "_WinAPI_EnumDeviceDrivers (  )",
        "params": []
    },
    "_WinAPI_EnumDisplayDevices": {
        "documentation": "Obtains information about the display devices in a system",
        "label": "_WinAPI_EnumDisplayDevices ( $sDevice, $iDevNum )",
        "params": [{
            "label": "$sDevice",
            "documentation": "Device name. If blank, the function returns information for the display adapters on the machine based on $iDevNum."
        }, {
            "label": "$iDevNum",
            "documentation": "0-based index value that specifies the display device of interest"
        }]
    },
    "_WinAPI_EnumDisplayMonitors": {
        "documentation": "Enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers)",
        "label": "_WinAPI_EnumDisplayMonitors ( [$hDC = 0 [, $tRECT = 0]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "**[optional]** Handle to a display device context that defines the visible region of interest.If it's 0 (Default), the visible region of interest is the virtual screen that encompasses all the displays on the desktop."
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** $tagRECT structure that specifies a clipping rectangle.This parameter can be 0 (Default) if you don't want to clip the specified region."
        }]
    },
    "_WinAPI_EnumDisplaySettings": {
        "documentation": "Retrieves information about one of the graphics modes for a display device",
        "label": "_WinAPI_EnumDisplaySettings ( $sDevice, $iMode )",
        "params": [{
            "label": "$sDevice",
            "documentation": "The display device about whose graphics mode the function will obtain information.An empty string specifies the current display device on the computer on which the calling process is running."
        }, {
            "label": "$iMode",
            "documentation": "The type of information to be retrieved. This value can be a graphics mode index or one of the following values:    $ENUM_CURRENT_SETTINGS    $ENUM_REGISTRY_SETTINGSThe graphics mode indexes start at zero.To obtain information for all of a display device's graphics modes, make a series of calls to _WinAPI_EnumDisplaySettings().Set $iMode to zero for the first call, and increment $iMode by one for each subsequent call.Continue calling the function until the return value is zero.When you call _WinAPI_EnumDisplaySettings() with $iMode set to zero, the operating system initializes and caches information about the display device.When you call _WinAPI_EnumDisplaySettings() with $iMode set to a non-zero value, the function returns the information that was cached the last time the function was called with $iMode set to zero."
        }]
    },
    "_WinAPI_EnumDllProc": {
        "documentation": "Enumerates an exported functions of the specified dynamic-link library (DLL)",
        "label": "_WinAPI_EnumDllProc ( $sFilePath [, $sMask = '' [, $iFlags = 0]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the library.Although this function searches for a file path when it specified as the relative path or the name without a path, will better to specify a fully qualified path to the library for an unequivocal result."
        }, {
            "label": "$sMask",
            "documentation": "**[optional]** A wildcard string that indicates the function names to be enumerated.This string can optionally contain the wildcards, \"*\" and \"?\". If this parameter is an empty string or omitted (Default), all the exported functions will be enumerated."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The optional flags. This parameter can be one or more of the following values:    $SYMOPT_CASE_INSENSITIVE    $SYMOPT_UNDNAME"
        }]
    },
    "_WinAPI_EnumFiles": {
        "documentation": "Enumerates the files and subdirectories for the specified directory with a name that matches the template",
        "label": "_WinAPI_EnumFiles ( $sDir [, $iFlag = 0 [, $sTemplate = '' [, $bExclude = False]]] )",
        "params": [{
            "label": "$sDir",
            "documentation": "The path to the directory."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The flag that specifies whether to enumerate files, subdirectories, or both.This parameter can be one of the following values:    0 - Enumerate both files and subdirectories (Default).    1 - Enumerate files only.    2 - Enumerate subdirectories only."
        }, {
            "label": "$sTemplate",
            "documentation": "**[optional]** A template that using to enumerating files and directories. For example, \"*.jpe;*.jpeg;*.jpg\"."
        }, {
            "label": "$bExclude",
            "documentation": "**[optional]** Specifies whether the specified template is used to exclude files, valid values:    True - The files matching the template will not be enumerated.    False - The only those files that match the template will be enumerated (Default)."
        }]
    },
    "_WinAPI_EnumFileStreams": {
        "documentation": "Enumerates all streams with a ::$DATA stream type in the specified file or directory",
        "label": "_WinAPI_EnumFileStreams ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the file or directory. The file must be located on volume with NTFS file system."
        }]
    },
    "_WinAPI_EnumFontFamilies": {
        "documentation": "Enumerates all uniquely-named fonts in the system that match the specified font characteristics",
        "label": "_WinAPI_EnumFontFamilies ( [$hDC = 0 [, $sFaceName = '' [, $iCharSet = 1 [, $iFontType = 0x07 [, $sPattern = '' [, $bExclude = False]]]]]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "**[optional]** A handle to the device context from which to enumerate the fonts.If this parameter is 0, the function uses a DC for the application's current screen."
        }, {
            "label": "$sFaceName",
            "documentation": "**[optional]** The typeface name of the font.If this parameter is an empty string (Default), the function enumerates one font is each available typeface name.If this parameter is a valid typeface name, the function enumerates all fonts with the specified name."
        }, {
            "label": "$iCharSet",
            "documentation": "**[optional]** The character set. It can be one of the following predefined values.If this parameter is set to $DEFAULT_CHARSET (Default), the function enumerates all uniquely-named fonts in all character sets.If there are two fonts with the same name, only one is enumerated.If this parameter is set to a valid character set value, the function enumerates only fonts in the specified character set.    $ANSI_CHARSET    $BALTIC_CHARSET    $CHINESEBIG5_CHARSET    $DEFAULT_CHARSET (Default)    $EASTEUROPE_CHARSET    $GB2312_CHARSET    $GREEK_CHARSET    $HANGEUL_CHARSET    $MAC_CHARSET    $OEM_CHARSET    $RUSSIAN_CHARSET    $SHIFTJIS_CHARSET    $SYMBOL_CHARSET    $TURKISH_CHARSET    $VIETNAMESE_CHARSETKorean language edition of Windows:    $JOHAB_CHARSETMiddle East language edition of Windows:    $ARABIC_CHARSET    $HEBREW_CHARSETThai language edition of Windows:    $THAI_CHARSET"
        }, {
            "label": "$iFontType",
            "documentation": "**[optional]** The type of the fonts to enumerating. This parameter can be 0 (vector fonts), (-1) (all fonts), or any combination of the following values.    $DEVICE_FONTTYPE (Default)    $RASTER_FONTTYPE (Default)    $TRUETYPE_FONTTYPE (Default)"
        }, {
            "label": "$sPattern",
            "documentation": "**[optional]** The pattern string to include (exclude) the fonts in (from) the enumerating.This makes sense only if the typeface name is not specified. This string can contain wildcard characters.The pattern will be ignored if this parameter is omitted or an empty string."
        }, {
            "label": "$bExclude",
            "documentation": "**[optional]** Specifies whether to use the pattern to exclude the fonts, valid values:    True - Exclude the matching fonts.    False - Include the matching fonts (Default)."
        }]
    },
    "_WinAPI_EnumHardLinks": {
        "documentation": "Enumerates all the hard links to the specified file",
        "label": "_WinAPI_EnumHardLinks ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the file whose links are to be enumerated."
        }]
    },
    "_WinAPI_EnumMRUList": {
        "documentation": "Enumerates the contents of the most recently used (MRU) list",
        "label": "_WinAPI_EnumMRUList ( $hMRU, $iItem )",
        "params": [{
            "label": "$hMRU",
            "documentation": "Handle of the MRU list, obtained when the list was created."
        }, {
            "label": "$iItem",
            "documentation": "The item to return. If this value is (-1), the function returns the number of items in the MRU list."
        }]
    },
    "_WinAPI_EnumPageFiles": {
        "documentation": "Retrieves information for each installed pagefile in the system",
        "label": "_WinAPI_EnumPageFiles (  )",
        "params": []
    },
    "_WinAPI_EnumProcessHandles": {
        "documentation": "Enumerates a handles that belong to the specified process",
        "label": "_WinAPI_EnumProcessHandles ( [$iPID = 0 [, $iType = 0]] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }, {
            "label": "$iType",
            "documentation": "**[optional]** The value associated with the type of the objects that should be enumerated.This value depends on the operating system. If this parameter is 0 (Default), all handles of the specified process will be enumerated."
        }]
    },
    "_WinAPI_EnumProcessModules": {
        "documentation": "Retrieves a handle and name for each module in the specified process",
        "label": "_WinAPI_EnumProcessModules ( [$iPID = 0 [, $iFlag = 0]] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The filter criteria. This parameter is valid only for Windows Vista or later, and can be one of the following values:    $LIST_MODULES_32BIT    $LIST_MODULES_64BIT    $LIST_MODULES_ALL    $LIST_MODULES_DEFAULT (Default)"
        }]
    },
    "_WinAPI_EnumProcessThreads": {
        "documentation": "Enumerates a threads that belong to the specified process",
        "label": "_WinAPI_EnumProcessThreads ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_EnumProcessWindows": {
        "documentation": "Enumerates a windows that belong to the specified process",
        "label": "_WinAPI_EnumProcessWindows ( [$iPID = 0 [, $bVisible = True]] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }, {
            "label": "$bVisible",
            "documentation": "**[optional]** Specifies whether enumerates the invisible window, valid values:    True - Enumerate only visible windows (Default).    False - Enumerate all windows."
        }]
    },
    "_WinAPI_EnumRawInputDevices": {
        "documentation": "Enumerates the raw input devices attached to the system",
        "label": "_WinAPI_EnumRawInputDevices (  )",
        "params": []
    },
    "_WinAPI_EnumResourceLanguages": {
        "documentation": "Enumerates a language-specific resources, of the specified type and name, associated with a binary module",
        "label": "_WinAPI_EnumResourceLanguages ( $hModule, $sType, $sName )",
        "params": [{
            "label": "$hModule",
            "documentation": "The handle to a module to be searched.Also, this parameter can specify the name of the module to load, it must be a full or relative path.If this parameter is 0 or an empty string, that is equivalent to passing in a handle to the module used to create the current process."
        }, {
            "label": "$sType",
            "documentation": "The type of resource for which the language is being enumerated.It can be a string or an integer value representing a predefined resource type."
        }, {
            "label": "$sName",
            "documentation": "The name of the resource for which the language is being enumerated.It can be a string or an integer value representing a predefined resource type."
        }]
    },
    "_WinAPI_EnumResourceNames": {
        "documentation": "Enumerates the resources of a specified type within a binary module",
        "label": "_WinAPI_EnumResourceNames ( $hModule, $sType )",
        "params": [{
            "label": "$hModule",
            "documentation": "The handle to a module to be searched.Also, this parameter can specify the name of the module to load, it must be a full or relative path.If this parameter is 0 or an empty string, that is equivalent to passing in a handle to the module used to create the current process."
        }, {
            "label": "$sType",
            "documentation": "The type of the resource for which the name is being enumerated.It can be a string or an integer value representing a predefined resource type."
        }]
    },
    "_WinAPI_EnumResourceTypes": {
        "documentation": "Enumerates the resource types within a binary module",
        "label": "_WinAPI_EnumResourceTypes ( $hModule )",
        "params": [{
            "label": "$hModule",
            "documentation": "The handle to a module to be searched.Also, this parameter can specify the name of the module to load, it must be a full or relative path.If this parameter is 0 or an empty string, that is equivalent to passing in a handle to the module used to create the current process."
        }]
    },
    "_WinAPI_EnumSystemGeoID": {
        "documentation": "Enumerates the geographical location identifiers (GEOID) that are available on the operating system",
        "label": "_WinAPI_EnumSystemGeoID (  )",
        "params": []
    },
    "_WinAPI_EnumSystemLocales": {
        "documentation": "Enumerates the locales that are either installed on or supported by an operating system",
        "label": "_WinAPI_EnumSystemLocales ( $iFlag )",
        "params": [{
            "label": "$iFlag",
            "documentation": "The flag specifying the locale identifiers to enumerate.This parameter can have one of the following values:    $LCID_INSTALLED    $LCID_SUPPORTED"
        }]
    },
    "_WinAPI_EnumUILanguages": {
        "documentation": "Enumerates the user interface languages that are available on the operating system",
        "label": "_WinAPI_EnumUILanguages ( [$iFlag = 0] )",
        "params": [{
            "label": "$iFlag",
            "documentation": "**[optional]** The flag identifying the language format. This parameter must be 0 or one of the following values Windows Vista or later:    $MUI_LANGUAGE_ID    $MUI_LANGUAGE_NAME"
        }]
    },
    "_WinAPI_EnumWindows": {
        "documentation": "Enumerates all windows",
        "label": "_WinAPI_EnumWindows ( [$bVisible = True [, $hWnd = Default]] )",
        "params": [{
            "label": "$bVisible",
            "documentation": "**[optional]** Window selection flag:True - Returns only visible windowsFalse - Returns all windows"
        }, {
            "label": "$hWnd",
            "documentation": "**[optional]** Handle of the starting windows (default Desktop windows)"
        }]
    },
    "_WinAPI_EnumWindowsPopup": {
        "documentation": "Enumerates popup windows",
        "label": "_WinAPI_EnumWindowsPopup (  )",
        "params": []
    },
    "_WinAPI_EnumWindowStations": {
        "documentation": "Enumerates all window stations in the current session",
        "label": "_WinAPI_EnumWindowStations (  )",
        "params": []
    },
    "_WinAPI_EnumWindowsTop": {
        "documentation": "Enumerates all top level windows",
        "label": "_WinAPI_EnumWindowsTop (  )",
        "params": []
    },
    "_WinAPI_EqualMemory": {
        "documentation": "Compares two blocks of memory to determine whether the specified number of bytes are identical",
        "label": "_WinAPI_EqualMemory ( $pSource1, $pSource2, $iLength )",
        "params": [{
            "label": "$pSource1",
            "documentation": "A pointer to the block of memory to compare."
        }, {
            "label": "$pSource2",
            "documentation": "A pointer to the block of memory that is compared to the block of memory to which $pSource1 points."
        }, {
            "label": "$iLength",
            "documentation": "The number of bytes to be compared."
        }]
    },
    "_WinAPI_EqualRect": {
        "documentation": "Determines whether the two specified rectangles are equal",
        "label": "_WinAPI_EqualRect ( $tRECT1, $tRECT2 )",
        "params": [{
            "label": "$tRECT1",
            "documentation": "$tagRECT structure that contains the logical coordinates of the first rectangle."
        }, {
            "label": "$tRECT2",
            "documentation": "$tagRECT structure that contains the logical coordinates of the second rectangle."
        }]
    },
    "_WinAPI_EqualRgn": {
        "documentation": "Checks the two specified regions to determine whether they are identical",
        "label": "_WinAPI_EqualRgn ( $hRgn1, $hRgn2 )",
        "params": [{
            "label": "$hRgn1",
            "documentation": "Handle to a region."
        }, {
            "label": "$hRgn2",
            "documentation": "Handle to a region."
        }]
    },
    "_WinAPI_ExcludeClipRect": {
        "documentation": "Creates a new clipping region that consists of the existing clipping region minus the specified rectangle",
        "label": "_WinAPI_ExcludeClipRect ( $hDC, $tRECT )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the specified rectangle."
        }]
    },
    "_WinAPI_ExpandEnvironmentStrings": {
        "documentation": "Expands environment variable strings and replaces them with their defined values",
        "label": "_WinAPI_ExpandEnvironmentStrings ( $sString )",
        "params": [{
            "label": "$sString",
            "documentation": "String to convert for environment variables"
        }]
    },
    "_WinAPI_ExtCreatePen": {
        "documentation": "Creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes",
        "label": "_WinAPI_ExtCreatePen ( $iPenStyle, $iWidth, $iBrushStyle, $iRGB [, $iHatch = 0 [, $aUserStyle = 0 [, $iStart = 0 [, $iEnd = -1]]]] )",
        "params": [{
            "label": "$iPenStyle",
            "documentation": "A combination of type, style, end cap, and join attributes.The values from each category are combined by using the bitwise operation.The pen type can be one of the following values.    $PS_GEOMETRIC    $PS_COSMETICThe pen style can be one of the following values.    $PS_SOLID    $PS_DASH    $PS_DOT    $PS_DASHDOT    $PS_DASHDOTDOT    $PS_NULL    $PS_INSIDEFRAME    $PS_USERSTYLE    $PS_ALTERNATEThe end cap is only specified for geometric pens and can be one of the following values.    $PS_ENDCAP_ROUND    $PS_ENDCAP_SQUARE    $PS_ENDCAP_FLATThe join is only specified for geometric pens and can be one of the following values.    $PS_JOIN_BEVEL    $PS_JOIN_MITER    $PS_JOIN_ROUND"
        }, {
            "label": "$iWidth",
            "documentation": "The width of the pen.If $PS_GEOMETRIC type is specified, the width is given in logical units, otherwise, the width must be set to 1."
        }, {
            "label": "$iBrushStyle",
            "documentation": "A brush style. This parameter can be one of the $BS_* constants."
        }, {
            "label": "$iRGB",
            "documentation": "The color of a pen, in RGB."
        }, {
            "label": "$iHatch",
            "documentation": "**[optional]** A hatch style. For more information, see _WinAPI_CreateBrushIndirect()."
        }, {
            "label": "$aUserStyle",
            "documentation": "**[optional]** The array (dash1, space1, dash2, space2, ... dashN, spaceN) that contains the length of the dashes and spaces in a user-defined style. The first value specifies the length of the first dash, the second value specifies the length of the first space, and so on.This parameter is ignored if $PS_USERSTYLE style is not specified. The style count is limited to 16."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start filling at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop filling at."
        }]
    },
    "_WinAPI_ExtCreateRegion": {
        "documentation": "Creates a region from the specified region and transformation data",
        "label": "_WinAPI_ExtCreateRegion ( $tRGNDATA [, $tXFORM = 0] )",
        "params": [{
            "label": "$tRGNDATA",
            "documentation": "$tagRGNDATA structure that contains the region data in logical units."
        }, {
            "label": "$tXFORM",
            "documentation": "**[optional]** $tagXFORM structure that defines the transformation to be performed on the region."
        }]
    },
    "_WinAPI_ExtFloodFill": {
        "documentation": "Fills an area of the display surface with the current brush",
        "label": "_WinAPI_ExtFloodFill ( $hDC, $iX, $iY, $iRGB [, $iType = 0] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in logical units, of the point where filling is to start."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical units, of the point where filling is to start."
        }, {
            "label": "$iRGB",
            "documentation": "The color of the boundary or of the area to be filled, in RGB.The interpretation of color depends on the value of the $iType parameter."
        }, {
            "label": "$iType",
            "documentation": "**[optional]** The type of fill operation to be performed.This parameter must be one of the following values:    $FLOODFILLBORDER (Default)    $FLOODFILLSURFACE"
        }]
    },
    "_WinAPI_ExtractIcon": {
        "documentation": "Extracts an icon from the specified executable file, DLL, or icon file",
        "label": "_WinAPI_ExtractIcon ( $sIcon, $iIndex [, $bSmall = False] )",
        "params": [{
            "label": "$sIcon",
            "documentation": "The name of an executable file, DLL, or icon file from which icons will be extracted."
        }, {
            "label": "$iIndex",
            "documentation": "The 0-based index of the icon to extract.If this value is a negative number, the function extracts the icon whose resource identifier is equal to the absolute value of $iIndex."
        }, {
            "label": "$bSmall",
            "documentation": "**[optional]** Specifies whether to extract a small icon, valid values:    True - Extract a small icon.    False - Extract a large icon (Default)."
        }]
    },
    "_WinAPI_ExtractIconEx": {
        "documentation": "Creates an array of handles to large or small icons extracted from a file",
        "label": "_WinAPI_ExtractIconEx ( $sFilePath, $iIndex, $paLarge, $paSmall, $iIcons )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Name of an executable file, DLL, or icon file from which icons will be extracted"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based index of the first icon to extract"
        }, {
            "label": "$paLarge",
            "documentation": "Pointer to an array of icon handles that receives handles to the large icons extracted from the file.If this parameter is 0, no large icons are extracted from the file."
        }, {
            "label": "$paSmall",
            "documentation": "Pointer to an array of icon handles that receives handles to the small icons extracted from the file.If this parameter is 0, no small icons are extracted from the file."
        }, {
            "label": "$iIcons",
            "documentation": "Specifies the number of icons to extract from the file"
        }]
    },
    "_WinAPI_ExtSelectClipRgn": {
        "documentation": "Combines the specified region with the current clipping region",
        "label": "_WinAPI_ExtSelectClipRgn ( $hDC, $hRgn [, $iMode = 5] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$hRgn",
            "documentation": "Handle to the region to be selected. This parameter can only be 0 when the $RGN_COPY mode is specified."
        }, {
            "label": "$iMode",
            "documentation": "**[optional]** The operation to be performed. It must be one of the following values.$RGN_AND$RGN_COPY (Default)$RGN_DIFF$RGN_OR$RGN_XOR"
        }]
    },
    "_WinAPI_FatalAppExit": {
        "documentation": "Displays a message box and terminates the application",
        "label": "_WinAPI_FatalAppExit ( $sMessage )",
        "params": [{
            "label": "$sMessage",
            "documentation": "The string that is displayed in the message box"
        }]
    },
    "_WinAPI_FatalExit": {
        "documentation": "Transfers execution control to the debugger",
        "label": "_WinAPI_FatalExit ( $iCode )",
        "params": [{
            "label": "$iCode",
            "documentation": "The error code associated with the exit."
        }]
    },
    "_WinAPI_FileEncryptionStatus": {
        "documentation": "Retrieves the encryption status of the specified file",
        "label": "_WinAPI_FileEncryptionStatus ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file to retrieve encryption status."
        }]
    },
    "_WinAPI_FileExists": {
        "documentation": "Tests whether the specified path is existing file",
        "label": "_WinAPI_FileExists ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the file to test."
        }]
    },
    "_WinAPI_FileIconInit": {
        "documentation": "Initializes or reinitializes the system image list",
        "label": "_WinAPI_FileIconInit ( [$bRestore = True] )",
        "params": [{
            "label": "$bRestore",
            "documentation": "**[optional]** Specifies whether to restore the system image cache, valid values:    True - Restore the system image cache from disk (Default).    False - Don't restore."
        }]
    },
    "_WinAPI_FileInUse": {
        "documentation": "Tests whether the specified file in use by another application",
        "label": "_WinAPI_FileInUse ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file to test. If the path specifies a directory, the function fails."
        }]
    },
    "_WinAPI_FillMemory": {
        "documentation": "Fills a block of memory with the given value",
        "label": "_WinAPI_FillMemory ( $pMemory, $iLength [, $iValue = 0] )",
        "params": [{
            "label": "$pMemory",
            "documentation": "A pointer to the starting address of a memory to be filled."
        }, {
            "label": "$iLength",
            "documentation": "The number of bytes to be filled."
        }, {
            "label": "$iValue",
            "documentation": "**[optional]** The value to fill the memory. Default is 0."
        }]
    },
    "_WinAPI_FillPath": {
        "documentation": "Closes any open figures in the current path and fills the path's interior by using the current brush",
        "label": "_WinAPI_FillPath ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context that contains a valid path."
        }]
    },
    "_WinAPI_FillRect": {
        "documentation": "Fills a rectangle by using the specified brush",
        "label": "_WinAPI_FillRect ( $hDC, $tRECT, $hBrush )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context"
        }, {
            "label": "$tRECT",
            "documentation": "a $tagRECT structure or pointer to it that contains the logical coordinates of the rectangle to be filled"
        }, {
            "label": "$hBrush",
            "documentation": "Handle to the brush used to fill the rectangle"
        }]
    },
    "_WinAPI_FillRgn": {
        "documentation": "Fills a region by using the specified brush",
        "label": "_WinAPI_FillRgn ( $hDC, $hRgn, $hBrush )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$hRgn",
            "documentation": "Handle to the region to be filled. The region's coordinates are presumed to be in logical units."
        }, {
            "label": "$hBrush",
            "documentation": "Handle to the brush to be used to fill the region."
        }]
    },
    "_WinAPI_FindClose": {
        "documentation": "Closes a file search handle",
        "label": "_WinAPI_FindClose ( $hSearch )",
        "params": [{
            "label": "$hSearch",
            "documentation": "The file search handle opened by the _WinAPI_FindFirst... functions."
        }]
    },
    "_WinAPI_FindCloseChangeNotification": {
        "documentation": "Stops change notification handle monitoring",
        "label": "_WinAPI_FindCloseChangeNotification ( $hChange )",
        "params": [{
            "label": "$hChange",
            "documentation": "A handle to a change notification handle created by the _WinAPI_FindFirstChangeNotification() function."
        }]
    },
    "_WinAPI_FindExecutable": {
        "documentation": "Retrieves the name of the executable file associated with the specified file name",
        "label": "_WinAPI_FindExecutable ( $sFileName [, $sDirectory = \"\"] )",
        "params": [{
            "label": "$sFileName",
            "documentation": "Fully qualified path to existing file"
        }, {
            "label": "$sDirectory",
            "documentation": "**[optional]** Default directory"
        }]
    },
    "_WinAPI_FindFirstChangeNotification": {
        "documentation": "Creates a change notification handle and sets up initial change notification filter conditions",
        "label": "_WinAPI_FindFirstChangeNotification ( $sDirectory, $iFlags [, $bSubtree = False] )",
        "params": [{
            "label": "$sDirectory",
            "documentation": "The full path of the directory to be watched."
        }, {
            "label": "$iFlags",
            "documentation": "The filter conditions that satisfy a change notification wait. This parameter can be one or more of the following values:    $FILE_NOTIFY_CHANGE_FILE_NAME    $FILE_NOTIFY_CHANGE_DIR_NAME    $FILE_NOTIFY_CHANGE_ATTRIBUTES    $FILE_NOTIFY_CHANGE_SIZE    $FILE_NOTIFY_CHANGE_LAST_WRITE    $FILE_NOTIFY_CHANGE_SECURITY"
        }, {
            "label": "$bSubtree",
            "documentation": "**[optional]** Specifies whether to monitor the subdirectories of the specified directory, valid values:    True - Monitor the directory tree rooted at the specified directory.    False - Monitor only the specified directory (Default)."
        }]
    },
    "_WinAPI_FindFirstFile": {
        "documentation": "Searches a directory for a file or subdirectory with a name that matches a specific name",
        "label": "_WinAPI_FindFirstFile ( $sFilePath, $tData )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The directory or path, and the file name, which can include wildcard characters, for example, an asterisk \"*\" or a question mark \"?\".If the string ends with a wildcard, period \".\", or directory name, the user must have access permissions to the root and all subdirectories on the path."
        }, {
            "label": "$tData",
            "documentation": "A $tagWIN32_FIND_DATA structure or a pointer to it that receives information about a found file or directory."
        }]
    },
    "_WinAPI_FindFirstFileName": {
        "documentation": "Creates an enumeration of all the hard links to the specified file",
        "label": "_WinAPI_FindFirstFileName ( $sFilePath, ByRef $sLink )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file."
        }, {
            "label": "$sLink",
            "documentation": "Returns the first link name found for the specified file."
        }]
    },
    "_WinAPI_FindFirstStream": {
        "documentation": "Enumerates the first stream with a ::$DATA stream type in the specified file or directory",
        "label": "_WinAPI_FindFirstStream ( $sFilePath, $tData )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The fully-qualified file name."
        }, {
            "label": "$tData",
            "documentation": "A $tagWIN32_FIND_STREAM_DATA structure or a pointer to it that receives information about the stream."
        }]
    },
    "_WinAPI_FindNextChangeNotification": {
        "documentation": "Requests that the operating system signal a change notification handle the next time it detects an appropriate change",
        "label": "_WinAPI_FindNextChangeNotification ( $hChange )",
        "params": [{
            "label": "$hChange",
            "documentation": "A handle to a change notification handle created by the _WinAPI_FindFirstChangeNotification() function."
        }]
    },
    "_WinAPI_FindNextFile": {
        "documentation": "Continues a file or directory search",
        "label": "_WinAPI_FindNextFile ( $hSearch, $tData )",
        "params": [{
            "label": "$hSearch",
            "documentation": "The search handle returned by a previous call to the _WinAPI_FindFirstFile() function."
        }, {
            "label": "$tData",
            "documentation": "A $tagWIN32_FIND_DATA structure or a pointer to it that receives information about a found file or directory."
        }]
    },
    "_WinAPI_FindNextFileName": {
        "documentation": "Continues enumerating the hard links",
        "label": "_WinAPI_FindNextFileName ( $hSearch, ByRef $sLink )",
        "params": [{
            "label": "$hSearch",
            "documentation": "A handle to the enumeration that is returned by a successful call to _WinAPI_FindFirstFileName() function."
        }, {
            "label": "$sLink",
            "documentation": "Returns the next link name that was found."
        }]
    },
    "_WinAPI_FindNextStream": {
        "documentation": "Continues a stream search",
        "label": "_WinAPI_FindNextStream ( $hSearch, $tData )",
        "params": [{
            "label": "$hSearch",
            "documentation": "The search handle returned by a previous call to the _WinAPI_FindFirstStream() function."
        }, {
            "label": "$tData",
            "documentation": "A $tagWIN32_FIND_STREAM_DATA structure or a pointer to it that receives information about the stream."
        }]
    },
    "_WinAPI_FindResource": {
        "documentation": "Determines the location of a resource with the specified type and name in the specified module",
        "label": "_WinAPI_FindResource ( $hInstance, $sType, $sName )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to the module whose executable file contains the resource.A value of 0 specifies the module handle associated with the image file that the operating system used to create the current process."
        }, {
            "label": "$sType",
            "documentation": "The type of the resource. This parameter can be string or integer value."
        }, {
            "label": "$sName",
            "documentation": "The name of the resource. This parameter can be string or integer value."
        }]
    },
    "_WinAPI_FindResourceEx": {
        "documentation": "Determines the location of the resource with the specified type, name, and language in the specified module",
        "label": "_WinAPI_FindResourceEx ( $hInstance, $sType, $sName, $iLanguage )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to the module whose executable file contains the resource.A value of 0 specifies the module handle associated with the image file that the operating system used to create the current process."
        }, {
            "label": "$sType",
            "documentation": "The type of the resource. This parameter can be string or integer value."
        }, {
            "label": "$sName",
            "documentation": "The name of the resource. This parameter can be string or integer value."
        }, {
            "label": "$iLanguage",
            "documentation": "The language of the resource."
        }]
    },
    "_WinAPI_FindTextDlg": {
        "documentation": "Creates a system-defined modeless Find dialog box to search for text in a document",
        "label": "_WinAPI_FindTextDlg ( $hOwner [, $sFindWhat = '' [, $iFlags = 0 [, $pFindProc = 0 [, $lParam = 0]]]] )",
        "params": [{
            "label": "$hOwner",
            "documentation": "A handle to the window that owns the dialog box. The window procedure of the specified window receives FINDMSGSTRING messages from the dialog box. This parameter can be any valid window handle, but it must not be 0."
        }, {
            "label": "$sFindWhat",
            "documentation": "**[optional]** The search string that is displayed when you initialize the dialog box."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** A set of bit flags that used to initialize the dialog box.The dialog box sets these flags when it sends the FINDMSGSTRING registered message to indicate the user's input.This parameter can be one or more of the following values.    $FR_DIALOGTERM    $FR_DOWN    $FR_ENABLEHOOK    $FR_ENABLETEMPLATE    $FR_ENABLETEMPLATEHANDLE    $FR_FINDNEXT    $FR_HIDEUPDOWN    $FR_HIDEMATCHCASE    $FR_HIDEWHOLEWORD    $FR_MATCHCASE    $FR_NOMATCHCASE    $FR_NOUPDOWN    $FR_NOWHOLEWORD    $FR_REPLACE    $FR_REPLACEALL    $FR_SHOWHELP    $FR_WHOLEWORD"
        }, {
            "label": "$pFindProc",
            "documentation": "**[optional]** Pointer to an hook procedure that can process messages intended for the dialog box.This parameter is ignored unless the $FR_ENABLEHOOK flag is not set.(See MSDN for more information)"
        }, {
            "label": "$lParam",
            "documentation": "**[optional]** Application-defined data that the system passes to the hook procedure."
        }]
    },
    "_WinAPI_FindWindow": {
        "documentation": "Retrieves the handle to the top-level window whose class name and window name match",
        "label": "_WinAPI_FindWindow ( $sClassName, $sWindowName )",
        "params": [{
            "label": "$sClassName",
            "documentation": "A string that specifies the class name or is an atom that identifies the class-name string.If this parameter is an atom, it must be a global atom created by a call to the GlobalAddAtom function.The atom, a 16-bit value, must be placed in the low-order word of the $sClassName string and the high-order word must be zero."
        }, {
            "label": "$sWindowName",
            "documentation": "A string that specifies the window name. If this parameter is blank, all window names match."
        }]
    },
    "_WinAPI_FlashWindow": {
        "documentation": "Flashes the specified window one time",
        "label": "_WinAPI_FlashWindow ( $hWnd [, $bInvert = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be flashed. The window can be either open or minimized."
        }, {
            "label": "$bInvert",
            "documentation": "**[optional]** If True, the window is flashed from one state to the other.If False the window is returned to its original state.When an application is minimized and this parameter is True, the taskbar window button flashes active/inactive.If it is False, the taskbar window button flashes inactive, meaning that it does not change colors.It flashes as if it were being redrawn, but it does not provide the visual invert clue to the user."
        }]
    },
    "_WinAPI_FlashWindowEx": {
        "documentation": "Flashes the specified window",
        "label": "_WinAPI_FlashWindowEx ( $hWnd [, $iFlags = 3 [, $iCount = 3 [, $iTimeout = 0]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be flashed. The window can be either open or minimized."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flash status. Can be one or more of the following values:    0 - Stop flashing. The system restores the window to its original state.    1 - Flash the window caption    2 - Flash the taskbar button    4 - Flash continuously until stopped    8 - Flash continuously until the window comes to the foreground"
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** The number of times to flash the window"
        }, {
            "label": "$iTimeout",
            "documentation": "**[optional]** The rate at which the window is to be flashed, in milliseconds.If 0, the function uses the default cursor blink rate."
        }]
    },
    "_WinAPI_FlattenPath": {
        "documentation": "Transforms any curves in the path that is selected into the current DC, turning each curve into a sequence of lines",
        "label": "_WinAPI_FlattenPath ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context that contains a valid path."
        }]
    },
    "_WinAPI_FloatToDWord": {
        "documentation": "Converts a value of type FLOAT to a value of type DWORD",
        "label": "_WinAPI_FloatToDWord ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "The value to be converted."
        }]
    },
    "_WinAPI_FloatToInt": {
        "documentation": "Returns a 4 byte float as an integer value",
        "label": "_WinAPI_FloatToInt ( $nFloat )",
        "params": [{
            "label": "$nFloat",
            "documentation": "Float value"
        }]
    },
    "_WinAPI_FlushFileBuffers": {
        "documentation": "Flushes the buffers of a specified file and causes all buffered data to be written",
        "label": "_WinAPI_FlushFileBuffers ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to an open file. The file handle must have the $GENERIC_WRITE access right.If $hFile is a handle to a communications device, the function only flushes the transmit buffer.If $hFile is a handle to the server end of a named pipe the function does not return until the client has read all buffered data from the pipe."
        }]
    },
    "_WinAPI_FlushFRBuffer": {
        "documentation": "Destroys the internal buffer that used the _WinAPI_FindTextDlg() and _WinAPI_ReplaceTextDlg() functions",
        "label": "_WinAPI_FlushFRBuffer (  )",
        "params": []
    },
    "_WinAPI_FlushViewOfFile": {
        "documentation": "Writes to the disk a byte range within a mapped view of a file",
        "label": "_WinAPI_FlushViewOfFile ( $pAddress [, $iBytes = 0] )",
        "params": [{
            "label": "$pAddress",
            "documentation": "A pointer to the base address of the byte range to be flushed to the disk representation of the mapped file."
        }, {
            "label": "$iBytes",
            "documentation": "**[optional]** The number of bytes to be flushed.If $iBytes is 0 (Default), the file is flushed from the base address to the end of the mapping."
        }]
    },
    "_WinAPI_FormatDriveDlg": {
        "documentation": "Opens the Shell's Format dialog",
        "label": "_WinAPI_FormatDriveDlg ( $sDrive [, $iOption = 0 [, $hParent = 0]] )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive to format, in the format D:, E:, etc."
        }, {
            "label": "$iOption",
            "documentation": "**[optional]** This parameter must be 0 or one of the following values that alter the default format options in the dialog.    $SHFMT_OPT_FULL (Default)    $SHFMT_OPT_QUICKFORMAT    $SHFMT_OPT_SYSONLY"
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle of the parent window of the dialog."
        }]
    },
    "_WinAPI_FormatMessage": {
        "documentation": "Formats a message string",
        "label": "_WinAPI_FormatMessage ( $iFlags, $pSource, $iMessageID, $iLanguageID, ByRef $pBuffer, $iSize, $vArguments )",
        "params": [{
            "label": "$iFlags",
            "documentation": "Contains a set of bit flags that specify aspects of the formatting process and how to interpret the $pSource parameter.The low-order byte of $iFlags specifies how the function handles line breaks in the output buffer.The low-order byte can also specify the maximum width of a formatted output line."
        }, {
            "label": "$pSource",
            "documentation": "Pointer to message source"
        }, {
            "label": "$iMessageID",
            "documentation": "Requested message identifier"
        }, {
            "label": "$iLanguageID",
            "documentation": "Language identifier for requested message"
        }, {
            "label": "$pBuffer",
            "documentation": "Pointer to message buffer or string variable that will contain the message"
        }, {
            "label": "$iSize",
            "documentation": "Maximum size of message buffer"
        }, {
            "label": "$vArguments",
            "documentation": "Address of array of message inserts"
        }]
    },
    "_WinAPI_FrameRect": {
        "documentation": "Draws a border around the specified rectangle by using the specified brush",
        "label": "_WinAPI_FrameRect ( $hDC, $tRECT, $hBrush )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context in which the border is drawn"
        }, {
            "label": "$tRECT",
            "documentation": "A $tagRECT structure or a pointer to it that contains the logical coordinates of the upper-left and lower-right corners of the rectangle"
        }, {
            "label": "$hBrush",
            "documentation": "Handle to the brush used to draw the border"
        }]
    },
    "_WinAPI_FrameRgn": {
        "documentation": "Draws a border around the specified region by using the specified brush",
        "label": "_WinAPI_FrameRgn ( $hDC, $hRgn, $hBrush, $iWidth, $iHeight )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$hRgn",
            "documentation": "Handle to the region to be enclosed in a border.The region's coordinates are presumed to be in logical units."
        }, {
            "label": "$hBrush",
            "documentation": "Handle to the brush to be used to draw the border."
        }, {
            "label": "$iWidth",
            "documentation": "The width, in logical units, of vertical brush strokes."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in logical units, of horizontal brush strokes."
        }]
    },
    "_WinAPI_FreeLibrary": {
        "documentation": "Decrements the reference count of the loaded dynamic-link library (DLL) module",
        "label": "_WinAPI_FreeLibrary ( $hModule )",
        "params": [{
            "label": "$hModule",
            "documentation": "Identifies the loaded library module"
        }]
    },
    "_WinAPI_FreeMemory": {
        "documentation": "Frees a memory block in the internal library heap",
        "label": "_WinAPI_FreeMemory ( $pMemory )",
        "params": [{
            "label": "$pMemory",
            "documentation": "A pointer to the valid memory block to be freed."
        }]
    },
    "_WinAPI_FreeMRUList": {
        "documentation": "Frees the handle associated with the most recently used (MRU) list and writes cached data to the registry",
        "label": "_WinAPI_FreeMRUList ( $hMRU )",
        "params": [{
            "label": "$hMRU",
            "documentation": "Handle of the MRU list to free."
        }]
    },
    "_WinAPI_FreeResource": {
        "documentation": "Decrements (decreases by one) the reference count of a loaded resource",
        "label": "_WinAPI_FreeResource ( $hData )",
        "params": [{
            "label": "$hData",
            "documentation": "Handle of the resource was created by _WinAPI_LoadResource()."
        }]
    },
    "_WinAPI_GdiComment": {
        "documentation": "Copies a comment from a buffer into a specified enhanced-format metafile",
        "label": "_WinAPI_GdiComment ( $hDC, $pBuffer, $iSize )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to an enhanced-metafile device context."
        }, {
            "label": "$pBuffer",
            "documentation": "A pointer to the buffer that contains the comment."
        }, {
            "label": "$iSize",
            "documentation": "The length of the comment buffer, in bytes."
        }]
    },
    "_WinAPI_GetActiveWindow": {
        "documentation": "Retrieves the window handle to the active window attached to the calling process's message queue",
        "label": "_WinAPI_GetActiveWindow (  )",
        "params": []
    },
    "_WinAPI_GetAllUsersProfileDirectory": {
        "documentation": "Retrieves the path to the root of the directory that contains program data shared by all users",
        "label": "_WinAPI_GetAllUsersProfileDirectory (  )",
        "params": []
    },
    "_WinAPI_GetAncestor": {
        "documentation": "Retrieves the handle to the ancestor of the specified window",
        "label": "_WinAPI_GetAncestor ( $hWnd [, $iFlags = 1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose ancestor is to be retrieved.If this is the desktop window, the function returns 0."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Specifies the ancestor to be retrieved. This parameter can be one of the following values:    $GA_PARENT - Retrieves the parent window    $GA_ROOT - Retrieves the root window by walking the chain of parent windows    $GA_ROOTOWNER - Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent."
        }]
    },
    "_WinAPI_GetApplicationRestartSettings": {
        "documentation": "Retrieves the restart information registered for the specified process",
        "label": "_WinAPI_GetApplicationRestartSettings ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetArcDirection": {
        "documentation": "Retrieves the current arc direction for the specified device context",
        "label": "_WinAPI_GetArcDirection ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetAsyncKeyState": {
        "documentation": "Determines whether a key is up or down at the time the function is called",
        "label": "_WinAPI_GetAsyncKeyState ( $iKey )",
        "params": [{
            "label": "$iKey",
            "documentation": "Key to test for"
        }]
    },
    "_WinAPI_GetBinaryType": {
        "documentation": "Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file",
        "label": "_WinAPI_GetBinaryType ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The full path of the file whose executable type is to be determined."
        }]
    },
    "_WinAPI_GetBitmapBits": {
        "documentation": "Copies the bitmap bits of a specified device-dependent bitmap into a buffer",
        "label": "_WinAPI_GetBitmapBits ( $hBitmap, $iSize, $pBits )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to the device-dependent bitmap."
        }, {
            "label": "$iSize",
            "documentation": "The number of bytes to copy from the bitmap into the buffer."
        }, {
            "label": "$pBits",
            "documentation": "A pointer to a buffer to receive the bitmap bits."
        }]
    },
    "_WinAPI_GetBitmapDimension": {
        "documentation": "Retrieves a dimension of the specified bitmap",
        "label": "_WinAPI_GetBitmapDimension ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap to retrieve dimension."
        }]
    },
    "_WinAPI_GetBitmapDimensionEx": {
        "documentation": "Retrieves the dimensions of a compatible bitmap",
        "label": "_WinAPI_GetBitmapDimensionEx ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to a compatible bitmap (DDB)."
        }]
    },
    "_WinAPI_GetBkColor": {
        "documentation": "Retrieves the current background color for the specified device context",
        "label": "_WinAPI_GetBkColor ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetBkMode": {
        "documentation": "Returns the current background mix mode for a specified device context",
        "label": "_WinAPI_GetBkMode ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context whose background mode is to be returned"
        }]
    },
    "_WinAPI_GetBoundsRect": {
        "documentation": "Obtains the current accumulated bounding rectangle for a specified device context",
        "label": "_WinAPI_GetBoundsRect ( $hDC [, $iFlags = 0] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context whose bounding rectangle the function will return."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specifies how the function will behave. This parameter can be the following value:    $DCB_RESET"
        }]
    },
    "_WinAPI_GetBrushOrg": {
        "documentation": "Retrieves the current brush origin for the specified device context",
        "label": "_WinAPI_GetBrushOrg ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetBValue": {
        "documentation": "Retrieves an intensity value for the blue component of a 32-bit RGB value",
        "label": "_WinAPI_GetBValue ( $iRGB )",
        "params": [{
            "label": "$iRGB",
            "documentation": "The color value, in RGB."
        }]
    },
    "_WinAPI_GetCaretBlinkTime": {
        "documentation": "Returns the time required to invert the caret's pixels",
        "label": "_WinAPI_GetCaretBlinkTime (  )",
        "params": []
    },
    "_WinAPI_GetCaretPos": {
        "documentation": "Retrieves the caret's position",
        "label": "_WinAPI_GetCaretPos (  )",
        "params": []
    },
    "_WinAPI_GetCDType": {
        "documentation": "Retrieves a type of the media which is loaded into a specified CD-ROM device",
        "label": "_WinAPI_GetCDType ( $sDrive )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive letter of the CD tray to retrieve information, in the format D:, E:, etc."
        }]
    },
    "_WinAPI_GetClassInfoEx": {
        "documentation": "Retrieves information about a window class",
        "label": "_WinAPI_GetClassInfoEx ( $sClass [, $hInstance = 0] )",
        "params": [{
            "label": "$sClass",
            "documentation": "The class name. The name must be that of a preregistered class or a class registered by a previous call to the _WinAPI_RegisterClass() or _WinAPI_RegisterClassEx() function.Alternatively, this parameter can be a class atom.The atom must be in the low-order word of $sClass; the high-order word must be zero."
        }, {
            "label": "$hInstance",
            "documentation": "**[optional]** Handle to the instance of the application that created the class.To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to 0 (Default)."
        }]
    },
    "_WinAPI_GetClassLongEx": {
        "documentation": "Retrieves the specified value associated with the specified window",
        "label": "_WinAPI_GetClassLongEx ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window."
        }, {
            "label": "$iIndex",
            "documentation": "The value to retrieve. This parameter can be one of the following values.$GCL_CBCLSEXTRA$GCL_CBWNDEXTRA$GCL_HBRBACKGROUND$GCL_HCURSOR$GCL_HICON$GCL_HICONSM$GCL_HMODULE$GCL_MENUNAME$GCL_STYLE$GCL_WNDPROC"
        }]
    },
    "_WinAPI_GetClassName": {
        "documentation": "Retrieves the name of the class to which the specified window belongs",
        "label": "_WinAPI_GetClassName ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }]
    },
    "_WinAPI_GetClientHeight": {
        "documentation": "Retrieves the height of a window's client area",
        "label": "_WinAPI_GetClientHeight ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }]
    },
    "_WinAPI_GetClientRect": {
        "documentation": "Retrieves the coordinates of a window's client area",
        "label": "_WinAPI_GetClientRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }]
    },
    "_WinAPI_GetClientWidth": {
        "documentation": "Retrieves the width of a window's client area",
        "label": "_WinAPI_GetClientWidth ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }]
    },
    "_WinAPI_GetClipboardSequenceNumber": {
        "documentation": "Retrieves the clipboard sequence number for the current window station",
        "label": "_WinAPI_GetClipboardSequenceNumber (  )",
        "params": []
    },
    "_WinAPI_GetClipBox": {
        "documentation": "Retrieves the dimensions of the bounding rectangle of the visible area",
        "label": "_WinAPI_GetClipBox ( $hDC, ByRef $tRECT )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that is created by this function, and contains the rectangle dimensions, in logical units."
        }]
    },
    "_WinAPI_GetClipCursor": {
        "documentation": "Retrieves the screen coordinates of the rectangular area to which the cursor is confined",
        "label": "_WinAPI_GetClipCursor (  )",
        "params": []
    },
    "_WinAPI_GetClipRgn": {
        "documentation": "Retrieves a handle identifying the current application-defined clipping region",
        "label": "_WinAPI_GetClipRgn ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetColorAdjustment": {
        "documentation": "Retrieves the color adjustment for the specified device context (DC)",
        "label": "_WinAPI_GetColorAdjustment ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "A handle to the device context."
        }]
    },
    "_WinAPI_GetCompressedFileSize": {
        "documentation": "Retrieves the actual number of bytes of disk storage used to store a specified file",
        "label": "_WinAPI_GetCompressedFileSize ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file."
        }]
    },
    "_WinAPI_GetCompression": {
        "documentation": "Retrieves the current compression state of a file or directory",
        "label": "_WinAPI_GetCompression ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the file or directory to retrieve compression state."
        }]
    },
    "_WinAPI_GetConnectedDlg": {
        "documentation": "Launches the Get Connected wizard within the calling application to enable network connectivity",
        "label": "_WinAPI_GetConnectedDlg ( $iDlg [, $iFlags = 0 [, $hParent = 0]] )",
        "params": [{
            "label": "$iDlg",
            "documentation": "Specifies which the dialog should be launched, valid values:0 - Local area network connectivity.1 - Internet connectivity.2 - Virtual private network (VPN) connectivity."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Specifies an additional options. This parameter can be one or more of the following values.0 - Default.1 - Do not display the Get Connected wizard page that shows whether or not the user has a working or active Internet connection.2 - Do not display the Get Connected wizard page that shows a list of existing internet connections.4 - Hide the finish page of the Get Connected wizard."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to the parent window that called this API."
        }]
    },
    "_WinAPI_GetCurrentDirectory": {
        "documentation": "Retrieves the current directory for the current process",
        "label": "_WinAPI_GetCurrentDirectory (  )",
        "params": []
    },
    "_WinAPI_GetCurrentHwProfile": {
        "documentation": "Retrieves information about the current hardware profile for the local computer",
        "label": "_WinAPI_GetCurrentHwProfile (  )",
        "params": []
    },
    "_WinAPI_GetCurrentObject": {
        "documentation": "Retrieves a handle to an object of the specified type that has been selected into the specified device context",
        "label": "_WinAPI_GetCurrentObject ( $hDC, $iType )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iType",
            "documentation": "The object type to be queried. This parameter can be one of the following values.$OBJ_BITMAP$OBJ_BRUSH$OBJ_COLORSPACE$OBJ_FONT$OBJ_PAL$OBJ_PEN"
        }]
    },
    "_WinAPI_GetCurrentPosition": {
        "documentation": "Retrieves the current position for the specified device context",
        "label": "_WinAPI_GetCurrentPosition ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetCurrentProcess": {
        "documentation": "Returns the process handle of the calling process",
        "label": "_WinAPI_GetCurrentProcess (  )",
        "params": []
    },
    "_WinAPI_GetCurrentProcessExplicitAppUserModelID": {
        "documentation": "Retrieves the application-defined, explicit Application User Model ID for the current process",
        "label": "_WinAPI_GetCurrentProcessExplicitAppUserModelID (  )",
        "params": []
    },
    "_WinAPI_GetCurrentProcessID": {
        "documentation": "Returns the process identifier of the calling process",
        "label": "_WinAPI_GetCurrentProcessID (  )",
        "params": []
    },
    "_WinAPI_GetCurrentThread": {
        "documentation": "Retrieves a pseudo handle for the calling thread",
        "label": "_WinAPI_GetCurrentThread (  )",
        "params": []
    },
    "_WinAPI_GetCurrentThreadId": {
        "documentation": "Returns the thread identifier of the calling thread",
        "label": "_WinAPI_GetCurrentThreadId (  )",
        "params": []
    },
    "_WinAPI_GetCursor": {
        "documentation": "Retrieves a handle to the current cursor",
        "label": "_WinAPI_GetCursor (  )",
        "params": []
    },
    "_WinAPI_GetCursorInfo": {
        "documentation": "Retrieves information about the global cursor",
        "label": "_WinAPI_GetCursorInfo (  )",
        "params": []
    },
    "_WinAPI_GetDateFormat": {
        "documentation": "Formats a date as a date string for a locale specified by the locale identifier",
        "label": "_WinAPI_GetDateFormat ( [$iLCID = 0 [, $tSYSTEMTIME = 0 [, $iFlags = 0 [, $sFormat = '']]]] )",
        "params": [{
            "label": "$iLCID",
            "documentation": "**[optional]** The locale identifier (LCID) that specifies the locale or one of the following predefined values.    $LOCALE_INVARIANT    $LOCALE_SYSTEM_DEFAULT    $LOCALE_USER_DEFAULT (Default)Windows Vista or later    $LOCALE_CUSTOM_DEFAULT    $LOCALE_CUSTOM_UI_DEFAULT    $LOCALE_CUSTOM_UNSPECIFIED"
        }, {
            "label": "$tSYSTEMTIME",
            "documentation": "**[optional]** $tagSYSTEMTIME structure that contains the date information to format.If this parameter is 0 (Default), the function will use the current local system date."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specifies the date format options.This parameter can be one or more of the following values:    $DATE_LONGDATE    $DATE_SHORTDATE (Default)    $DATE_USE_ALT_CALENDARWindows Vista or later    $DATE_LTRREADING    $DATE_RTLREADING    $DATE_YEARMONTHWindows 7 or later    $DATE_AUTOLAYOUT"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** The string that is used to form the date. For example, \"dddd MMMM, yyyy\".If this parameter is omitted or an empty string (Default), the function returns the string according to the date format for the specified locale."
        }]
    },
    "_WinAPI_GetDC": {
        "documentation": "Retrieves a handle of a display device context for the client area a window",
        "label": "_WinAPI_GetDC ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }]
    },
    "_WinAPI_GetDCEx": {
        "documentation": "Retrieves a handle to a device context (DC) for the client area of a specified window",
        "label": "_WinAPI_GetDCEx ( $hWnd, $hRgn, $iFlags )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose DC is to be retrieved.If this value is 0, _WinAPI_GetDCEx() retrieves the DC for the entire screen.If the value of $iFlags parameter is $DCX_INTERSECTRGN or DCX_EXCLUDERGN, then the operating system assumes ownership of the region and will automatically delete it when it is no longer needed.In this case, the application should not use or delete the region after a successful call to _WinAPI_GetDCEx()."
        }, {
            "label": "$hRgn",
            "documentation": "A clipping region that may be combined with the visible region of the DC."
        }, {
            "label": "$iFlags",
            "documentation": "Flags that specifies how the DC is created.This parameter can be one or more of the following values:    $DCX_WINDOW    $DCX_CACHE    $DCX_PARENTCLIP    $DCX_CLIPSIBLINGS    $DCX_CLIPCHILDREN    $DCX_NORESETATTRS    $DCX_LOCKWINDOWUPDATE    $DCX_EXCLUDERGN    $DCX_INTERSECTRGN    $DCX_INTERSECTUPDATE    $DCX_VALIDATE"
        }]
    },
    "_WinAPI_GetDefaultPrinter": {
        "documentation": "Retrieves the printer name of the default printer for the current user on the local computer",
        "label": "_WinAPI_GetDefaultPrinter (  )",
        "params": []
    },
    "_WinAPI_GetDefaultUserProfileDirectory": {
        "documentation": "Retrieves the path to the root of the default user's profile",
        "label": "_WinAPI_GetDefaultUserProfileDirectory (  )",
        "params": []
    },
    "_WinAPI_GetDesktopWindow": {
        "documentation": "Returns the handle of the Windows desktop window",
        "label": "_WinAPI_GetDesktopWindow (  )",
        "params": []
    },
    "_WinAPI_GetDeviceCaps": {
        "documentation": "Retrieves device specific information about a specified device",
        "label": "_WinAPI_GetDeviceCaps ( $hDC, $iIndex )",
        "params": [{
            "label": "$hDC",
            "documentation": "Identifies the device context"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the item to return"
        }]
    },
    "_WinAPI_GetDeviceDriverBaseName": {
        "documentation": "Retrieves the base name of the specified device driver",
        "label": "_WinAPI_GetDeviceDriverBaseName ( $pDriver )",
        "params": [{
            "label": "$pDriver",
            "documentation": "The load address of the device driver. This value can be retrieved using the _WinAPI_EnumDeviceDrivers() function."
        }]
    },
    "_WinAPI_GetDeviceDriverFileName": {
        "documentation": "Retrieves the path available for the specified device driver",
        "label": "_WinAPI_GetDeviceDriverFileName ( $pDriver )",
        "params": [{
            "label": "$pDriver",
            "documentation": "The load address of the device driver. This value can be retrieved using the _WinAPI_EnumDeviceDrivers() function."
        }]
    },
    "_WinAPI_GetDeviceGammaRamp": {
        "documentation": "Gets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware",
        "label": "_WinAPI_GetDeviceGammaRamp ( $hDC, ByRef $aRamp )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context of the direct color display board in question."
        }, {
            "label": "$aRamp",
            "documentation": "Returns the 2D array ([r1, g1, b1], [r2, g2, b2], ... [r256, g256, b256]) that is created by this function, and where the function place the current gamma ramp of the color display board.Each element in this array is an integer value with a range from 0 to 65535 which is a mapping between RGB values in the frame buffer and digital-analog-converter (DAC) values.(See MSDN for more information)"
        }]
    },
    "_WinAPI_GetDIBColorTable": {
        "documentation": "Retrieves RGB color table from the DIB section bitmap",
        "label": "_WinAPI_GetDIBColorTable ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "A DIB section bitmap from which to retrieve the color table."
        }]
    },
    "_WinAPI_GetDIBits": {
        "documentation": "Retrieves the bits of the specified bitmap and copies them into a buffer as a DIB",
        "label": "_WinAPI_GetDIBits ( $hDC, $hBitmap, $iStartScan, $iScanLines, $pBits, $tBI, $iUsage )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context"
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap. This must be a compatible bitmap (DDB)."
        }, {
            "label": "$iStartScan",
            "documentation": "Specifies the first scan line to retrieve"
        }, {
            "label": "$iScanLines",
            "documentation": "Specifies the number of scan lines to retrieve"
        }, {
            "label": "$pBits",
            "documentation": "Pointer to a buffer to receive the bitmap data.If this parameter is 0, the function passes the dimensions and format of the bitmap to the $tagBITMAPINFO structure pointed to by the $tBI parameter."
        }, {
            "label": "$tBI",
            "documentation": "A $tagBITMAPINFO structure or a pointer to it that specifies the desired format for the DIB data"
        }, {
            "label": "$iUsage",
            "documentation": "Specifies the format of the bmiColors member of the $tagBITMAPINFO structure.It must be one of the following values:    $DIB_PAL_COLORS - The color table should consist of an array of 16-bit indexes into the current palette    $DIB_RGB_COLORS - The color table should consist of literal red, green, blue values"
        }]
    },
    "_WinAPI_GetDiskFreeSpaceEx": {
        "documentation": "Retrieves information about the amount of space that is available on a disk volume",
        "label": "_WinAPI_GetDiskFreeSpaceEx ( $sDrive )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive to retrieve information, in the format D:, E:, etc."
        }]
    },
    "_WinAPI_GetDlgCtrlID": {
        "documentation": "Returns the identifier of the specified control",
        "label": "_WinAPI_GetDlgCtrlID ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the control"
        }]
    },
    "_WinAPI_GetDlgItem": {
        "documentation": "Retrieves the handle of a control in the specified dialog box",
        "label": "_WinAPI_GetDlgItem ( $hWnd, $iItemID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the dialog box"
        }, {
            "label": "$iItemID",
            "documentation": "Specifies the identifier of the control to be retrieved"
        }]
    },
    "_WinAPI_GetDllDirectory": {
        "documentation": "Retrieves the application-specific portion of the search path used to locate DLLs for the application",
        "label": "_WinAPI_GetDllDirectory (  )",
        "params": []
    },
    "_WinAPI_GetDriveBusType": {
        "documentation": "Retrieves a bus type for the specified drive",
        "label": "_WinAPI_GetDriveBusType ( $sDrive )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive letter to retrieve information, in the format D:, E:, etc."
        }]
    },
    "_WinAPI_GetDriveGeometryEx": {
        "documentation": "Retrieves extended information about the disk's geometry",
        "label": "_WinAPI_GetDriveGeometryEx ( $iDrive )",
        "params": [{
            "label": "$iDrive",
            "documentation": "The physical drive number (0, 1, 2, etc) to retrieve information."
        }]
    },
    "_WinAPI_GetDriveNumber": {
        "documentation": "Retrieves a device type, device number, and partition number for the specified drive",
        "label": "_WinAPI_GetDriveNumber ( $sDrive )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive letter to retrieve information, in the format D:, E:, etc."
        }]
    },
    "_WinAPI_GetDriveType": {
        "documentation": "Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive",
        "label": "_WinAPI_GetDriveType ( [$sDrive = ''] )",
        "params": [{
            "label": "$sDrive",
            "documentation": "**[optional]** The drive letter to retrieve information, in the format D:, E:, etc."
        }]
    },
    "_WinAPI_GetDurationFormat": {
        "documentation": "Formats a duration of time as a time string for a locale specified by identifier",
        "label": "_WinAPI_GetDurationFormat ( $iLCID, $iDuration [, $sFormat = ''] )",
        "params": [{
            "label": "$iLCID",
            "documentation": "The locale identifier (LCID) that specifies the locale or one of the following predefined values:    $LOCALE_INVARIANT    $LOCALE_SYSTEM_DEFAULT    $LOCALE_USER_DEFAULTWindows Vista or later    $LOCALE_CUSTOM_DEFAULT    $LOCALE_CUSTOM_UI_DEFAULT    $LOCALE_CUSTOM_UNSPECIFIED"
        }, {
            "label": "$iDuration",
            "documentation": "The number of 100-nanosecond intervals in the duration.Alternatively, this parameter can be a $tagSYSTEMTIME structure that contains the time duration information to format."
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** The string that is used to form the duration. For example, \"hh:mm:ss.ff\".If this parameter is omitted or an empty string (Default), the function returns the string according to the duration format for the specified locale."
        }]
    },
    "_WinAPI_GetEffectiveClientRect": {
        "documentation": "Calculates the dimensions of a rectangle in the client area that contains all the specified controls",
        "label": "_WinAPI_GetEffectiveClientRect ( $hWnd, $aCtrl [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "A handle to the window that has the client area to check."
        }, {
            "label": "$aCtrl",
            "documentation": "The array containing the handles or identifiers of the controls that should be included in the calculation of the client area. Also, it can be a single handle or control identifier."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array element that contains the first control."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array element that contains the last control."
        }]
    },
    "_WinAPI_GetEnhMetaFile": {
        "documentation": "Creates a handle that identifies the enhanced-format metafile stored in the specified file",
        "label": "_WinAPI_GetEnhMetaFile ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of an enhanced metafile (.emf)."
        }]
    },
    "_WinAPI_GetEnhMetaFileBits": {
        "documentation": "Retrieves the contents of the specified enhanced-format metafile",
        "label": "_WinAPI_GetEnhMetaFileBits ( $hEmf, ByRef $pBuffer )",
        "params": [{
            "label": "$hEmf",
            "documentation": "Handle to the enhanced metafile."
        }, {
            "label": "$pBuffer",
            "documentation": "Returns a pointer to a memory block (buffer) that receives the metafile data.Optionaly, you can set this parameter to 0 before function call, then the function will allocate the required memory block itself.Otherwise, it must be a valid memory pointer returned by the _WinAPI_CreateBuffer() function, or by previously calling this function."
        }]
    },
    "_WinAPI_GetEnhMetaFileDescription": {
        "documentation": "Retrieves an optional text description from an enhanced-format metafile",
        "label": "_WinAPI_GetEnhMetaFileDescription ( $hEmf )",
        "params": [{
            "label": "$hEmf",
            "documentation": "Handle to the enhanced metafile."
        }]
    },
    "_WinAPI_GetEnhMetaFileDimension": {
        "documentation": "Retrieves a dimension of the specified enhanced-format metafile",
        "label": "_WinAPI_GetEnhMetaFileDimension ( $hEmf )",
        "params": [{
            "label": "$hEmf",
            "documentation": "Handle to the enhanced metafile to retrieve dimension."
        }]
    },
    "_WinAPI_GetEnhMetaFileHeader": {
        "documentation": "Retrieves the record containing the header for the specified enhanced-format metafile",
        "label": "_WinAPI_GetEnhMetaFileHeader ( $hEmf )",
        "params": [{
            "label": "$hEmf",
            "documentation": "Handle to the enhanced metafile for which the header is to be retrieved."
        }]
    },
    "_WinAPI_GetErrorMessage": {
        "documentation": "Retrieves a text error message for the specified system error code",
        "label": "_WinAPI_GetErrorMessage ( $iCode [, $iLanguage = 0] )",
        "params": [{
            "label": "$iCode",
            "documentation": "The system error code to retrieve a message."
        }, {
            "label": "$iLanguage",
            "documentation": "**[optional]** The language identifier."
        }]
    },
    "_WinAPI_GetErrorMode": {
        "documentation": "Retrieves the error mode for the current process",
        "label": "_WinAPI_GetErrorMode (  )",
        "params": []
    },
    "_WinAPI_GetExitCodeProcess": {
        "documentation": "Retrieves the termination status of the specified process",
        "label": "_WinAPI_GetExitCodeProcess ( $hProcess )",
        "params": [{
            "label": "$hProcess",
            "documentation": "Handle to the process."
        }]
    },
    "_WinAPI_GetExtended": {
        "documentation": "Retrieves the last extended function return value",
        "label": "_WinAPI_GetExtended (  )",
        "params": []
    },
    "_WinAPI_GetFileAttributes": {
        "documentation": "Retrieves file system attributes for a specified file or directory",
        "label": "_WinAPI_GetFileAttributes ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file or directory."
        }]
    },
    "_WinAPI_GetFileID": {
        "documentation": "Retrieves the file system's 8-byte file reference number for a file",
        "label": "_WinAPI_GetFileID ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "A handle to the file or directory whose reference number is to be retrieved."
        }]
    },
    "_WinAPI_GetFileInformationByHandle": {
        "documentation": "Retrieves file information for the specified file",
        "label": "_WinAPI_GetFileInformationByHandle ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file that contains the information to be retrieved."
        }]
    },
    "_WinAPI_GetFileInformationByHandleEx": {
        "documentation": "Retrieves file information for the specified file",
        "label": "_WinAPI_GetFileInformationByHandleEx ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file that contains the information to be retrieved."
        }]
    },
    "_WinAPI_GetFilePointerEx": {
        "documentation": "Retrieves the file pointer of the specified file",
        "label": "_WinAPI_GetFilePointerEx ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file."
        }]
    },
    "_WinAPI_GetFileSizeEx": {
        "documentation": "Retrieves the size of the specified file",
        "label": "_WinAPI_GetFileSizeEx ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file whose size is to be returned"
        }]
    },
    "_WinAPI_GetFileSizeOnDisk": {
        "documentation": "Retrieves the file allocation size on disk",
        "label": "_WinAPI_GetFileSizeOnDisk ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file to retrieve allocation size."
        }]
    },
    "_WinAPI_GetFileTitle": {
        "documentation": "Retrieves the name of the specified file",
        "label": "_WinAPI_GetFileTitle ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name and location of a file."
        }]
    },
    "_WinAPI_GetFileType": {
        "documentation": "Retrieves the file type of the specified file",
        "label": "_WinAPI_GetFileType ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file."
        }]
    },
    "_WinAPI_GetFileVersionInfo": {
        "documentation": "Retrieves version information for the specified file",
        "label": "_WinAPI_GetFileVersionInfo ( $sFilePath, ByRef $pBuffer [, $iFlags = 0] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file."
        }, {
            "label": "$pBuffer",
            "documentation": "Returns a pointer to a memory block (buffer) that receives the file-version information.Optionaly, you can set this parameter to 0 before function call, then the function will allocate the required memory block itself.Otherwise, it must be a valid memory pointer returned by the _WinAPI_CreateBuffer() function, or by previously calling this function."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that controls which MUI DLLs (if any) from which the version resource is extracted.It can be 0 or more of the following values (valid only for Windows Vista or later).    $FILE_VER_GET_LOCALISED    $FILE_VER_GET_NEUTRAL    $FILE_VER_GET_PREFETCHED"
        }]
    },
    "_WinAPI_GetFinalPathNameByHandle": {
        "documentation": "Retrieves the final path of the specified file",
        "label": "_WinAPI_GetFinalPathNameByHandle ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to a file or directory whose path is to be retrieved."
        }]
    },
    "_WinAPI_GetFinalPathNameByHandleEx": {
        "documentation": "Retrieves the final path of the specified file",
        "label": "_WinAPI_GetFinalPathNameByHandleEx ( $hFile [, $iFlags = 0] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to a file or directory."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The type of result to return.This parameter can be combination of one $FILE_NAME_* and one $VOLUME_NAME_* values.$FILE_NAME_NORMALIZED$FILE_NAME_OPENED$VOLUME_NAME_DOS$VOLUME_NAME_GUID$VOLUME_NAME_NONE$VOLUME_NAME_NT"
        }]
    },
    "_WinAPI_GetFocus": {
        "documentation": "Retrieves the handle of the window that has the keyboard focus",
        "label": "_WinAPI_GetFocus (  )",
        "params": []
    },
    "_WinAPI_GetFontMemoryResourceInfo": {
        "documentation": "Reads out font information from a TTF loaded into the memory",
        "label": "_WinAPI_GetFontMemoryResourceInfo ( $pMemory [, $iFlag = 1] )",
        "params": [{
            "label": "$pMemory",
            "documentation": "A pointer value the struct that contains the binary data of the TTF"
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** An integer value. Default is 1 (Font Family name). See remarks for others values"
        }]
    },
    "_WinAPI_GetFontName": {
        "documentation": "Retrieves the unique name of the font based on its typeface name, character set, and style",
        "label": "_WinAPI_GetFontName ( $sFaceName [, $iStyle = 0 [, $iCharSet = 1]] )",
        "params": [{
            "label": "$sFaceName",
            "documentation": "The typeface name of the font (not including style). For example, \"Arial\", \"Tahoma\", etc."
        }, {
            "label": "$iStyle",
            "documentation": "**[optional]** The style of the font.It can be one or more of the following values:    $FS_REGULAR    $FS_BOLD    $FS_ITALIC"
        }, {
            "label": "$iCharSet",
            "documentation": "**[optional]** The character set.It can be one of the following values:    $ANSI_CHARSET    $BALTIC_CHARSET    $CHINESEBIG5_CHARSET    $DEFAULT_CHARSET (Default)    $EASTEUROPE_CHARSET    $GB2312_CHARSET    $GREEK_CHARSET    $HANGEUL_CHARSET    $MAC_CHARSET    $OEM_CHARSET    $RUSSIAN_CHARSET    $SHIFTJIS_CHARSET    $SYMBOL_CHARSET    $TURKISH_CHARSET    $VIETNAMESE_CHARSETKorean language edition of Windows:    $JOHAB_CHARSETMiddle East language edition of Windows:    $ARABIC_CHARSET    $HEBREW_CHARSETThai language edition of Windows:    $THAI_CHARSET"
        }]
    },
    "_WinAPI_GetFontResourceInfo": {
        "documentation": "Retrieves the fontname from the specified font resource file",
        "label": "_WinAPI_GetFontResourceInfo ( $sFont [, $bForce = False [, $iFlag = Default]] )",
        "params": [{
            "label": "$sFont",
            "documentation": "String that names a font resource file.To retrieve a fontname whose information comes from several resource files, they must be separated by a \"|\" .For example, abcxxxxx.pfm | abcxxxxx.pfb."
        }, {
            "label": "$bForce",
            "documentation": "**[optional]** Specifies whether adds a file to the font table, valid values:    True - Forced add the specified file to the system font table and remove it after retrieving the fontname.    False - Don't add and remove (Default)."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** An integer value. See _WinAPI_GetFontMemoryResourceInfo() for value definition."
        }]
    },
    "_WinAPI_GetForegroundWindow": {
        "documentation": "Returns the handle of the foreground window",
        "label": "_WinAPI_GetForegroundWindow (  )",
        "params": []
    },
    "_WinAPI_GetFRBuffer": {
        "documentation": "Retrieves the current size of the internal buffer that used the _WinAPI_FindTextDlg() and _WinAPI_ReplaceTextDlg() functions",
        "label": "_WinAPI_GetFRBuffer (  )",
        "params": []
    },
    "_WinAPI_GetFullPathName": {
        "documentation": "Retrieves the full path and file name of the specified file",
        "label": "_WinAPI_GetFullPathName ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file."
        }]
    },
    "_WinAPI_GetGeoInfo": {
        "documentation": "Retrieves information about a specified geographical location",
        "label": "_WinAPI_GetGeoInfo ( $iGEOID, $iType [, $iLanguage = 0] )",
        "params": [{
            "label": "$iGEOID",
            "documentation": "The identifier for the geographical location (GEOID) for which to get information."
        }, {
            "label": "$iType",
            "documentation": "The type of information to retrieve. It can be one of the following values.$GEO_NATION$GEO_LATITUDE$GEO_LONGITUDE$GEO_ISO2$GEO_ISO3$GEO_LCID$GEO_FRIENDLYNAME$GEO_OFFICIALNAME$GEO_TIMEZONES$GEO_OFFICIALLANGUAGESWindows Vista or later$GEO_RFC1766Windows 8 or later$GEO_ISO_UN_NUMBER$GEO_PARENT"
        }, {
            "label": "$iLanguage",
            "documentation": "**[optional]** The language identifier, used with the geographical location."
        }]
    },
    "_WinAPI_GetGlyphOutline": {
        "documentation": "Retrieves the outline or bitmap for a character in the TrueType font",
        "label": "_WinAPI_GetGlyphOutline ( $hDC, $sChar, $iFormat, ByRef $pBuffer [, $tMAT2 = 0] )",
        "params": [{
            "label": "$hDC",
            "documentation": "A handle to the device context which font is selected."
        }, {
            "label": "$sChar",
            "documentation": "The character for which data is to be returned."
        }, {
            "label": "$iFormat",
            "documentation": "The format of the data that the function retrieves.This parameter can be one of the following values:    $GGO_BEZIER    $GGO_BITMAP    $GGO_GLYPH_INDEX    $GGO_GRAY2_BITMAP    $GGO_GRAY4_BITMAP    $GGO_GRAY8_BITMAP    $GGO_METRICS    $GGO_NATIVE    $GGO_UNHINTED"
        }, {
            "label": "$pBuffer",
            "documentation": "Returns a pointer to a memory block (buffer) that receives the outline or bitmap data.Optionaly, you can set this parameter to 0 before function call, then the function will allocate the required memory block itself.Otherwise, it must be a valid memory pointer returned by the _WinAPI_CreateBuffer() function, or by previously calling this function.If the $GGO_METRICS is specified, this parameter is ignored, and function only returns the information about a glyph (see below)."
        }, {
            "label": "$tMAT2",
            "documentation": "**[optional]** $tagMAT2 structure specifying a transformation matrix for the character.If this parameter is 0 (Default), the transformation will not be used (it is identity matrix)."
        }]
    },
    "_WinAPI_GetGraphicsMode": {
        "documentation": "Retrieves the current graphics mode for the specified device context",
        "label": "_WinAPI_GetGraphicsMode ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetGuiResources": {
        "documentation": "Retrieves the count of handles to graphical user interface (GUI) objects in use by the specified process",
        "label": "_WinAPI_GetGuiResources ( [$iFlag = 0 [, $hProcess = -1]] )",
        "params": [{
            "label": "$iFlag",
            "documentation": "**[optional]** 0 (Default) Return the count of GDI objects.1 Return the count of USER objects."
        }, {
            "label": "$hProcess",
            "documentation": "**[optional]** A handle to the process. By default the current process."
        }]
    },
    "_WinAPI_GetGUIThreadInfo": {
        "documentation": "Retrieves information about the active window or a specified GUI thread",
        "label": "_WinAPI_GetGUIThreadInfo ( $iThreadId )",
        "params": [{
            "label": "$iThreadId",
            "documentation": "The identifier for the thread for which information is to be retrieved."
        }]
    },
    "_WinAPI_GetGValue": {
        "documentation": "Retrieves an intensity value for the green component of a 32-bit RGB value",
        "label": "_WinAPI_GetGValue ( $iRGB )",
        "params": [{
            "label": "$iRGB",
            "documentation": "The color value, in RGB."
        }]
    },
    "_WinAPI_GetHandleInformation": {
        "documentation": "Retrieves certain properties of an object handle",
        "label": "_WinAPI_GetHandleInformation ( $hObject )",
        "params": [{
            "label": "$hObject",
            "documentation": "Handle to an object whose information is to be retrieved."
        }]
    },
    "_WinAPI_GetHGlobalFromStream": {
        "documentation": "Retrieves the global memory handle to a stream",
        "label": "_WinAPI_GetHGlobalFromStream ( $pStream )",
        "params": [{
            "label": "$pStream",
            "documentation": "Pointer to the stream object previously created by a call to the _WinAPI_CreateStreamOnHGlobal() function."
        }]
    },
    "_WinAPI_GetIconDimension": {
        "documentation": "Retrieves a dimension of the specified icon",
        "label": "_WinAPI_GetIconDimension ( $hIcon )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the icon to retrieve dimension."
        }]
    },
    "_WinAPI_GetIconInfo": {
        "documentation": "Retrieves information about the specified icon or cursor",
        "label": "_WinAPI_GetIconInfo ( $hIcon )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the icon or cursor.To retrieve information on a standard icon or cursor, specify one of the following values:    $IDC_APPSTARTING - Standard arrow and small hourglass cursor    $IDC_ARROW - Standard arrow cursor    $IDC_CROSS - Crosshair cursor    $IDC_HAND - Hand cursor    $IDC_HELP - Arrow and question mark cursor    $IDC_IBEAM - I-beam cursor    $IDC_NO - Slashed circle cursor    $IDC_SIZEALL - Four-pointed arrow cursor    $IDC_SIZENESW - Double-pointed arrow cursor pointing NE and SW    $IDC_SIZENS - Double-pointed arrow cursor pointing N and S    $IDC_SIZENWSE - Double-pointed arrow cursor pointing NW and SE    $IDC_SIZEWE - Double-pointed arrow cursor pointing W and E    $IDC_UPARROW - Vertical arrow cursor    $IDC_WAIT - Hourglass cursor    $IDI_APPLICATION - Application icon    $IDI_ASTERISK - Asterisk icon    $IDI_EXCLAMATION - Exclamation point icon    $IDI_HAND - Stop sign icon    $IDI_QUESTION - Question-mark icon    $IDI_WINLOGO - Windows logo icon"
        }]
    },
    "_WinAPI_GetIconInfoEx": {
        "documentation": "Retrieves information about the specified icon or cursor",
        "label": "_WinAPI_GetIconInfoEx ( $hIcon )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the icon or cursor. To retrieve information about a standard icon or cursor, use $IDC_* constants."
        }]
    },
    "_WinAPI_GetIdleTime": {
        "documentation": "Retrieves the time that has elapsed since the last input",
        "label": "_WinAPI_GetIdleTime (  )",
        "params": []
    },
    "_WinAPI_GetKeyboardLayout": {
        "documentation": "Retrieves the active input locale identifier for the specified window",
        "label": "_WinAPI_GetKeyboardLayout ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to retrieve the input locale identifier."
        }]
    },
    "_WinAPI_GetKeyboardLayoutList": {
        "documentation": "Retrieves the all input locale identifiers corresponding to the current set of input locales in the system",
        "label": "_WinAPI_GetKeyboardLayoutList (  )",
        "params": []
    },
    "_WinAPI_GetKeyboardState": {
        "documentation": "Copies the status of the 256 virtual keys to the specified buffer",
        "label": "_WinAPI_GetKeyboardState (  )",
        "params": []
    },
    "_WinAPI_GetKeyboardType": {
        "documentation": "Retrieves information about the current keyboard",
        "label": "_WinAPI_GetKeyboardType ( $iType )",
        "params": [{
            "label": "$iType",
            "documentation": "The type of keyboard information to be retrieved, valid values:0 - Keyboard type.1 - Keyboard subtype (original equipment manufacturer (OEM)-dependent value).2 - The number of function keys on the keyboard."
        }]
    },
    "_WinAPI_GetKeyNameText": {
        "documentation": "Retrieves a string that represents the name of a key",
        "label": "_WinAPI_GetKeyNameText ( $lParam )",
        "params": [{
            "label": "$lParam",
            "documentation": "Specifies the second parameter of the keyboard message (such as WM_KEYDOWN) to be processed."
        }]
    },
    "_WinAPI_GetKeyState": {
        "documentation": "Retrieves the status of the specified virtual key",
        "label": "_WinAPI_GetKeyState ( $vKey )",
        "params": [{
            "label": "$vKey",
            "documentation": "Specifies a virtual key ($VK_*). If the desired virtual key is a letter or digit (A through Z,a through z, or 0 through 9)."
        }]
    },
    "_WinAPI_GetLastActivePopup": {
        "documentation": "Determines which pop-up window owned by the specified window was most recently active",
        "label": "_WinAPI_GetLastActivePopup ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the owner window."
        }]
    },
    "_WinAPI_GetLastError": {
        "documentation": "Returns the calling thread's lasterror code value",
        "label": "_WinAPI_GetLastError (  )",
        "params": []
    },
    "_WinAPI_GetLastErrorMessage": {
        "documentation": "Returns the calling threads last error message",
        "label": "_WinAPI_GetLastErrorMessage (  )",
        "params": []
    },
    "_WinAPI_GetLayeredWindowAttributes": {
        "documentation": "Gets Layered Window Attributes",
        "label": "_WinAPI_GetLayeredWindowAttributes ( $hWnd, ByRef $iTransColor, ByRef $iTransGUI [, $bColorRef = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of GUI to work on"
        }, {
            "label": "$iTransColor",
            "documentation": "Returns Transparent color ( dword as 0x00bbggrr or string \"0xRRGGBB\")"
        }, {
            "label": "$iTransGUI",
            "documentation": "Returns Transparancy of GUI"
        }, {
            "label": "$bColorRef",
            "documentation": "**[optional]** If True, $iTransColor will be a COLORREF( 0x00bbggrr ), else an RGB-Color"
        }]
    },
    "_WinAPI_GetLocaleInfo": {
        "documentation": "Retrieves information about a locale specified by identifier",
        "label": "_WinAPI_GetLocaleInfo ( $iLCID, $iType )",
        "params": [{
            "label": "$iLCID",
            "documentation": "The locale identifier (LCID) that specifies the locale or one of the following predefined values.$LOCALE_INVARIANT$LOCALE_SYSTEM_DEFAULT$LOCALE_USER_DEFAULTWindows Vista or later$LOCALE_CUSTOM_DEFAULT$LOCALE_CUSTOM_UI_DEFAULT$LOCALE_CUSTOM_UNSPECIFIED"
        }, {
            "label": "$iType",
            "documentation": "The one of the locale information constants ($LOCALE_*) to retrieve."
        }]
    },
    "_WinAPI_GetLogicalDrives": {
        "documentation": "Retrieves a bitmask representing the currently available disk drives",
        "label": "_WinAPI_GetLogicalDrives (  )",
        "params": []
    },
    "_WinAPI_GetMapMode": {
        "documentation": "Retrieves the current mapping mode",
        "label": "_WinAPI_GetMapMode ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetMemorySize": {
        "documentation": "Retrieves the size of a memory block allocated from the internal library heap",
        "label": "_WinAPI_GetMemorySize ( $pMemory )",
        "params": [{
            "label": "$pMemory",
            "documentation": "A pointer to the valid memory block whose size to be retrieved."
        }]
    },
    "_WinAPI_GetMessageExtraInfo": {
        "documentation": "Retrieves the extra message information for the current thread",
        "label": "_WinAPI_GetMessageExtraInfo (  )",
        "params": []
    },
    "_WinAPI_GetModuleFileNameEx": {
        "documentation": "Retrieves the fully-qualified path for the file containing the specified module",
        "label": "_WinAPI_GetModuleFileNameEx ( $hProcess [, $hModule = 0] )",
        "params": [{
            "label": "$hProcess",
            "documentation": "Handle to the process that contains the module. The handle must have the $PROCESS_QUERY_INFORMATION or$PROCESS_QUERY_LIMITED_INFORMATION access right and the $PROCESS_VM_READ access right."
        }, {
            "label": "$hModule",
            "documentation": "**[optional]** Handle to the module. If this parameter is 0 (Default), the function retrieves the path of the executablefile of the process."
        }]
    },
    "_WinAPI_GetModuleHandle": {
        "documentation": "Returns a module handle for the specified module",
        "label": "_WinAPI_GetModuleHandle ( $sModuleName )",
        "params": [{
            "label": "$sModuleName",
            "documentation": "Names a Win32 module (either a .dll or .exe file). If the filename extension is omitted, thedefault library extension .dll is appended. The filename string can include a trailing point character (.) toindicate that the module name has no extension. The string does not have to specify a path. The name iscompared (case independently) to the names of modules currently mapped into the address space of the callingprocess. If this parameter is the Null keyword then the function returns a handle of the file used to create the calling process."
        }]
    },
    "_WinAPI_GetModuleHandleEx": {
        "documentation": "Retrieves a module handle for the specified module",
        "label": "_WinAPI_GetModuleHandleEx ( $sModule [, $iFlags = 0] )",
        "params": [{
            "label": "$sModule",
            "documentation": "The name of the loaded module (either a .dll or .exe file), or a pointer to an address in the module(if the $GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS flag is specified). If this parameter is 0 or an emptystring, the function returns a handle to the file used to create the calling process (.exe file)."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** This parameter can be one or more of the following values.$GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS$GET_MODULE_HANDLE_EX_FLAG_PIN$GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT$GET_MODULE_HANDLE_EX_FLAG_DEFAULT (Default)"
        }]
    },
    "_WinAPI_GetModuleInformation": {
        "documentation": "Retrieves information about the specified module",
        "label": "_WinAPI_GetModuleInformation ( $hProcess [, $hModule = 0] )",
        "params": [{
            "label": "$hProcess",
            "documentation": "Handle to the process that contains the module. The handle must have the $PROCESS_QUERY_INFORMATION or$PROCESS_QUERY_LIMITED_INFORMATION access right and the $PROCESS_VM_READ access right."
        }, {
            "label": "$hModule",
            "documentation": "**[optional]** Handle to the module. If this parameter is 0, the function retrieves information only about theexecutable file (\"SizeOfImage\" and \"EntryPoint\" members of the $tagMODULEINFO structure)."
        }]
    },
    "_WinAPI_GetMonitorInfo": {
        "documentation": "Retrieves information about a display monitor",
        "label": "_WinAPI_GetMonitorInfo ( $hMonitor )",
        "params": [{
            "label": "$hMonitor",
            "documentation": "A handle to the display monitor of interest."
        }]
    },
    "_WinAPI_GetMousePos": {
        "documentation": "Returns the current mouse position",
        "label": "_WinAPI_GetMousePos ( [$bToClient = False [, $hWnd = 0]] )",
        "params": [{
            "label": "$bToClient",
            "documentation": "**[optional]** If True, the coordinates will be converted to client coordinates"
        }, {
            "label": "$hWnd",
            "documentation": "**[optional]** Window handle used to convert coordinates if $bToClient is True"
        }]
    },
    "_WinAPI_GetMousePosX": {
        "documentation": "Returns the current mouse X position",
        "label": "_WinAPI_GetMousePosX ( [$bToClient = False [, $hWnd = 0]] )",
        "params": [{
            "label": "$bToClient",
            "documentation": "**[optional]** If True, the coordinates will be converted to client coordinates"
        }, {
            "label": "$hWnd",
            "documentation": "**[optional]** Window handle used to convert coordinates if $bToClient is True"
        }]
    },
    "_WinAPI_GetMousePosY": {
        "documentation": "Returns the current mouse Y position",
        "label": "_WinAPI_GetMousePosY ( [$bToClient = False [, $hWnd = 0]] )",
        "params": [{
            "label": "$bToClient",
            "documentation": "**[optional]** If True, the coordinates will be converted to client coordinates"
        }, {
            "label": "$hWnd",
            "documentation": "**[optional]** Window handle used to convert coordinates if $bToClient is True"
        }]
    },
    "_WinAPI_GetMUILanguage": {
        "documentation": "Gets the language currently in use by the common controls for a particular process",
        "label": "_WinAPI_GetMUILanguage (  )",
        "params": []
    },
    "_WinAPI_GetNumberFormat": {
        "documentation": "Formats a number string as a number string customized for a locale specified by identifier",
        "label": "_WinAPI_GetNumberFormat ( $iLCID, $sNumber [, $tNUMBERFMT = 0] )",
        "params": [{
            "label": "$iLCID",
            "documentation": "The locale identifier (LCID) that specifies the locale or one of the following predefined values.$LOCALE_INVARIANT$LOCALE_SYSTEM_DEFAULT$LOCALE_USER_DEFAULTWindows Vista or later$LOCALE_CUSTOM_DEFAULT$LOCALE_CUSTOM_UI_DEFAULT$LOCALE_CUSTOM_UNSPECIFIED"
        }, {
            "label": "$sNumber",
            "documentation": "The string containing the number string to format. This string can only contain the followingcharacters. All other characters are invalid.Characters \"0\" through \"9\".A minus sign in the first character position if the number is a negative value.One decimal point (dot) if the number is a floating-point value."
        }, {
            "label": "$tNUMBERFMT",
            "documentation": "**[optional]** $tagNUMBERFMT structure that contains number formatting information. If this parameter is 0 (Default),the function returns the string according to the number format for the specified locale.You can use the _WinAPI_CreateNumberFormatInfo() function to create this structure."
        }]
    },
    "_WinAPI_GetObject": {
        "documentation": "Retrieves information for the specified graphics object",
        "label": "_WinAPI_GetObject ( $hObject, $iSize, $pObject )",
        "params": [{
            "label": "$hObject",
            "documentation": "Identifies a logical pen, brush, font, bitmap, region, or palette"
        }, {
            "label": "$iSize",
            "documentation": "Specifies the number of bytes to be written to the buffer"
        }, {
            "label": "$pObject",
            "documentation": "Pointer to a buffer that receives the information.The following shows the type of information the buffer receives for each type of graphics object you can specify:    HBITMAP - BITMAP or DIBSECTION    HPALETTE - A count of the number of entries in the logical palette    HPEN - EXTLOGPEN or LOGPEN    HBRUSH - LOGBRUSH    HFONT - LOGFONTIf $pObject is 0 the function return value is the number of bytes required to store the information it writes to the buffer for the specified graphics object."
        }]
    },
    "_WinAPI_GetObjectID": {
        "documentation": "Retrieves the object identifier for the specified file or directory",
        "label": "_WinAPI_GetObjectID ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Path to the file or directory from which the object identifier is to be retrieved."
        }]
    },
    "_WinAPI_GetObjectInfoByHandle": {
        "documentation": "Retrieves information about a specified object",
        "label": "_WinAPI_GetObjectInfoByHandle ( $hObject )",
        "params": [{
            "label": "$hObject",
            "documentation": "A handle to the object to obtain information about."
        }]
    },
    "_WinAPI_GetObjectNameByHandle": {
        "documentation": "Retrieves a name of the specified object",
        "label": "_WinAPI_GetObjectNameByHandle ( $hObject )",
        "params": [{
            "label": "$hObject",
            "documentation": "A handle to the object to obtain its name."
        }]
    },
    "_WinAPI_GetObjectType": {
        "documentation": "Retrieves the type of the specified object",
        "label": "_WinAPI_GetObjectType ( $hObject )",
        "params": [{
            "label": "$hObject",
            "documentation": "Handle to the graphics object."
        }]
    },
    "_WinAPI_GetOpenFileName": {
        "documentation": "Creates an Open dialog box that lets the user specify the drive, directory, and the name of a file or set of files to open",
        "label": "_WinAPI_GetOpenFileName ( [$sTitle = \"\" [, $sFilter = \"All files (*.*)\" [, $sInitalDir = \".\" [, $sDefaultFile = \"\" [, $sDefaultExt = \"\" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hWndOwner = 0]]]]]]]]] )",
        "params": [{
            "label": "$sTitle",
            "documentation": "**[optional]** string to be placed in the title bar of the dialog box"
        }, {
            "label": "$sFilter",
            "documentation": "**[optional]** Pairs of filter strings (for example \"Text Files (*.txt)|All Files (*.*)\")The first string in each pair is a display string that describes the filter (for example, \"Text Files\")The second string specifies the filter pattern (for example, \"*.TXT\")To specify multiple filter patterns for a single display string, use a semicolon to separate the patterns (for example, \"*.TXT;*.DOC;*.BAK\")A pattern string can be a combination of valid file name characters and the asterisk (*) wildcard characterDo not include spaces in the pattern string."
        }, {
            "label": "$sInitalDir",
            "documentation": "**[optional]** String that can specify the initial directory"
        }, {
            "label": "$sDefaultFile",
            "documentation": "**[optional]** A file name used to initialize the File Name edit control"
        }, {
            "label": "$sDefaultExt",
            "documentation": "**[optional]** String that contains the default extension"
        }, {
            "label": "$iFilterIndex",
            "documentation": "**[optional]** Specifies the index of the currently selected filter in the File Types control"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** See Flags in $tagOPENFILENAME information"
        }, {
            "label": "$iFlagsEx",
            "documentation": "**[optional]** See FlagEx in $tagOPENFILENAME information"
        }, {
            "label": "$hWndOwner",
            "documentation": "**[optional]** Handle to the window that owns the dialog box. This member can be any valid window handle, or it can be 0 if the dialog box has no owner"
        }]
    },
    "_WinAPI_GetOutlineTextMetrics": {
        "documentation": "Retrieves text metrics for TrueType fonts",
        "label": "_WinAPI_GetOutlineTextMetrics ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetOverlappedResult": {
        "documentation": "Retrieves the results of an overlapped operation",
        "label": "_WinAPI_GetOverlappedResult ( $hFile, $tOverlapped, ByRef $iBytes [, $bWait = False] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file, named pipe, or communications device. This is the same handle that wasspecified when the overlapped operation was started by a call to ReadFile, WriteFile, ConnectNamedPipe,TransactNamedPipe, DeviceIoControl, or WaitCommEvent."
        }, {
            "label": "$tOverlapped",
            "documentation": "A $tagOVERLAPPED structure or a pointer to it that was specified when the overlapped operation wasstarted."
        }, {
            "label": "$iBytes",
            "documentation": "The number of bytes that were actually transferred by a read or write operation.For a TransactNamedPipe operation, this is the number of bytes that were read from the pipe.For a DeviceIoControl operation this is the number of bytes of output data returned by the device driver.For a ConnectNamedPipe or WaitCommEvent operation, this value is undefined."
        }, {
            "label": "$bWait",
            "documentation": "**[optional]** If True, the function does not return until the operation has been completed.If False and the operation is still pending, the function returns False and the GetLastError function will return ERROR_IO_INCOMPLETE."
        }]
    },
    "_WinAPI_GetParent": {
        "documentation": "Retrieves the handle of the specified child window's parent window",
        "label": "_WinAPI_GetParent ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Window handle of child window"
        }]
    },
    "_WinAPI_GetParentProcess": {
        "documentation": "Retrieves the PID of the parent process for the specified process",
        "label": "_WinAPI_GetParentProcess ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetPerformanceInfo": {
        "documentation": "Retrieves the performance information",
        "label": "_WinAPI_GetPerformanceInfo (  )",
        "params": []
    },
    "_WinAPI_GetPEType": {
        "documentation": "Retrieves a type of the machine for the specified portable executable (PE)",
        "label": "_WinAPI_GetPEType ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The full path of the PE whose machine type is to be retrieved."
        }]
    },
    "_WinAPI_GetPhysicallyInstalledSystemMemory": {
        "documentation": "Retrieves the amount of RAM that is physically installed on the computer",
        "label": "_WinAPI_GetPhysicallyInstalledSystemMemory (  )",
        "params": []
    },
    "_WinAPI_GetPixel": {
        "documentation": "Retrieves the color value of the pixel at the specified coordinates",
        "label": "_WinAPI_GetPixel ( $hDC, $iX, $iY )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in logical units, of the pixel to be examined."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical units, of the pixel to be examined."
        }]
    },
    "_WinAPI_GetPolyFillMode": {
        "documentation": "Retrieves the current polygon fill mode",
        "label": "_WinAPI_GetPolyFillMode ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetPosFromRect": {
        "documentation": "Interprets the coordinates of the rectangle as offset and position coordinates",
        "label": "_WinAPI_GetPosFromRect ( $tRECT )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the rectangle."
        }]
    },
    "_WinAPI_GetPriorityClass": {
        "documentation": "Retrieves the priority class for the specified process",
        "label": "_WinAPI_GetPriorityClass ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProcAddress": {
        "documentation": "Retrieves the address of an exported function or variable from the specified module",
        "label": "_WinAPI_GetProcAddress ( $hModule, $vName )",
        "params": [{
            "label": "$hModule",
            "documentation": "A handle to the module that contains the function or variable"
        }, {
            "label": "$vName",
            "documentation": "The function or variable name, or the function's ordinal value"
        }]
    },
    "_WinAPI_GetProcessAffinityMask": {
        "documentation": "Obtains the affinity masks for the process and the system",
        "label": "_WinAPI_GetProcessAffinityMask ( $hProcess )",
        "params": [{
            "label": "$hProcess",
            "documentation": "An open handle to the process whose affinity mask is desired."
        }]
    },
    "_WinAPI_GetProcessCommandLine": {
        "documentation": "Retrieves the command-line string for the specified process",
        "label": "_WinAPI_GetProcessCommandLine ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProcessFileName": {
        "documentation": "Retrieves the fully-qualified path of the executable file for the specified process",
        "label": "_WinAPI_GetProcessFileName ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProcessHandleCount": {
        "documentation": "Retrieves the number of open handles that belong to the specified process",
        "label": "_WinAPI_GetProcessHandleCount ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProcessID": {
        "documentation": "Retrieves the process identifier of the specified process",
        "label": "_WinAPI_GetProcessID ( $hProcess )",
        "params": [{
            "label": "$hProcess",
            "documentation": "Handle to the process. The handle must have the $PROCESS_QUERY_INFORMATION or$PROCESS_QUERY_LIMITED_INFORMATION access right."
        }]
    },
    "_WinAPI_GetProcessIoCounters": {
        "documentation": "Retrieves accounting information for all I/O operations performed by the specified process",
        "label": "_WinAPI_GetProcessIoCounters ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProcessMemoryInfo": {
        "documentation": "Retrieves information about the memory usage of the specified process",
        "label": "_WinAPI_GetProcessMemoryInfo ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProcessName": {
        "documentation": "Retrieves the name for the specified process",
        "label": "_WinAPI_GetProcessName ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProcessShutdownParameters": {
        "documentation": "Retrieves the shutdown parameters for the currently calling process",
        "label": "_WinAPI_GetProcessShutdownParameters (  )",
        "params": []
    },
    "_WinAPI_GetProcessTimes": {
        "documentation": "Retrieves timing information for the specified process",
        "label": "_WinAPI_GetProcessTimes ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProcessUser": {
        "documentation": "Retrieves the user and domain name for the specified process",
        "label": "_WinAPI_GetProcessUser ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** **[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProcessWindowStation": {
        "documentation": "Retrieves a handle to the current window station for the calling process",
        "label": "_WinAPI_GetProcessWindowStation (  )",
        "params": []
    },
    "_WinAPI_GetProcessWorkingDirectory": {
        "documentation": "Retrieves the current working directory for the specified process",
        "label": "_WinAPI_GetProcessWorkingDirectory ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_GetProfilesDirectory": {
        "documentation": "Retrieves the path to the root directory where user profiles are stored",
        "label": "_WinAPI_GetProfilesDirectory (  )",
        "params": []
    },
    "_WinAPI_GetPwrCapabilities": {
        "documentation": "Retrieves information about the system power capabilities",
        "label": "_WinAPI_GetPwrCapabilities (  )",
        "params": []
    },
    "_WinAPI_GetRawInputBuffer": {
        "documentation": "Performs a buffered read of the raw input data",
        "label": "_WinAPI_GetRawInputBuffer ( $pBuffer, $iLength )",
        "params": [{
            "label": "$pBuffer",
            "documentation": "A pointer to the buffer to receive an array of $tagRAWINPUT structures containing the raw input data."
        }, {
            "label": "$iLength",
            "documentation": "The size of the buffer, in bytes."
        }]
    },
    "_WinAPI_GetRawInputBufferLength": {
        "documentation": "Retrieves the required buffer size to call the _WinAPI_GetRawInputBuffer() function",
        "label": "_WinAPI_GetRawInputBufferLength (  )",
        "params": []
    },
    "_WinAPI_GetRawInputData": {
        "documentation": "Retrieves the raw input from the specified device",
        "label": "_WinAPI_GetRawInputData ( $hRawInput, $pBuffer, $iLength, $iFlag )",
        "params": [{
            "label": "$hRawInput",
            "documentation": "A handle to the $tagRAWINPUT structure (not a pointer). This comes from the \"lParam\" in WM_INPUT."
        }, {
            "label": "$pBuffer",
            "documentation": "A pointer to the buffer to receive a data that comes from the $tagRAWINPUT structure. This dependson the value of a command flag (see below). If this parameter is 0, the function returns therequired size of the buffer, in bytes."
        }, {
            "label": "$iLength",
            "documentation": "The size of the buffer, in bytes."
        }, {
            "label": "$iFlag",
            "documentation": "The command flag. This parameter can be one of the following values.    $RID_HEADER    $RID_INPUT"
        }]
    },
    "_WinAPI_GetRawInputDeviceInfo": {
        "documentation": "Retrieves information about the raw input device",
        "label": "_WinAPI_GetRawInputDeviceInfo ( $hDevice, $pBuffer, $iLength, $iFlag )",
        "params": [{
            "label": "$hDevice",
            "documentation": "A handle to the raw input device. This comes from the \"lParam\" of the WM_INPUT message, from the\"$hDevice\" member of the $tagRAWINPUTHEADER structure, or from the _WinAPI_EnumRawInputDevices() function."
        }, {
            "label": "$pBuffer",
            "documentation": "A pointer to the buffer that receives an information specified by a command flag (see below).If this parameter is 0, the function returns the required size of the buffer, in bytes or characters."
        }, {
            "label": "$iLength",
            "documentation": "The size of the buffer, in bytes. For $RIDI_DEVICENAME only, this value is the character count,including null-terminating character (not the byte count)."
        }, {
            "label": "$iFlag",
            "documentation": "The command flag that specifies what information will be returned.This parameter can be one of the following values.    $RIDI_DEVICENAME    $RIDI_DEVICEINFO    $RIDI_PREPARSEDDATA"
        }]
    },
    "_WinAPI_GetRegionData": {
        "documentation": "Fills the specified buffer with data describing a region",
        "label": "_WinAPI_GetRegionData ( $hRgn, ByRef $tRGNDATA )",
        "params": [{
            "label": "$hRgn",
            "documentation": "Handle to the region."
        }, {
            "label": "$tRGNDATA",
            "documentation": "Returns a $tagRGNDATA structure that is created by this function, and contains the region data, in logical units."
        }]
    },
    "_WinAPI_GetRegisteredRawInputDevices": {
        "documentation": "Retrieves the information about the raw input devices for the current application",
        "label": "_WinAPI_GetRegisteredRawInputDevices ( $pBuffer, $iLength )",
        "params": [{
            "label": "$pBuffer",
            "documentation": "A pointer to the buffer to receive an array of $tagRAWINPUTDEVICE structures for the application.If this parameter is 0, the function returns the required buffer size, in bytes."
        }, {
            "label": "$iLength",
            "documentation": "The size of the buffer, in bytes."
        }]
    },
    "_WinAPI_GetRegKeyNameByHandle": {
        "documentation": "Retrieves a name of the specified registry key",
        "label": "_WinAPI_GetRegKeyNameByHandle ( $hKey )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key."
        }]
    },
    "_WinAPI_GetRgnBox": {
        "documentation": "Retrieves the bounding rectangle of the specified region",
        "label": "_WinAPI_GetRgnBox ( $hRgn, ByRef $tRECT )",
        "params": [{
            "label": "$hRgn",
            "documentation": "Handle to the region."
        }, {
            "label": "$tRECT",
            "documentation": "Returns a $tagRECT structure that is created by this function, and contains the bounding rectangle, in logical units."
        }]
    },
    "_WinAPI_GetROP2": {
        "documentation": "Retrieves the foreground mix mode of the specified device context",
        "label": "_WinAPI_GetROP2 ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetRValue": {
        "documentation": "Retrieves an intensity value for the red component of a 32-bit RGB value",
        "label": "_WinAPI_GetRValue ( $iRGB )",
        "params": [{
            "label": "$iRGB",
            "documentation": "The color value, in RGB."
        }]
    },
    "_WinAPI_GetSaveFileName": {
        "documentation": "Creates a Save dialog box that lets the user specify the drive, directory, and name of a file to save",
        "label": "_WinAPI_GetSaveFileName ( [$sTitle = \"\" [, $sFilter = \"All files (*.*)\" [, $sInitalDir = \".\" [, $sDefaultFile = \"\" [, $sDefaultExt = \"\" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hWndOwner = 0]]]]]]]]] )",
        "params": [{
            "label": "$sTitle",
            "documentation": "**[optional]** string to be placed in the title bar of the dialog box"
        }, {
            "label": "$sFilter",
            "documentation": "**[optional]** Pairs of filter strings (for example \"Text Files (*.txt)|All Files (*.*)\")The first string in each pair is a display string that describes the filter (for example, \"Text Files\")The second string specifies the filter pattern (for example, \"*.TXT\")To specify multiple filter patterns for a single display string, use a semicolon to separate the patterns (for example, \"*.TXT;*.DOC;*.BAK\")A pattern string can be a combination of valid file name characters and the asterisk (*) wildcard characterDo not include spaces in the pattern string."
        }, {
            "label": "$sInitalDir",
            "documentation": "**[optional]** String that can specify the initial directory"
        }, {
            "label": "$sDefaultFile",
            "documentation": "**[optional]** A file name used to initialize the File Name edit control"
        }, {
            "label": "$sDefaultExt",
            "documentation": "**[optional]** String that contains the default extension"
        }, {
            "label": "$iFilterIndex",
            "documentation": "**[optional]** Specifies the index of the currently selected filter in the File Types control"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** See Flags in $tagOPENFILENAME information"
        }, {
            "label": "$iFlagsEx",
            "documentation": "**[optional]** See FlagEx in $tagOPENFILENAME information"
        }, {
            "label": "$hWndOwner",
            "documentation": "**[optional]** Handle to the window that owns the dialog box. This member can be any valid window handle, or it can be 0 if the dialog box has no owner"
        }]
    },
    "_WinAPI_GetShellWindow": {
        "documentation": "Retrieves a handle to the Shell's desktop window",
        "label": "_WinAPI_GetShellWindow (  )",
        "params": []
    },
    "_WinAPI_GetStartupInfo": {
        "documentation": "Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created",
        "label": "_WinAPI_GetStartupInfo (  )",
        "params": []
    },
    "_WinAPI_GetStdHandle": {
        "documentation": "Retrieves a handle for the standard input, standard output, or standard error device",
        "label": "_WinAPI_GetStdHandle ( $iStdHandle )",
        "params": [{
            "label": "$iStdHandle",
            "documentation": "Standard device for which a handle is to be returned. This can be one of the following values:0 - Handle to the standard input device1 - Handle to the standard output device2 - Handle to the standard error device"
        }]
    },
    "_WinAPI_GetStockObject": {
        "documentation": "Retrieves a handle to one of the predefined stock pens, brushes, fonts, or palettes",
        "label": "_WinAPI_GetStockObject ( $iObject )",
        "params": [{
            "label": "$iObject",
            "documentation": "Specifies the type of stock object. This parameter can be any one of the following values:$BLACK_BRUSH - Black brush$DKGRAY_BRUSH - Dark gray brush$GRAY_BRUSH - Gray brush$HOLLOW_BRUSH - Hollow brush (equivalent to NULL_BRUSH)$LTGRAY_BRUSH - Light gray brush$NULL_BRUSH - Null brush (equivalent to HOLLOW_BRUSH)$WHITE_BRUSH - White brush$BLACK_PEN - Black pen$NULL_PEN - Null pen$WHITE_PEN - White pen$ANSI_FIXED_FONT - Windows fixed-pitch (monospace) system font$ANSI_VAR_FONT - Windows variable-pitch (proportional space) system font$DEVICE_DEFAULT_FONT - Device-dependent font$DEFAULT_GUI_FONT - Default font for user interface objects$OEM_FIXED_FONT - OEM dependent fixed-pitch (monospace) font$SYSTEM_FONT - System font$SYSTEM_FIXED_FONT - Fixed-pitch (monospace) system font used in Windows versions earlier than 3.0$DEFAULT_PALETTE - Default palette. This palette consists of the static colors in the system palette."
        }]
    },
    "_WinAPI_GetStretchBltMode": {
        "documentation": "Retrieves the current stretching mode",
        "label": "_WinAPI_GetStretchBltMode ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetString": {
        "documentation": "Returns a string located at the specified memory address",
        "label": "_WinAPI_GetString ( $pString [, $bUnicode = True] )",
        "params": [{
            "label": "$pString",
            "documentation": "Pointer to a null-terminated string."
        }, {
            "label": "$bUnicode",
            "documentation": "**[optional]** Specifies whether a string is Unicode or ASCII code of a character, valid values:    True - Unicode (Default).    False - ASCII."
        }]
    },
    "_WinAPI_GetSysColor": {
        "documentation": "Retrieves the current color of the specified display element",
        "label": "_WinAPI_GetSysColor ( $iIndex )",
        "params": [{
            "label": "$iIndex",
            "documentation": "The display element whose color is to be retrieved. Can be one of the following:$COLOR_3DDKSHADOW - Dark shadow for three-dimensional display elements.$COLOR_3DFACE - Face color for three-dimensional display elements and for dialog box backgrounds.$COLOR_3DHIGHLIGHT - Highlight color for three-dimensional display elements (for edges facing the light source.)$COLOR_3DHILIGHT - Highlight color for three-dimensional display elements (for edges facing the light source.)$COLOR_3DLIGHT - Light color for three-dimensional display elements (for edges facing the light source.)$COLOR_3DSHADOW - Shadow color for three-dimensional display elements (for edges facing away from the light source).$COLOR_ACTIVEBORDER - Active window border.$COLOR_ACTIVECAPTION - Active window title bar.Specifies the left side color in the color gradient of an active window's title bar if the gradient effect is enabled.$COLOR_APPWORKSPACE - Background color of multiple document interface (MDI) applications.$COLOR_BACKGROUND - Desktop.$COLOR_BTNFACE - Face color for three-dimensional display elements and for dialog box backgrounds.$COLOR_BTNHIGHLIGHT - Highlight color for three-dimensional display elements (for edges facing the light source.)$COLOR_BTNHILIGHT - Highlight color for three-dimensional display elements (for edges facing the light source.)$COLOR_BTNSHADOW - Shadow color for three-dimensional display elements (for edges facing away from the light source).$COLOR_BTNTEXT - Text on push buttons.$COLOR_CAPTIONTEXT - Text in caption, size box, and scroll bar arrow box.$COLOR_DESKTOP - Desktop.$COLOR_GRADIENTACTIVECAPTION - Right side color in the color gradient of an active window's title bar.$COLOR_ACTIVECAPTION specifies the left side color.Use SPI_GETGRADIENTCAPTIONS with the SystemParametersInfo function to determine whether the gradient effect is enabled.$COLOR_GRADIENTINACTIVECAPTION - Right side color in the color gradient of an inactive window's title bar.$COLOR_INACTIVECAPTION specifies the left side color.$COLOR_GRAYTEXT - Grayed (disabled) text. This color is set to 0 if the current display driver does not support a solid gray color.$COLOR_HIGHLIGHT - Item(s) selected in a control.$COLOR_HIGHLIGHTTEXT - Text of item(s) selected in a control.$COLOR_HOTLIGHT - Color for a hyperlink or hot-tracked item.$COLOR_INACTIVEBORDER - Inactive window border.$COLOR_INACTIVECAPTION - Inactive window caption.Specifies the left side color in the color gradient of an inactive window's title bar if the gradient effect is enabled.$COLOR_INACTIVECAPTIONTEXT - Color of text in an inactive caption.$COLOR_INFOBK - Background color for tooltip controls.$COLOR_INFOTEXT - Text color for tooltip controls.$COLOR_MENU - Menu background.$COLOR_MENUHILIGHT - The color used to highlight menu items when the menu appears as a flat menu.The highlighted menu item is outlined with $COLOR_HIGHLIGHT.$COLOR_MENUBAR - The background color for the menu bar when menus appear as flat menus.However, $COLOR_MENU continues to specify the background color of the menu popup.$COLOR_MENUTEXT - Text in menus.$COLOR_SCROLLBAR - Scroll bar gray area.$COLOR_WINDOW - Window background.$COLOR_WINDOWFRAME - Window frame.$COLOR_WINDOWTEXT - Text in windows."
        }]
    },
    "_WinAPI_GetSysColorBrush": {
        "documentation": "Retrieves a handle identifying a logical brush that corresponds to the specified color index",
        "label": "_WinAPI_GetSysColorBrush ( $iIndex )",
        "params": [{
            "label": "$iIndex",
            "documentation": "The display element whose color is to be retrieved"
        }]
    },
    "_WinAPI_GetSystemDefaultLangID": {
        "documentation": "Returns the language identifier for the system locale",
        "label": "_WinAPI_GetSystemDefaultLangID (  )",
        "params": []
    },
    "_WinAPI_GetSystemDefaultLCID": {
        "documentation": "Returns the locale identifier (LCID) for the system locale",
        "label": "_WinAPI_GetSystemDefaultLCID (  )",
        "params": []
    },
    "_WinAPI_GetSystemDefaultUILanguage": {
        "documentation": "Retrieves the language identifier for the system default UI language of the operating system",
        "label": "_WinAPI_GetSystemDefaultUILanguage (  )",
        "params": []
    },
    "_WinAPI_GetSystemDEPPolicy": {
        "documentation": "Gets the data execution prevention (DEP) policy setting for the system",
        "label": "_WinAPI_GetSystemDEPPolicy (  )",
        "params": []
    },
    "_WinAPI_GetSystemInfo": {
        "documentation": "Retrieves information about the current system",
        "label": "_WinAPI_GetSystemInfo (  )",
        "params": []
    },
    "_WinAPI_GetSystemMetrics": {
        "documentation": "Retrieves the specified system metric or system configuration setting",
        "label": "_WinAPI_GetSystemMetrics ( $iIndex )",
        "params": [{
            "label": "$iIndex",
            "documentation": "The system metric or configuration setting to be retrieved"
        }]
    },
    "_WinAPI_GetSystemPowerStatus": {
        "documentation": "Retrieves the power status of the system",
        "label": "_WinAPI_GetSystemPowerStatus (  )",
        "params": []
    },
    "_WinAPI_GetSystemTimes": {
        "documentation": "Retrieves system timing information",
        "label": "_WinAPI_GetSystemTimes (  )",
        "params": []
    },
    "_WinAPI_GetSystemWow64Directory": {
        "documentation": "Retrieves the path of the system directory used by WOW64",
        "label": "_WinAPI_GetSystemWow64Directory (  )",
        "params": []
    },
    "_WinAPI_GetTabbedTextExtent": {
        "documentation": "Computes the width and height of a character string which may contain one or more tab characters",
        "label": "_WinAPI_GetTabbedTextExtent ( $hDC, $sText [, $aTab = 0 [, $iStart = 0 [, $iEnd = -1]]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "A handle to the device context."
        }, {
            "label": "$sText",
            "documentation": "A character string."
        }, {
            "label": "$aTab",
            "documentation": "**[optional]** The array containing the tab-stop positions, in device units. The tab stops must be sorted in increasingorder; the smallest x-value should be the first item in the array. Also, it can be an integer value that isone tab-stop position. In this case, the tab stops are separated by the distance specified by this value.If this parameter is 0 (Default), tabs are expanded to eight times the average character width."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array element that contains the first tab-stop position."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array element that contains the last tab-stop position."
        }]
    },
    "_WinAPI_GetTempFileName": {
        "documentation": "Creates a name for a temporary file",
        "label": "_WinAPI_GetTempFileName ( $sFilePath [, $sPrefix = ''] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The directory path for the file name. Applications typically specify a period (.) for the current directory."
        }, {
            "label": "$sPrefix",
            "documentation": "**[optional]** The prefix string. The function uses up to the first three characters of this string as the prefix of thefile name."
        }]
    },
    "_WinAPI_GetTextAlign": {
        "documentation": "Retrieves the text-alignment setting for the specified device context",
        "label": "_WinAPI_GetTextAlign ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetTextCharacterExtra": {
        "documentation": "Retrieves the current intercharacter spacing for the specified device context",
        "label": "_WinAPI_GetTextCharacterExtra ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetTextColor": {
        "documentation": "Retrieves the current text color for the specified device context",
        "label": "_WinAPI_GetTextColor ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetTextExtentPoint32": {
        "documentation": "Computes the width and height of the specified string of text",
        "label": "_WinAPI_GetTextExtentPoint32 ( $hDC, $sText )",
        "params": [{
            "label": "$hDC",
            "documentation": "Identifies the device contex"
        }, {
            "label": "$sText",
            "documentation": "String of text"
        }]
    },
    "_WinAPI_GetTextFace": {
        "documentation": "Retrieves the typeface name of the font that is selected into the specified device context",
        "label": "_WinAPI_GetTextFace ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetTextMetrics": {
        "documentation": "Retrieves basic information for the currently selected font",
        "label": "_WinAPI_GetTextMetrics ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetThreadDesktop": {
        "documentation": "Retrieves a handle to the desktop assigned to the specified thread",
        "label": "_WinAPI_GetThreadDesktop ( $iThreadId )",
        "params": [{
            "label": "$iThreadId",
            "documentation": "The thread identifier. The _WinAPI_CreateProcess() and _WinAPI_GetCurrentThreadId() return thread identifiers."
        }]
    },
    "_WinAPI_GetThreadErrorMode": {
        "documentation": "Retrieves the error mode for the calling thread",
        "label": "_WinAPI_GetThreadErrorMode (  )",
        "params": []
    },
    "_WinAPI_GetThreadLocale": {
        "documentation": "Retrieves the locale identifier of the current locale for the calling thread",
        "label": "_WinAPI_GetThreadLocale (  )",
        "params": []
    },
    "_WinAPI_GetThreadUILanguage": {
        "documentation": "Retrieves the language identifier of the first user interface language for the current thread",
        "label": "_WinAPI_GetThreadUILanguage (  )",
        "params": []
    },
    "_WinAPI_GetTickCount": {
        "documentation": "Retrieves the number of milliseconds that have elapsed since the system was started",
        "label": "_WinAPI_GetTickCount (  )",
        "params": []
    },
    "_WinAPI_GetTickCount64": {
        "documentation": "Retrieves the number of milliseconds that have elapsed since the system was started",
        "label": "_WinAPI_GetTickCount64 (  )",
        "params": []
    },
    "_WinAPI_GetTimeFormat": {
        "documentation": "Formats time as a time string for a locale specified by identifier",
        "label": "_WinAPI_GetTimeFormat ( [$iLCID = 0 [, $tSYSTEMTIME = 0 [, $iFlags = 0 [, $sFormat = '']]]] )",
        "params": [{
            "label": "$iLCID",
            "documentation": "**[optional]** The locale identifier (LCID) that specifies the locale or one of the following predefined values.$LOCALE_INVARIANT$LOCALE_SYSTEM_DEFAULT$LOCALE_USER_DEFAULTWindows Vista or later$LOCALE_CUSTOM_DEFAULT$LOCALE_CUSTOM_UI_DEFAULT$LOCALE_CUSTOM_UNSPECIFIED"
        }, {
            "label": "$tSYSTEMTIME",
            "documentation": "**[optional]** $tagSYSTEMTIME structure that contains the time information to format. If this parameter is 0 (Default),the function will use the current local system time."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specifies the time format options.This parameter can be one or more of the following values.$TIME_FORCE24HOURFORMAT$TIME_NOMINUTESORSECONDS$TIME_NOSECONDS$TIME_NOTIMEMARKER"
        }, {
            "label": "$sFormat",
            "documentation": "**[optional]** The string that is used to form the time. For example, \"hh:mm:ss tt\". If this parameter isomitted or an empty string (Default), the function returns the string according to the time formatfor the specified locale."
        }]
    },
    "_WinAPI_GetTopWindow": {
        "documentation": "Retrieves a handle to the child window at the top of the Z order",
        "label": "_WinAPI_GetTopWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the parent window whose child windows are to be examined. If this parameter is 0, the functionreturns a handle to the window at the top of the Z order."
        }]
    },
    "_WinAPI_GetUDFColorMode": {
        "documentation": "Retrieves the current color mode for WinAPIEx UDF library",
        "label": "_WinAPI_GetUDFColorMode (  )",
        "params": []
    },
    "_WinAPI_GetUpdateRect": {
        "documentation": "Retrieves the coordinates of the rectangle that completely encloses the update region of the specified window",
        "label": "_WinAPI_GetUpdateRect ( $hWnd [, $bErase = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose update region is to be retrieved."
        }, {
            "label": "$bErase",
            "documentation": "**[optional]** Specifies whether the background in the update region is to be erased, valid values:True - The background is erased (Default).False - The background remains unchanged."
        }]
    },
    "_WinAPI_GetUpdateRgn": {
        "documentation": "Retrieves the update region of a window by copying it into the specified region",
        "label": "_WinAPI_GetUpdateRgn ( $hWnd, $hRgn [, $bErase = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window with an update region that is to be retrieved."
        }, {
            "label": "$hRgn",
            "documentation": "Handle to the region to receive the update region."
        }, {
            "label": "$bErase",
            "documentation": "**[optional]** Specifies whether the background in the update region is to be erased, valid values:    True - The background is erased (Default).    False - The background remains unchanged."
        }]
    },
    "_WinAPI_GetUserDefaultLangID": {
        "documentation": "Returns the language identifier for the current user locale",
        "label": "_WinAPI_GetUserDefaultLangID (  )",
        "params": []
    },
    "_WinAPI_GetUserDefaultLCID": {
        "documentation": "Returns the locale identifier (LCID) for the user default locale",
        "label": "_WinAPI_GetUserDefaultLCID (  )",
        "params": []
    },
    "_WinAPI_GetUserDefaultUILanguage": {
        "documentation": "Returns the language identifier for the user UI language for the current user",
        "label": "_WinAPI_GetUserDefaultUILanguage (  )",
        "params": []
    },
    "_WinAPI_GetUserGeoID": {
        "documentation": "Retrieves information about the geographical location of the user",
        "label": "_WinAPI_GetUserGeoID (  )",
        "params": []
    },
    "_WinAPI_GetUserObjectInformation": {
        "documentation": "Retrieves information about the specified window station or desktop object",
        "label": "_WinAPI_GetUserObjectInformation ( $hObject, $iIndex )",
        "params": [{
            "label": "$hObject",
            "documentation": "Handle to the window station or desktop object."
        }, {
            "label": "$iIndex",
            "documentation": "The information to be retrieved. The parameter can be one of the following values.$UOI_FLAGS$tagUSEROBJECTFLAGS structure containing information about a window station or desktop handle.$UOI_HEAPSIZEThe size of the desktop heap, in KB.$UOI_IO1 if the object is a handle to the desktop that is receiving input from the user, 0 otherwise.$UOI_NAMEThe name of the object, as a string.$UOI_TYPEThe type of the object, as a string.$UOI_USER_SIDThe security identifier (SID) structure as \"byte[n]\"."
        }]
    },
    "_WinAPI_GetVersion": {
        "documentation": "Retrieves version of the current operating system",
        "label": "_WinAPI_GetVersion (  )",
        "params": []
    },
    "_WinAPI_GetVersionEx": {
        "documentation": "Retrieves information about the current operating system",
        "label": "_WinAPI_GetVersionEx (  )",
        "params": []
    },
    "_WinAPI_GetVolumeInformation": {
        "documentation": "Retrieves information about the file system and volume associated with the specified root directory",
        "label": "_WinAPI_GetVolumeInformation ( [$sRoot = ''] )",
        "params": [{
            "label": "$sRoot",
            "documentation": "**[optional]** The root directory of the volume to be described. If this parameter is empty string, the rootof the current directory is used. A trailing backslash is required. For example, you specify\"\\\\MyServer\\MyShare\" as \"\\\\MyServer\\MyShare\\\", or the \"C\" drive as \"C:\\\"."
        }]
    },
    "_WinAPI_GetVolumeInformationByHandle": {
        "documentation": "Retrieves information about the file system and volume associated with the specified file",
        "label": "_WinAPI_GetVolumeInformationByHandle ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "A handle to the file."
        }]
    },
    "_WinAPI_GetVolumeNameForVolumeMountPoint": {
        "documentation": "Retrieves a volume GUID path for the volume that is associated with the specified volume mount point",
        "label": "_WinAPI_GetVolumeNameForVolumeMountPoint ( $sMountedPath )",
        "params": [{
            "label": "$sMountedPath",
            "documentation": "The path of a mounted folder (for example, Y:\\MountX\\) or a drive letter (for example, X:\\)."
        }]
    },
    "_WinAPI_GetWindow": {
        "documentation": "Retrieves the handle of a window that has a specified relationship to the specified window",
        "label": "_WinAPI_GetWindow ( $hWnd, $iCmd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window"
        }, {
            "label": "$iCmd",
            "documentation": "Specifies the relationship between the specified window and the window whose handle is to be retrieved.This parameter can be one of the following values:    $GW_CHILD - The retrieved handle identifies the child window at the top of the Z order, if the specified        window is a parent window; otherwise, the retrieved handle is 0.        The function examines only child windows of the specified window. It does not examine descendant windows.    $GW_HWNDFIRST - The retrieved handle identifies the window of the same type that is highest in the Z order.        If the specified window is a topmost window, the handle identifies the topmost window that is highest in the Z order.        If the specified window is a top-level window, the handle identifies the top level window that is highest in the Z order.        If the specified window is a child window, the handle identifies the sibling window that is highest in the Z order.    $GW_HWNDLAST - The retrieved handle identifies the window of the same type that is lowest in the Z order.        If the specified window is a topmost window, the handle identifies the topmost window that is lowest in the Z order.        If the specified window is a top-level window the handle identifies the top-level window that's lowest in the Z order.        If the specified window is a child window, the handle identifies the sibling window that is lowest in the Z order.    $GW_HWNDNEXT - The retrieved handle identifies the window below the specified window in the Z order.        If the specified window is a topmost window, the handle identifies the topmost window below the specified window.        If the specified window is a top-level window, the handle identifies the top-level window below the specified window.        If the specified window is a child window the handle identifies the sibling window below the specified window.    $GW_HWNDPREV - The retrieved handle identifies the window above the specified window in the Z order.        If the specified window is a topmost window, the handle identifies the topmost window above the specified window.        If the specified window is a top-level window, the handle identifies the top-level window above the specified window.        If the specified window is a child window, the handle identifies the sibling window above the specified window.    $GW_OWNER - The retrieved handle identifies the specified window's owner window if any."
        }]
    },
    "_WinAPI_GetWindowDC": {
        "documentation": "Retrieves the device context (DC) for the entire window",
        "label": "_WinAPI_GetWindowDC ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }]
    },
    "_WinAPI_GetWindowDisplayAffinity": {
        "documentation": "Retrieves the current display affinity setting, from any process, for a given window",
        "label": "_WinAPI_GetWindowDisplayAffinity ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window for which display affinity setting is retrieved."
        }]
    },
    "_WinAPI_GetWindowExt": {
        "documentation": "Retrieves the x-extent and y-extent of the window for the specified device context",
        "label": "_WinAPI_GetWindowExt ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetWindowFileName": {
        "documentation": "Retrieves the fully-qualified path of the module associated with the specified window handle",
        "label": "_WinAPI_GetWindowFileName ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose module file name will be retrieved."
        }]
    },
    "_WinAPI_GetWindowHeight": {
        "documentation": "Returns the height of the window",
        "label": "_WinAPI_GetWindowHeight ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to a window"
        }]
    },
    "_WinAPI_GetWindowInfo": {
        "documentation": "Retrieves information about the specified window",
        "label": "_WinAPI_GetWindowInfo ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose information is to be retrieved."
        }]
    },
    "_WinAPI_GetWindowLong": {
        "documentation": "Retrieves information about the specified window",
        "label": "_WinAPI_GetWindowLong ( $hWnd, $iIndex )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based offset to the value to be retrieved.Valid values are in the range zero through the number of bytes of extra window memory, minus four;for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32 bit integer.To retrieve any other value, specify one of the following values:    $GWL_EXSTYLE - Retrieves the extended window styles    $GWL_STYLE - Retrieves the window styles    $GWL_WNDPROC - Retrieves the address of the window procedure    $GWL_HINSTANCE - Retrieves the handle of the application instance    $GWL_HWNDPARENT - Retrieves the handle of the parent window, if any    $GWL_ID - Retrieves the identifier of the window    $GWL_USERDATA - Retrieves the 32-bit value associated with the window"
        }]
    },
    "_WinAPI_GetWindowOrg": {
        "documentation": "Retrieves the x-coordinates and y-coordinates of the window origin for the specified device context",
        "label": "_WinAPI_GetWindowOrg ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetWindowPlacement": {
        "documentation": "Retrieves the placement of the window for Min, Max, and normal positions",
        "label": "_WinAPI_GetWindowPlacement ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window"
        }]
    },
    "_WinAPI_GetWindowRect": {
        "documentation": "Retrieves the dimensions of the bounding rectangle of the specified window",
        "label": "_WinAPI_GetWindowRect ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window"
        }]
    },
    "_WinAPI_GetWindowRgn": {
        "documentation": "Obtains a copy of the window region of a window",
        "label": "_WinAPI_GetWindowRgn ( $hWnd, $hRgn )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose window region is to be obtained."
        }, {
            "label": "$hRgn",
            "documentation": "Handle to the region which will be modified to represent the window region."
        }]
    },
    "_WinAPI_GetWindowRgnBox": {
        "documentation": "Retrieves the dimensions of the tightest bounding rectangle for the window region of a window",
        "label": "_WinAPI_GetWindowRgnBox ( $hWnd, ByRef $tRECT )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window."
        }, {
            "label": "$tRECT",
            "documentation": "Returns a $tagRECT structure that is created by this function, and contains the rectangle dimensions, in deviceunits relative to the upper-left corner of the window."
        }]
    },
    "_WinAPI_GetWindowSubclass": {
        "documentation": "Retrieves the reference data for the specified window subclass callback",
        "label": "_WinAPI_GetWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window being subclassed."
        }, {
            "label": "$pSubclassProc",
            "documentation": "A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback.(See MSDN for more information)"
        }, {
            "label": "$idSubClass",
            "documentation": "The subclass ID."
        }]
    },
    "_WinAPI_GetWindowText": {
        "documentation": "Retrieves the text of the specified window's title bar",
        "label": "_WinAPI_GetWindowText ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window"
        }]
    },
    "_WinAPI_GetWindowThreadProcessId": {
        "documentation": "Retrieves the identifier of the thread that created the specified window",
        "label": "_WinAPI_GetWindowThreadProcessId ( $hWnd, ByRef $iPID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Window handle"
        }, {
            "label": "$iPID",
            "documentation": "Variable to hold the return the process ID (PID) of the thread."
        }]
    },
    "_WinAPI_GetWindowWidth": {
        "documentation": "Returns the width of the window",
        "label": "_WinAPI_GetWindowWidth ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to a window"
        }]
    },
    "_WinAPI_GetWorkArea": {
        "documentation": "Retrieves the size of the working area on the primary display monitor",
        "label": "_WinAPI_GetWorkArea (  )",
        "params": []
    },
    "_WinAPI_GetWorldTransform": {
        "documentation": "Retrieves the current world-space to page-space transformation",
        "label": "_WinAPI_GetWorldTransform ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_GetXYFromPoint": {
        "documentation": "Returns the X/Y values from a $tagPOINT structure",
        "label": "_WinAPI_GetXYFromPoint ( ByRef $tPoint, ByRef $iX, ByRef $iY )",
        "params": [{
            "label": "$tPoint",
            "documentation": "$tagPOINT structure"
        }, {
            "label": "$iX",
            "documentation": "Returns X value"
        }, {
            "label": "$iY",
            "documentation": "Returns Y value"
        }]
    },
    "_WinAPI_GlobalMemoryStatus": {
        "documentation": "Retrieves information about current available memory",
        "label": "_WinAPI_GlobalMemoryStatus (  )",
        "params": []
    },
    "_WinAPI_GradientFill": {
        "documentation": "Fills rectangle or triangle gradient",
        "label": "_WinAPI_GradientFill ( $hDC, Const ByRef $aVertex [, $iStart = 0 [, $iEnd = -1 [, $bRotate = False]]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$aVertex",
            "documentation": "The 2D array ([x1, y1, $iRGB1], [x2, y2, $iRGB2], ... [xN, yN, $iRGBN]) that contains the necessarygradient vertices. Each vertex in this array contains the following parameters.x - The x-coordinate, in logical units.y - The y-coordinate, in logical unitsrgb - The color information at the point of x, y."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start filling at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop filling at."
        }, {
            "label": "$bRotate",
            "documentation": "**[optional]** Specifies whether fills a rectangle from left to right edge (horizontal gradient).    $bRotate used only for the rectangular gradients, for the triangular gradients this parameter will be ignored,    valid values:        True - Fills from left to right edge.        False - Fills from top to bottom edge (Default)."
        }]
    },
    "_WinAPI_GUIDFromString": {
        "documentation": "Converts a string GUID to binary form",
        "label": "_WinAPI_GUIDFromString ( $sGUID )",
        "params": [{
            "label": "$sGUID",
            "documentation": "GUID in string form"
        }]
    },
    "_WinAPI_GUIDFromStringEx": {
        "documentation": "Converts a string GUID to binary form",
        "label": "_WinAPI_GUIDFromStringEx ( $sGUID, $tGUID )",
        "params": [{
            "label": "$sGUID",
            "documentation": "GUID in string form"
        }, {
            "label": "$tGUID",
            "documentation": "A $tagGUID structure or a ptr to it where the GUID will be stored"
        }]
    },
    "_WinAPI_HashData": {
        "documentation": "Hashes a memory block",
        "label": "_WinAPI_HashData ( $pMemory, $iSize [, $iLength = 32] )",
        "params": [{
            "label": "$pMemory",
            "documentation": "A pointer to a memory block containing data to hash."
        }, {
            "label": "$iSize",
            "documentation": "The size of the memory block, in bytes."
        }, {
            "label": "$iLength",
            "documentation": "**[optional]** The length of the hash data, in bytes. It should be no larger than 256, otherwise, the function fails. Default is 32."
        }]
    },
    "_WinAPI_HashString": {
        "documentation": "Hashes a string",
        "label": "_WinAPI_HashString ( $sString [, $bCaseSensitive = True [, $iLength = 32]] )",
        "params": [{
            "label": "$sString",
            "documentation": "The string to hash."
        }, {
            "label": "$bCaseSensitive",
            "documentation": "**[optional]** Specifies whether to treat the string as case sensitive when computing the hash value, valid values:True - The lowercase and uppercase string hash to the different value (Default).False - The lowercase and uppercase string hash to the same value."
        }, {
            "label": "$iLength",
            "documentation": "**[optional]** The length of the hash data, in bytes. It should be no larger than 256, otherwise, the function fails. Default is 32."
        }]
    },
    "_WinAPI_HiByte": {
        "documentation": "Returns the high BYTE of a 16-bit (2 bytes) value",
        "label": "_WinAPI_HiByte ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "16-bit value."
        }]
    },
    "_WinAPI_HideCaret": {
        "documentation": "Removes the caret from the screen",
        "label": "_WinAPI_HideCaret ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that owns the caret. If this parameter is 0, _WinAPI_HideCaret() searches thecurrent task for the window that owns the caret."
        }]
    },
    "_WinAPI_HiDWord": {
        "documentation": "Returns the high DWORD of a 64-bit (8 bytes) value",
        "label": "_WinAPI_HiDWord ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "64-bit value."
        }]
    },
    "_WinAPI_HiWord": {
        "documentation": "Returns the high word of a longword value",
        "label": "_WinAPI_HiWord ( $iLong )",
        "params": [{
            "label": "$iLong",
            "documentation": "Longword value"
        }]
    },
    "_WinAPI_InflateRect": {
        "documentation": "Increases or decreases the width and height of the specified rectangle",
        "label": "_WinAPI_InflateRect ( ByRef $tRECT, $iDX, $iDY )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that increases or decreases in size."
        }, {
            "label": "$iDX",
            "documentation": "The amount to increase or decrease (negative value) the rectangle width."
        }, {
            "label": "$iDY",
            "documentation": "The amount to increase or decrease (negative value) the rectangle height."
        }]
    },
    "_WinAPI_InitMUILanguage": {
        "documentation": "Enables an application to specify a language to be used with the common controls that is different from the system language",
        "label": "_WinAPI_InitMUILanguage ( $iLanguage )",
        "params": [{
            "label": "$iLanguage",
            "documentation": "The language identifier to be used by the common controls."
        }]
    },
    "_WinAPI_InProcess": {
        "documentation": "Determines whether a window belongs to the current process",
        "label": "_WinAPI_InProcess ( $hWnd, ByRef $hLastWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Window handle to be tested"
        }, {
            "label": "$hLastWnd",
            "documentation": "Last window tested. If $hWnd = $hLastWnd, this process will immediately return True. Otherwise,_WinAPI_InProcess() will be called. If $hWnd is in process, $hLastWnd will be set to $hWnd on return."
        }]
    },
    "_WinAPI_IntersectClipRect": {
        "documentation": "Creates a new clipping region from the intersection of the current clipping region and the specified rectangle",
        "label": "_WinAPI_IntersectClipRect ( $hDC, $tRECT )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the specified rectangle."
        }]
    },
    "_WinAPI_IntersectRect": {
        "documentation": "Creates the intersection of two rectangles",
        "label": "_WinAPI_IntersectRect ( $tRECT1, $tRECT2 )",
        "params": [{
            "label": "$tRECT1",
            "documentation": "$tagRECT structure that contains the first source rectangle."
        }, {
            "label": "$tRECT2",
            "documentation": "$tagRECT structure that contains the second source rectangle."
        }]
    },
    "_WinAPI_IntToDWord": {
        "documentation": "Converts a value of type INT to a value of type DWORD",
        "label": "_WinAPI_IntToDWord ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "The value to be converted."
        }]
    },
    "_WinAPI_IntToFloat": {
        "documentation": "Returns a 4 byte integer as a float value",
        "label": "_WinAPI_IntToFloat ( $iInt )",
        "params": [{
            "label": "$iInt",
            "documentation": "Integer value"
        }]
    },
    "_WinAPI_InvalidateRect": {
        "documentation": "Adds a rectangle to the specified window's update region",
        "label": "_WinAPI_InvalidateRect ( $hWnd [, $tRECT = 0 [, $bErase = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to windows"
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** $tagRECT structure that contains the client coordinates of the rectangle to be added to theupdate region. If this parameter is 0 the entire client area is added to the update region."
        }, {
            "label": "$bErase",
            "documentation": "**[optional]** Specifies whether the background within the update region is to be erased when the updateregion is processed. If this parameter is True the background is erased when the BeginPaint function iscalled. If this parameter is False, the background remains unchanged."
        }]
    },
    "_WinAPI_InvalidateRgn": {
        "documentation": "Adds a region to the specified window's update region",
        "label": "_WinAPI_InvalidateRgn ( $hWnd [, $hRgn = 0 [, $bErase = True]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window with an update region that is to be modified."
        }, {
            "label": "$hRgn",
            "documentation": "**[optional]** Handle to the region to be added to the update region. The region is assumed to have client coordinates.If this parameter is 0, the entire client area is added to the update region."
        }, {
            "label": "$bErase",
            "documentation": "**[optional]** Specifies whether the background within the update region is to be erased when the update region is processed, valid values:    True - The background is erased (Default).    False - The background remains unchanged."
        }]
    },
    "_WinAPI_InvertANDBitmap": {
        "documentation": "Inverts the specified AND bitmask bitmap by performing a logical NOT operation",
        "label": "_WinAPI_InvertANDBitmap ( $hBitmap [, $bDelete = False] )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to the source bitmap that must be inverted."
        }, {
            "label": "$bDelete",
            "documentation": "**[optional]** Specifies whether to delete the source bitmap after the function is successful, valid values:    True - The bitmap will be destroyed when the function succeeds.    False - Do not delete, you must destroy a bitmap when it no longer needed (Default)."
        }]
    },
    "_WinAPI_InvertColor": {
        "documentation": "Inverts (negative) the specified color",
        "label": "_WinAPI_InvertColor ( $iColor )",
        "params": [{
            "label": "$iColor",
            "documentation": "The color to be inverted. This color can be specified in RGB or BGR format."
        }]
    },
    "_WinAPI_InvertRect": {
        "documentation": "Inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel",
        "label": "_WinAPI_InvertRect ( $hDC, $tRECT )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the rectangle to be inverted."
        }]
    },
    "_WinAPI_InvertRgn": {
        "documentation": "Inverts the colors in the specified region",
        "label": "_WinAPI_InvertRgn ( $hDC, $hRgn )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$hRgn",
            "documentation": "Handle to the region for which colors are inverted. The region's coordinates arepresumed to be logical coordinates."
        }]
    },
    "_WinAPI_IOCTL": {
        "documentation": "Create a unique system I/O control code (IOCTL)",
        "label": "_WinAPI_IOCTL ( $iDeviceType, $iFunction, $iMethod, $iAccess )",
        "params": [{
            "label": "$iDeviceType",
            "documentation": "The type of device."
        }, {
            "label": "$iFunction",
            "documentation": "The action within the device category."
        }, {
            "label": "$iMethod",
            "documentation": "The method codes for how buffers are passed for I/O and file system controls."
        }, {
            "label": "$iAccess",
            "documentation": "The access check value for any access."
        }]
    },
    "_WinAPI_IsAlphaBitmap": {
        "documentation": "Determines whether the specified bitmap has an alpha channel",
        "label": "_WinAPI_IsAlphaBitmap ( $hBitmap )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap to test. This bitmap must be a 32 bits-per-pixel."
        }]
    },
    "_WinAPI_IsBadCodePtr": {
        "documentation": "Determines whether the calling process has read access to the memory at the specified address",
        "label": "_WinAPI_IsBadCodePtr ( $pAddress )",
        "params": [{
            "label": "$pAddress",
            "documentation": "A pointer to a memory address."
        }]
    },
    "_WinAPI_IsBadReadPtr": {
        "documentation": "Verifies that the calling process has read access to the specified range of memory",
        "label": "_WinAPI_IsBadReadPtr ( $pAddress, $iLength )",
        "params": [{
            "label": "$pAddress",
            "documentation": "A pointer to the first byte of the memory block."
        }, {
            "label": "$iLength",
            "documentation": "The size of the memory block, in bytes."
        }]
    },
    "_WinAPI_IsBadStringPtr": {
        "documentation": "Verifies that the calling process has read access to the specified range of memory",
        "label": "_WinAPI_IsBadStringPtr ( $pAddress, $iLength )",
        "params": [{
            "label": "$pAddress",
            "documentation": "A pointer to a null-terminated string, either Unicode or ASCII."
        }, {
            "label": "$iLength",
            "documentation": "The maximum size of the string, in TCHARs."
        }]
    },
    "_WinAPI_IsBadWritePtr": {
        "documentation": "Verifies that the calling process has write access to the specified range of memory",
        "label": "_WinAPI_IsBadWritePtr ( $pAddress, $iLength )",
        "params": [{
            "label": "$pAddress",
            "documentation": "A pointer to the first byte of the memory block."
        }, {
            "label": "$iLength",
            "documentation": "The size of the memory block, in bytes."
        }]
    },
    "_WinAPI_IsChild": {
        "documentation": "Tests whether a window is a child window of a specified parent window",
        "label": "_WinAPI_IsChild ( $hWnd, $hWndParent )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be tested."
        }, {
            "label": "$hWndParent",
            "documentation": "Handle to the parent window."
        }]
    },
    "_WinAPI_IsClassName": {
        "documentation": "Wrapper to check ClassName of the control",
        "label": "_WinAPI_IsClassName ( $hWnd, $sClassName )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to a control"
        }, {
            "label": "$sClassName",
            "documentation": "Class name to check"
        }]
    },
    "_WinAPI_IsDoorOpen": {
        "documentation": "Checks if a CD (DVD) tray is open",
        "label": "_WinAPI_IsDoorOpen ( $sDrive )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive letter of the CD tray to check, in the format D:, E:, etc."
        }]
    },
    "_WinAPI_IsElevated": {
        "documentation": "Determines whether the current process is elevated",
        "label": "_WinAPI_IsElevated (  )",
        "params": []
    },
    "_WinAPI_IsHungAppWindow": {
        "documentation": "Determines whether the specified application is not responding",
        "label": "_WinAPI_IsHungAppWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window."
        }]
    },
    "_WinAPI_IsIconic": {
        "documentation": "Determines whether the specified window is minimized (iconic)",
        "label": "_WinAPI_IsIconic ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to test."
        }]
    },
    "_WinAPI_IsInternetConnected": {
        "documentation": "Determines whether the current user is connected to the Internet",
        "label": "_WinAPI_IsInternetConnected (  )",
        "params": []
    },
    "_WinAPI_IsLoadKBLayout": {
        "documentation": "Determines whether the specified input locale loaded into the system",
        "label": "_WinAPI_IsLoadKBLayout ( $iLanguage )",
        "params": [{
            "label": "$iLanguage",
            "documentation": "The input locale identifier to check."
        }]
    },
    "_WinAPI_IsMemory": {
        "documentation": "Determines whether the specified pointer points to the memory block in the internal library heap",
        "label": "_WinAPI_IsMemory ( $pMemory )",
        "params": [{
            "label": "$pMemory",
            "documentation": "A pointer to the memory block that to be tested."
        }]
    },
    "_WinAPI_IsNameInExpression": {
        "documentation": "Determines whether a string matches the specified pattern",
        "label": "_WinAPI_IsNameInExpression ( $sString, $sPattern [, $bCaseSensitive = False] )",
        "params": [{
            "label": "$sString",
            "documentation": "The string to be compared against the pattern. This string cannot contain wildcard characters."
        }, {
            "label": "$sPattern",
            "documentation": "The pattern string. This string can contain wildcard characters."
        }, {
            "label": "$bCaseSensitive",
            "documentation": "**[optional]** Specifies whether to treat the string as case sensitive when matching, valid values:    True - The case-sensitive matching.    False - The case-insensitive matching (Default)."
        }]
    },
    "_WinAPI_IsNetworkAlive": {
        "documentation": "Determines whether or not a local system is connected to a network, and identifies the type of network connection",
        "label": "_WinAPI_IsNetworkAlive (  )",
        "params": []
    },
    "_WinAPI_IsPathShared": {
        "documentation": "Determines whether the path is shared",
        "label": "_WinAPI_IsPathShared ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The fully-qualified local path to be tested."
        }]
    },
    "_WinAPI_IsProcessInJob": {
        "documentation": "Determines whether the process is running in the specified job",
        "label": "_WinAPI_IsProcessInJob ( $hProcess [, $hJob = 0] )",
        "params": [{
            "label": "$hProcess",
            "documentation": "Handle to the process to be tested. The handle must have the $PROCESS_QUERY_INFORMATION or$PROCESS_QUERY_LIMITED_INFORMATION access right."
        }, {
            "label": "$hJob",
            "documentation": "**[optional]** Handle to the job. If this parameter is 0 (Default), the function tests if the process is running under any job."
        }]
    },
    "_WinAPI_IsProcessorFeaturePresent": {
        "documentation": "Determines whether the specified processor feature is supported by the current computer",
        "label": "_WinAPI_IsProcessorFeaturePresent ( $iFeature )",
        "params": [{
            "label": "$iFeature",
            "documentation": "The processor feature to be tested. This parameter can be one of the $PF_* constants defined in APISysConstants.au3."
        }]
    },
    "_WinAPI_IsRectEmpty": {
        "documentation": "Determines whether the specified rectangle is empty",
        "label": "_WinAPI_IsRectEmpty ( $tRECT )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the rectangle."
        }]
    },
    "_WinAPI_IsValidLocale": {
        "documentation": "Determines if the specified locale is installed or supported on the operating system",
        "label": "_WinAPI_IsValidLocale ( $iLCID [, $iFlag = 0] )",
        "params": [{
            "label": "$iLCID",
            "documentation": "The locale identifier (LCID) that specifies the locale or one of the following predefined values.$LOCALE_INVARIANT$LOCALE_SYSTEM_DEFAULT$LOCALE_USER_DEFAULTWindows Vista or later$LOCALE_CUSTOM_DEFAULT$LOCALE_CUSTOM_UI_DEFAULT$LOCALE_CUSTOM_UNSPECIFIED"
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** Flag specifying the validity test to apply to the locale identifier.This parameter can have one of the following values.$LCID_INSTALLED$LCID_SUPPORTED"
        }]
    },
    "_WinAPI_IsWindow": {
        "documentation": "Determines whether the specified window handle identifies an existing window",
        "label": "_WinAPI_IsWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to be tested"
        }]
    },
    "_WinAPI_IsWindowEnabled": {
        "documentation": "Determines whether the specified window is enabled for mouse and keyboard input",
        "label": "_WinAPI_IsWindowEnabled ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to test."
        }]
    },
    "_WinAPI_IsWindowUnicode": {
        "documentation": "Determines whether the specified window is a native Unicode window",
        "label": "_WinAPI_IsWindowUnicode ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to test."
        }]
    },
    "_WinAPI_IsWindowVisible": {
        "documentation": "Retrieves the visibility state of the specified window",
        "label": "_WinAPI_IsWindowVisible ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }]
    },
    "_WinAPI_IsWow64Process": {
        "documentation": "Determines whether the specified process is running under WOW64",
        "label": "_WinAPI_IsWow64Process ( [$iPID = 0] )",
        "params": [{
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_IsWritable": {
        "documentation": "Determines whether a disk is writable",
        "label": "_WinAPI_IsWritable ( $sDrive )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive letter of the disk to check, in the format D:, E:, etc."
        }]
    },
    "_WinAPI_IsZoomed": {
        "documentation": "Determines whether a window is maximized",
        "label": "_WinAPI_IsZoomed ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to test."
        }]
    },
    "_WinAPI_Keybd_Event": {
        "documentation": "Synthesizes a keystroke",
        "label": "_WinAPI_Keybd_Event ( $vKey, $iFlags [, $iScanCode = 0 [, $iExtraInfo = 0]] )",
        "params": [{
            "label": "$vKey",
            "documentation": "The virtual-key code ($VK_*). The code must be a value in the range 1 to 254.0x01 - Left mouse button0x02 - Right mouse button0x03 - Control-break processing0x04 - Middle mouse button (three-button mouse)0x05 - X1 mouse button0x06 - X2 mouse button0x08 - BACKSPACE key0x09 - TAB key0x0C - CLEAR key0x0D - ENTER key0x10 - SHIFT key0x11 - CTRL key0x12 - ALT key0x13 - PAUSE key0x14 - CAPS LOCK key0x1B - ESC key0x20 - SPACEBAR key0x21 - PAGE UP key0x22 - PAGE DOWN key0x23 - END key0x24 - HOME key0x25 - LEFT ARROW key0x26 - UP ARROW key0x27 - RIGHT ARROW key0x28 - DOWN ARROW key0x29 - SELECT key0x2A - PRINT key0x2B - EXECUTE key0x2C - PRINT SCREEN key0x2D - INS key0x2E - DEL key0x2F - HELP key0x30 - 0x39 - (0 - 9) key0x41 - 0x5A - (A - Z) key0x5B - Left Windows key0x5C - Right Windows key0x5D - Applications key0x5F - Computer Sleep key0x60 - 0x69 - Numeric keypad (0 - 9) key0x6A - Multiply key0x6B - Add key0x6C - Separator key0x6D - Subtract key0x6E - Decimal key0x6F - Divide key0x70 - 0x87 - (F1 - F24) key0x90 - NUM LOCK key0x91 - SCROLL LOCK key0xA0 - Left SHIFT key0xA1 - Right SHIFT key0xA2 - Left CONTROL key0xA3 - Right CONTROL key0xA4 - Left MENU key0xA5 - Right MENU key0xA6 - Browser Back key0xA7 - Browser Forward key0xA8 - Browser Refresh key0xA9 - Browser Stop key0xAA - Browser Search key0xAB - Browser Favorites key0xAC - Browser Start and Home key0xAD - Volume Mute key0xAE - Volume Down key0xAF - Volume Up key0xB0 - Next Track key0xB1 - Previous Track key0xB2 - Stop Media key0xB3 - Play/Pause Media key0xB4 - Start Mail key0xB5 - Select Media key0xB6 - Start Application 1 key0xB7 - Start Application 2 key0xBA - ';:' key0xBB - '+' key0xBC - ',' key0xBD - '-' key0xBE - '.' key0xBF - '/?' key0xC0 - '`~' key0xDB - '[{' key0xDC - '\\|' key0xDD - ']}' key0xDE - 'single-quote/double-quote' key0xE2 - Either the angle bracket key or the backslash key on the RT 102-key keyboard0xE7 - Used to pass Unicode characters as if they were keystrokes0xF6 - Attn key0xF7 - CrSel key0xF8 - ExSel key0xF9 - Erase EOF key0xFA - Play key0xFB - Zoom key0xFD - PA1 key0xFE - Clear key"
        }, {
            "label": "$iFlags",
            "documentation": "This parameter can be one or more of the following values.$KEYEVENTF_EXTENDEDKEY$KEYEVENTF_KEYUP"
        }, {
            "label": "$iScanCode",
            "documentation": "**[optional]** The hardware scan code for the key. Default is 0."
        }, {
            "label": "$iExtraInfo",
            "documentation": "**[optional]** The additional value associated with the key stroke. Default is 0."
        }]
    },
    "_WinAPI_KillTimer": {
        "documentation": "Destroys the specified timer",
        "label": "_WinAPI_KillTimer ( $hWnd, $iTimerID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window associated with the specified timer. This value must be the same as the$hWnd value passed to the _WinAPI_SetTimer() function that created the timer."
        }, {
            "label": "$iTimerID",
            "documentation": "The timer identifier which specifies the timer to be destroyed."
        }]
    },
    "_WinAPI_LineDDA": {
        "documentation": "Determines which pixels should be highlighted for a line",
        "label": "_WinAPI_LineDDA ( $iX1, $iY1, $iX2, $iY2, $pLineProc [, $pData = 0] )",
        "params": [{
            "label": "$iX1",
            "documentation": "Specifies the x-coordinate, in logical units, of the line's starting point."
        }, {
            "label": "$iY1",
            "documentation": "Specifies the y-coordinate, in logical units, of the line's starting point."
        }, {
            "label": "$iX2",
            "documentation": "Specifies the x-coordinate, in logical units, of the line's ending point."
        }, {
            "label": "$iY2",
            "documentation": "Specifies the y-coordinate, in logical units, of the line's ending point."
        }, {
            "label": "$pLineProc",
            "documentation": "Pointer to an application-defined callback function."
        }, {
            "label": "$pData",
            "documentation": "**[optional]** Pointer to the application-defined data."
        }]
    },
    "_WinAPI_LineTo": {
        "documentation": "Draws a line from the current position up to, but not including, the specified point",
        "label": "_WinAPI_LineTo ( $hDC, $iX, $iY )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to device context"
        }, {
            "label": "$iX",
            "documentation": "X coordinate of the line's ending point."
        }, {
            "label": "$iY",
            "documentation": "Y coordinate of the line's ending point."
        }]
    },
    "_WinAPI_LoadBitmap": {
        "documentation": "Loads the specified bitmap resource from a module's executable file",
        "label": "_WinAPI_LoadBitmap ( $hInstance, $sBitmap )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to the instance of the module whose executable file contains the bitmap to be loaded"
        }, {
            "label": "$sBitmap",
            "documentation": "The name of the bitmap resource to be loaded. Alternatively this can consist of the resourceidentifier in the low order word and 0 in the high order word."
        }]
    },
    "_WinAPI_LoadCursor": {
        "documentation": "Loads the specified cursor resource from the executable (.exe) file",
        "label": "_WinAPI_LoadCursor ( $hInstance, $sName )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to an instance of the module whose executable file contains the cursor to be loaded."
        }, {
            "label": "$sName",
            "documentation": "The name of the cursor resource or resource identifier to be loaded. To use one of the predefinedcursors, the application must set the $hInstance parameter to 0and the $sName parameter to oneof the following values.$IDC_ARROW$IDC_IBEAM$IDC_WAIT$IDC_CROSS$IDC_UPARROW$IDC_SIZE$IDC_ICON$IDC_SIZENWSE$IDC_SIZENESW$IDC_SIZEWE$IDC_SIZENS$IDC_SIZEALL$IDC_NO$IDC_HAND$IDC_APPSTARTING$IDC_HELP"
        }]
    },
    "_WinAPI_LoadCursorFromFile": {
        "documentation": "Creates a cursor based on data contained in a file",
        "label": "_WinAPI_LoadCursorFromFile ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format."
        }]
    },
    "_WinAPI_LoadIcon": {
        "documentation": "Loads the specified icon resource from the executable (.exe) file associated with an application instance",
        "label": "_WinAPI_LoadIcon ( $hInstance, $sName )",
        "params": [{
            "label": "$hInstance",
            "documentation": "A handle to an instance of the module whose executable file contains the icon to be loaded."
        }, {
            "label": "$sName",
            "documentation": "The name of the icon resource to be loaded. Alternatively, if $hInstance is 0, it can beone of the following predefined values.$IDI_APPLICATION$IDI_HAND$IDI_QUESTION$IDI_EXCLAMATION$IDI_ASTERISK$IDI_WINLOGO$IDI_SHIELD$IDI_ERROR$IDI_INFORMATION$IDI_WARNING"
        }]
    },
    "_WinAPI_LoadIconMetric": {
        "documentation": "Loads a specified icon resource with a client-specified system metric",
        "label": "_WinAPI_LoadIconMetric ( $hInstance, $sName, $iMetric )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded."
        }, {
            "label": "$sName",
            "documentation": "The information about the icon to load. If $hInstance is not 0, $sName specifies the icon resourceeither by name or ordinal, otherwise, $sName specifies either the name of a standalone icon (.ico)file or the identifier of a predefined icon to load.$IDI_APPLICATION$IDI_HAND$IDI_QUESTION$IDI_EXCLAMATION$IDI_ASTERISK$IDI_WINLOGO$IDI_SHIELD$IDI_ERROR$IDI_INFORMATION$IDI_WARNING"
        }, {
            "label": "$iMetric",
            "documentation": "The desired metric. It can be one of the following values.$LIM_SMALL$LIM_LARGE"
        }]
    },
    "_WinAPI_LoadIconWithScaleDown": {
        "documentation": "Loads an icon and scales down a larger image instead of scaling up a smaller image",
        "label": "_WinAPI_LoadIconWithScaleDown ( $hInstance, $sName, $iWidth, $iHeight )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded."
        }, {
            "label": "$sName",
            "documentation": "The information about the icon to load. If $hInstance is not 0, $sName specifies the icon resourceeither by name or ordinal, otherwise, $sName specifies either the name of a standalone icon (.ico)file or the identifier of a predefined icon to load.$IDI_APPLICATION$IDI_HAND$IDI_QUESTION$IDI_EXCLAMATION$IDI_ASTERISK$IDI_WINLOGO$IDI_SHIELD$IDI_ERROR$IDI_INFORMATION$IDI_WARNING"
        }, {
            "label": "$iWidth",
            "documentation": "The desired width, in pixels, of the icon."
        }, {
            "label": "$iHeight",
            "documentation": "The desired height, in pixels, of the icon."
        }]
    },
    "_WinAPI_LoadImage": {
        "documentation": "Loads an icon, cursor, or bitmap",
        "label": "_WinAPI_LoadImage ( $hInstance, $sImage, $iType, $iXDesired, $iYDesired, $iLoad )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Identifies an instance of the module that contains the image to be loaded. To load an OEMimage, set this parameter to zero."
        }, {
            "label": "$sImage",
            "documentation": "Identifies the image to load. If the $hInstance parameter is not 0 and the $iLoad parameterdoes not include $LR_LOADFROMFILE $sImage is a string that contains the name of the image resource in the$hInstance module. If $hInstance is 0 and $LR_LOADFROMFILE is not specified, the low-order word of thisparameter must be the identifier of the OEM image to load."
        }, {
            "label": "$iType",
            "documentation": "Specifies the type of image to be loaded. This parameter can be one of the following values:$IMAGE_BITMAP - Loads a bitmap$IMAGE_CURSOR - Loads a cursor$IMAGE_ICON - Loads an icon"
        }, {
            "label": "$iXDesired",
            "documentation": "Specifies the width, in pixels, of the icon or cursor. If this is 0and $iLoad is $LR_DEFAULTSIZE the function uses the SM_CXICON or SM_CXCURSOR systemmetric value to set the width. If this parameter is 0 and $LR_DEFAULTSIZE is notused, the function uses the actual resource width."
        }, {
            "label": "$iYDesired",
            "documentation": "Specifies the height, in pixels, of the icon or cursor. If this is 0and $iLoad is $LR_DEFAULTSIZE the function uses the SM_CYICON or SM_CYCURSOR systemmetric value to set the height. If this parameter is 0 and $LR_DEFAULTSIZE is notused, the function uses the actual resource height."
        }, {
            "label": "$iLoad",
            "documentation": "Specifies a combination of the following values:$LR_DEFAULTCOLOR - The default flag$LR_CREATEDIBSECTION - When the $iType parameter specifies $IMAGE_BITMAP, causes the function to return a DIBsection bitmap rather than a compatible bitmap. This flag is useful for loading a bitmap without mapping itto the colors of the display device.$LR_DEFAULTSIZE - Uses the width or height specified by the system metric values for cursors or icons ifthe $iXDesired or $iYDesired values are set to 0. If this flag is not specified and $iXDesired and $iYDesiredare set to zero, the function uses the actual resource size. If the resource contains multiple images thefunction uses the size of the first image.$LR_LOADFROMFILE - Loads the image from the file specified by the $sImage parameter. If this flag is notspecified, $sImage is the name of the resource.$LR_LOADMAP3DCOLORS - Searches the color table for the image and replaces the following shades of gray withthe corresponding 3D color:Dk Gray: RGB(128,128,128) COLOR_3DSHADOWGray : RGB(192,192,192) COLOR_3DFACELt Gray: RGB(223,223,223) COLOR_3DLIGHT$LR_LOADTRANSPARENT - Gets the color value of the first pixel in the image and replaces the correspondingentry in the color table with the default window color. All pixels in the image that use that entry becomethe default window color. This value applies only to images that have corresponding color tables. If $iLoadincludes both the $LR_LOADTRANSPARENT and $LR_LOADMAP3DCOLORS values, $LRLOADTRANSPARENT takes precedence.However, the color table entry is replaced with COLOR_3DFACE rather than COLOR_WINDOW.$LR_MONOCHROME - Loads the image in black and white$LR_SHARED - Shares the image handle if the image is loaded multiple times. If LR_SHARED is not set,a second call to LoadImage for the same resource will load the image again and return a different handle. Donot use $LR_SHARED for images that have non-standard sizes, that may change after loading, or that are loadedfrom a file."
        }]
    },
    "_WinAPI_LoadIndirectString": {
        "documentation": "Extracts the string from the specified resource when given an indirect string",
        "label": "_WinAPI_LoadIndirectString ( $sStrIn )",
        "params": [{
            "label": "$sStrIn",
            "documentation": "The input indirect string."
        }]
    },
    "_WinAPI_LoadKeyboardLayout": {
        "documentation": "Loads a new input locale identifier into the system",
        "label": "_WinAPI_LoadKeyboardLayout ( $iLanguage [, $iFlag = 0] )",
        "params": [{
            "label": "$iLanguage",
            "documentation": "The input locale identifier to load."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The flag that specifies how the input locale identifier is to be loaded. This parameter can beone of the following values.$KLF_ACTIVATE$KLF_NOTELLSHELL$KLF_REORDER$KLF_REPLACELANG$KLF_SUBSTITUTE_OK$KLF_SETFORPROCESS"
        }]
    },
    "_WinAPI_LoadLibrary": {
        "documentation": "Maps a specified executable module into the address space of the calling process",
        "label": "_WinAPI_LoadLibrary ( $sFileName )",
        "params": [{
            "label": "$sFileName",
            "documentation": "Names a Win32 executable module (either a .dll or an .exe file). The name specified is thefilename of the executable module."
        }]
    },
    "_WinAPI_LoadLibraryEx": {
        "documentation": "Maps a specified executable module into the address space of the calling process",
        "label": "_WinAPI_LoadLibraryEx ( $sFileName [, $iFlags = 0] )",
        "params": [{
            "label": "$sFileName",
            "documentation": "Names a Win32 executable module (either a .dll or an .exe file). The name specified is thefilename of the executable module."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Specifies the action to take when loading the module. This parameter can be one of thefollowing values:$DONT_RESOLVE_DLL_REFERENCES - If this value is used and the executable module is a DLL the system does not call DllMain for process and thread initialization and termination. Also, the system does not load additional executable modules that are referenced by the specified module.$LOAD_LIBRARY_AS_DATAFILE - If this value is used, the system maps the file into the calling process's address space as if it were a data file. Nothing is done to execute or prepare to execute the mapped file.$LOAD_WITH_ALTERED_SEARCH_PATH - If this value is used, and $FileName specifies a path, the system uses the alternate file search strategy to find the associated executable modules that the specified module causes to be loaded."
        }]
    },
    "_WinAPI_LoadMedia": {
        "documentation": "Loads media into a device",
        "label": "_WinAPI_LoadMedia ( $sDrive )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive letter of the CD tray to load, in the format D:, E:, etc."
        }]
    },
    "_WinAPI_LoadResource": {
        "documentation": "Loads the specified resource into global memory",
        "label": "_WinAPI_LoadResource ( $hInstance, $hResource )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to the module whose executable file contains the resource. If this parameter is 0, the systemloads the resource from the module that was used to create the current process."
        }, {
            "label": "$hResource",
            "documentation": "Handle to the resource to be loaded. This handle is returned by the _WinAPI_FindResource()or _WinAPI_FindResourceEx() function."
        }]
    },
    "_WinAPI_LoadShell32Icon": {
        "documentation": "Extracts an icon from the shell32.dll file",
        "label": "_WinAPI_LoadShell32Icon ( $iIconID )",
        "params": [{
            "label": "$iIconID",
            "documentation": "ID of the icon to extract"
        }]
    },
    "_WinAPI_LoadString": {
        "documentation": "loads a string resource from the executable file associated with a specified module",
        "label": "_WinAPI_LoadString ( $hInstance, $iStringID )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to an instance of the module whose executable file contains the string resource"
        }, {
            "label": "$iStringID",
            "documentation": "Specifies the integer identifier of the string to be loaded"
        }]
    },
    "_WinAPI_LoadStringEx": {
        "documentation": "Loads a string resource for the specified language from the specified module",
        "label": "_WinAPI_LoadStringEx ( $hModule, $iID [, $iLanguage = $LOCALE_USER_DEFAULT] )",
        "params": [{
            "label": "$hModule",
            "documentation": "A handle to an instance of the module whose executable file contains the string resource.Also, this parameter can specify the name of the module to load, it must be a full or relative path.If this parameter is 0 or an empty string, that is equivalent to passing in a handle to the moduleused to create the current process."
        }, {
            "label": "$iID",
            "documentation": "The identifier of the string to be loaded."
        }, {
            "label": "$iLanguage",
            "documentation": "**[optional]** The language identifier of the string resource of interest. To retrieve string for user defaultlanguage set this parameter to $LOCALE_USER_DEFAULT (Default)."
        }]
    },
    "_WinAPI_LoByte": {
        "documentation": "Returns the low BYTE of a 16-bit (2 bytes) value",
        "label": "_WinAPI_LoByte ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "16-bit value."
        }]
    },
    "_WinAPI_LocalFree": {
        "documentation": "Frees the specified local memory object and invalidates its handle",
        "label": "_WinAPI_LocalFree ( $hMemory )",
        "params": [{
            "label": "$hMemory",
            "documentation": "A handle to the local memory object"
        }]
    },
    "_WinAPI_LockDevice": {
        "documentation": "Enables or disables the mechanism that ejects media, for those devices possessing that locking capability",
        "label": "_WinAPI_LockDevice ( $sDrive, $bLock )",
        "params": [{
            "label": "$sDrive",
            "documentation": "The drive letter of the device to enable or disable, in the format D:, E:, etc."
        }, {
            "label": "$bLock",
            "documentation": "Specifies whether the device should be disabled, valid values:    True - The device is disabled.    False - The device is enabled."
        }]
    },
    "_WinAPI_LockFile": {
        "documentation": "Locks the specified file for exclusive access by the calling process",
        "label": "_WinAPI_LockFile ( $hFile, $iOffset, $iLength )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file."
        }, {
            "label": "$iOffset",
            "documentation": "The starting byte offset in the file where the lock should begin."
        }, {
            "label": "$iLength",
            "documentation": "The length of the byte range to be locked."
        }]
    },
    "_WinAPI_LockResource": {
        "documentation": "Locks the specified resource in memory",
        "label": "_WinAPI_LockResource ( $hData )",
        "params": [{
            "label": "$hData",
            "documentation": "Handle to the resource to be locked. The _WinAPI_LoadResource() function returns this handle. Do notpass any value as a parameter other than a successful return value from the LoadResource function."
        }]
    },
    "_WinAPI_LockWindowUpdate": {
        "documentation": "Disables or enables drawing in the specified window",
        "label": "_WinAPI_LockWindowUpdate ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window in which drawing will be disabled. If this parameter is 0, drawing in the lockedwindow is enabled."
        }]
    },
    "_WinAPI_LockWorkStation": {
        "documentation": "Locks the workstation's display",
        "label": "_WinAPI_LockWorkStation (  )",
        "params": []
    },
    "_WinAPI_LoDWord": {
        "documentation": "Returns the low DWORD of a 64-bit (8 bytes) value",
        "label": "_WinAPI_LoDWord ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "64-bit value."
        }]
    },
    "_WinAPI_LongMid": {
        "documentation": "Extracts a number of bits from a DWORD (32-bit) value",
        "label": "_WinAPI_LongMid ( $iValue, $iStart, $iCount )",
        "params": [{
            "label": "$iValue",
            "documentation": "32-bit value."
        }, {
            "label": "$iStart",
            "documentation": "The bit position to start. (0 - first bit)"
        }, {
            "label": "$iCount",
            "documentation": "The number of bits to extract."
        }]
    },
    "_WinAPI_LookupIconIdFromDirectoryEx": {
        "documentation": "Searches through icon or cursor data for the icon or cursor that best fits the current display device",
        "label": "_WinAPI_LookupIconIdFromDirectoryEx ( $pData [, $bIcon = True [, $iXDesiredPixels = 0 [, $iYDesiredPixels = 0 [, $iFlags = 0]]]] )",
        "params": [{
            "label": "$pData",
            "documentation": "The icon or cursor directory data. Because this function does not validate the resource data,it causes a general protection (GP) fault or returns an undefined value if presbits is not pointing to validresource data."
        }, {
            "label": "$bIcon",
            "documentation": "**[optional]** Specifies whether an icon or a cursor is sought, valid values:    True - The function is searching for an icon (Default).    False - The function is searching for a cursor."
        }, {
            "label": "$iXDesiredPixels",
            "documentation": "**[optional]** The desired width, in pixels, of the icon or cursor.If this parameter is zero (Default), the function uses the system metric value."
        }, {
            "label": "$iYDesiredPixels",
            "documentation": "**[optional]** The desired height, in pixels, of the icon or cursor.If this parameter is zero (Default), the function uses the system metric value."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** This parameter can be one or more of the following values.    $LR_DEFAULTCOLOR (Default)    $LR_MONOCHROME"
        }]
    },
    "_WinAPI_LoWord": {
        "documentation": "Returns the low word of a longword",
        "label": "_WinAPI_LoWord ( $iLong )",
        "params": [{
            "label": "$iLong",
            "documentation": "Longword value"
        }]
    },
    "_WinAPI_LPtoDP": {
        "documentation": "Converts a logical coordinates into device coordinates",
        "label": "_WinAPI_LPtoDP ( $hDC, ByRef $tPOINT [, $iCount = 1] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tPOINT",
            "documentation": "$tagPOINT structure or structure of points (\"long x1;long y1;...long xN;long yN\") containing thex- and y-coordinates to be transformed."
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** The number of points. Default is 1."
        }]
    },
    "_WinAPI_MAKELANGID": {
        "documentation": "Construct language id from a primary language id and a sublanguage id",
        "label": "_WinAPI_MAKELANGID ( $iLngIDPrimary, $iLngIDSub )",
        "params": [{
            "label": "$iLngIDPrimary",
            "documentation": "Primary Language id"
        }, {
            "label": "$iLngIDSub",
            "documentation": "Sub-Language id"
        }]
    },
    "_WinAPI_MAKELCID": {
        "documentation": "Construct locale id from a language id and a sort id",
        "label": "_WinAPI_MAKELCID ( $iLngID, $iSortID )",
        "params": [{
            "label": "$iLngID",
            "documentation": "Language id"
        }, {
            "label": "$iSortID",
            "documentation": "Sort id"
        }]
    },
    "_WinAPI_MakeLong": {
        "documentation": "Returns a long int value from two int values",
        "label": "_WinAPI_MakeLong ( $iLo, $iHi )",
        "params": [{
            "label": "$iLo",
            "documentation": "Low word"
        }, {
            "label": "$iHi",
            "documentation": "Hi word"
        }]
    },
    "_WinAPI_MakeQWord": {
        "documentation": "Returns a QWORD value from two int values",
        "label": "_WinAPI_MakeQWord ( $iLoDWORD, $iHiDWORD )",
        "params": [{
            "label": "$iLoDWORD",
            "documentation": "Low DWORD (int)"
        }, {
            "label": "$iHiDWORD",
            "documentation": "Hi DWORD (int)"
        }]
    },
    "_WinAPI_MakeWord": {
        "documentation": "Returns a WORD (16-bit) value from two BYTE (8-bit) values",
        "label": "_WinAPI_MakeWord ( $iLo, $iHi )",
        "params": [{
            "label": "$iLo",
            "documentation": "Low byte."
        }, {
            "label": "$iHi",
            "documentation": "Hi byte."
        }]
    },
    "_WinAPI_MapViewOfFile": {
        "documentation": "Maps a view of a file mapping into the address space of a calling process",
        "label": "_WinAPI_MapViewOfFile ( $hMapping [, $iOffset = 0 [, $iBytes = 0 [, $iAccess = 0x0006]]] )",
        "params": [{
            "label": "$hMapping",
            "documentation": "Handle to a file mapping object. The _WinAPI_CreateFileMapping() and _WinAPI_OpenFileMapping()functions return this handle."
        }, {
            "label": "$iOffset",
            "documentation": "**[optional]** The file offset where the view is to begin."
        }, {
            "label": "$iBytes",
            "documentation": "**[optional]** The number of bytes of a file mapping to map to a view. All bytes must be within the maximum sizespecified by _WinAPI_CreateFileMapping(). If $iBytes is 0, the mapping extends from the specifiedoffset to the end of the file mapping."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The access to the file mapping object. This parameter can be one of the following values.$FILE_MAP_ALL_ACCESS$FILE_MAP_COPY$FILE_MAP_READ (Default)$FILE_MAP_WRITE (Default)Each of the preceding values can be combined with the following value.$FILE_MAP_EXECUTE"
        }]
    },
    "_WinAPI_MapVirtualKey": {
        "documentation": "Translates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code",
        "label": "_WinAPI_MapVirtualKey ( $iCode, $iType [, $hLocale = 0] )",
        "params": [{
            "label": "$iCode",
            "documentation": "The virtual key code or scan code for a key. How this value is interpreted depends on the $iType parameter."
        }, {
            "label": "$iType",
            "documentation": "The translation to be performed. This value depends on the value of the $iCode parameter and can beone of the following values.$MAPVK_VK_TO_CHAR$MAPVK_VK_TO_VSC$MAPVK_VK_TO_VSC_EX$MAPVK_VSC_TO_VK$MAPVK_VSC_TO_VK_EX"
        }, {
            "label": "$hLocale",
            "documentation": "**[optional]** The input locale identifier to use for translating the specified code."
        }]
    },
    "_WinAPI_MaskBlt": {
        "documentation": "Combines the color data for the source and destination bitmaps using the specified mask and raster operation",
        "label": "_WinAPI_MaskBlt ( $hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $hMask, $iXMask, $iYMask, $iRop )",
        "params": [{
            "label": "$hDestDC",
            "documentation": "Handle to the destination device context."
        }, {
            "label": "$iXDest",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iYDest",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iWidth",
            "documentation": "The width, in logical units, of the destination rectangle and source bitmap."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in logical units, of the destination rectangle and source bitmap."
        }, {
            "label": "$hSrcDC",
            "documentation": "Handle to the device context from which the bitmap is to be copied."
        }, {
            "label": "$iXSrc",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the source bitmap."
        }, {
            "label": "$iYSrc",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the source bitmap."
        }, {
            "label": "$hMask",
            "documentation": "Handle to the monochrome mask bitmap combined with the color bitmap in the source device context."
        }, {
            "label": "$iXMask",
            "documentation": "The horizontal pixel offset for the mask bitmap specified by the hbmMask parameter."
        }, {
            "label": "$iYMask",
            "documentation": "The vertical pixel offset for the mask bitmap specified by the hbmMask parameter."
        }, {
            "label": "$iRop",
            "documentation": "The raster-operation code (same as for _WinAPI_BitBlt())."
        }]
    },
    "_WinAPI_MessageBeep": {
        "documentation": "Plays a waveform sound",
        "label": "_WinAPI_MessageBeep ( [$iType = 1] )",
        "params": [{
            "label": "$iType",
            "documentation": "**[optional]** The sound type, as identified by an entry in the registry. This can be one of the followingvalues:0 - Simple beep. If a sound card is not available, the speaker is used.1 - OK2 - Hand3 - Question4 - Exclamation5 - Asterisk"
        }]
    },
    "_WinAPI_MessageBoxCheck": {
        "documentation": "Displays a message box that gives the user the option of suppressing further occurrences",
        "label": "_WinAPI_MessageBoxCheck ( $iType, $sTitle, $sText, $sRegVal [, $iDefault = -1 [, $hParent = 0]] )",
        "params": [{
            "label": "$iType",
            "documentation": "The flags that specify the contents and behavior of the message box.You must specify the buttons to be displayed by setting one and only one of the following flags.$MB_OK$MB_OKCANCEL$MB_YESNOYou can display an optional icon by setting one and only one of the following flags.$MB_ICONEXCLAMATION$MB_ICONHAND$MB_ICONINFORMATION$MB_ICONQUESTION"
        }, {
            "label": "$sTitle",
            "documentation": "The string that contains the title of the message box."
        }, {
            "label": "$sText",
            "documentation": "The string that contains the message to be displayed."
        }, {
            "label": "$sRegVal",
            "documentation": "The string that contains a unique string value to associate with this message."
        }, {
            "label": "$iDefault",
            "documentation": "**[optional]** The value that the function returns when the user has opted not to have the message box displayedagain. If the user has not opted to suppress the message box, the message box is displayed andthe function ignores $iDefault."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** The window handle to the message box's owner."
        }]
    },
    "_WinAPI_MessageBoxIndirect": {
        "documentation": "Creates, displays, and operates a message box",
        "label": "_WinAPI_MessageBoxIndirect ( $tMSGBOXPARAMS )",
        "params": [{
            "label": "$tMSGBOXPARAMS",
            "documentation": "$tagMSGBOXPARAMS structure that contains information used to display the message box."
        }]
    },
    "_WinAPI_MirrorIcon": {
        "documentation": "Reverses (mirrors) icons so that they are displayed correctly on a mirrored device context",
        "label": "_WinAPI_MirrorIcon ( $hIcon [, $bDelete = False] )",
        "params": [{
            "label": "$hIcon",
            "documentation": "Handle to the icon."
        }, {
            "label": "$bDelete",
            "documentation": "**[optional]** Specifies whether to delete the icon after the function is successful, valid values:    True - Icon will be deleted if the function succeeds.    False - Do not delete, you must release the icon when you are finished using it (Default)."
        }]
    },
    "_WinAPI_ModifyWorldTransform": {
        "documentation": "Changes the world transformation for a device context using the specified mode",
        "label": "_WinAPI_ModifyWorldTransform ( $hDC, $tXFORM, $iMode )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tXFORM",
            "documentation": "$tagXFORM structure used to modify the world transformation for the given device context."
        }, {
            "label": "$iMode",
            "documentation": "Specifies how the transformation data modifies the current world transformation.This parameter must be one of the following values.$MWT_IDENTITY$MWT_LEFTMULTIPLY$MWT_RIGHTMULTIPLY"
        }]
    },
    "_WinAPI_MonitorFromPoint": {
        "documentation": "Retrieves a handle to the display monitor that contains a specified point",
        "label": "_WinAPI_MonitorFromPoint ( $tPOINT [, $iFlag = 1] )",
        "params": [{
            "label": "$tPOINT",
            "documentation": "$tagPOINT structure that specifies the point of interest in virtual-screen coordinates."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The flag that specifies the function's return value if the point is not contained within any displaymonitor. This parameter can be one of the following values.$MONITOR_DEFAULTTONULL$MONITOR_DEFAULTTONEAREST (Default)$MONITOR_DEFAULTTOPRIMARY"
        }]
    },
    "_WinAPI_MonitorFromRect": {
        "documentation": "Retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle",
        "label": "_WinAPI_MonitorFromRect ( $tRECT [, $iFlag = 1] )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that specifies the rectangle of interest in virtual-screen coordinates."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The flag that specifies the function's return value if the rectangle does not intersect any displaymonitor. This parameter can be one of the following values.$MONITOR_DEFAULTTONULL$MONITOR_DEFAULTTONEAREST (Default)$MONITOR_DEFAULTTOPRIMARY"
        }]
    },
    "_WinAPI_MonitorFromWindow": {
        "documentation": "Retrieves a handle to the display monitor that has the largest area of intersection with the specified window",
        "label": "_WinAPI_MonitorFromWindow ( $hWnd [, $iFlag = 1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "A handle to the window of interest."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The flag that specifies the function's return value if the window does not intersect any displaymonitor. This parameter can be one of the following values.$MONITOR_DEFAULTTONULL$MONITOR_DEFAULTTONEAREST (Default)$MONITOR_DEFAULTTOPRIMARY"
        }]
    },
    "_WinAPI_Mouse_Event": {
        "documentation": "Synthesizes mouse motion and button clicks",
        "label": "_WinAPI_Mouse_Event ( $iFlags [, $iX = 0 [, $iY = 0 [, $iData = 0 [, $iExtraInfo = 0]]]] )",
        "params": [{
            "label": "$iFlags",
            "documentation": "A set of flag bits that specify various aspects of mouse motion and button clicking. The bitsin this parameter can be any reasonable combination of the following values:$MOUSEEVENTF_ABSOLUTE - Specifies that the $iX and $iY parameters contain normal absolute coordinates. Ifnot set, those parameters contain relative data. The change in position since the last reported position.This flag can be set, or not set, regardless of what kind of mouse or mouse-like device, if any, is connectedto the system.$MOUSEEVENTF_MOVE - Specifies that movement occurred$MOUSEEVENTF_LEFTDOWN - Specifies that the left button changed to down$MOUSEEVENTF_LEFTUP - Specifies that the left button changed to up$MOUSEEVENTF_RIGHTDOWN - Specifies that the right button changed to down$MOUSEEVENTF_RIGHTUP - Specifies that the right button changed to up$MOUSEEVENTF_MIDDLEDOWN - Specifies that the middle button changed to down$MOUSEEVENTF_MIDDLEUP - Specifies that the middle button changed to up$MOUSEEVENTF_WHEEL - Specifies that the wheel has been moved, if the mouse has a wheel$MOUSEEVENTF_XDOWN - Specifies that an X button was pressed$MOUSEEVENTF_XUP - Specifies that an X button was released"
        }, {
            "label": "$iX",
            "documentation": "**[optional]** Specifies the mouse's absolute position along the X axis or its amount of motion since thelast mouse event was generated depending on the setting of $MOUSEEVENTF_ABSOLUTE. Absolute data is given asthe mouse's actual X coordinate relative data is given as the number of mickeys moved."
        }, {
            "label": "$iY",
            "documentation": "**[optional]** Specifies the mouse's absolute position along the Y axis or its amount of motion since thelast mouse event was generated depending on the setting of $MOUSEEVENTF_ABSOLUTE. Absolute data is given asthe mouse's actual Y coordinate relative data is given as the number of mickeys moved."
        }, {
            "label": "$iData",
            "documentation": "**[optional]** If $iFlags is $MOUSEEVENTF_WHEEL, then $iData specifies the amount of wheel movement. A positivevalue indicates that the wheel was rotated forward away from the user. A negative value indicates that thewheel was rotated backward, toward the user. One wheel click is defined as $WHEEL_DELTA, which is 120. If$iFlags is not $MOUSEEVENTF_WHEEL, then $iData should be zero."
        }, {
            "label": "$iExtraInfo",
            "documentation": "**[optional]** Specifies a 32 bit value associated with the mouse event"
        }]
    },
    "_WinAPI_MoveFileEx": {
        "documentation": "Moves a file or directory, notifying the application of its progress through a callback function",
        "label": "_WinAPI_MoveFileEx ( $sExistingFile, $sNewFile [, $iFlags = 0 [, $pProgressProc = 0 [, $pData = 0]]] )",
        "params": [{
            "label": "$sExistingFile",
            "documentation": "The name of the existing file or directory on the local computer.If $iFlags specifies $MOVE_FILE_DELAY_UNTIL_REBOOT, the file cannot exist on a remote share because delayed operations are performed before the network is available."
        }, {
            "label": "$sNewFile",
            "documentation": "The new name of the file or directory on the local computer.When moving a file, $sNewFile can be on a different file system or volume.If $sNewFile is on another drive, you must set the $MOVE_FILE_COPY_ALLOWED flag in $iFlags parameter.When moving a directory, $sExistingFile and $sNewFile must be on the same drive.If $iFlags specifies $MOVE_FILE_DELAY_UNTIL_REBOOT and $sNewFile is 0, _WinAPI_MoveFileEx() registers $sExistingFile to be deleted when the system restarts.If $sExistingFile refers to a directory, the system removes the directory at restart only if the directory is empty."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The move options. This parameter can be one or more of the following values:    $MOVE_FILE_COPY_ALLOWED (0x0002)    $MOVE_FILE_CREATE_HARDLINK (0x0010)    $MOVE_FILE_DELAY_UNTIL_REBOOT (0x0004)    $MOVE_FILE_FAIL_IF_NOT_TRACKABLE (0x0020)    $MOVE_FILE_REPLACE_EXISTING (0x0001)    $MOVE_FILE_WRITE_THROUGH (0x0008)"
        }, {
            "label": "$pProgressProc",
            "documentation": "**[optional]** The address of a callback function that is called each time another portion of the file has been moved.(See MSDN for more information)"
        }, {
            "label": "$pData",
            "documentation": "**[optional]** Pointer to the argument to be passed to the callback function."
        }]
    },
    "_WinAPI_MoveMemory": {
        "documentation": "Moves a block of memory from one location to another",
        "label": "_WinAPI_MoveMemory ( $pDestination, $pSource, $iLength )",
        "params": [{
            "label": "$pDestination",
            "documentation": "A pointer to the starting address of the move destination."
        }, {
            "label": "$pSource",
            "documentation": "A pointer to the starting address of the block of memory to be moved."
        }, {
            "label": "$iLength",
            "documentation": "The size of the block of memory to move, in bytes."
        }]
    },
    "_WinAPI_MoveTo": {
        "documentation": "Updates the current position to the specified point",
        "label": "_WinAPI_MoveTo ( $hDC, $iX, $iY )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to device context"
        }, {
            "label": "$iX",
            "documentation": "X coordinate of the new position."
        }, {
            "label": "$iY",
            "documentation": "Y coordinate of the new position."
        }]
    },
    "_WinAPI_MoveToEx": {
        "documentation": "Updates the current position to the specified point",
        "label": "_WinAPI_MoveToEx ( $hDC, $iX, $iY )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in logical units, of the new position, in logical units."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical units, of the new position, in logical units."
        }]
    },
    "_WinAPI_MoveWindow": {
        "documentation": "Changes the position and dimensions of the specified window",
        "label": "_WinAPI_MoveWindow ( $hWnd, $iX, $iY, $iWidth, $iHeight [, $bRepaint = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }, {
            "label": "$iX",
            "documentation": "New position of the left side of the window"
        }, {
            "label": "$iY",
            "documentation": "New position of the top of the window"
        }, {
            "label": "$iWidth",
            "documentation": "New width of the window"
        }, {
            "label": "$iHeight",
            "documentation": "New height of the window"
        }, {
            "label": "$bRepaint",
            "documentation": "**[optional]** Specifies whether the window is to be repainted. If True, the window receives a $WM_PAINTmessage. If False, no repainting of any kind occurs. This applies to the client area, the nonclient area, andany part of the parent window uncovered as a result of moving a child window. If False, the application mustexplicitly invalidate or redraw any parts of the window and parent window that need redrawing."
        }]
    },
    "_WinAPI_MsgBox": {
        "documentation": "Displays a message box with wider margin than original",
        "label": "_WinAPI_MsgBox ( $iFlags, $sTitle, $sText )",
        "params": [{
            "label": "$iFlags",
            "documentation": "Flags to use during window creation"
        }, {
            "label": "$sTitle",
            "documentation": "Window title"
        }, {
            "label": "$sText",
            "documentation": "Window text"
        }]
    },
    "_WinAPI_MulDiv": {
        "documentation": "Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value",
        "label": "_WinAPI_MulDiv ( $iNumber, $iNumerator, $iDenominator )",
        "params": [{
            "label": "$iNumber",
            "documentation": "Specifies the multiplicand"
        }, {
            "label": "$iNumerator",
            "documentation": "Specifies the multiplier"
        }, {
            "label": "$iDenominator",
            "documentation": "Specifies the number by which the result of the multiplication is to be divided"
        }]
    },
    "_WinAPI_MultiByteToWideChar": {
        "documentation": "Maps a character string to a wide-character (Unicode) string",
        "label": "_WinAPI_MultiByteToWideChar ( $vText [, $iCodePage = 0 [, $iFlags = 0 [, $bRetString = False]]] )",
        "params": [{
            "label": "$vText",
            "documentation": "Text or DllStruct containing multibyte text to be converted"
        }, {
            "label": "$iCodePage",
            "documentation": "**[optional]** Specifies the code page to be used to perform the conversion:    0 - ANSI code page    1 - OEM code page    2 - Macintosh code page    3 - The Windows ANSI code page for the current thread    42 - Symbol code page    65000 - UTF-7    65001 - UTF-8"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Flags that indicate whether to translate to precomposed or composite wide characters:    $MB_PRECOMPOSED - Always use precomposed characters    $MB_COMPOSITE - Always use composite characters    $MB_USEGLYPHCHARS - Use glyph characters instead of control characters"
        }, {
            "label": "$bRetString",
            "documentation": "**[optional]** Flags that indicate whether to return a String or a DllStruct (default False : Structure)"
        }]
    },
    "_WinAPI_MultiByteToWideCharEx": {
        "documentation": "Maps a character string to a wide-character (Unicode) string",
        "label": "_WinAPI_MultiByteToWideCharEx ( $sText, $pText [, $iCodePage = 0 [, $iFlags = 0]] )",
        "params": [{
            "label": "$sText",
            "documentation": "Text to be converted"
        }, {
            "label": "$pText",
            "documentation": "Pointer to a byte structure where the converted string will be stored"
        }, {
            "label": "$iCodePage",
            "documentation": "**[optional]** Specifies the code page to be used to perform the conversion:    0 - ANSI code page    1 - OEM code page    2 - Macintosh code page"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Flags that indicate whether to translate to precomposed or composite wide characters:    $MB_PRECOMPOSED - Always use precomposed characters    $MB_COMPOSITE - Always use composite characters    $MB_USEGLYPHCHARS - Use glyph characters instead of control characters"
        }]
    },
    "_WinAPI_NtStatusToDosError": {
        "documentation": "Converts the specified NTSTATUS error code to its equivalent system error code",
        "label": "_WinAPI_NtStatusToDosError ( $iStatus )",
        "params": [{
            "label": "$iStatus",
            "documentation": "The NTSTATUS error code to be converted."
        }]
    },
    "_WinAPI_OemToChar": {
        "documentation": "Converts a string from the OEM-defined character set into either an ANSI string",
        "label": "_WinAPI_OemToChar ( $sStr )",
        "params": [{
            "label": "$sStr",
            "documentation": "The string of characters from the OEM-defined character set."
        }]
    },
    "_WinAPI_OffsetClipRgn": {
        "documentation": "Moves the clipping region of a device context by the specified offsets",
        "label": "_WinAPI_OffsetClipRgn ( $hDC, $iXOffset, $iYOffset )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iXOffset",
            "documentation": "The number of logical units to move left or right."
        }, {
            "label": "$iYOffset",
            "documentation": "The number of logical units to move up or down."
        }]
    },
    "_WinAPI_OffsetPoints": {
        "documentation": "Moves a points from the array by the specified offsets",
        "label": "_WinAPI_OffsetPoints ( ByRef $aPoint, $iXOffset, $iYOffset [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$aPoint",
            "documentation": "The 2D array ([x1, y1, ...], [x2, y2, ...], ... [xN, yN, ...]). Every first two elements from thisarray specifies a point to be move. Other array elements (if any) do not change."
        }, {
            "label": "$iXOffset",
            "documentation": "The number of logical units to move left or right."
        }, {
            "label": "$iYOffset",
            "documentation": "The number of logical units to move up or down."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start moving at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop moving at."
        }]
    },
    "_WinAPI_OffsetRect": {
        "documentation": "Moves the specified rectangle by the specified offsets",
        "label": "_WinAPI_OffsetRect ( ByRef $tRECT, $iDX, $iDY )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that to be moved."
        }, {
            "label": "$iDX",
            "documentation": "The amount to move the rectangle left (negative value) or right."
        }, {
            "label": "$iDY",
            "documentation": "The amount to move the rectangle up (negative value) or down."
        }]
    },
    "_WinAPI_OffsetRgn": {
        "documentation": "Moves a region by the specified offsets",
        "label": "_WinAPI_OffsetRgn ( $hRgn, $iXOffset, $iYOffset )",
        "params": [{
            "label": "$hRgn",
            "documentation": "Handle to the region to be moved."
        }, {
            "label": "$iXOffset",
            "documentation": "The number of logical units to move left or right."
        }, {
            "label": "$iYOffset",
            "documentation": "The number of logical units to move up or down."
        }]
    },
    "_WinAPI_OffsetWindowOrg": {
        "documentation": "Modifies the window origin for a device context using the specified horizontal and vertical offsets",
        "label": "_WinAPI_OffsetWindowOrg ( $hDC, $iXOffset, $iYOffset )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iXOffset",
            "documentation": "The horizontal offset, in logical units."
        }, {
            "label": "$iYOffset",
            "documentation": "The vertical offset, in logical units."
        }]
    },
    "_WinAPI_OpenDesktop": {
        "documentation": "Opens the specified desktop object",
        "label": "_WinAPI_OpenDesktop ( $sName [, $iAccess = 0 [, $iFlags = 0 [, $bInherit = False]]] )",
        "params": [{
            "label": "$sName",
            "documentation": "The name of the desktop to be opened. Desktop names are case-insensitive. This desktop must belong tothe current window station."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The access to the desktop. This parameter can be one or more of the following values.$DESKTOP_ALL_ACCESS$DESKTOP_CREATEMENU$DESKTOP_CREATEWINDOW$DESKTOP_ENUMERATE$DESKTOP_HOOKCONTROL$DESKTOP_JOURNALPLAYBACK$DESKTOP_JOURNALRECORD$DESKTOP_READOBJECTS$DESKTOP_SWITCHDESKTOP$DESKTOP_WRITEOBJECTS"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The optional flags. It can be zero or the following value.$DF_ALLOWOTHERACCOUNTHOOK"
        }, {
            "label": "$bInherit",
            "documentation": "**[optional]** Specifies whether inherites the handle by a processes, valid values:    True - The processes created by this process will inherit the handle.    False - The processes do not inherit this handle (Default)."
        }]
    },
    "_WinAPI_OpenFileById": {
        "documentation": "Opens the file that matches the specified object identifier",
        "label": "_WinAPI_OpenFileById ( $hFile, $vID [, $iAccess = 0 [, $iShare = 0 [, $iFlags = 0]]] )",
        "params": [{
            "label": "$hFile",
            "documentation": "The path or handle to any file on a volume or share on which the file to be opened is stored."
        }, {
            "label": "$vID",
            "documentation": "The file identifier (FileID), or $tagGUID structure (ObjectID), or GUID's string representation in theform \"{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\" that identifies the file to open."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The access to the object. Access can be read, write, or both. If this parameter is 0 (Default), theapplication can query file and device attributes without accessing a device.$GENERIC_READ$GENERIC_WRITE(See MSDN for more information)"
        }, {
            "label": "$iShare",
            "documentation": "**[optional]** The sharing mode of an object, which can be read, write, both, or none. If this parameter is 0 (Default) andfunction succeeds, the object cannot be shared and cannot be opened again until the handle is closed.$FILE_SHARE_DELETE$FILE_SHARE_READ$FILE_SHARE_WRITE"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The file flags. When _WinAPI_OpenFileById() opens a file, it combines the file flags with existingfile attributes, and ignores any supplied file attributes. This parameter can include anycombination of the following values.$FILE_FLAG_BACKUP_SEMANTICS$FILE_FLAG_NO_BUFFERING$FILE_FLAG_OPEN_NO_RECALL$FILE_FLAG_OPEN_REPARSE_POINT$FILE_FLAG_OVERLAPPED$FILE_FLAG_RANDOM_ACCESS$FILE_FLAG_SEQUENTIAL_SCAN$FILE_FLAG_WRITE_THROUGH"
        }]
    },
    "_WinAPI_OpenFileDlg": {
        "documentation": "Creates a dialog box that lets the user specify the drive, directory, and the name of a file or set of files to be opened",
        "label": "_WinAPI_OpenFileDlg ( [$sTitle = '' [, $sInitDir = '' [, $sFilters = '' [, $iDefaultFilter = 0 [, $sDefaultFilePath = '' [, $sDefaultExt = '' [, $iFlags = 0 [, $iFlagsEx = 0 [, $pOFNProc = 0 [, $pData = 0 [, $hParent = 0]]]]]]]]]]] )",
        "params": [{
            "label": "$sTitle",
            "documentation": "**[optional]** A string to be placed in the title bar of the dialog box.If this parameter is empty string (Default), the system uses the default title (that is, \"Open\")."
        }, {
            "label": "$sInitDir",
            "documentation": "**[optional]** The initial directory."
        }, {
            "label": "$sFilters",
            "documentation": "**[optional]** The pairs of filter strings (for example, \"Text Files (*.txt)\"). To specify multiple filter patterns for a single display string, use a semicolon to separate the patterns (for example, \"*.txt;*.doc;*.bak\").Do not include spaces in the pattern. To specify multiple groups of filters, use the \"|\" character as a delimiter (for example, \"Text Files (*.txt)|All Files (*.*)\").If this parameter is omitted or an empty string (Default), the dialog box does not display any filters."
        }, {
            "label": "$iDefaultFilter",
            "documentation": "**[optional]** The 1-based index of the currently selected filter to initialize the combo box control."
        }, {
            "label": "$sDefaultFilePath",
            "documentation": "**[optional]** The file name to initialize the edit control."
        }, {
            "label": "$sDefaultExt",
            "documentation": "**[optional]** The default extension that appends to the file name if the user fails to type an extension.This string can be any length, but only the first three characters are appended. The string should not contain a period (.). If this parameter is empty string (Default), no extension is appended."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** A set of bit flags you can use to initialize the dialog box.This parameter can be 0 or combination of the following values.    $OFN_ALLOWMULTISELECT    $OFN_CREATEPROMPT    $OFN_DONTADDTORECENT    $OFN_ENABLEHOOK    $OFN_ENABLEINCLUDENOTIFY    $OFN_ENABLESIZING    $OFN_EXPLORER    $OFN_FILEMUSTEXIST    $OFN_FORCESHOWHIDDEN    $OFN_HIDEREADONLY    $OFN_LONGNAMES    $OFN_NODEREFERENCELINKS    $OFN_NOLONGNAMES    $OFN_NONETWORKBUTTON    $OFN_NOREADONLYRETURN    $OFN_NOTESTFILECREATE    $OFN_NOVALIDATE    $OFN_PATHMUSTEXIST    $OFN_READONLY    $OFN_SHAREAWARE    $OFN_SHOWHELP"
        }, {
            "label": "$iFlagsEx",
            "documentation": "**[optional]** A set of bit flags you can use to initialize the dialog box. It can be 0 or the following value:    $OFN_EX_NOPLACESBAR"
        }, {
            "label": "$pOFNProc",
            "documentation": "**[optional]** A pointer to a hook procedure. This parameter is ignored unless the $OFN_ENABLEHOOK flag is set."
        }, {
            "label": "$pData",
            "documentation": "**[optional]** Application-defined data pointer that the system passes to the hook procedure."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** A handle to the parent window for the dialog box."
        }]
    },
    "_WinAPI_OpenFileMapping": {
        "documentation": "Opens a named file mapping object",
        "label": "_WinAPI_OpenFileMapping ( $sName [, $iAccess = 0x0006 [, $bInherit = False]] )",
        "params": [{
            "label": "$sName",
            "documentation": "The name of the file mapping object to be opened."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The access to the file mapping object. This parameter can be one of the following values.$FILE_MAP_ALL_ACCESS$FILE_MAP_COPY$FILE_MAP_READ (Default)$FILE_MAP_WRITE (Default)Each of the preceding values can be combined with the following value.$FILE_MAP_EXECUTE"
        }, {
            "label": "$bInherit",
            "documentation": "**[optional]** Specifies whether inherites the handle by a processes, valid values:    True - The processes created by this process will inherit the handle.    False - The processes do not inherit this handle (Default)."
        }]
    },
    "_WinAPI_OpenIcon": {
        "documentation": "Restores a minimized (iconic) window to its previous size and position and activates the window",
        "label": "_WinAPI_OpenIcon ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be restored and activated."
        }]
    },
    "_WinAPI_OpenInputDesktop": {
        "documentation": "Opens the desktop that receives user input",
        "label": "_WinAPI_OpenInputDesktop ( [$iAccess = 0 [, $iFlags = 0 [, $bInherit = False]]] )",
        "params": [{
            "label": "$iAccess",
            "documentation": "**[optional]** The access to the desktop. This parameter can be one or more of the following values.$DESKTOP_ALL_ACCESS$DESKTOP_CREATEMENU$DESKTOP_CREATEWINDOW$DESKTOP_ENUMERATE$DESKTOP_HOOKCONTROL$DESKTOP_JOURNALPLAYBACK$DESKTOP_JOURNALRECORD$DESKTOP_READOBJECTS$DESKTOP_SWITCHDESKTOP$DESKTOP_WRITEOBJECTS"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The optional flags. It can be zero or the following value.$DF_ALLOWOTHERACCOUNTHOOK"
        }, {
            "label": "$bInherit",
            "documentation": "**[optional]** Specifies whether inherites the handle by a processes, valid values:    True - The processes created by this process will inherit the handle.    False - The processes do not inherit this handle (Default)."
        }]
    },
    "_WinAPI_OpenJobObject": {
        "documentation": "Opens an existing job object",
        "label": "_WinAPI_OpenJobObject ( $sName [, $iAccess = $JOB_OBJECT_ALL_ACCESS [, $bInherit = False]] )",
        "params": [{
            "label": "$sName",
            "documentation": "The name of the job to be opened. Name comparisons are case sensitive."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The access to the job object. This parameter can be one or more of the following values.$JOB_OBJECT_ALL_ACCESS$JOB_OBJECT_ASSIGN_PROCESS$JOB_OBJECT_QUERY$JOB_OBJECT_SET_ATTRIBUTES$JOB_OBJECT_SET_SECURITY_ATTRIBUTES$JOB_OBJECT_TERMINATE"
        }, {
            "label": "$bInherit",
            "documentation": "**[optional]** Specifies whether inherites the handle by a processes, valid values:True - The processes created by this process will inherit the handle.False - The processes do not inherit this handle (Default)."
        }]
    },
    "_WinAPI_OpenMutex": {
        "documentation": "Opens an existing named mutex object",
        "label": "_WinAPI_OpenMutex ( $sMutex [, $iAccess = $MUTEX_ALL_ACCESS [, $bInherit = False]] )",
        "params": [{
            "label": "$sMutex",
            "documentation": "The name of the mutex to be opened. Name comparisons are case sensitive."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The access to the mutex object. The function fails if the security descriptor of the specified objectdoes not permit the requested access for the calling process.This parameter can be one of the following values.$MUTEX_ALL_ACCESS$MUTEX_MODIFY_STATE"
        }, {
            "label": "$bInherit",
            "documentation": "**[optional]** Specifies whether inherites the handle by a processes, valid values:True - The processes created by this process will inherit the handle. False - The processes do not inherit this handle (Default)."
        }]
    },
    "_WinAPI_OpenProcess": {
        "documentation": "Returns a handle of an existing process object",
        "label": "_WinAPI_OpenProcess ( $iAccess, $bInherit, $iPID [, $bDebugPriv = False] )",
        "params": [{
            "label": "$iAccess",
            "documentation": "Specifies the access to the process object"
        }, {
            "label": "$bInherit",
            "documentation": "Specifies whether the returned handle can be inherited"
        }, {
            "label": "$iPID",
            "documentation": "Specifies the process identifier of the process to open"
        }, {
            "label": "$bDebugPriv",
            "documentation": "**[optional]** Certain system processes can not be opened unless you have the debug security privilege.If True, this function will attempt to open the process with debug privileges if the process can not be opened with standard access privileges."
        }]
    },
    "_WinAPI_OpenProcessToken": {
        "documentation": "Opens the access token associated with a process",
        "label": "_WinAPI_OpenProcessToken ( $iAccess [, $hProcess = 0] )",
        "params": [{
            "label": "$iAccess",
            "documentation": "Access mask that specifies the requested types of access to the access token. This parameter can beone or more of the following values.$TOKEN_ALL_ACCESS$TOKEN_ADJUST_DEFAULT$TOKEN_ADJUST_GROUPS$TOKEN_ADJUST_PRIVILEGES$TOKEN_ADJUST_SESSIONID$TOKEN_ASSIGN_PRIMARY$TOKEN_DUPLICATE$TOKEN_EXECUTE$TOKEN_IMPERSONATE$TOKEN_QUERY$TOKEN_QUERY_SOURCE$TOKEN_READ$TOKEN_WRITE"
        }, {
            "label": "$hProcess",
            "documentation": "**[optional]** Handle to the process whose access token is opened. The process must have the$PROCESS_QUERY_INFORMATION access permission. If this parameter is 0 (Default), will use the current process."
        }]
    },
    "_WinAPI_OpenSemaphore": {
        "documentation": "Opens an existing named semaphore object",
        "label": "_WinAPI_OpenSemaphore ( $sSemaphore [, $iAccess = 0x001F0003 [, $bInherit = False]] )",
        "params": [{
            "label": "$sSemaphore",
            "documentation": "The name of the semaphore to be opened. Name comparisons are case sensitive."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The access to the semaphore object. The function fails if the security descriptor of the specifiedobject does not permit the requested access for the calling process.This parameter can be one of the following values.$SEMAPHORE_ALL_ACCESS (Default)$SEMAPHORE_MODIFY_STATE"
        }, {
            "label": "$bInherit",
            "documentation": "**[optional]** Specifies whether inherites the handle by a processes, valid values:True - The processes created by this process will inherit the handle.False - The processes do not inherit this handle (Default)."
        }]
    },

    "_WinAPI_OpenWindowStation": {
        "documentation": "Opens the specified window station",
        "label": "_WinAPI_OpenWindowStation ( $sName [, $iAccess = 0 [, $bInherit = False]] )",
        "params": [{
            "label": "$sName",
            "documentation": "The name of the window station to be opened. Window station names are case-insensitive. This windowstation must belong to the current session."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The access to the window station. This parameter can be one or more of the following values.$WINSTA_ALL_ACCESS$WINSTA_ACCESSCLIPBOARD$WINSTA_ACCESSGLOBALATOMS$WINSTA_CREATEDESKTOP$WINSTA_ENUMDESKTOPS$WINSTA_ENUMERATE$WINSTA_EXITWINDOWS$WINSTA_READATTRIBUTES$WINSTA_READSCREEN$WINSTA_WRITEATTRIBUTES"
        }, {
            "label": "$bInherit",
            "documentation": "**[optional]** Specifies whether inherites the handle by a processes, valid values:    True - The processes created by this process will inherit the handle.    False - The processes do not inherit this handle (Default)."
        }]
    },
    "_WinAPI_PageSetupDlg": {
        "documentation": "Creates a Page Setup dialog box that enables the user to specify the attributes of a printed page",
        "label": "_WinAPI_PageSetupDlg ( ByRef $tPAGESETUPDLG )",
        "params": [{
            "label": "$tPAGESETUPDLG",
            "documentation": "$tagPAGESETUPDLG structure that contains information used to initialize the Page Setup dialog box.The structure receives information about the user's selections when the function returns,and must be initialized before function call.(See MSDN for more information)"
        }]
    },
    "_WinAPI_PaintDesktop": {
        "documentation": "Fills the clipping region in the specified device context with the desktop pattern or wallpaper",
        "label": "_WinAPI_PaintDesktop ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_PaintRgn": {
        "documentation": "Paints the specified region by using the brush currently selected into the device context",
        "label": "_WinAPI_PaintRgn ( $hDC, $hRgn )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$hRgn",
            "documentation": "Handle to the region to be filled. The region's coordinates are presumed to be logical coordinates."
        }]
    },
    "_WinAPI_ParseURL": {
        "documentation": "Performs rudimentary parsing of a URL",
        "label": "_WinAPI_ParseURL ( $sUrl )",
        "params": [{
            "label": "$sUrl",
            "documentation": "The URL to be parsed."
        }]
    },
    "_WinAPI_ParseUserName": {
        "documentation": "Extracts the domain and user account name from a fully qualified user name",
        "label": "_WinAPI_ParseUserName ( $sUser )",
        "params": [{
            "label": "$sUser",
            "documentation": "The user name to be parsed. The name must be in UPN or down-level format, or a certificate."
        }]
    },
    "_WinAPI_PatBlt": {
        "documentation": "Paints the specified rectangle using the brush that is currently selected into the specified device context",
        "label": "_WinAPI_PatBlt ( $hDC, $iX, $iY, $iWidth, $iHeight, $iRop )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the rectangle to be filled."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the rectangle to be filled."
        }, {
            "label": "$iWidth",
            "documentation": "The width, in logical units, of the rectangle."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in logical units, of the rectangle."
        }, {
            "label": "$iRop",
            "documentation": "The raster operation code. This code can be one of the following values.$BLACKNESS$DSTINVERT$PATCOPY$PATINVERT$WHITENESS"
        }]
    },
    "_WinAPI_PathAddBackslash": {
        "documentation": "Adds a backslash to the end of a string to create the correct syntax for a path",
        "label": "_WinAPI_PathAddBackslash ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to which the backslash will be appended. If this path already has a trailing backslash,no backslash will be added."
        }]
    },
    "_WinAPI_PathAddExtension": {
        "documentation": "Adds a file name extension to a path string",
        "label": "_WinAPI_PathAddExtension ( $sFilePath [, $sExt = ''] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to which the file name extension will be appended. If there is already a file name extensionpresent, no extension will be added."
        }, {
            "label": "$sExt",
            "documentation": "**[optional]** The file name extension. If this parameter is empty string, an \".exe\" extension will be added."
        }]
    },
    "_WinAPI_PathAppend": {
        "documentation": "Appends one path to the end of another",
        "label": "_WinAPI_PathAppend ( $sFilePath, $sMore )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The string to which the path is appended."
        }, {
            "label": "$sMore",
            "documentation": "The path to be appended."
        }]
    },
    "_WinAPI_PathBuildRoot": {
        "documentation": "Creates a root path from a given drive number",
        "label": "_WinAPI_PathBuildRoot ( $iDrive )",
        "params": [{
            "label": "$iDrive",
            "documentation": "The desired drive number. It should be between 0 and 25."
        }]
    },
    "_WinAPI_PathCanonicalize": {
        "documentation": "Removes elements of a file path according to special strings inserted into that path",
        "label": "_WinAPI_PathCanonicalize ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be canonicalized."
        }]
    },
    "_WinAPI_PathCommonPrefix": {
        "documentation": "Compares two paths to determine if they share a common prefix",
        "label": "_WinAPI_PathCommonPrefix ( $sPath1, $sPath2 )",
        "params": [{
            "label": "$sPath1",
            "documentation": "The first path name."
        }, {
            "label": "$sPath2",
            "documentation": "The second path name."
        }]
    },
    "_WinAPI_PathCompactPath": {
        "documentation": "Truncates a file path to fit within a given pixel width by replacing path components with ellipses",
        "label": "_WinAPI_PathCompactPath ( $hWnd, $sFilePath [, $iWidth = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window used for font metrics."
        }, {
            "label": "$sFilePath",
            "documentation": "The path to be modified."
        }, {
            "label": "$iWidth",
            "documentation": "**[optional]** The width, in pixels, in which the string must fit. If this parameter is 0 (Default), width will be equal tothe width of the window's client area. If this parameter is a negative number, the width will bedecreased to its absolute value."
        }]
    },
    "_WinAPI_PathCompactPathEx": {
        "documentation": "Truncates a path to fit within a certain number of characters by replacing path components with ellipses",
        "label": "_WinAPI_PathCompactPathEx ( $sFilePath, $iMax )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be modified."
        }, {
            "label": "$iMax",
            "documentation": "The maximum number of characters to be contained in the modified path."
        }]
    },
    "_WinAPI_PathCreateFromUrl": {
        "documentation": "Converts a file URL to a Microsoft MS-DOS path",
        "label": "_WinAPI_PathCreateFromUrl ( $sUrl )",
        "params": [{
            "label": "$sUrl",
            "documentation": "The URL."
        }]
    },
    "_WinAPI_PathFindExtension": {
        "documentation": "Searches a path for an extension",
        "label": "_WinAPI_PathFindExtension ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to search, including the extension being searched for."
        }]
    },
    "_WinAPI_PathFindFileName": {
        "documentation": "Searches a path for a file name",
        "label": "_WinAPI_PathFindFileName ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to search."
        }]
    },
    "_WinAPI_PathFindNextComponent": {
        "documentation": "Parses a path and returns the portion of that path that follows the first backslash",
        "label": "_WinAPI_PathFindNextComponent ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to parse. Path components are delimited by backslashes. For instance, the path\"c:\\path1\\path2\\file.txt\" has four components: c:, path1, path2, and file.txt."
        }]
    },
    "_WinAPI_PathFindOnPath": {
        "documentation": "Searchs for a file in the default system paths",
        "label": "_WinAPI_PathFindOnPath ( $sFilePath [, $aExtraPaths = \"\" [, $sPathDelimiter = @LF]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "Filename to search for"
        }, {
            "label": "$aExtraPaths",
            "documentation": "**[optional]** Extra paths to check before any others."
        }, {
            "label": "$sPathDelimiter",
            "documentation": "**[optional]** Delimiter used to split $aExtraPaths if it's an non-empty string (StringSplit() with flag $STR_NOCOUNT (2))."
        }]
    },
    "_WinAPI_PathGetArgs": {
        "documentation": "Finds the command-line arguments within a given path",
        "label": "_WinAPI_PathGetArgs ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be searched."
        }]
    },
    "_WinAPI_PathGetCharType": {
        "documentation": "Determines the type of character in relation to a path",
        "label": "_WinAPI_PathGetCharType ( $sChar )",
        "params": [{
            "label": "$sChar",
            "documentation": "The character for which to determine the type."
        }]
    },
    "_WinAPI_PathGetDriveNumber": {
        "documentation": "Searches a path for a drive letter within the range of 'A' to 'Z' and returns the corresponding drive number",
        "label": "_WinAPI_PathGetDriveNumber ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be searched."
        }]
    },
    "_WinAPI_PathIsContentType": {
        "documentation": "Determines if a file's registered content type matches the specified content type",
        "label": "_WinAPI_PathIsContentType ( $sFilePath, $sType )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The file whose content type will be compared."
        }, {
            "label": "$sType",
            "documentation": "The content type string. For example, \"application/x-msdownload\", \"image/jpeg\", \"text/plain\", etc."
        }]
    },
    "_WinAPI_PathIsDirectory": {
        "documentation": "Verifies that a path is a valid directory",
        "label": "_WinAPI_PathIsDirectory ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to verify."
        }]
    },
    "_WinAPI_PathIsDirectoryEmpty": {
        "documentation": "Determines whether a specified path is an empty directory",
        "label": "_WinAPI_PathIsDirectoryEmpty ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be tested."
        }]
    },
    "_WinAPI_PathIsExe": {
        "documentation": "Determines whether a file is an executable by examining the file extension",
        "label": "_WinAPI_PathIsExe ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be searched."
        }]
    },
    "_WinAPI_PathIsFileSpec": {
        "documentation": "Searches a path for any path-delimiting characters",
        "label": "_WinAPI_PathIsFileSpec ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be searched."
        }]
    },
    "_WinAPI_PathIsLFNFileSpec": {
        "documentation": "Determines whether a file name is in long format",
        "label": "_WinAPI_PathIsLFNFileSpec ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The file name to be tested."
        }]
    },
    "_WinAPI_PathIsRelative": {
        "documentation": "Searches a path and determines if it is relative",
        "label": "_WinAPI_PathIsRelative ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be searched."
        }]
    },
    "_WinAPI_PathIsRoot": {
        "documentation": "Parses a path to determine if it is a directory root",
        "label": "_WinAPI_PathIsRoot ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be validated."
        }]
    },
    "_WinAPI_PathIsSameRoot": {
        "documentation": "Compares two paths to determine if they have a common root component",
        "label": "_WinAPI_PathIsSameRoot ( $sPath1, $sPath2 )",
        "params": [{
            "label": "$sPath1",
            "documentation": "The first path to be compared."
        }, {
            "label": "$sPath2",
            "documentation": "The second path to be compared."
        }]
    },
    "_WinAPI_PathIsSystemFolder": {
        "documentation": "Determines if an existing folder contains the attributes that make it a system folder",
        "label": "_WinAPI_PathIsSystemFolder ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of an existing folder to check the system folder attributes."
        }]
    },
    "_WinAPI_PathIsUNC": {
        "documentation": "Determines if the string is a valid Universal Naming Convention (UNC) for a server and share path",
        "label": "_WinAPI_PathIsUNC ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to validate."
        }]
    },
    "_WinAPI_PathIsUNCServer": {
        "documentation": "Determines if a string is a valid Universal Naming Convention (UNC) for a server path only",
        "label": "_WinAPI_PathIsUNCServer ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to validate."
        }]
    },
    "_WinAPI_PathIsUNCServerShare": {
        "documentation": "Determines if a string is a valid Universal Naming Convention (UNC) share path",
        "label": "_WinAPI_PathIsUNCServerShare ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to validate."
        }]
    },
    "_WinAPI_PathMakeSystemFolder": {
        "documentation": "Gives an existing folder the proper attributes to become a system folder",
        "label": "_WinAPI_PathMakeSystemFolder ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of an existing folder that will be made into a system folder."
        }]
    },
    "_WinAPI_PathMatchSpec": {
        "documentation": "Searches a string using a Microsoft MS-DOS wild card match type",
        "label": "_WinAPI_PathMatchSpec ( $sFilePath, $sSpec )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be searched."
        }, {
            "label": "$sSpec",
            "documentation": "The file type for which to search. For example, to test whether $sFilePath is a .doc file,$sSpec should be set to \"*.doc\"."
        }]
    },
    "_WinAPI_PathParseIconLocation": {
        "documentation": "Parses a file location string that contains a file location and icon index",
        "label": "_WinAPI_PathParseIconLocation ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path that contains a file location string. It should be in the form \"path,iconindex\"."
        }]
    },
    "_WinAPI_PathRelativePathTo": {
        "documentation": "Creates a relative path from one file or folder to another",
        "label": "_WinAPI_PathRelativePathTo ( $sPathFrom, $bDirFrom, $sPathTo, $bDirTo )",
        "params": [{
            "label": "$sPathFrom",
            "documentation": "The path to the file or directory that defines the start of the relative path."
        }, {
            "label": "$bDirFrom",
            "documentation": "Specifies whether is $sPathFrom path to the directory, valid values:    True - Directory.    False - File."
        }, {
            "label": "$sPathTo",
            "documentation": "The path to the file or directory that defines the endpoint of the relative path."
        }, {
            "label": "$bDirTo",
            "documentation": "Specifies whether is $fDirTo path to the directory, valid values:    True - Directory.    False - File."
        }]
    },
    "_WinAPI_PathRemoveArgs": {
        "documentation": "Removes any arguments from a given path",
        "label": "_WinAPI_PathRemoveArgs ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path that contains the path from which to remove arguments."
        }]
    },
    "_WinAPI_PathRemoveBackslash": {
        "documentation": "Removes the trailing backslash from a given path",
        "label": "_WinAPI_PathRemoveBackslash ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path from which to remove the backslash."
        }]
    },
    "_WinAPI_PathRemoveExtension": {
        "documentation": "Removes the file name extension from a path, if one is present",
        "label": "_WinAPI_PathRemoveExtension ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path from which to remove the extension."
        }]
    },
    "_WinAPI_PathRemoveFileSpec": {
        "documentation": "Removes the trailing file name and backslash from a path, if they are present",
        "label": "_WinAPI_PathRemoveFileSpec ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path from which to remove the file name."
        }]
    },
    "_WinAPI_PathRenameExtension": {
        "documentation": "Replaces the extension of a file name with a new extension",
        "label": "_WinAPI_PathRenameExtension ( $sFilePath, $sExt )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path in which to replace the extension."
        }, {
            "label": "$sExt",
            "documentation": "The string that contains a \".\" character followed by the new extension."
        }]
    },
    "_WinAPI_PathSearchAndQualify": {
        "documentation": "Formats a path to the fully qualified path",
        "label": "_WinAPI_PathSearchAndQualify ( $sFilePath [, $bExists = False] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be formated."
        }, {
            "label": "$bExists",
            "documentation": "**[optional]** Specifies whether the path should be existing, valid values:    True - The path must be an existing path, otherwise, the function fails.    False - The path may not exist (Default)."
        }]
    },
    "_WinAPI_PathSkipRoot": {
        "documentation": "Parses a path, ignoring the drive letter or Universal Naming Convention (UNC) server/share path elements",
        "label": "_WinAPI_PathSkipRoot ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to parse."
        }]
    },
    "_WinAPI_PathStripPath": {
        "documentation": "Removes the path portion of a fully qualified path and file",
        "label": "_WinAPI_PathStripPath ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path and file name."
        }]
    },
    "_WinAPI_PathStripToRoot": {
        "documentation": "Removes all parts of the path except for the root information",
        "label": "_WinAPI_PathStripToRoot ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be converted."
        }]
    },
    "_WinAPI_PathToRegion": {
        "documentation": "Creates a region from the path that is selected into the specified device context",
        "label": "_WinAPI_PathToRegion ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context that contains a closed path."
        }]
    },
    "_WinAPI_PathUndecorate": {
        "documentation": "Removes the decoration from a path string",
        "label": "_WinAPI_PathUndecorate ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path."
        }]
    },
    "_WinAPI_PathUnExpandEnvStrings": {
        "documentation": "Replaces folder names in a fully-qualified path with their associated environment string",
        "label": "_WinAPI_PathUnExpandEnvStrings ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be unexpanded."
        }]
    },
    "_WinAPI_PathUnmakeSystemFolder": {
        "documentation": "Removes the attributes from a folder that make it a system folder",
        "label": "_WinAPI_PathUnmakeSystemFolder ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of an existing folder that will have the system folder attributes removed."
        }]
    },
    "_WinAPI_PathUnquoteSpaces": {
        "documentation": "Removes quotes from the beginning and end of a path",
        "label": "_WinAPI_PathUnquoteSpaces ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path."
        }]
    },
    "_WinAPI_PathYetAnotherMakeUniqueName": {
        "documentation": "Creates a unique filename based on an existing filename",
        "label": "_WinAPI_PathYetAnotherMakeUniqueName ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The file name that the unique name will be based on."
        }]
    },
    "_WinAPI_PickIconDlg": {
        "documentation": "Displays a dialog box that allows the user to choose an icon",
        "label": "_WinAPI_PickIconDlg ( [$sIcon = '' [, $iIndex = 0 [, $hParent = 0]]] )",
        "params": [{
            "label": "$sIcon",
            "documentation": "**[optional]** The fully-qualified path of the file that contains the initial icon."
        }, {
            "label": "$iIndex",
            "documentation": "**[optional]** The index of the initial icon. Default is 0."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle of the parent window."
        }]
    },
    "_WinAPI_PlayEnhMetaFile": {
        "documentation": "Displays the picture stored in the specified enhanced-format metafile",
        "label": "_WinAPI_PlayEnhMetaFile ( $hDC, $hEmf, $tRECT )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context for the output device on which the picture will appear."
        }, {
            "label": "$hEmf",
            "documentation": "Handle to the enhanced metafile."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the coordinates of the bounding rectangle used to display the picture,in logical units"
        }]
    },
    "_WinAPI_PlaySound": {
        "documentation": "Plays a sound specified by the given file name, resource, or system event",
        "label": "_WinAPI_PlaySound ( $sSound [, $iFlags = $SND_SYSTEM_NOSTOP [, $hInstance = 0]] )",
        "params": [{
            "label": "$sSound",
            "documentation": "The string that specifies the sound to play. The maximum length is 255 characters. If $sSound isempty, any currently playing waveform sound is stopped."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags for sound playing. This parameter can be one or more of the following values.$SND_APPLICATION$SND_ALIAS$SND_ALIAS_ID$SND_ASYNC$SND_FILENAME$SND_LOOP$SND_MEMORY$SND_NODEFAULT$SND_NOSTOP$SND_NOWAIT$SND_PURGE$SND_RESOURCE$SND_SYNCWindows Vista or later$SND_SENTRY$SND_SYSTEMThree flags ($SND_ALIAS, $SND_FILENAME, and $SND_RESOURCE) determine whether the name is interpretedas an alias for a system event, a file name, or a resource identifier. If none of these flags arespecified, _WinAPI_PlaySound() searches the registry or the WIN.INI file for an association withthe specified sound name. If an association is found, the sound event is played. If no associationis found in the registry, the name is interpreted as a file name.If the $SND_ALIAS_ID flag is specified in $iFlags, the $sSound parameter must be one of the$SND_ALIAS_* values.(See MSDN for more information)"
        }, {
            "label": "$hInstance",
            "documentation": "**[optional]** Handle to the executable file that contains the resource to be loaded. If $iFlags does notcontain the $SND_RESOURCE, this parameter will be ignored."
        }]
    },
    "_WinAPI_PlgBlt": {
        "documentation": "Performs a bit-block transfer of color data from the specified rectangle in the source DC to the specified parallelogram in the DC context",
        "label": "_WinAPI_PlgBlt ( $hDestDC, Const ByRef $aPoint, $hSrcDC, $iXSrc, $iYSrc, $iWidth, $iHeight [, $hMask = 0 [, $iXMask = 0 [, $iYMask = 0]]] )",
        "params": [{
            "label": "$hDestDC",
            "documentation": "Handle to the destination device context."
        }, {
            "label": "$aPoint",
            "documentation": "The 2D array ([x1, y1], [x2, y2], [x3, y3]) that identify three corners of the destination parallelogram.The upper-left corner of the source rectangle is mapped to the first point in this array, the upper-rightcorner to the second point in this array, and the lower-left corner to the third point. The lower-rightcorner of the source rectangle is mapped to the implicit fourth point in the parallelogram."
        }, {
            "label": "$hSrcDC",
            "documentation": "Handle to the source device context."
        }, {
            "label": "$iXSrc",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the source rectangle."
        }, {
            "label": "$iYSrc",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the source rectangle."
        }, {
            "label": "$iWidth",
            "documentation": "The width, in logical units, of the source rectangle."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in logical units, of the source rectangle."
        }, {
            "label": "$hMask",
            "documentation": "**[optional]** Handle to the monochrome bitmap that is used to mask the colors of the source rectangle."
        }, {
            "label": "$iXMask",
            "documentation": "**[optional]** The x-coordinate, in logical units, of the upper-left corner of the monochrome bitmap. Default is 0."
        }, {
            "label": "$iYMask",
            "documentation": "**[optional]** The y-coordinate, in logical units, of the upper-left corner of the monochrome bitmap. Default is 0."
        }]
    },
    "_WinAPI_PointFromRect": {
        "documentation": "Returns the top/left coordinates of a $tagRECT as a $tagPOINT structure",
        "label": "_WinAPI_PointFromRect ( ByRef $tRECT [, $bCenter = True] )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure"
        }, {
            "label": "$bCenter",
            "documentation": "**[optional]** If True, the return will be a point at the center of the rectangle, otherwise the left/topcoordinates are returned."
        }]
    },
    "_WinAPI_PolyBezier": {
        "documentation": "Draws one or more Bezier curves",
        "label": "_WinAPI_PolyBezier ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context."
        }, {
            "label": "$aPoint",
            "documentation": "The 2D array ([x1, y1], [x2, y2], ... [xN, yN]) that contains the endpoints and control points of thecurve(s), in logical units. The number of points must be one more than three times the number of curvesto be drawn, because each Bezier curve requires two control points and an endpoint, and the initialcurve requires an additional starting point."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start drawing at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop drawing at."
        }]
    },
    "_WinAPI_PolyBezierTo": {
        "documentation": "Draws one or more Bezier curves",
        "label": "_WinAPI_PolyBezierTo ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context."
        }, {
            "label": "$aPoint",
            "documentation": "The 2D array ([x1, y1], [x2, y2], ... [xN, yN]) that contains the endpoints and control points of thecurve(s), in logical units. The number of points must be three times the number of curves to be drawn,because each Bezier curve requires two control points and an ending point."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start drawing at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop drawing at."
        }]
    },
    "_WinAPI_PolyDraw": {
        "documentation": "Draws a set of line segments and Bezier curves",
        "label": "_WinAPI_PolyDraw ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context."
        }, {
            "label": "$aPoint",
            "documentation": "The 2D array ([x1, y1, type1], [x2, y2, type2], ... [xN, yN, typeN]) that contains the endpoints foreach line segment and the endpoints and control points for each Bezier curve, in logical units. In addition,the array contains a parameters that specifies how each point is used. The third parameter of the arraycan be one of the following values.$PT_BEZIERTO$PT_LINETO$PT_MOVETO$PT_BEZIERTO or $PT_LINETO type can be combined with the following value that the corresponding pointis the last point in a figure and the figure is closed.$PT_CLOSEFIGURE"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start drawing at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop drawing at."
        }]
    },
    "_WinAPI_Polygon": {
        "documentation": "Draws a polygon consisting of two or more vertices connected by straight lines",
        "label": "_WinAPI_Polygon ( $hDC, Const ByRef $aPoint [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$aPoint",
            "documentation": "The 2D array ([x1, y1], [x2, y2], ... [xN, yN]) that contains the vertices of the polygon in logicalunits. The polygon is closed automatically by drawing a line from the last vertex to the first."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start creating at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop creating at."
        }]
    },
    "_WinAPI_PostMessage": {
        "documentation": "Places a message in the message queue and then returns",
        "label": "_WinAPI_PostMessage ( $hWnd, $iMsg, $wParam, $lParam )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Identifies the window whose window procedure will receive the message.If this parameter is 0xFFFF (HWND_BROADCAST), the message is sent to all top-level windows in the system, including disabled or invisible windows, overlapped windows, and pop-up windows; but the message is not sent to child windows."
        }, {
            "label": "$iMsg",
            "documentation": "Specifies the message to be sent"
        }, {
            "label": "$wParam",
            "documentation": "First message parameter"
        }, {
            "label": "$lParam",
            "documentation": "Second message parameter"
        }]
    },
    "_WinAPI_PrimaryLangId": {
        "documentation": "Extract primary language id from a language id",
        "label": "_WinAPI_PrimaryLangId ( $iLngID )",
        "params": [{
            "label": "$iLngID",
            "documentation": "Language id"
        }]
    },
    "_WinAPI_PrintDlg": {
        "documentation": "Displays a Print dialog box",
        "label": "_WinAPI_PrintDlg ( ByRef $tPRINTDLG )",
        "params": [{
            "label": "$tPRINTDLG",
            "documentation": "$tagPRINTDLG structure that contains information used to initialize the dialog box. When the functionreturns, it contains information about the user's selections. This structure must be initializedbefore function call.(See MSDN for more information)"
        }]
    },
    "_WinAPI_PrintDlgEx": {
        "documentation": "Displays a Print property sheet that enables the user to specify the properties of a particular print job",
        "label": "_WinAPI_PrintDlgEx ( ByRef $tPRINTDLGEX )",
        "params": [{
            "label": "$tPRINTDLGEX",
            "documentation": "$tagPRINTDLGEX structure that contains information used to initialize the property sheet. When thefunction returns, it contains information about the user's selections. This structure must beinitialized before function call.(See MSDN for more information)"
        }]
    },
    "_WinAPI_PrintWindow": {
        "documentation": "Copies a visual window into the specified device context",
        "label": "_WinAPI_PrintWindow ( $hWnd, $hDC [, $bClient = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that will be copied."
        }, {
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$bClient",
            "documentation": "**[optional]** Specifies whether copies only the client area of the window, valid values:    True - Only the client area of the window is copied to device context.    False - The entire window is copied (Default)."
        }]
    },
    "_WinAPI_ProgIDFromCLSID": {
        "documentation": "Retrieves the ProgID for a given CLSID",
        "label": "_WinAPI_ProgIDFromCLSID ( $sCLSID )",
        "params": [{
            "label": "$sCLSID",
            "documentation": "The string that represents the CLSID for which ProgID is to be retrieved."
        }]
    },
    "_WinAPI_PtInRect": {
        "documentation": "Determines whether the specified point lies within the specified rectangle",
        "label": "_WinAPI_PtInRect ( ByRef $tRECT, ByRef $tPoint )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the specified rectangle"
        }, {
            "label": "$tPoint",
            "documentation": "$tagPOINT structure that contains the specified point"
        }]
    },
    "_WinAPI_PtInRectEx": {
        "documentation": "Determines whether the specified point lies within the specified rectangle",
        "label": "_WinAPI_PtInRectEx ( $iX, $iY, $iLeft, $iTop, $iRight, $iBottom )",
        "params": [{
            "label": "$iX",
            "documentation": "The x-coordinate of the point."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate of the point."
        }, {
            "label": "$iLeft",
            "documentation": "The x-coordinate of the upper-left corner of the rectangle."
        }, {
            "label": "$iTop",
            "documentation": "The y-coordinate of the upper-left corner of the rectangle."
        }, {
            "label": "$iRight",
            "documentation": "The x-coordinate of the lower-right corner of the rectangle."
        }, {
            "label": "$iBottom",
            "documentation": "The y-coordinate of the lower-right corner of the rectangle."
        }]
    },
    "_WinAPI_PtInRegion": {
        "documentation": "Determines whether the specified point is inside the specified region",
        "label": "_WinAPI_PtInRegion ( $hRgn, $iX, $iY )",
        "params": [{
            "label": "$hRgn",
            "documentation": "Handle to the region to be examined."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate of the point in logical units."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate of the point in logical units."
        }]
    },
    "_WinAPI_PtVisible": {
        "documentation": "Determines whether the specified point is within the clipping region",
        "label": "_WinAPI_PtVisible ( $hDC, $iX, $iY )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in logical units, of the point."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical units, of the point."
        }]
    },
    "_WinAPI_QueryDosDevice": {
        "documentation": "Retrieves the current mapping for a particular MS-DOS device name",
        "label": "_WinAPI_QueryDosDevice ( $sDevice )",
        "params": [{
            "label": "$sDevice",
            "documentation": "The name of the MS-DOS device."
        }]
    },
    "_WinAPI_QueryInformationJobObject": {
        "documentation": "Retrieves limit and job state information from the job object",
        "label": "_WinAPI_QueryInformationJobObject ( $hJob, $iJobObjectInfoClass, ByRef $tJobObjectInfo )",
        "params": [{
            "label": "$hJob",
            "documentation": "Handle to the job whose information is being queried. The handle must have the$JOB_OBJECT_QUERY access right. If this value is 0 and the calling process is associatedwith a job, the job associated with the calling process is used."
        }, {
            "label": "$iJobObjectInfoClass",
            "documentation": "The information class for the limits to be queried. This parameter specifies the typeof $tJobObjectInfo structure, valid values:1 - $tagJOBOBJECT_BASIC_ACCOUNTING_INFORMATION2 - $tagJOBOBJECT_BASIC_LIMIT_INFORMATION3 - $tagJOBOBJECT_BASIC_PROCESS_ID_LIST4 - $tagJOBOBJECT_BASIC_UI_RESTRICTIONS5 - $tagJOBOBJECT_SECURITY_LIMIT_INFORMATION8 - $tagJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION9 - $tagJOBOBJECT_EXTENDED_LIMIT_INFORMATION11 - $tagJOBOBJECT_GROUP_INFORMATION"
        }, {
            "label": "$tJobObjectInfo",
            "documentation": "$tagJOBOBJECT_* structure (see above) that retrieves the limit and job state information.This structure must be created before function call."
        }]
    },
    "_WinAPI_QueryPerformanceCounter": {
        "documentation": "Retrieves the current value of the high-resolution performance counter",
        "label": "_WinAPI_QueryPerformanceCounter (  )",
        "params": []
    },
    "_WinAPI_QueryPerformanceFrequency": {
        "documentation": "Retrieves the frequency of the high-resolution performance counter",
        "label": "_WinAPI_QueryPerformanceFrequency (  )",
        "params": []
    },
    "_WinAPI_RadialGradientFill": {
        "documentation": "Fills radial gradient",
        "label": "_WinAPI_RadialGradientFill ( $hDC, $iX, $iY, $iRadius, $iRGB1, $iRGB2 [, $fAngleStart = 0 [, $fAngleEnd = 360 [, $fStep = 5]]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate of the central point, in logical units."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate of the central point, in logical units."
        }, {
            "label": "$iRadius",
            "documentation": "The circle radius to filling the gradient."
        }, {
            "label": "$iRGB1",
            "documentation": "The color information at the central point."
        }, {
            "label": "$iRGB2",
            "documentation": "The color information at the edges of circle."
        }, {
            "label": "$fAngleStart",
            "documentation": "**[optional]** The angle to start filling at, in degree. Default is 0."
        }, {
            "label": "$fAngleEnd",
            "documentation": "**[optional]** The angle to end filling at, in degree. Default is 360."
        }, {
            "label": "$fStep",
            "documentation": "**[optional]** The gradient filling step in degree. The larger value of this parameter, the gradient will bebetter, but it's require more time, and vice versa. Default is 5."
        }]
    },
    "_WinAPI_ReadDirectoryChanges": {
        "documentation": "Retrieves information that describes the changes within the specified directory",
        "label": "_WinAPI_ReadDirectoryChanges ( $hDirectory, $iFilter, $pBuffer, $iLength [, $bSubtree = 0] )",
        "params": [{
            "label": "$hDirectory",
            "documentation": "A handle to the directory to be monitored. This directory must be opened with the $FILE_LIST_DIRECTORY access right."
        }, {
            "label": "$iFilter",
            "documentation": "The filter criteria that the function checks to determine if the wait operation has completed.This parameter can be one or more of the following values.    $FILE_NOTIFY_CHANGE_FILE_NAME    $FILE_NOTIFY_CHANGE_DIR_NAME    $FILE_NOTIFY_CHANGE_ATTRIBUTES    $FILE_NOTIFY_CHANGE_SIZE    $FILE_NOTIFY_CHANGE_LAST_WRITE    $FILE_NOTIFY_CHANGE_LAST_ACCESS    $FILE_NOTIFY_CHANGE_CREATION    $FILE_NOTIFY_CHANGE_SECURITY"
        }, {
            "label": "$pBuffer",
            "documentation": "A pointer to the DWORD-aligned formatted buffer that internally used by this function to retrieve the data.To create a buffer, you can use _WinAPI_CreateBuffer() function.To prevent the crash of the script, use the buffer at least not less than 64 KB.If the buffer is greater than 64 KB and the application is monitoring a directory over the network, the function fails.This is due to a packet size limitation with the underlying file sharing protocols."
        }, {
            "label": "$iLength",
            "documentation": "The size of the buffer, in bytes."
        }, {
            "label": "$bSubtree",
            "documentation": "**[optional]** Specifies whether to monitor the subdirectories of the specified directory, valid values:True - Monitor the directory tree rooted at the specified directory.False - Monitor only the specified directory (Default)."
        }]
    },
    "_WinAPI_ReadFile": {
        "documentation": "Reads data from a file",
        "label": "_WinAPI_ReadFile ( $hFile, $pBuffer, $iToRead, ByRef $iRead [, $tOverlapped = 0] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file to be read"
        }, {
            "label": "$pBuffer",
            "documentation": "Pointer to the buffer that receives the data read from a file"
        }, {
            "label": "$iToRead",
            "documentation": "Maximum number of bytes to read"
        }, {
            "label": "$iRead",
            "documentation": "Number of bytes read"
        }, {
            "label": "$tOverlapped",
            "documentation": "**[optional]** A $tagOVERLAPPED structure or a pointer to it"
        }]
    },
    "_WinAPI_ReadProcessMemory": {
        "documentation": "Reads memory in a specified process",
        "label": "_WinAPI_ReadProcessMemory ( $hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iRead )",
        "params": [{
            "label": "$hProcess",
            "documentation": "Identifies an open handle of a process whose memory is read"
        }, {
            "label": "$pBaseAddress",
            "documentation": "Points to the base address in the specified process to be read"
        }, {
            "label": "$pBuffer",
            "documentation": "Points to a buffer that receives the contents from the address space"
        }, {
            "label": "$iSize",
            "documentation": "Specifies the requested number of bytes to read from the specified process"
        }, {
            "label": "$iRead",
            "documentation": "The actual number of bytes transferred into the specified buffer"
        }]
    },
    "_WinAPI_Rectangle": {
        "documentation": "Draws a rectangle",
        "label": "_WinAPI_Rectangle ( $hDC, $tRECT )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the rectangle."
        }]
    },
    "_WinAPI_RectInRegion": {
        "documentation": "Determines whether any part of the specified rectangle is within the boundaries of a region",
        "label": "_WinAPI_RectInRegion ( $hRgn, $tRECT )",
        "params": [{
            "label": "$hRgn",
            "documentation": "Handle to the region."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the coordinates of the rectangle in logical units."
        }]
    },
    "_WinAPI_RectIsEmpty": {
        "documentation": "Determins whether a rectangle is empty",
        "label": "_WinAPI_RectIsEmpty ( ByRef $tRECT )",
        "params": [{
            "label": "$tRECT",
            "documentation": "$tagRect structure"
        }]
    },
    "_WinAPI_RectVisible": {
        "documentation": "Determines whether any part of the specified rectangle lies within the clipping region",
        "label": "_WinAPI_RectVisible ( $hDC, $tRECT )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the specified rectangle."
        }]
    },
    "_WinAPI_RedrawWindow": {
        "documentation": "Updates the specified rectangle or region in a window's client area",
        "label": "_WinAPI_RedrawWindow ( $hWnd [, $tRECT = 0 [, $hRegion = 0 [, $iFlags = 5]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to a Window"
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** $tagRECT structure containing the coordinates of the update rectangle. This parameter isignored if the $hRegion parameter identifies a region."
        }, {
            "label": "$hRegion",
            "documentation": "**[optional]** Identifies the update region. If the $hRegion and $tRECT parameters are 0, the entire clientarea is added to the update region."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Specifies the redraw flags. This parameter can be a combination of flags that invalidate or validate a window, control repainting, and control which windows are affected:    $RDW_ERASE - Causes the window to receive a WM_ERASEBKGND message when the window is repainted    $RDW_FRAME - Causes any part of the nonclient area of the window that intersects the update region to receive a WM_NCPAINT message.    $RDW_INTERNALPAINT - Causes a WM_PAINT message to be posted to the window regardless of whether any portion of the window is invalid.    $RDW_INVALIDATE - Invalidates $tRECT or $hRegion. If both are 0, the entire window is invalidated.    $RDW_NOERASE - Suppresses any pending $WM_ERASEBKGND messages    $RDW_NOFRAME - Suppresses any pending $WM_NCPAINT messages    $RDW_NOINTERNALPAINT - Suppresses any pending internal $WM_PAINT messages    $RDW_VALIDATE - Validates $tRECT or $hRegion    $RDW_ERASENOW - Causes the affected windows to receive $WM_NCPAINT and $WM_ERASEBKGND messages, if necessary, before the function returns    $RDW_UPDATENOW - Causes the affected windows to receive $WM_NCPAINT, $WM_ERASEBKGND, and $WM_PAINT messages, if necessary, before the function returns.    $RDW_ALLCHILDREN - Includes child windows in the repainting operation    $RDW_NOCHILDREN - Excludes child windows from the repainting operation"
        }]
    },
    "_WinAPI_RegCloseKey": {
        "documentation": "Closes a handle to the specified registry key",
        "label": "_WinAPI_RegCloseKey ( $hKey [, $bFlush = False] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to the open key to be closed. The handle must have been opened by the _WinAPI_RegCreateKey()or _WinAPI_RegOpenKey() function."
        }, {
            "label": "$bFlush",
            "documentation": "**[optional]** Specifies whether writes all the attributes of the specified registry key into the registry, valid values:    True - Write changes to disk before close the handle.    False - Don't write (Default)."
        }]
    },
    "_WinAPI_RegConnectRegistry": {
        "documentation": "Establishes a connection to a predefined registry key on another computer",
        "label": "_WinAPI_RegConnectRegistry ( $sComputer, $hKey )",
        "params": [{
            "label": "$sComputer",
            "documentation": "The name of the remote computer. The string has the form as \"\\\\computername\". The caller musthave access to the remote computer or the function fails. If this parameter is 0, the localcomputer name is used."
        }, {
            "label": "$hKey",
            "documentation": "The predefined registry handle. This parameter can be one of the following predefined keyson the remote computer.$HKEY_LOCAL_MACHINE$HKEY_PERFORMANCE_DATA$HKEY_USERS"
        }]
    },
    "_WinAPI_RegCopyTree": {
        "documentation": "Recursively copies the subkeys and values of the source subkey to the destination key",
        "label": "_WinAPI_RegCopyTree ( $hSrcKey, $sSrcSubKey, $hDestKey )",
        "params": [{
            "label": "$hSrcKey",
            "documentation": "Handle to the source key or one of the predefined registry keys ($HKEY_*)."
        }, {
            "label": "$sSrcSubKey",
            "documentation": "The subkey whose subkeys and values are to be copied."
        }, {
            "label": "$hDestKey",
            "documentation": "Handle to the destination key."
        }]
    },
    "_WinAPI_RegCopyTreeEx": {
        "documentation": "Copies the specified registry key, along with its values and subkeys, to the specified destination key",
        "label": "_WinAPI_RegCopyTreeEx ( $hSrcKey, $sSrcSubKey, $hDestKey )",
        "params": [{
            "label": "$hSrcKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_READ access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function, or it can beone of the predefined registry keys ($HKEY_*)."
        }, {
            "label": "$sSrcSubKey",
            "documentation": "The name of the key. This key must be a subkey of the key identified by the $hSrcKey parameter."
        }, {
            "label": "$hDestKey",
            "documentation": "Handle to the destination key. The calling process must have $KEY_CREATE_SUB_KEY access to the key.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function, or it can beone of the predefined registry keys ($HKEY_*)."
        }]
    },
    "_WinAPI_RegCreateKey": {
        "documentation": "Creates the specified registry key",
        "label": "_WinAPI_RegCreateKey ( $hKey [, $sSubKey = '' [, $iAccess = $KEY_ALL_ACCESS [, $iOptions = 0 [, $tSecurity = 0]]]] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. If the key already exists, the function opens it. The calling processmust have $KEY_CREATE_SUB_KEY access to the key. This handle is returned by the _WinAPI_RegCreateKey()or _WinAPI_RegOpenKey() function, or it can be one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$sSubKey",
            "documentation": "**[optional]** The name of a subkey that this function opens or creates. The subkey specified must be a subkey ofthe key identified by the $hKey parameter; it can be up to 32 levels deep in the registry tree.If an empty string (Default), the return is a new handle to the key specified by $hKey."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** The mask that specifies the access rights for the key.This parameter can be one or more of the following values.$KEY_ALL_ACCESS$KEY_CREATE_LINK$KEY_CREATE_SUB_KEY$KEY_ENUMERATE_SUB_KEYS$KEY_EXECUTE$KEY_NOTIFY$KEY_QUERY_VALUE$KEY_READ$KEY_SET_VALUE$KEY_WOW64_32KEY$KEY_WOW64_64KEY$KEY_WRITE"
        }, {
            "label": "$iOptions",
            "documentation": "**[optional]** This parameter can be one of the following values.$REG_OPTION_BACKUP_RESTORE$REG_OPTION_CREATE_LINK$REG_OPTION_NON_VOLATILE (Default)$REG_OPTION_VOLATILE"
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited bychild processes. If this parameter is 0 (Default), the handle cannot be inherited."
        }]
    },
    "_WinAPI_RegDeleteEmptyKey": {
        "documentation": "Deletes an empty key",
        "label": "_WinAPI_RegDeleteEmptyKey ( $hKey [, $sSubKey = ''] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key, or any of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$sSubKey",
            "documentation": "**[optional]** The name of the key to delete."
        }]
    },
    "_WinAPI_RegDeleteKey": {
        "documentation": "Deletes a subkey and its values",
        "label": "_WinAPI_RegDeleteKey ( $hKey [, $sSubKey = ''] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The access rights of this key do not affect the delete operation.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function, or it can beone of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$sSubKey",
            "documentation": "**[optional]** The name of the key to be deleted. It must be a subkey of the key that $hKey identifies, but itcannot have subkeys."
        }]
    },
    "_WinAPI_RegDeleteKeyValue": {
        "documentation": "Removes the specified value from the specified registry key and subkey",
        "label": "_WinAPI_RegDeleteKeyValue ( $hKey, $sSubKey, $sValueName )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_SET_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function, or it can beone of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$sSubKey",
            "documentation": "The name of the registry key. This key must be a subkey of the key identified by the $hKey parameter."
        }, {
            "label": "$sValueName",
            "documentation": "The registry value to be removed from the key."
        }]
    },
    "_WinAPI_RegDeleteTree": {
        "documentation": "Deletes a subkey and all its descendants",
        "label": "_WinAPI_RegDeleteTree ( $hKey [, $sSubKey = ''] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key, or any of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_PERFORMANCE_DATA$HKEY_USERS"
        }, {
            "label": "$sSubKey",
            "documentation": "**[optional]** The name of the key to delete."
        }]
    },
    "_WinAPI_RegDeleteTreeEx": {
        "documentation": "Deletes the subkeys and values of the specified key recursively",
        "label": "_WinAPI_RegDeleteTreeEx ( $hKey [, $sSubKey = 0] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the following access rights:$DELETE, $KEY_ENUMERATE_SUB_KEYS, and $KEY_QUERY_VALUE. This handle is returned by the _WinAPI_RegCreateKey()or _WinAPI_RegOpenKey() function, or it can be one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$sSubKey",
            "documentation": "**[optional]** The name of the key to delete. This key must be a subkey of the key identified by the $hKey parameter.If this parameter is not specified (Default), the subkeys and values of $hKey are deleted."
        }]
    },
    "_WinAPI_RegDeleteValue": {
        "documentation": "Removes a named value from the specified registry key",
        "label": "_WinAPI_RegDeleteValue ( $hKey, $sValueName )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_SET_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function, or it can beone of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$sValueName",
            "documentation": "The registry value to be removed. If this parameter is empty string, the key's unnamed or defaultvalue is removed."
        }]
    },
    "_WinAPI_RegDisableReflectionKey": {
        "documentation": "Disables registry reflection for the specified key",
        "label": "_WinAPI_RegDisableReflectionKey ( $hKey )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey()function; it cannot specify a key on a remote computer. If the key is not on the reflection list,the function succeeds but has no effect."
        }]
    },
    "_WinAPI_RegDuplicateHKey": {
        "documentation": "Duplicates a registry key's handle",
        "label": "_WinAPI_RegDuplicateHKey ( $hKey )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key to be duplicated."
        }]
    },
    "_WinAPI_RegEnableReflectionKey": {
        "documentation": "Restores registry reflection for the specified disabled key",
        "label": "_WinAPI_RegEnableReflectionKey ( $hKey )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey()function; it cannot specify a key on a remote computer. If the key is not on the reflection list,the function succeeds but has no effect."
        }]
    },
    "_WinAPI_RegEnumKey": {
        "documentation": "Enumerates the subkeys of the specified open registry key",
        "label": "_WinAPI_RegEnumKey ( $hKey, $iIndex )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_ENUMERATE_SUB_KEYS accessright. This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function.It can also be one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_PERFORMANCE_DATA$HKEY_USERS"
        }, {
            "label": "$iIndex",
            "documentation": "The index of the subkey to retrieve. This parameter should be zero for the first call to the _WinAPI_RegEnumKey()function and then incremented for subsequent calls."
        }]
    },
    "_WinAPI_RegEnumValue": {
        "documentation": "Enumerates the values for the specified open registry key",
        "label": "_WinAPI_RegEnumValue ( $hKey, $iIndex )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_QUERY_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function. It can alsobe one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_PERFORMANCE_DATA$HKEY_USERS"
        }, {
            "label": "$iIndex",
            "documentation": "The index of the value to be retrieved. This parameter should be zero for the first call to the _WinAPI_RegEnumValue()function and then be incremented for subsequent calls."
        }]
    },
    "_WinAPI_RegFlushKey": {
        "documentation": "Writes all the attributes of the specified open registry key into the registry",
        "label": "_WinAPI_RegFlushKey ( $hKey )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_QUERY_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function. It can alsobe one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_PERFORMANCE_DATA$HKEY_USERS"
        }]
    },
    "_WinAPI_RegisterApplicationRestart": {
        "documentation": "Registers the active instance of an application for restart",
        "label": "_WinAPI_RegisterApplicationRestart ( [$iFlags = 0 [, $sCmd = '']] )",
        "params": [{
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specifies an events when application will not be restarted. This parameter can be0 or one or more of the following values.$RESTART_NO_CRASH$RESTART_NO_HANG$RESTART_NO_PATCH$RESTART_NO_REBOOT"
        }, {
            "label": "$sCmd",
            "documentation": "**[optional]** The command-line arguments for the application when it is restarted. The maximum size of the commandline that you can specify is 2048 characters. If this parameter is empty string (Default), the previouslyregistered command line is removed."
        }]
    },
    "_WinAPI_RegisterClass": {
        "documentation": "Registers a window class",
        "label": "_WinAPI_RegisterClass ( $tWNDCLASS )",
        "params": [{
            "label": "$tWNDCLASS",
            "documentation": "$tagWNDCLASS structure."
        }]
    },
    "_WinAPI_RegisterClassEx": {
        "documentation": "Registers a window class",
        "label": "_WinAPI_RegisterClassEx ( $tWNDCLASSEX )",
        "params": [{
            "label": "$tWNDCLASSEX",
            "documentation": "$tagWNDCLASSEX structure."
        }]
    },
    "_WinAPI_RegisterHotKey": {
        "documentation": "Defines a system-wide hot key",
        "label": "_WinAPI_RegisterHotKey ( $hWnd, $iID, $iModifiers, $vKey )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameteris 0, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed inthe message loop."
        }, {
            "label": "$iID",
            "documentation": "Specifies the identifier of the hot key. An application must specify an id value in the range0x0000 through 0xBFFF."
        }, {
            "label": "$iModifiers",
            "documentation": "Specifies keys that must be pressed in combination with the key specified by the $vKey parameterin order to generate the WM_HOTKEY message.The $iModifiers parameter can be a combination of the following values.    $MOD_ALT    $MOD_CONTROL    $MOD_SHIFT    $MOD_WINWindows 7 or later    $MOD_NOREPEAT"
        }, {
            "label": "$vKey",
            "documentation": "Specifies the virtual-key code of the hot key ($VK_*)."
        }]
    },
    "_WinAPI_RegisterPowerSettingNotification": {
        "documentation": "Registers the application to receive power setting notifications for the specific power setting event",
        "label": "_WinAPI_RegisterPowerSettingNotification ( $hWnd, $sGUID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that receives the change or notification messages."
        }, {
            "label": "$sGUID",
            "documentation": "The string that represents a GUID of the power setting for which notifications are to be sent.It may be one of the following values.$GUID_ACDC_POWER_SOURCE$GUID_BATTERY_PERCENTAGE_REMAINING$GUID_IDLE_BACKGROUND_TASK$GUID_MONITOR_POWER_ON$GUID_POWERSCHEME_PERSONALITY$GUID_SYSTEM_AWAYMODE"
        }]
    },
    "_WinAPI_RegisterRawInputDevices": {
        "documentation": "Registers the devices that supply the raw input data",
        "label": "_WinAPI_RegisterRawInputDevices ( $paDevice [, $iCount = 1] )",
        "params": [{
            "label": "$paDevice",
            "documentation": "A pointer to an array of $tagRAWINPUTDEVICE structures that represent the devices that supply the raw input."
        }, {
            "label": "$iCount",
            "documentation": "**[optional]** The number of entries in the array. Default is 1."
        }]
    },
    "_WinAPI_RegisterShellHookWindow": {
        "documentation": "Registers a specified Shell window to receive certain messages for events or notifications",
        "label": "_WinAPI_RegisterShellHookWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to register for Shell hook messages."
        }]
    },
    "_WinAPI_RegisterWindowMessage": {
        "documentation": "Defines a new window message that is guaranteed to be unique throughout the system",
        "label": "_WinAPI_RegisterWindowMessage ( $sMessage )",
        "params": [{
            "label": "$sMessage",
            "documentation": "String that specifies the message to be registered"
        }]
    },
    "_WinAPI_RegLoadMUIString": {
        "documentation": "Loads the specified string from the specified key and subkey",
        "label": "_WinAPI_RegLoadMUIString ( $hKey, $sValueName [, $sDirectory = ''] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_QUERY_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function. It can alsobe one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$sValueName",
            "documentation": "The name of the registry value."
        }, {
            "label": "$sDirectory",
            "documentation": "**[optional]** The directory path."
        }]
    },
    "_WinAPI_RegNotifyChangeKeyValue": {
        "documentation": "Notifies the caller about changes to the attributes or contents of a specified registry key",
        "label": "_WinAPI_RegNotifyChangeKeyValue ( $hKey, $iFilter [, $bSubtree = False [, $bAsync = False [, $hEvent = 0]]] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the KEY_NOTIFY access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function. It can alsobe one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$iFilter",
            "documentation": "Indicates the changes that should be reported. This parameter can be one or more of the following values.$REG_NOTIFY_CHANGE_NAME$REG_NOTIFY_CHANGE_ATTRIBUTES$REG_NOTIFY_CHANGE_LAST_SET$REG_NOTIFY_CHANGE_SECURITY"
        }, {
            "label": "$bSubtree",
            "documentation": "**[optional]** Specifies whether report changes in the subkeys of the specified key, valid values:    True - The function reports changes in the specified key and all its subkeys.    False - The function reports changes only in the specified key (Default)."
        }, {
            "label": "$bAsync",
            "documentation": "**[optional]** Specifies whether return immediately, valid values:    True  - The function returns immediately and reports changes by signaling the specified event.    False - The function does not return until a change has occurred (Default)."
        }, {
            "label": "$hEvent",
            "documentation": "**[optional]** Handle to an event. If the $fAsync parameter is True, the function returns immediately and changes arereported by signaling this event, otherwise this parameter is ignored (Default)."
        }]
    },
    "_WinAPI_RegOpenKey": {
        "documentation": "Opens the specified registry key",
        "label": "_WinAPI_RegOpenKey ( $hKey [, $sSubKey = '' [, $iAccess = 0x000F003F]] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey()function, or it can be one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$sSubKey",
            "documentation": "**[optional]** The name of the registry subkey to be opened (see remarks)."
        }, {
            "label": "$iAccess",
            "documentation": "**[optional]** A mask that specifies the desired access rights to the key. The function fails if the securitydescriptor of the key does not permit the requested access for the calling process. This parametercan be one or more of the $KEY_* constants. Default is $KEY_ALL_ACCESS."
        }]
    },
    "_WinAPI_RegQueryInfoKey": {
        "documentation": "Retrieves information about the specified registry key",
        "label": "_WinAPI_RegQueryInfoKey ( $hKey )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_QUERY_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function. It can alsobe one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_PERFORMANCE_DATA$HKEY_USERS"
        }]
    },
    "_WinAPI_RegQueryLastWriteTime": {
        "documentation": "Retrieves information about the last write time to the specified registry key",
        "label": "_WinAPI_RegQueryLastWriteTime ( $hKey )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_QUERY_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function. It can alsobe one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_PERFORMANCE_DATA$HKEY_USERS"
        }]
    },
    "_WinAPI_RegQueryMultipleValues": {
        "documentation": "Retrieves the type and data for a list of value names associated with an open registry key",
        "label": "_WinAPI_RegQueryMultipleValues ( $hKey, ByRef $aValent, ByRef $pBuffer [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function.It can also be one of the following predefined keys :    $HKEY_CLASSES_ROOT    $HKEY_CURRENT_CONFIG    $HKEY_CURRENT_USER    $HKEY_LOCAL_MACHINE    $HKEY_PERFORMANCE_DATA    $HKEY_USERS"
        }, {
            "label": "$aValent",
            "documentation": "The 2D array ([valuename1, *, *, *], ... [valuenameN, *, *, *]) that contains a value names to be retrieved.On input, 1, 2, and 3 array elements are not used, but array dimensions should be [n][4], otherwise the function fails.Also, this function fails if any of the specified values do not exist in the specified registry key."
        }, {
            "label": "$pBuffer",
            "documentation": "A pointer to a memory buffer that contains a registry data. Typically, you should not use this buffer directly (see remarks)."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start querying at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop querying at."
        }]
    },
    "_WinAPI_RegQueryReflectionKey": {
        "documentation": "Determines whether reflection has been disabled or enabled for the specified key",
        "label": "_WinAPI_RegQueryReflectionKey ( $hKey )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey()function; it cannot specify a key on a remote computer. If the key is not on the reflection list,the function succeeds but has no effect."
        }]
    },
    "_WinAPI_RegQueryValue": {
        "documentation": "Retrieves the type and data for the specified value name associated with an open registry key",
        "label": "_WinAPI_RegQueryValue ( $hKey, $sValueName, ByRef $tValueData )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function. It can alsobe one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_PERFORMANCE_DATA$HKEY_PERFORMANCE_NLSTEXT$HKEY_PERFORMANCE_TEXT$HKEY_USERS"
        }, {
            "label": "$sValueName",
            "documentation": "The name of the registry value. If $sValueName is empty string, the function retrieves the type anddata for the key's unnamed or default value, if any."
        }, {
            "label": "$tValueData",
            "documentation": "The structure (buffer) that receives the value data. This structure must be created before function call."
        }]
    },
    "_WinAPI_RegRestoreKey": {
        "documentation": "Reads the registry information in a specified file and copies it over the specified key",
        "label": "_WinAPI_RegRestoreKey ( $hKey, $sFilePath )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey()function. It can also be one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_USERS"
        }, {
            "label": "$sFilePath",
            "documentation": "The name of the file with the registry information. This file is typically created byusing the _WinAPI_RegSaveKey() function."
        }]
    },
    "_WinAPI_RegSaveKey": {
        "documentation": "Saves the specified key and all of its subkeys and values to a new file, in the standard format",
        "label": "_WinAPI_RegSaveKey ( $hKey, $sFilePath [, $bReplace = False [, $tSecurity = 0]] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key."
        }, {
            "label": "$sFilePath",
            "documentation": "The name of the file in which the specified key and subkeys are to be saved."
        }, {
            "label": "$bReplace",
            "documentation": "**[optional]** Specifies whether to replace the file if it already exists, valid values:    True - The function attempts to replace the existing file.    False - The function fails if the file already exists (Default)."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure that specifies a security descriptor for the new file. If thisparameter is 0 (Default), the file gets a default security descriptor."
        }]
    },
    "_WinAPI_RegSetValue": {
        "documentation": "Sets the data and type of a specified value under a registry key",
        "label": "_WinAPI_RegSetValue ( $hKey, $sValueName, $iType, $tValueData, $iBytes )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to an open registry key. The key must have been opened with the $KEY_SET_VALUE access right.This handle is returned by the _WinAPI_RegCreateKey() or _WinAPI_RegOpenKey() function. It can alsobe one of the following predefined keys.$HKEY_CLASSES_ROOT$HKEY_CURRENT_CONFIG$HKEY_CURRENT_USER$HKEY_LOCAL_MACHINE$HKEY_PERFORMANCE_DATA$HKEY_USERS"
        }, {
            "label": "$sValueName",
            "documentation": "The name of the value to be set. If a value with this name is not already present in the key,the function adds it to the key. If $sValueName is empty string, the function sets the type anddata for the key's unnamed or default value."
        }, {
            "label": "$iType",
            "documentation": "The type of data. This parameter can be one of the following values.$REG_BINARY$REG_DWORD$REG_DWORD_BIG_ENDIAN$REG_DWORD_LITTLE_ENDIAN$REG_EXPAND_SZ$REG_LINK$REG_MULTI_SZ$REG_NONE$REG_QWORD$REG_QWORD_LITTLE_ENDIAN$REG_SZ"
        }, {
            "label": "$tValueData",
            "documentation": "The structure (buffer) that contains the data to be stored. For string-based types, such as REG_SZ,the string must be null-terminated. With the REG_MULTI_SZ data type, the string must be terminatedwith two null characters. A backslash must be preceded by another backslash as an escape character.For example, specify \"C:\\\\mydir\\\\myfile\" to store the string \"C:\\mydir\\myfile\"."
        }, {
            "label": "$iBytes",
            "documentation": "The size of the data, in bytes. If the data has the REG_SZ, REG_MULTI_SZ or REG_EXPAND_SZ type,this size includes any terminating null character or characters unless the data was storedwithout them."
        }]
    },
    "_WinAPI_ReleaseCapture": {
        "documentation": "Releases the mouse capture from a window in the current thread and restores normal mouse input processing",
        "label": "_WinAPI_ReleaseCapture (  )",
        "params": []
    },
    "_WinAPI_ReleaseDC": {
        "documentation": "Releases a device context",
        "label": "_WinAPI_ReleaseDC ( $hWnd, $hDC )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }, {
            "label": "$hDC",
            "documentation": "Identifies the device context to be released"
        }]
    },
    "_WinAPI_ReleaseMutex": {
        "documentation": "Releases ownership of the specified mutex object",
        "label": "_WinAPI_ReleaseMutex ( $hMutex )",
        "params": [{
            "label": "$hMutex",
            "documentation": "Handle to the mutex object. The _WinAPI_CreateMutex() or _WinAPI_OpenMutex() function returns this handle."
        }]
    },
    "_WinAPI_ReleaseSemaphore": {
        "documentation": "Increases the count of the specified semaphore object by a specified amount",
        "label": "_WinAPI_ReleaseSemaphore ( $hSemaphore [, $iIncrease = 1] )",
        "params": [{
            "label": "$hSemaphore",
            "documentation": "Handle to the semaphore object. The _WinAPI_CreateSemaphore() or _WinAPI_OpenSemaphore() functionreturns this handle."
        }, {
            "label": "$iIncrease",
            "documentation": "**[optional]** The amount by which the semaphore object's current count is to be increased. The value must be greaterthan zero. If the specified amount would cause the semaphore's count to exceed the maximum count thatwas specified when the semaphore was created, the count is not changed and the function returns 0. Default is 1."
        }]
    },
    "_WinAPI_ReleaseStream": {
        "documentation": "Releases a stream object",
        "label": "_WinAPI_ReleaseStream ( $pStream )",
        "params": [{
            "label": "$pStream",
            "documentation": "Pointer to the stream object previously created by a call to the _WinAPI_CreateStreamOnHGlobal() function."
        }]
    },
    "_WinAPI_RemoveClipboardFormatListener": {
        "documentation": "Removes the given window from the system-maintained clipboard format listener list",
        "label": "_WinAPI_RemoveClipboardFormatListener ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be removed."
        }]
    },
    "_WinAPI_RemoveDirectory": {
        "documentation": "Deletes an existing empty directory",
        "label": "_WinAPI_RemoveDirectory ( $sDirPath )",
        "params": [{
            "label": "$sDirPath",
            "documentation": "The path of the empty directory to be removed."
        }]
    },
    "_WinAPI_RemoveFontMemResourceEx": {
        "documentation": "Removes the fonts added from a memory image",
        "label": "_WinAPI_RemoveFontMemResourceEx ( $hFont )",
        "params": [{
            "label": "$hFont",
            "documentation": "Handle to the font-resource. This handle is returned by the _WinAPI_AddFontMemResourceEx() function."
        }]
    },
    "_WinAPI_RemoveFontResourceEx": {
        "documentation": "Removes the fonts in the specified file from the system font table",
        "label": "_WinAPI_RemoveFontResourceEx ( $sFont [, $iFlag = 0 [, $bNotify = False]] )",
        "params": [{
            "label": "$sFont",
            "documentation": "String that names a font resource file. To remove a font whose information comes from several resourcefiles, they must be separated by a \"|\". For example, abcxxxxx.pfm|abcxxxxx.pfb."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The characteristics of the font to be removed from the system. In order for the font to be removed, the flagsused must be the same as when the font was added with the _WinAPI_AddFontResourceEx() function."
        }, {
            "label": "$bNotify",
            "documentation": "**[optional]** Specifies whether sends a WM_FONTCHANGE message, valid values:    True - Send the WM_FONTCHANGE message to all top-level windows after changing the pool of font resources.    False - Don't send (Default)."
        }]
    },
    "_WinAPI_RemoveWindowSubclass": {
        "documentation": "Removes a subclass callback from a window",
        "label": "_WinAPI_RemoveWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window being subclassed."
        }, {
            "label": "$pSubclassProc",
            "documentation": "A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback.(See MSDN for more information)"
        }, {
            "label": "$idSubClass",
            "documentation": "The subclass ID."
        }]
    },
    "_WinAPI_ReOpenFile": {
        "documentation": "Reopens the specified file system object with different access rights, sharing mode, and flags",
        "label": "_WinAPI_ReOpenFile ( $hFile, $iAccess, $iShare [, $iFlags = 0] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the object to be reopened. The object must have been created by the _WinAPI_CreateFileEx() function."
        }, {
            "label": "$iAccess",
            "documentation": "The required access to the object. If this parameter is 0, the application can query device attributeswithout accessing the device.$GENERIC_READ$GENERIC_WRITE(See MSDN for more information)"
        }, {
            "label": "$iShare",
            "documentation": "The sharing mode of the object. If this parameter is 0, the object cannot be shared and cannot beopened again until the handle is closed.$FILE_SHARE_READ$FILE_SHARE_WRITE$FILE_SHARE_DELETE"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The file or device attributes and flags. This parameter can be one or more of the following values.$FILE_FLAG_BACKUP_SEMANTICS$FILE_FLAG_DELETE_ON_CLOSE$FILE_FLAG_NO_BUFFERING$FILE_FLAG_OPEN_NO_RECALL$FILE_FLAG_OPEN_REPARSE_POINT$FILE_FLAG_OVERLAPPED$FILE_FLAG_POSIX_SEMANTICS$FILE_FLAG_RANDOM_ACCESS$FILE_FLAG_SEQUENTIAL_SCAN$FILE_FLAG_WRITE_THROUGH$SECURITY_ANONYMOUS$SECURITY_CONTEXT_TRACKING$SECURITY_DELEGATION$SECURITY_EFFECTIVE_ONLY$SECURITY_IDENTIFICATION$SECURITY_IMPERSONATION"
        }]
    },
    "_WinAPI_ReplaceFile": {
        "documentation": "Replaces one file with another file, and creates a backup copy of the original file",
        "label": "_WinAPI_ReplaceFile ( $sReplacedFile, $sReplacementFile [, $sBackupFile = '' [, $iFlags = 0]] )",
        "params": [{
            "label": "$sReplacedFile",
            "documentation": "The name of the file to be replaced."
        }, {
            "label": "$sReplacementFile",
            "documentation": "The name of the file that will replace the $sReplacedFile file."
        }, {
            "label": "$sBackupFile",
            "documentation": "**[optional]** The name of the file that will serve as a backup copy of the $sReplacedFile file. If thisparameter is empty string, no backup file is created."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The replacement options. This parameter can be one or more of the following values.$REPLACEFILE_WRITE_THROUGH$REPLACEFILE_IGNORE_MERGE_ERRORS$REPLACEFILE_IGNORE_ACL_ERRORS"
        }]
    },
    "_WinAPI_ReplaceTextDlg": {
        "documentation": "Creates a system-defined modeless dialog box that lets the user specify a string to search for and a replacement string",
        "label": "_WinAPI_ReplaceTextDlg ( $hOwner [, $sFindWhat = '' [, $sReplaceWith = '' [, $iFlags = 0 [, $pReplaceProc = 0 [, $lParam = 0]]]]] )",
        "params": [{
            "label": "$hOwner",
            "documentation": "A handle to the window that owns the dialog box.The window procedure of the specified window receives FINDMSGSTRING messages from the dialog box.This parameter can be any valid window handle, but it must not be 0."
        }, {
            "label": "$sFindWhat",
            "documentation": "**[optional]** The search string that is displayed when you initialize the dialog box."
        }, {
            "label": "$sReplaceWith",
            "documentation": "**[optional]** The replacement string that is displayed when you initialize the dialog box."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** A set of bit flags that used to initialize the dialog box.The dialog box sets these flags when it sends the FINDMSGSTRING registered message to indicate the user's input.This parameter can be one or more of the following values:    $FR_DIALOGTERM    $FR_DOWN    $FR_ENABLEHOOK    $FR_ENABLETEMPLATE    $FR_ENABLETEMPLATEHANDLE    $FR_FINDNEXT    $FR_HIDEUPDOWN    $FR_HIDEMATCHCASE    $FR_HIDEWHOLEWORD    $FR_MATCHCASE    $FR_NOMATCHCASE    $FR_NOUPDOWN    $FR_NOWHOLEWORD    $FR_REPLACE    $FR_REPLACEALL    $FR_SHOWHELP    $FR_WHOLEWORD"
        }, {
            "label": "$pReplaceProc",
            "documentation": "**[optional]** Pointer to an hook procedure that can process messages intended for the dialog box.This parameter is ignored unless the $FR_ENABLEHOOK flag is not set.(See MSDN for more information)"
        }, {
            "label": "$lParam",
            "documentation": "**[optional]** Application-defined data that the system passes to the hook procedure."
        }]
    },
    "_WinAPI_ResetEvent": {
        "documentation": "Sets the specified event object to the nonsignaled state",
        "label": "_WinAPI_ResetEvent ( $hEvent )",
        "params": [{
            "label": "$hEvent",
            "documentation": "Handle to the event object. The _WinAPI_CreateEvent() function returns this handle."
        }]
    },
    "_WinAPI_RestartDlg": {
        "documentation": "Displays a dialog box that prompts the user to restart Microsoft Windows",
        "label": "_WinAPI_RestartDlg ( [$sText = '' [, $iFlags = 2 [, $hParent = 0]]] )",
        "params": [{
            "label": "$sText",
            "documentation": "**[optional]** The text that displays in the dialog box which prompts the user."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify the type of shutdown.This parameter must include one of the following values.$EWX_LOGOFF$EWX_POWEROFF$EWX_REBOOT (Default)$EWX_SHUTDOWNThis parameter can optionally include the following values.$EWX_FORCE$EWX_FORCEIFHUNG"
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to the parent window."
        }]
    },
    "_WinAPI_RestoreDC": {
        "documentation": "Restores a device context (DC) to the specified state",
        "label": "_WinAPI_RestoreDC ( $hDC, $iID )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the DC."
        }, {
            "label": "$iID",
            "documentation": "The saved state to be restored. If this parameter is positive, $DC represents a specific instance of thestate to be restored. If this parameter is negative, $DC represents an instance relative to the currentstate. For example, (-1) restores the most recently saved state."
        }]
    },
    "_WinAPI_RGB": {
        "documentation": "Creates a RGB color value based on red, green, and blue components",
        "label": "_WinAPI_RGB ( $iRed, $iGreen, $iBlue )",
        "params": [{
            "label": "$iRed",
            "documentation": "The intensity of the red color."
        }, {
            "label": "$iGreen",
            "documentation": "The intensity of the green color."
        }, {
            "label": "$iBlue",
            "documentation": "The intensity of the blue color."
        }]
    },
    "_WinAPI_RotatePoints": {
        "documentation": "Rotates a points from the array by the specified angle",
        "label": "_WinAPI_RotatePoints ( ByRef $aPoint, $iXC, $iYC, $fAngle [, $iStart = 0 [, $iEnd = -1]] )",
        "params": [{
            "label": "$aPoint",
            "documentation": "The 2D array ([x1, y1, ...], [x2, y2, ...], ... [xN, yN, ...]). Every first two elements from thisarray specifies a point to be rotate. Other array elements (if any) do not change."
        }, {
            "label": "$iXC",
            "documentation": "The x-coordinates of the point on which there is a rotation, in logical units."
        }, {
            "label": "$iYC",
            "documentation": "The y-coordinates of the point on which there is a rotation, in logical units."
        }, {
            "label": "$fAngle",
            "documentation": "The angle to rotate, in degree."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start rotating at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop rotating at."
        }]
    },
    "_WinAPI_RoundRect": {
        "documentation": "Draws a rectangle with rounded corners",
        "label": "_WinAPI_RoundRect ( $hDC, $tRECT, $iWidth, $iHeight )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the logical coordinates of the rectangle."
        }, {
            "label": "$iWidth",
            "documentation": "The width, in logical coordinates, of the ellipse used to draw the rounded corners."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in logical coordinates, of the ellipse used to draw the rounded corners."
        }]
    },
    "_WinAPI_SaveDC": {
        "documentation": "Saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes to a context stack",
        "label": "_WinAPI_SaveDC ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the DC whose state is to be saved."
        }]
    },
    "_WinAPI_SaveFileDlg": {
        "documentation": "Creates a dialog box that lets the user specify the drive, directory, and name of a file to save",
        "label": "_WinAPI_SaveFileDlg ( [$sTitle = \"\" [, $sInitDir = \"\" [, $sFilters = \"\" [, $iDefaultFilter = 0 [, $sDefaultFilePath = \"\" [, $sDefaultExt = \"\" [, $iFlags = 0 [, $iFlagsEx = 0 [, $pOFNProc = 0 [, $pData = 0 [, $hParent = 0]]]]]]]]]]] )",
        "params": [{
            "label": "$sTitle",
            "documentation": "**[optional]** A string to be placed in the title bar of the dialog box.If this parameter is empty string (Default), the system uses the default title (that is, \"Save As\")."
        }, {
            "label": "$sInitDir",
            "documentation": "**[optional]** The initial directory."
        }, {
            "label": "$sFilters",
            "documentation": "**[optional]** The pairs of filter strings (for example, \"Text Files (*.txt)\").To specify multiple filter patterns for a single display string, use a semicolon to separate the patterns (for example, \"*.txt;*.doc;*.bak\").Do not include spaces in the pattern. To specify multiple groups of filters, use the \"|\" character as a delimiter (for example, \"Text Files (*.txt)|All Files (*.*)\").If this parameter is omitted or an empty string (Default), the dialog box does not display any filters"
        }, {
            "label": "$iDefaultFilter",
            "documentation": "**[optional]** The 1-based index of the currently selected filter to initialize the combo box control."
        }, {
            "label": "$sDefaultFilePath",
            "documentation": "**[optional]** The file name to initialize the edit control."
        }, {
            "label": "$sDefaultExt",
            "documentation": "**[optional]** The default extension that appends to the file name if the user fails to type an extension.This string can be any length, but only the first three characters are appended. The string should not contain a period (.).If this parameter is empty string (Default), no extension is appended."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** A set of bit flags you can use to initialize the dialog box.This parameter can be 0 or combination of the following values:    $OFN_ALLOWMULTISELECT    $OFN_CREATEPROMPT    $OFN_DONTADDTORECENT    $OFN_ENABLEHOOK    $OFN_ENABLEINCLUDENOTIFY    $OFN_ENABLESIZING    $OFN_EXPLORER    $OFN_FORCESHOWHIDDEN    $OFN_HIDEREADONLY    $OFN_LONGNAMES    $OFN_NOCHANGEDIR    $OFN_NODEREFERENCELINKS    $OFN_NOLONGNAMES    $OFN_NONETWORKBUTTON    $OFN_NOREADONLYRETURN    $OFN_NOTESTFILECREATE    $OFN_NOVALIDATE    $OFN_OVERWRITEPROMPT    $OFN_PATHMUSTEXIST    $OFN_READONLY    $OFN_SHAREAWARE    $OFN_SHOWHELP"
        }, {
            "label": "$iFlagsEx",
            "documentation": "**[optional]** A set of bit flags you can use to initialize the dialog box. It can be 0 or the following value:    $OFN_EX_NOPLACESBAR"
        }, {
            "label": "$pOFNProc",
            "documentation": "**[optional]** A pointer to a hook procedure. This parameter is ignored unless the $OFN_ENABLEHOOK flag is set."
        }, {
            "label": "$pData",
            "documentation": "**[optional]** Application-defined pointer to data that the system passes to the hook procedure."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** A handle to the parent window for the dialog box."
        }]
    },
    "_WinAPI_SaveHBITMAPToFile": {
        "documentation": "Saves a specified bitmap to the specified bitmap (.bmp) file",
        "label": "_WinAPI_SaveHBITMAPToFile ( $sFilePath, $hBitmap [, $iXPelsPerMeter = Default [, $iYPelsPerMeter = Default]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the .bmp file in which to save the bitmap."
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap to be save."
        }, {
            "label": "$iXPelsPerMeter",
            "documentation": "**[optional]** The horizontal resolution, in pixels-per-meter."
        }, {
            "label": "$iYPelsPerMeter",
            "documentation": "**[optional]** The vertical resolution, in pixels-per-meter."
        }]
    },
    "_WinAPI_SaveHICONToFile": {
        "documentation": "Saves a specified single or multiple icon (HICON) to the specified icon (.ico) file",
        "label": "_WinAPI_SaveHICONToFile ( $sFilePath, Const ByRef $vIcon [, $bCompress = 0 [, $iStart = 0 [, $iEnd = -1]]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the .ico file in which to save the icon."
        }, {
            "label": "$vIcon",
            "documentation": "Handle to the icon or array of the icon handles to be save."
        }, {
            "label": "$bCompress",
            "documentation": "**[optional]** Specifies whether to use PNG compression for the 32 bits-per-pixel icons if its size exceed orequal to 256x256 pixels (262144 bytes), valid values:True - The icon will be saved as a PNG image.False - The icon will be saved directly (Default)."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start saving at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop saving at."
        }]
    },
    "_WinAPI_ScaleWindowExt": {
        "documentation": "Modifies the window for a device context using the ratios formed by the specified multiplicands and divisors",
        "label": "_WinAPI_ScaleWindowExt ( $hDC, $iXNum, $iXDenom, $iYNum, $iYDenom )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iXNum",
            "documentation": "The amount by which to multiply the current horizontal extent."
        }, {
            "label": "$iXDenom",
            "documentation": "The amount by which to divide the current horizontal extent."
        }, {
            "label": "$iYNum",
            "documentation": "The amount by which to divide the current vertical extent."
        }, {
            "label": "$iYDenom",
            "documentation": "The amount by which to divide the current vertical extent."
        }]
    },
    "_WinAPI_ScreenToClient": {
        "documentation": "Converts screen coordinates of a specified point on the screen to client coordinates",
        "label": "_WinAPI_ScreenToClient ( $hWnd, ByRef $tPoint )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Identifies the window that be used for the conversion"
        }, {
            "label": "$tPoint",
            "documentation": "$tagPOINT structure that contains the screen coordinates to be converted"
        }]
    },
    "_WinAPI_SearchPath": {
        "documentation": "Searches for a specified file in a specified path",
        "label": "_WinAPI_SearchPath ( $sFilePath [, $sSearchPath = ''] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file for which to search."
        }, {
            "label": "$sSearchPath",
            "documentation": "**[optional]** The path to be searched for the file. If this parameter is omitted or an empty string (Default), the functionsearches for a matching file using a registry-dependent system search path (see below)."
        }]
    },
    "_WinAPI_SelectClipPath": {
        "documentation": "Selects the current path as a clipping region, combining the new region with any existing clipping region",
        "label": "_WinAPI_SelectClipPath ( $hDC [, $iMode = 5] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context of the path."
        }, {
            "label": "$iMode",
            "documentation": "**[optional]** The way to use the path. This parameter can be one of the following values.$RGN_AND$RGN_COPY (Default)$RGN_DIFF$RGN_OR$RGN_XOR"
        }]
    },
    "_WinAPI_SelectClipRgn": {
        "documentation": "Selects a region as the current clipping region for the specified device context",
        "label": "_WinAPI_SelectClipRgn ( $hDC, $hRgn )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$hRgn",
            "documentation": "Handle to the region to be selected. To remove a device-context's clipping region, set this parameter to 0."
        }]
    },
    "_WinAPI_SelectObject": {
        "documentation": "Selects an object into the specified device context",
        "label": "_WinAPI_SelectObject ( $hDC, $hGDIObj )",
        "params": [{
            "label": "$hDC",
            "documentation": "Identifies the device context"
        }, {
            "label": "$hGDIObj",
            "documentation": "Identifies the object to be selected"
        }]
    },
    "_WinAPI_SendMessageTimeout": {
        "documentation": "Sends the specified message to one of more windows",
        "label": "_WinAPI_SendMessageTimeout ( $hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iTimeout = 1000 [, $iFlags = 0]]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose window procedure will receive the message."
        }, {
            "label": "$iMsg",
            "documentation": "The message to be sent."
        }, {
            "label": "$wParam",
            "documentation": "**[optional]** The message-specific information."
        }, {
            "label": "$lParam",
            "documentation": "**[optional]** The message-specific information."
        }, {
            "label": "$iTimeout",
            "documentation": "**[optional]** The duration, in milliseconds, of the time-out period. If the message is a broadcast message, eachwindow can use the full time-out period. Default is 1000."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specifies how to send the message.This parameter can be one or more of the following values.$SMTO_BLOCK$SMTO_NORMAL$SMTO_ABORTIFHUNG$SMTO_NOTIMEOUTIFNOTHUNG$SMTO_ERRORONEXIT"
        }]
    },
    "_WinAPI_SetActiveWindow": {
        "documentation": "Activates the specified window",
        "label": "_WinAPI_SetActiveWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the top-level window to be activated."
        }]
    },
    "_WinAPI_SetArcDirection": {
        "documentation": "Sets the drawing arc direction",
        "label": "_WinAPI_SetArcDirection ( $hDC, $iDirection )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iDirection",
            "documentation": "The new arc direction. This parameter can be one of the following values.$AD_COUNTERCLOCKWISE$AD_CLOCKWISE"
        }]
    },
    "_WinAPI_SetBitmapBits": {
        "documentation": "Sets the bits of color data for a bitmap to the specified values",
        "label": "_WinAPI_SetBitmapBits ( $hBitmap, $iSize, $pBits )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap to be set. This must be a compatible bitmap (DDB)."
        }, {
            "label": "$iSize",
            "documentation": "The number of bytes pointed to by the $pBits parameter."
        }, {
            "label": "$pBits",
            "documentation": "A pointer to an array of bytes that contain color data for the specified bitmap."
        }]
    },
    "_WinAPI_SetBitmapDimensionEx": {
        "documentation": "Assigns preferred dimensions to a compatible bitmap",
        "label": "_WinAPI_SetBitmapDimensionEx ( $hBitmap, $iWidth, $iHeight )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap. This bitmap cannot be a DIB-section bitmap."
        }, {
            "label": "$iWidth",
            "documentation": "The width, in 0.1-millimeter units, of the bitmap."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in 0.1-millimeter units, of the bitmap."
        }]
    },
    "_WinAPI_SetBkColor": {
        "documentation": "Sets the current background color to the specified color value",
        "label": "_WinAPI_SetBkColor ( $hDC, $iColor )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context"
        }, {
            "label": "$iColor",
            "documentation": "Specifies the new background color"
        }]
    },
    "_WinAPI_SetBkMode": {
        "documentation": "Sets the background mix mode of the specified device context",
        "label": "_WinAPI_SetBkMode ( $hDC, $iBkMode )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to device context"
        }, {
            "label": "$iBkMode",
            "documentation": "Specifies the background mix mode. This parameter can be one of the following values.OPAQUE - Background is filled with the current background color before the text, hatched brush, or pen is drawn.TRANSPARENT - Background remains untouched."
        }]
    },
    "_WinAPI_SetBoundsRect": {
        "documentation": "Controls the accumulation of bounding rectangle information for the specified device context",
        "label": "_WinAPI_SetBoundsRect ( $hDC, $iFlags [, $tRECT = 0] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context for which to accumulate bounding rectangles."
        }, {
            "label": "$iFlags",
            "documentation": "The flags that specifies how the new rectangle will be combined with the accumulated rectangle.This parameter can be one of more of the following values.$DCB_ACCUMULATE$DCB_DISABLE$DCB_ENABLE$DCB_RESET"
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** $tagRECT structure used to set the bounding rectangle in logical coordinates."
        }]
    },
    "_WinAPI_SetBrushOrg": {
        "documentation": "Sets the brush origin that GDI assigns to the next brush an application selects into the specified device context",
        "label": "_WinAPI_SetBrushOrg ( $hDC, $iX, $iY )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in device units, of the new brush origin."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in device units, of the new brush origin."
        }]
    },
    "_WinAPI_SetCapture": {
        "documentation": "Sets the mouse capture to the specified window belonging to the current thread",
        "label": "_WinAPI_SetCapture ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window in the current thread that is to capture the mouse"
        }]
    },
    "_WinAPI_SetCaretBlinkTime": {
        "documentation": "Sets the caret blink time",
        "label": "_WinAPI_SetCaretBlinkTime ( $iDuration )",
        "params": [{
            "label": "$iDuration",
            "documentation": "The new blink time, in milliseconds. If this parameter is (-1), caret does not blink."
        }]
    },
    "_WinAPI_SetCaretPos": {
        "documentation": "Moves the caret to the specified coordinates",
        "label": "_WinAPI_SetCaretPos ( $iX, $iY )",
        "params": [{
            "label": "$iX",
            "documentation": "The new x-coordinate of the caret."
        }, {
            "label": "$iY",
            "documentation": "The new y-coordinate of the caret."
        }]
    },
    "_WinAPI_SetClassLongEx": {
        "documentation": "Replaces the specified value into the specified window belongs",
        "label": "_WinAPI_SetClassLongEx ( $hWnd, $iIndex, $iNewLong )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window."
        }, {
            "label": "$iIndex",
            "documentation": "The value to be replaced. This parameter can be one of the following values.$GCL_CBCLSEXTRA$GCL_CBWNDEXTRA$GCL_HBRBACKGROUND$GCL_HCURSOR$GCL_HICON$GCL_HICONSM$GCL_HMODULE$GCL_MENUNAME$GCL_STYLE$GCL_WNDPROC"
        }, {
            "label": "$iNewLong",
            "documentation": "The replacement value."
        }]
    },
    "_WinAPI_SetColorAdjustment": {
        "documentation": "Sets the color adjustment for a device context (DC)",
        "label": "_WinAPI_SetColorAdjustment ( $hDC, $tAdjustment )",
        "params": [{
            "label": "$hDC",
            "documentation": "A handle to the device context."
        }, {
            "label": "$tAdjustment",
            "documentation": "$tagCOLORADJUSTMENT structure containing the color adjustment values."
        }]
    },
    "_WinAPI_SetCompression": {
        "documentation": "Sets the compression state of a file or directory",
        "label": "_WinAPI_SetCompression ( $sFilePath, $iCompression )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the file or directory to be compressed."
        }, {
            "label": "$iCompression",
            "documentation": "The compression state. This parameter can be one of the following values.$COMPRESSION_FORMAT_NONE$COMPRESSION_FORMAT_DEFAULT$COMPRESSION_FORMAT_LZNT1"
        }]
    },
    "_WinAPI_SetCurrentDirectory": {
        "documentation": "Changes the current directory for the current process",
        "label": "_WinAPI_SetCurrentDirectory ( $sDir )",
        "params": [{
            "label": "$sDir",
            "documentation": "The path to the new current directory."
        }]
    },
    "_WinAPI_SetCurrentProcessExplicitAppUserModelID": {
        "documentation": "Specifies a unique application-defined Application User Model ID that identifies the current process to the taskbar",
        "label": "_WinAPI_SetCurrentProcessExplicitAppUserModelID ( $sAppID )",
        "params": [{
            "label": "$sAppID",
            "documentation": "The string that represents an Application User Model ID (AppUserModelID). This identifier allows anapplication to group its associated processes and windows under a single taskbar button. An applicationmust provide its AppUserModelID in the following form and can have no more than 128 characters andcannot contain spaces.CompanyName.ProductName.SubProduct.VersionInformation(See MSDN for more information)"
        }]
    },
    "_WinAPI_SetCursor": {
        "documentation": "Establishes the cursor shape",
        "label": "_WinAPI_SetCursor ( $hCursor )",
        "params": [{
            "label": "$hCursor",
            "documentation": "Identifies the cursor"
        }]
    },
    "_WinAPI_SetDCBrushColor": {
        "documentation": "Sets the current device context (DC) brush color to the specified color value",
        "label": "_WinAPI_SetDCBrushColor ( $hDC, $iRGB )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iRGB",
            "documentation": "The new brush color, in RGB."
        }]
    },
    "_WinAPI_SetDCPenColor": {
        "documentation": "Sets the current device context (DC) pen color to the specified color value",
        "label": "_WinAPI_SetDCPenColor ( $hDC, $iRGB )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iRGB",
            "documentation": "The new pen color, in RGB."
        }]
    },
    "_WinAPI_SetDefaultPrinter": {
        "documentation": "Sets the default printer for the current user on the local computer",
        "label": "_WinAPI_SetDefaultPrinter ( $sPrinter )",
        "params": [{
            "label": "$sPrinter",
            "documentation": "The default printer name. For a remote printer, the name format is \\\\server\\printername. For alocal printer, the name format is printername. If this parameter is \"\", this function does nothing if thereis already a default printer. However, if there is no default printer, this function sets the default printerto the first printer, if any, in an enumeration of printers installed on the local computer."
        }]
    },
    "_WinAPI_SetDeviceGammaRamp": {
        "documentation": "Sets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware",
        "label": "_WinAPI_SetDeviceGammaRamp ( $hDC, Const ByRef $aRamp )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context of the direct color display board in question."
        }, {
            "label": "$aRamp",
            "documentation": "The 2D array ([r1, g1, b1], [r2, g2, b2], ... [r256, g256, b256]) that contains the gamma ramp to be set.Each element in this array is an integer value with a range from 0 to 65535 which is a mapping betweenRGB values in the frame buffer and digital-analog-converter (DAC) values. The RGB values must be storedin the most significant bits of each WORD to increase DAC independence.(See MSDN for more information)"
        }]
    },
    "_WinAPI_SetDIBColorTable": {
        "documentation": "Sets RGB color table in the DIB section bitmap",
        "label": "_WinAPI_SetDIBColorTable ( $hBitmap, $tColorTable, $iColorCount )",
        "params": [{
            "label": "$hBitmap",
            "documentation": "A DIB section bitmap in which to set the color table."
        }, {
            "label": "$tColorTable",
            "documentation": "\"dword[n]\" structure that represents a DIB color table that to be set."
        }, {
            "label": "$iColorCount",
            "documentation": "The number of color table entries to set."
        }]
    },
    "_WinAPI_SetDIBits": {
        "documentation": "Sets the pixels in a compatible bitmap using the color data found in a DIB",
        "label": "_WinAPI_SetDIBits ( $hDC, $hBitmap, $iStartScan, $iScanLines, $pBits, $tBMI [, $iColorUse = 0] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context"
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the compatible bitmap (DDB) that is to be altered using the color data from the DIB"
        }, {
            "label": "$iStartScan",
            "documentation": "Specifies the starting scan line for the device-independent color data in the array pointed to by the $pBits parameter."
        }, {
            "label": "$iScanLines",
            "documentation": "Specifies the number of scan lines found in the array containing device-independent color data"
        }, {
            "label": "$pBits",
            "documentation": "Pointer to the DIB color data, stored as an array of bytes.The format of the bitmap values depends on the biBitCount member of the $tagBITMAPINFO structure pointed to by the $pBMI parameter."
        }, {
            "label": "$tBMI",
            "documentation": "A $tagBITMAPINFO structure or a pointer to it that contains information about the DIB"
        }, {
            "label": "$iColorUse",
            "documentation": "**[optional]** Specifies whether the iColors member of the $tagBITMAPINFO structure was provided and, if so,whether iColors contains explicit red, green, blue (RGB) values or palette indexes.The $iColorUse parameter must be one of the following values:    0 - The color table is provided and contains literal RGB values    1 - The color table consists of an array of 16-bit indexes into the logical palette of $hDC"
        }]
    },
    "_WinAPI_SetDIBitsToDevice": {
        "documentation": "Sets the pixels in the specified rectangle on the device",
        "label": "_WinAPI_SetDIBitsToDevice ( $hDC, $iXDest, $iYDest, $iWidth, $iHeight, $iXSrc, $iYSrc, $iStartScan, $iScanLines, $tBITMAPINFO, $iUsage, $pBits )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context."
        }, {
            "label": "$iXDest",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iYDest",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iWidth",
            "documentation": "The width, in logical units, of the image."
        }, {
            "label": "$iHeight",
            "documentation": "The height, in logical units, of the image."
        }, {
            "label": "$iXSrc",
            "documentation": "The x-coordinate, in logical units, of the lower-left corner of the image."
        }, {
            "label": "$iYSrc",
            "documentation": "The y-coordinate, in logical units, of the lower-left corner of the image."
        }, {
            "label": "$iStartScan",
            "documentation": "The starting scan line in the image."
        }, {
            "label": "$iScanLines",
            "documentation": "The number of DIB scan lines."
        }, {
            "label": "$tBITMAPINFO",
            "documentation": "$tagBITMAPINFO structure that contains information about the DIB."
        }, {
            "label": "$iUsage",
            "documentation": "The type of colors used. (either logical palette indexes or literal RGB values).The following values are defined:    $DIB_PAL_COLORS    $DIB_RGB_COLORS"
        }, {
            "label": "$pBits",
            "documentation": "A pointer to the color data stored as an array of bytes."
        }]
    },
    "_WinAPI_SetDllDirectory": {
        "documentation": "Adds a directory to the search path used to locate DLLs for the application",
        "label": "_WinAPI_SetDllDirectory ( [$sDirPath = Default] )",
        "params": [{
            "label": "$sDirPath",
            "documentation": "**[optional]** The directory to be added to the search path. If this parameter is an empty string (\"\"), the callremoves the current directory from the default DLL search order. If this parameter is not specified,the function restores the default search order (Default)."
        }]
    },
    "_WinAPI_SetEndOfFile": {
        "documentation": "Sets the physical file size for the specified file to the current position of the file pointer",
        "label": "_WinAPI_SetEndOfFile ( $hFile )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file to be extended or truncated.The file handle must have the $GENERIC_WRITE access right."
        }]
    },
    "_WinAPI_SetEnhMetaFileBits": {
        "documentation": "Creates a memory-based enhanced-format metafile from the specified data",
        "label": "_WinAPI_SetEnhMetaFileBits ( $pData, $iLength )",
        "params": [{
            "label": "$pData",
            "documentation": "A pointer to the buffer that contains the enhanced-metafile data. To obtain the metafile data, call the_WinAPI_GetEnhMetaFileBits() function."
        }, {
            "label": "$iLength",
            "documentation": "The size of the buffer, in bytes."
        }]
    },
    "_WinAPI_SetErrorMode": {
        "documentation": "Controls whether the system will handle the specified types of serious errors or whether the process will handle them",
        "label": "_WinAPI_SetErrorMode ( $iMode )",
        "params": [{
            "label": "$iMode",
            "documentation": "The process error mode. This parameter can be one or more of the following values.$SEM_FAILCRITICALERRORS$SEM_NOALIGNMENTFAULTEXCEPT$SEM_NOGPFAULTERRORBOX$SEM_NOOPENFILEERRORBOX"
        }]
    },
    "_WinAPI_SetEvent": {
        "documentation": "Sets the specified event object to the signaled state",
        "label": "_WinAPI_SetEvent ( $hEvent )",
        "params": [{
            "label": "$hEvent",
            "documentation": "Handle to the event object"
        }]
    },
    "_WinAPI_SetFileAttributes": {
        "documentation": "Sets the attributes for a file or directory",
        "label": "_WinAPI_SetFileAttributes ( $sFilePath, $iAttributes )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file or directory whose attributes are to be set."
        }, {
            "label": "$iAttributes",
            "documentation": "The file attributes to set for the file. This parameter can be one or more of the following values.$FILE_ATTRIBUTE_READONLY$FILE_ATTRIBUTE_HIDDEN$FILE_ATTRIBUTE_SYSTEM$FILE_ATTRIBUTE_ARCHIVE$FILE_ATTRIBUTE_NORMAL$FILE_ATTRIBUTE_TEMPORARY$FILE_ATTRIBUTE_OFFLINE$FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"
        }]
    },
    "_WinAPI_SetFileInformationByHandleEx": {
        "documentation": "Sets the file information for the specified file",
        "label": "_WinAPI_SetFileInformationByHandleEx ( $hFile, $tFILEINFO )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file for which to change information. This handle must have an appropriatepermissions for the requested change."
        }, {
            "label": "$tFILEINFO",
            "documentation": "$tagFILEINFO structure that contains the information to change."
        }]
    },
    "_WinAPI_SetFilePointer": {
        "documentation": "Moves the file pointer of the specified file",
        "label": "_WinAPI_SetFilePointer ( $hFile, $iPos [, $iMethod = 0] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file to be processed"
        }, {
            "label": "$iPos",
            "documentation": "Number of bytes to move the file pointer. Maximum value is 2^32A positive value moves the file pointer forward in the file, and a negative value moves the file pointer back."
        }, {
            "label": "$iMethod",
            "documentation": "**[optional]** The starting point for the file pointer move.Can be one of the predefined values:    $FILE_BEGIN (0) = (default) The starting point is zero (0) or the beginning of the file    $FILE_CURRENT (1) = The starting point is the current value of the file pointer.    $FILE_END (2) = The starting point is the current end-of-file position."
        }]
    },
    "_WinAPI_SetFilePointerEx": {
        "documentation": "Moves the file pointer of the specified file",
        "label": "_WinAPI_SetFilePointerEx ( $hFile, $iPos [, $iMethod = 0] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file."
        }, {
            "label": "$iPos",
            "documentation": "The number of bytes to move the file pointer. A positive value moves the pointer forward in thefile and a negative value moves the file pointer backward."
        }, {
            "label": "$iMethod",
            "documentation": "**[optional]** The starting point for the file pointer move. This parameter can be one of the following values.$FILE_BEGIN (Default)$FILE_CURRENT$FILE_END"
        }]
    },
    "_WinAPI_SetFileShortName": {
        "documentation": "Sets the short name for the specified file",
        "label": "_WinAPI_SetFileShortName ( $hFile, $sShortName )",
        "params": [{
            "label": "$hFile",
            "documentation": "A handle to the file. The file must be on an NTFS file system volume. Also, the file must beopened with either the $GENERIC_ALL access right or $GENERIC_WRITE|$DELETE, and with the$FILE_FLAG_BACKUP_SEMANTICS file attribute."
        }, {
            "label": "$sShortName",
            "documentation": "The valid short name for the file. If the specified short name already exists, the functionfails and the last error code is ERROR_ALREADY_EXISTS (183)."
        }]
    },
    "_WinAPI_SetFileValidData": {
        "documentation": "Sets the valid data length of the specified file",
        "label": "_WinAPI_SetFileValidData ( $hFile, $iLength )",
        "params": [{
            "label": "$hFile",
            "documentation": "A handle to the file. This file must have been opened with the $GENERIC_WRITE access right, and the$SE_MANAGE_VOLUME_NAME privilege enabled. The file cannot be a network file, or be compressed,sparse, or transacted."
        }, {
            "label": "$iLength",
            "documentation": "The new valid data length. This parameter must be a positive value that is greater than the currentvalid data length, but less than the current file size."
        }]
    },
    "_WinAPI_SetFocus": {
        "documentation": "Sets the keyboard focus to the specified window",
        "label": "_WinAPI_SetFocus ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Identifies the window that will receive the keyboard input. If this parameter is 0, keystrokesare ignored."
        }]
    },
    "_WinAPI_SetFont": {
        "documentation": "Sets a window font",
        "label": "_WinAPI_SetFont ( $hWnd, $hFont [, $bRedraw = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Window handle"
        }, {
            "label": "$hFont",
            "documentation": "Font handle"
        }, {
            "label": "$bRedraw",
            "documentation": "**[optional]** True to redraw the control"
        }]
    },
    "_WinAPI_SetForegroundWindow": {
        "documentation": "Puts the specified window into the foreground and activates its",
        "label": "_WinAPI_SetForegroundWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that should be activated and brought to the foreground."
        }]
    },
    "_WinAPI_SetFRBuffer": {
        "documentation": "Sets the size of the internal buffer that used the _WinAPI_FindTextDlg() and _WinAPI_ReplaceTextDlg() functions",
        "label": "_WinAPI_SetFRBuffer ( $iChars )",
        "params": [{
            "label": "$iChars",
            "documentation": "The size, in TCHARs, of the internal buffer. The buffer should be at least 80 characters long.The default buffer size is 16384 wide characters (32 KB)."
        }]
    },
    "_WinAPI_SetGraphicsMode": {
        "documentation": "Sets the graphics mode for the specified device context",
        "label": "_WinAPI_SetGraphicsMode ( $hDC, $iMode )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iMode",
            "documentation": "The graphics mode. This parameter can be one of the following values.$GM_COMPATIBLE$GM_ADVANCED"
        }]
    },
    "_WinAPI_SetHandleInformation": {
        "documentation": "Sets certain properties of an object handle",
        "label": "_WinAPI_SetHandleInformation ( $hObject, $iMask, $iFlags )",
        "params": [{
            "label": "$hObject",
            "documentation": "Handle to an object"
        }, {
            "label": "$iMask",
            "documentation": "Specifies the bit flags to be changed"
        }, {
            "label": "$iFlags",
            "documentation": "Specifies properties of the object handle"
        }]
    },
    "_WinAPI_SetInformationJobObject": {
        "documentation": "Sets limits for a job object",
        "label": "_WinAPI_SetInformationJobObject ( $hJob, $iJobObjectInfoClass, $tJobObjectInfo )",
        "params": [{
            "label": "$hJob",
            "documentation": "Handle to the job whose limits are being set. The handle must have the$JOB_OBJECT_SET_ATTRIBUTES access right."
        }, {
            "label": "$iJobObjectInfoClass",
            "documentation": "The information class for the limits to be set. This parameter specifies the typeof $tJobObjectInfo structure, valid values:2 - $tagJOBOBJECT_BASIC_LIMIT_INFORMATION4 - $tagJOBOBJECT_BASIC_UI_RESTRICTIONS5 - $tagJOBOBJECT_SECURITY_LIMIT_INFORMATION6 - $tagJOBOBJECT_END_OF_JOB_TIME_INFORMATION7 - $tagJOBOBJECT_ASSOCIATE_COMPLETION_PORT9 - $tagJOBOBJECT_EXTENDED_LIMIT_INFORMATION11 - $tagJOBOBJECT_GROUP_INFORMATION"
        }, {
            "label": "$tJobObjectInfo",
            "documentation": "$tagJOBOBJECT_* structure that sets the limit and job state information."
        }]
    },
    "_WinAPI_SetKeyboardLayout": {
        "documentation": "Sets an input locale identifier to the specified window",
        "label": "_WinAPI_SetKeyboardLayout ( $hWnd, $iLanguage [, $iFlags = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to set input locale identifier."
        }, {
            "label": "$iLanguage",
            "documentation": "The input locale identifier.0x0436 - Afrikaans0x041C - Albanian0x0401 - Arabic0x1401 - Arabic Algeria0x3C01 - Arabic Bahrain0x0C01 - Arabic Egypt0x0801 - Arabic Iraq0x2C01 - Arabic Jordan0x3401 - Arabic Kuwait0x3001 - Arabic Lebanon0x1001 - Arabic Libya0x1801 - Arabic Morocco0x2001 - Arabic Oman0x4001 - Arabic Qatar0x0401 - Arabic Saudi Arabia0x2801 - Arabic Syria0x1C01 - Arabic Tunisia0x3801 - Arabic U.A.E0x2401 - Arabic Yemen0x042B - Armenian0x044D - Assamese0x082C - Azeri Cyrillic0x042C - Azeri Latin0x042D - Basque0x0813 - Belgian Dutch0x080C - Belgian French0x0445 - Bengali0x0416 - Portuguese (Brazil)0x0402 - Bulgarian0x0455 - Burmese0x0423 - Byelorussian (Belarusian)0x0403 - Catalan0x0C04 - Chinese Hong Kong SAR0x1404 - Chinese Macau SAR0x0804 - Chinese Simplified0x1004 - Chinese Singapore0x0404 - Chinese Traditional0x041A - Croatian0x0405 - Czech0x0406 - Danish0x0413 - Dutch0x0C09 - English Australia0x2809 - English Belize0x1009 - English Canadian0x2409 - English Caribbean0x1813 - English Ireland0x2009 - English Jamaica0x1409 - English New Zealand0x3409 - English Philippines0x1C09 - English South Africa0x2C09 - English Trinidad0x0809 - English U.K.0x0409 - English U.S.0x3009 - English Zimbabwe0x0425 - Estonian0x0438 - Faeroese0x0429 - Farsi0x040B - Finnish0x040C - French0x2C0C - French Cameroon0x0C0C - French Canadian0x300C - French Cote d'Ivoire0x140C - French Luxembourg0x340C - French Mali0x180C - French Monaco0x200C - French Reunion0x280C - French Senegal0x1C0C - French West Indies0x240C - French Congo (DRC)0x0462 - Frisian Netherlands0x083C - Gaelic Ireland0x043C - Gaelic Scotland0x0456 - Galician0x0437 - Georgian0x0407 - German0x0C07 - German Austria0x1407 - German Liechtenstein0x1007 - German Luxembourg0x0408 - Greek0x0447 - Gujarati0x040D - Hebrew0x0439 - Hindi0x040E - Hungarian0x040F - Icelandic0x0421 - Indonesian0x0410 - Italian0x0411 - Japanese0x044B - Kannada0x0460 - Kashmiri0x043F - Kazakh0x0453 - Khmer0x0440 - Kirghiz0x0457 - Konkani0x0412 - Korean0x0454 - Lao0x0426 - Latvian0x0427 - Lithuanian0x042F - FYRO Macedonian0x044C - Malayalam0x083E - Malay Brunei Darussalam0x043E - Malaysian0x043A - Maltese0x0458 - Manipuri0x044E - Marathi0x0450 - Mongolian0x0461 - Nepali0x0414 - Norwegian Bokmol0x0814 - Norwegian Nynorsk0x0448 - Oriya0x0415 - Polish0x0816 - Portuguese0x0446 - Punjabi0x0417 - Rhaeto-Romanic0x0418 - Romanian0x0818 - Romanian Moldova0x0419 - Russian0x0819 - Russian Moldova0x043B - Sami Lappish0x044F - Sanskrit0x0C1A - Serbian Cyrillic0x081A - Serbian Latin0x0430 - Sesotho0x0459 - Sindhi0x041B - Slovak0x0424 - Slovenian0x042E - Sorbian0x040A - Spanish (Traditional)0x2C0A - Spanish Argentina0x400A - Spanish Bolivia0x340A - Spanish Chile0x240A - Spanish Colombia0x140A - Spanish Costa Rica0x1C0A - Spanish Dominican Republic0x300A - Spanish Ecuador0x440A - Spanish El Salvador0x100A - Spanish Guatemala0x480A - Spanish Honduras0x4C0A - Spanish Nicaragua0x180A - Spanish Panama0x3C0A - Spanish Paraguay0x280A - Spanish Peru0x500A - Spanish Puerto Rico0x0C0A - Spanish Spain (Modern Sort)0x380A - Spanish Uruguay0x200A - Spanish Venezuela0x0430 - Sutu0x0441 - Swahili0x041D - Swedish0x081D - Swedish Finland0x100C - Swiss French0x0807 - Swiss German0x0810 - Swiss Italian0x0428 - Tajik0x0449 - Tamil0x0444 - Tatar0x044A - Telugu0x041E - Thai0x0451 - Tibetan0x0431 - Tsonga0x0432 - Tswana0x041F - Turkish0x0442 - Turkmen0x0422 - Ukrainian0x0420 - Urdu0x0843 - Uzbek Cyrillic0x0443 - Uzbek Latin0x0433 - Venda0x042A - Vietnamese0x0452 - Welsh0x0434 - Xhosa0x0435 - Zulu"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The new input locale. This parameter can be one or more of the following values.$INPUTLANGCHANGE_BACKWARD$INPUTLANGCHANGE_FORWARD$INPUTLANGCHANGE_SYSCHARSET"
        }]
    },
    "_WinAPI_SetKeyboardState": {
        "documentation": "Copies a 256-byte array of keyboard key states into the calling process's keyboard input-state table",
        "label": "_WinAPI_SetKeyboardState ( $tState )",
        "params": [{
            "label": "$tState",
            "documentation": "\"byte[256]\" structure that contains keyboard key states."
        }]
    },
    "_WinAPI_SetLastError": {
        "documentation": "Sets the last-error code for the calling thread",
        "label": "_WinAPI_SetLastError ( $iErrorCode )",
        "params": [{
            "label": "$iErrorCode",
            "documentation": "The last error code for the thread"
        }]
    },
    "_WinAPI_SetLayeredWindowAttributes": {
        "documentation": "Sets Layered Window Attributes",
        "label": "_WinAPI_SetLayeredWindowAttributes ( $hWnd, $iTransColor [, $iTransGUI = 255 [, $iFlags = 0x03 [, $bColorRef = False]]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of GUI to work on"
        }, {
            "label": "$iTransColor",
            "documentation": "Transparent color"
        }, {
            "label": "$iTransGUI",
            "documentation": "**[optional]** Set Transparancy of GUI"
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** Flags."
        }, {
            "label": "$bColorRef",
            "documentation": "**[optional]** If True, $iTransColor is a COLORREF( 0x00bbggrr ), else an RGB-Color"
        }]
    },
    "_WinAPI_SetLocaleInfo": {
        "documentation": "Sets an item of information in the user override portion of the current locale",
        "label": "_WinAPI_SetLocaleInfo ( $iLCID, $iType, $sData )",
        "params": [{
            "label": "$iLCID",
            "documentation": "The locale identifier (LCID) that specifies the locale or one of the following predefined values.$LOCALE_INVARIANT$LOCALE_SYSTEM_DEFAULT$LOCALE_USER_DEFAULTWindows Vista or later$LOCALE_CUSTOM_DEFAULT$LOCALE_CUSTOM_UI_DEFAULT$LOCALE_CUSTOM_UNSPECIFIED"
        }, {
            "label": "$iType",
            "documentation": "Type of locale information to set. This parameter can be one of the locale information constants ($LOCALE_*)."
        }, {
            "label": "$sData",
            "documentation": "The string containing the locale information to set. The information must be in the format specific tothe specified constant."
        }]
    },
    "_WinAPI_SetMapMode": {
        "documentation": "Sets the mapping mode of the specified device context",
        "label": "_WinAPI_SetMapMode ( $hDC, $iMode )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iMode",
            "documentation": "The new mapping mode. This parameter can be one of the following values.$MM_ANISOTROPIC$MM_HIENGLISH$MM_HIMETRIC$MM_ISOTROPIC$MM_LOENGLISH$MM_LOMETRIC$MM_TEXT$MM_TWIPS"
        }]
    },
    "_WinAPI_SetMessageExtraInfo": {
        "documentation": "Sets the extra message information for the current thread",
        "label": "_WinAPI_SetMessageExtraInfo ( $lParam )",
        "params": [{
            "label": "$lParam",
            "documentation": "The value of lParam type to be associated with the current thread."
        }]
    },
    "_WinAPI_SetParent": {
        "documentation": "Changes the parent window of the specified child window",
        "label": "_WinAPI_SetParent ( $hWndChild, $hWndParent )",
        "params": [{
            "label": "$hWndChild",
            "documentation": "Window handle of child window"
        }, {
            "label": "$hWndParent",
            "documentation": "Handle to the new parent window. If 0, the desktop window becomes the new parent window."
        }]
    },
    "_WinAPI_SetPixel": {
        "documentation": "Sets the pixel at the specified coordinates to the specified color",
        "label": "_WinAPI_SetPixel ( $hDC, $iX, $iY, $iRGB )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in logical units, of the point to be set."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical units, of the point to be set."
        }, {
            "label": "$iRGB",
            "documentation": "The color to be used to paint the point."
        }]
    },
    "_WinAPI_SetPolyFillMode": {
        "documentation": "Sets the polygon fill mode for functions that fill polygons",
        "label": "_WinAPI_SetPolyFillMode ( $hDC [, $iMode = 1] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iMode",
            "documentation": "**[optional]** The new fill mode. This parameter can be one of the following values.$ALTERNATE (Default)$WINDING"
        }]
    },
    "_WinAPI_SetPriorityClass": {
        "documentation": "Sets the priority class for the specified process",
        "label": "_WinAPI_SetPriorityClass ( $iPriority [, $iPID = 0] )",
        "params": [{
            "label": "$iPriority",
            "documentation": "The priority class for the process. This parameter can be one of the following values.$ABOVE_NORMAL_PRIORITY_CLASS$BELOW_NORMAL_PRIORITY_CLASS$HIGH_PRIORITY_CLASS$IDLE_PRIORITY_CLASS$NORMAL_PRIORITY_CLASS$REALTIME_PRIORITY_CLASSWindows Vista or later$PROCESS_MODE_BACKGROUND_BEGIN$PROCESS_MODE_BACKGROUND_END"
        }, {
            "label": "$iPID",
            "documentation": "**[optional]** The PID of the process. Default (0) is the current process."
        }]
    },
    "_WinAPI_SetProcessAffinityMask": {
        "documentation": "Sets a processor affinity mask for the threads of a specified process",
        "label": "_WinAPI_SetProcessAffinityMask ( $hProcess, $iMask )",
        "params": [{
            "label": "$hProcess",
            "documentation": "A handle to the process whose affinity mask the function sets"
        }, {
            "label": "$iMask",
            "documentation": "Affinity mask"
        }]
    },
    "_WinAPI_SetProcessShutdownParameters": {
        "documentation": "Sets a shutdown order for a process relative to the other processes in the system",
        "label": "_WinAPI_SetProcessShutdownParameters ( $iLevel [, $bDialog = False] )",
        "params": [{
            "label": "$iLevel",
            "documentation": "The shutdown priority. The system shuts down processes from high $iLevel values to low. The highestand lowest shutdown priorities are reserved for system components.This parameter must be in the following range of values.0x0000-0x00FF - System reserved last shutdown range.0x0100-0x01FF - Application reserved last shutdown range.0x0200-0x02FF - Application reserved \"in between\" shutdown range.0x0300-0x03FF - Application reserved first shutdown range.0x0400-0x04FF - System reserved first shutdown range.All processes start at shutdown level 0x0280."
        }, {
            "label": "$bDialog",
            "documentation": "**[optional]** Specifies whether display a retry dialog box for the user, valid values:    True - Display a retry dialog box if process takes longer than the specified timeout to shutdown.    False - Directly terminates the process (Default)."
        }]
    },
    "_WinAPI_SetProcessWindowStation": {
        "documentation": "Assigns the specified window station to the calling process",
        "label": "_WinAPI_SetProcessWindowStation ( $hStation )",
        "params": [{
            "label": "$hStation",
            "documentation": "Handle to the window station. This window station must be associated with the current session."
        }]
    },
    "_WinAPI_SetRectRgn": {
        "documentation": "Converts a region into a rectangular region with the specified coordinates",
        "label": "_WinAPI_SetRectRgn ( $hRgn, $tRECT )",
        "params": [{
            "label": "$hRgn",
            "documentation": "Handle to the region."
        }, {
            "label": "$tRECT",
            "documentation": "$tagRECT structure that contains the coordinates of the rectangular region in logical units."
        }]
    },
    "_WinAPI_SetROP2": {
        "documentation": "Retrieves the foreground mix mode of the specified device context",
        "label": "_WinAPI_SetROP2 ( $hDC, $iMode )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iMode",
            "documentation": "The mix mode. This parameter can be one of the following values.$R2_BLACK$R2_COPYPEN$R2_LAST$R2_MASKNOTPEN$R2_MASKPEN$R2_MASKPENNOT$R2_MERGENOTPEN$R2_MERGEPEN$R2_MERGEPENNOT$R2_NOP$R2_NOT$R2_NOTCOPYPEN$R2_NOTMASKPEN$R2_NOTMERGEPEN$R2_NOTXORPEN$R2_WHITE$R2_XORPEN"
        }]
    },
    "_WinAPI_SetSearchPathMode": {
        "documentation": "Sets the per-process mode that the _WinAPI_SearchPath() function uses when locating files",
        "label": "_WinAPI_SetSearchPathMode ( $iFlags )",
        "params": [{
            "label": "$iFlags",
            "documentation": "The search mode to use. This parameter can be one of the following values.    $BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE    $BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODEOptionaly, $BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE can be combined with the following flag to make thismode permanent for the current process.    $BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE cannot be combined with this flag.    $BASE_SEARCH_PATH_PERMANENT"
        }]
    },
    "_WinAPI_SetStretchBltMode": {
        "documentation": "Sets the bitmap stretching mode in the specified device context",
        "label": "_WinAPI_SetStretchBltMode ( $hDC, $iMode )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iMode",
            "documentation": "The stretching mode. This parameter can be one of the following values.$BLACKONWHITE$COLORONCOLOR$HALFTONE$WHITEONBLACK$STRETCH_ANDSCANS$STRETCH_DELETESCANS$STRETCH_HALFTONE$STRETCH_ORSCANS"
        }]
    },
    "_WinAPI_SetSysColors": {
        "documentation": "Obtains information about the display devices in a system",
        "label": "_WinAPI_SetSysColors ( $vElements, $vColors )",
        "params": [{
            "label": "$vElements",
            "documentation": "Single element or Array of elements"
        }, {
            "label": "$vColors",
            "documentation": "Single Color or Array of colors"
        }]
    },
    "_WinAPI_SetSystemCursor": {
        "documentation": "Enables an application to customize the system cursors",
        "label": "_WinAPI_SetSystemCursor ( $hCursor, $iID [, $bCopy = False] )",
        "params": [{
            "label": "$hCursor",
            "documentation": "Handle to a cursor."
        }, {
            "label": "$iID",
            "documentation": "This parameter specifies the system cursor to replace with the contents of $hCursor,and can be one of the following values.$OCR_NORMAL$OCR_IBEAM$OCR_WAIT$OCR_CROSS$OCR_UP$OCR_SIZE$OCR_ICON$OCR_SIZENWSE$OCR_SIZENESW$OCR_SIZEWE$OCR_SIZENS$OCR_SIZEALL$OCR_ICOCUR$OCR_NO$OCR_HAND$OCR_APPSTARTING$OCR_HELP"
        }, {
            "label": "$bCopy",
            "documentation": "**[optional]** Specifies whether the cursor should be duplicated, valid values:    True - The cursor is duplicated.    False - The cursor is not duplicated (Default)."
        }]
    },
    "_WinAPI_SetTextAlign": {
        "documentation": "Sets the text-alignment flags for the specified device context",
        "label": "_WinAPI_SetTextAlign ( $hDC [, $iMode = 0] )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iMode",
            "documentation": "**[optional]** The text alignment by using a mask of the values in the following list. Only one flag can be chosenfrom those that affect horizontal and vertical alignment. In addition, only one of the two flags thatalter the current position can be chosen.$TA_BASELINE$TA_BOTTOM$TA_TOP (Default)$TA_CENTER$TA_LEFT (Default)$TA_RIGHT$TA_NOUPDATECP (Default)$TA_RTLREADING$TA_UPDATECPWhen the current font has a vertical default base line, as with Kanji, the following values must beused instead of $TA_BASELINE and $TA_CENTER.$VTA_BASELINE$VTA_CENTERThe default values are $TA_LEFT, $TA_TOP, and $TA_NOUPDATECP."
        }]
    },
    "_WinAPI_SetTextCharacterExtra": {
        "documentation": "Sets the intercharacter spacing for the specified device context",
        "label": "_WinAPI_SetTextCharacterExtra ( $hDC, $iCharExtra )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iCharExtra",
            "documentation": "The amount of extra space, in logical units, to be added to each character."
        }]
    },
    "_WinAPI_SetTextColor": {
        "documentation": "Sets the current text color to the specified color value",
        "label": "_WinAPI_SetTextColor ( $hDC, $iColor )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context"
        }, {
            "label": "$iColor",
            "documentation": "Specifies the new text color"
        }]
    },
    "_WinAPI_SetTextJustification": {
        "documentation": "Specifies the amount of space the system should add to the break characters in a string of text",
        "label": "_WinAPI_SetTextJustification ( $hDC, $iBreakExtra, $iBreakCount )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iBreakExtra",
            "documentation": "The total extra space, in logical units, to be added to the line of text."
        }, {
            "label": "$iBreakCount",
            "documentation": "The number of break characters in the line."
        }]
    },
    "_WinAPI_SetThreadDesktop": {
        "documentation": "Assigns the specified desktop to the calling thread",
        "label": "_WinAPI_SetThreadDesktop ( $hDesktop )",
        "params": [{
            "label": "$hDesktop",
            "documentation": "Handle to the desktop to be assigned to the calling thread. This desktop must be associated with thecurrent window station for the process."
        }]
    },
    "_WinAPI_SetThreadErrorMode": {
        "documentation": "Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle them",
        "label": "_WinAPI_SetThreadErrorMode ( $iMode )",
        "params": [{
            "label": "$iMode",
            "documentation": "The thread error mode. This parameter can be one or more of the following values.    $SEM_FAILCRITICALERRORS    $SEM_NOGPFAULTERRORBOX    $SEM_NOOPENFILEERRORBOX"
        }]
    },
    "_WinAPI_SetThreadExecutionState": {
        "documentation": "Prevents the system from entering sleep or turning off the display while the current application is running",
        "label": "_WinAPI_SetThreadExecutionState ( $iFlags )",
        "params": [{
            "label": "$iFlags",
            "documentation": "The thread's execution requirements. This parameter can be one or more of the following values.$ES_AWAYMODE_REQUIRED$ES_CONTINUOUS$ES_DISPLAY_REQUIRED$ES_SYSTEM_REQUIRED$ES_USER_PRESENT"
        }]
    },
    "_WinAPI_SetThreadLocale": {
        "documentation": "Sets the current locale of the calling thread",
        "label": "_WinAPI_SetThreadLocale ( $iLCID )",
        "params": [{
            "label": "$iLCID",
            "documentation": "The locale identifier (LCID) that specifies the locale or one of the following predefined values.$LOCALE_INVARIANT$LOCALE_SYSTEM_DEFAULT$LOCALE_USER_DEFAULTWindows Vista or later$LOCALE_CUSTOM_DEFAULT$LOCALE_CUSTOM_UI_DEFAULT$LOCALE_CUSTOM_UNSPECIFIED"
        }]
    },
    "_WinAPI_SetThreadUILanguage": {
        "documentation": "Sets the user interface language for the current thread",
        "label": "_WinAPI_SetThreadUILanguage ( $iLanguage )",
        "params": [{
            "label": "$iLanguage",
            "documentation": "The language identifier for the user interface language."
        }]
    },
    "_WinAPI_SetTimer": {
        "documentation": "Creates a timer with the specified time-out value",
        "label": "_WinAPI_SetTimer ( $hWnd, $iTimerID, $iElapse, $pTimerFunc )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to be associated with the timer. This window must be owned by the callingprocess. If a 0 value for $hWnd is passed in along with an $iTimerID of an existing timer, thattimer will be replaced in the same way that an existing non-zero $hWnd timer will be."
        }, {
            "label": "$iTimerID",
            "documentation": "The timer identifier. If the $hWnd parameter is 0, and the $iTimerID does not match an existingtimer then it is ignored and a new timer ID is generated. If the $hWnd parameter is not 0 andthe window specified by $hWnd already has a timer with the value $iTimerID, then the existingtimer is replaced by the new timer. When _WinAPI_SetTimer() replaces a timer, the timer is reset.Therefore, a message will be sent after the current time-out value elapses, but the previouslyset time-out value is ignored. If the call is not intended to replace an existing timer,$iTimerID should be 0 if the $hWnd is 0."
        }, {
            "label": "$iElapse",
            "documentation": "The time-out value, in milliseconds."
        }, {
            "label": "$pTimerFunc",
            "documentation": "The address of a callback function to be notified when the time-out value elapses. If thisparameter is 0, the system posts a WM_TIMER message to the application queue.(See MSDN for more information)"
        }]
    },
    "_WinAPI_SetUDFColorMode": {
        "documentation": "Sets the color mode for the WinAPIEx library",
        "label": "_WinAPI_SetUDFColorMode ( $iMode )",
        "params": [{
            "label": "$iMode",
            "documentation": "The color mode. This parameter can be one of the following values.$UDF_BGR$UDF_RGB"
        }]
    },
    "_WinAPI_SetUserGeoID": {
        "documentation": "Sets the geographical location identifier for the user",
        "label": "_WinAPI_SetUserGeoID ( $iGEOID )",
        "params": [{
            "label": "$iGEOID",
            "documentation": "The identifier for the geographical location of the user (GEOID)."
        }]
    },
    "_WinAPI_SetUserObjectInformation": {
        "documentation": "Sets information about the specified window station or desktop object",
        "label": "_WinAPI_SetUserObjectInformation ( $hObject, $iIndex, $tData )",
        "params": [{
            "label": "$hObject",
            "documentation": "Handle to the window station or desktop object."
        }, {
            "label": "$iIndex",
            "documentation": "The object information to be set. This parameter can be one of the following values.$UOI_FLAGS"
        }, {
            "label": "$tData",
            "documentation": "The data of the object information. The data type depends on the information type. For more information,see _WinAPI_GetUserObjectInformation() function."
        }]
    },
    "_WinAPI_SetVolumeMountPoint": {
        "documentation": "Associates a volume with a drive letter or a directory on another volume",
        "label": "_WinAPI_SetVolumeMountPoint ( $sFilePath, $sGUID )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The user-mode path to be associated with the volume. This may be a drive letter (for example, X:\\)or a directory on another volume (for example, Y:\\MountX)."
        }, {
            "label": "$sGUID",
            "documentation": "The volume GUID path for the volume. This string must be of the form \"\\\\?\\Volume{GUID}\\\" whereGUID is a GUID that identifies the volume. The \\\\?\\ turns off path parsing and is ignored as partof the path."
        }]
    },
    "_WinAPI_SetWindowDisplayAffinity": {
        "documentation": "Stores the display affinity setting in kernel mode on the specified window",
        "label": "_WinAPI_SetWindowDisplayAffinity ( $hWnd, $iAffinity )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window."
        }, {
            "label": "$iAffinity",
            "documentation": "The display affinity setting. This setting specifies where the window's contents are can be displayed.Set this value to $WDA_MONITOR to display the window's contents only on a monitor.Set this value to $WDA_NONE to remove the monitor-only affinity."
        }]
    },
    "_WinAPI_SetWindowExt": {
        "documentation": "Sets the horizontal and vertical extents of the window for a device context by using the specified values",
        "label": "_WinAPI_SetWindowExt ( $hDC, $iXExtent, $iYExtent )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iXExtent",
            "documentation": "The window's horizontal extent in logical units."
        }, {
            "label": "$iYExtent",
            "documentation": "The window's vertical extent in logical units."
        }]
    },
    "_WinAPI_SetWindowLong": {
        "documentation": "Sets information about the specified window",
        "label": "_WinAPI_SetWindowLong ( $hWnd, $iIndex, $iValue )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window"
        }, {
            "label": "$iIndex",
            "documentation": "Specifies the 0-based offset to the value to be set.Valid values are in the range zero through the number of bytes of extra window memory, minus four;for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer.To retrieve any other value specify one of the following values:    $GWL_EXSTYLE - Sets the extended window styles    $GWL_STYLE - Sets the window styles    $GWL_WNDPROC - Sets the address of the window procedure    $GWL_HINSTANCE - Sets the handle of the application instance    $GWL_HWNDPARENT - Sets the handle of the parent window, if any    $GWL_ID - Sets the identifier of the window    $GWL_USERDATA - Sets the 32-bit value associated with the window"
        }, {
            "label": "$iValue",
            "documentation": "Specifies the replacement value"
        }]
    },
    "_WinAPI_SetWindowOrg": {
        "documentation": "Specifies which window point maps to the viewport origin (0,0)",
        "label": "_WinAPI_SetWindowOrg ( $hDC, $iX, $iY )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in logical units, of the new window origin."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical units, of the new window origin."
        }]
    },
    "_WinAPI_SetWindowPlacement": {
        "documentation": "Sets the placement of the window for Min, Max, and normal positions",
        "label": "_WinAPI_SetWindowPlacement ( $hWnd, $tWindowPlacement )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window"
        }, {
            "label": "$tWindowPlacement",
            "documentation": "A $tagWINDOWPLACEMENT structure or a pointer to it"
        }]
    },
    "_WinAPI_SetWindowPos": {
        "documentation": "Changes the size, position, and Z order of a child, pop-up, or top-level window",
        "label": "_WinAPI_SetWindowPos ( $hWnd, $hAfter, $iX, $iY, $iCX, $iCY, $iFlags )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }, {
            "label": "$hAfter",
            "documentation": "Identifies the window to precede the positioned window in the Z order. This parameter must be awindow handle or one of the following values:    $HWND_BOTTOM - Places the window at the bottom of the Z order    $HWND_NOTOPMOST - Places the window above all non-topmost windows    $HWND_TOP - Places the window at the top of the Z order    $HWND_TOPMOST - Places the window above all non-topmost windows"
        }, {
            "label": "$iX",
            "documentation": "Specifies the new position of the left side of the window"
        }, {
            "label": "$iY",
            "documentation": "Specifies the new position of the top of the window"
        }, {
            "label": "$iCX",
            "documentation": "Specifies the new width of the window, in pixels"
        }, {
            "label": "$iCY",
            "documentation": "Specifies the new height of the window, in pixels"
        }, {
            "label": "$iFlags",
            "documentation": "Specifies the window sizing and positioning flags:    $SWP_DRAWFRAME - Draws a frame around the window    $SWP_FRAMECHANGED - Sends a $WM_NCCALCSIZE message to the window, even if the window's size is not changed    $SWP_HIDEWINDOW - Hides the window    $SWP_NOACTIVATE - Does not activate the window    $SWP_NOCOPYBITS - Discards the entire contents of the client area    $SWP_NOMOVE - Retains the current position    $SWP_NOOWNERZORDER - Does not change the owner window's position in the Z order    $SWP_NOREDRAW - Does not redraw changes    $SWP_NOREPOSITION - Same as the $SWP_NOOWNERZORDER flag    $SWP_NOSENDCHANGING - Prevents the window from receiving $WM_WINDOWPOSCHANGING    $SWP_NOSIZE - Retains the current size    $SWP_NOZORDER - Retains the current Z order    $SWP_SHOWWINDOW - Displays the window"
        }]
    },
    "_WinAPI_SetWindowRgn": {
        "documentation": "Sets the window region of a window",
        "label": "_WinAPI_SetWindowRgn ( $hWnd, $hRgn [, $bRedraw = True] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose window region is to be set."
        }, {
            "label": "$hRgn",
            "documentation": "Handle to a region. The function sets the window region of the window to this region."
        }, {
            "label": "$bRedraw",
            "documentation": "**[optional]** Specifies whether the system redraws the window after setting the window region."
        }]
    },
    "_WinAPI_SetWindowsHookEx": {
        "documentation": "Installs an application-defined hook procedure into a hook chain",
        "label": "_WinAPI_SetWindowsHookEx ( $iHook, $pProc, $hDll [, $iThreadId = 0] )",
        "params": [{
            "label": "$iHook",
            "documentation": "Specifies the type of hook procedure to be installed. This parameter can be one of the following values:    $WH_CALLWNDPROC - Installs a hook procedure that monitors messages before the system sends them to the destination window procedure    $WH_CALLWNDPROCRET - Installs a hook procedure that monitors messages after they have been processed by the destination window procedure    $WH_CBT - Installs a hook procedure that receives notifications useful to a computer-based training (CBT) application    $WH_DEBUG - Installs a hook procedure useful for debugging other hook procedures    $WH_FOREGROUNDIDLE - Installs a hook procedure that will be called when the application's foreground thread is about to become idle    $WH_GETMESSAGE - Installs a hook procedure that monitors messages posted to a message queue    $WH_JOURNALPLAYBACK - Installs a hook procedure that posts messages previously recorded by a $WH_JOURNALRECORD hook procedure    $WH_JOURNALRECORD - Installs a hook procedure that records input messages posted to the system message queue    $WH_KEYBOARD - Installs a hook procedure that monitors keystroke messages    $WH_KEYBOARD_LL - Installs a hook procedure that monitors low-level keyboard input events    $WH_MOUSE - Installs a hook procedure that monitors mouse messages    $WH_MOUSE_LL - Installs a hook procedure that monitors low-level mouse input events    $WH_MSGFILTER - Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar    $WH_SHELL - Installs a hook procedure that receives notifications useful to shell applications    $WH_SYSMSGFILTER - Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar"
        }, {
            "label": "$pProc",
            "documentation": "Pointer to the hook procedure. If the $iThreadId parameter is zero or specifies the identifier of a thread created by a different process,the $pProc parameter must point to a hook procedure in a DLL.Otherwise, $pProc can point to a hook procedure in the code associated with the current process"
        }, {
            "label": "$hDll",
            "documentation": "Handle to the DLL containing the hook procedure pointed to by the $pProc parameter.The $hMod parameter must be set to NULL if the $iThreadId parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process"
        }, {
            "label": "$iThreadId",
            "documentation": "**[optional]** Specifies the identifier of the thread with which the hook procedure is to be associated.If this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread"
        }]
    },
    "_WinAPI_SetWindowSubclass": {
        "documentation": "Installs or updates a window subclass callback",
        "label": "_WinAPI_SetWindowSubclass ( $hWnd, $pSubclassProc, $idSubClass [, $pData = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of the window being subclassed."
        }, {
            "label": "$pSubclassProc",
            "documentation": "A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback.(See MSDN for more information)"
        }, {
            "label": "$idSubClass",
            "documentation": "The subclass ID."
        }, {
            "label": "$pData",
            "documentation": "**[optional]** The reference data. This value is passed to the subclass procedure. The meaning of this value is determined by the calling application."
        }]
    },
    "_WinAPI_SetWindowText": {
        "documentation": "Changes the text of the specified window's title bar",
        "label": "_WinAPI_SetWindowText ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window or control whose text is to be changed"
        }, {
            "label": "$sText",
            "documentation": "String to be used as the new title or control text"
        }]
    },
    "_WinAPI_SetWinEventHook": {
        "documentation": "Sets an event hook function for a range of events",
        "label": "_WinAPI_SetWinEventHook ( $iEventMin, $iEventMax, $pEventProc [, $iPID = 0 [, $iThreadId = 0 [, $iFlags = 0]]] )",
        "params": [{
            "label": "$iEventMin",
            "documentation": "The lowest event value in the range of events ($EVENT_*) that are handled by the hook function."
        }, {
            "label": "$iEventMax",
            "documentation": "The highest event value in the range of events ($EVENT_*) that are handled by the hook function."
        }, {
            "label": "$pEventProc",
            "documentation": "The address of an application-defined hook function that the system calls in response toevents generated by an accessible object."
        }, {
            "label": "$iPID",
            "documentation": "**[optional]** The ID of the process from which the hook function receives events. If this parameter is 0 (Default),the hook function is associated with all existing processes on the current desktop."
        }, {
            "label": "$iThreadId",
            "documentation": "**[optional]** The ID of the thread from which the hook function receives events. If this parameter is 0 (Default),the hook function is associated with all existing threads on the current desktop."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify the location of the hook function and of the events to be skipped.The following flags are valid:    $WINEVENT_INCONTEXT    $WINEVENT_OUTOFCONTEXT (Default)    $WINEVENT_SKIPOWNPROCESS    $WINEVENT_SKIPOWNTHREADThe following single flags, or flag combinations are valid:    $WINEVENT_INCONTEXT    $WINEVENT_OUTOFCONTEXT    $WINEVENT_INCONTEXT | $WINEVENT_SKIPOWNPROCESS    $WINEVENT_INCONTEXT | $WINEVENT_SKIPOWNTHREAD    $WINEVENT_OUTOFCONTEXT | $WINEVENT_SKIPOWNPROCESS    $WINEVENT_OUTOFCONTEXT | $WINEVENT_SKIPOWNTHREAD"
        }]
    },
    "_WinAPI_SetWorldTransform": {
        "documentation": "Sets a two-dimensional linear transformation between world space and page space for the specified device context",
        "label": "_WinAPI_SetWorldTransform ( $hDC, $tXFORM )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$tXFORM",
            "documentation": "$tagXFORM structure that contains the transformation data."
        }]
    },
    "_WinAPI_SfcIsFileProtected": {
        "documentation": "Determines whether the specified file is protected",
        "label": "_WinAPI_SfcIsFileProtected ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file to test."
        }]
    },
    "_WinAPI_SfcIsKeyProtected": {
        "documentation": "Determines whether the specified registry key is protected",
        "label": "_WinAPI_SfcIsKeyProtected ( $hKey [, $sSubKey = Default [, $iFlag = 0]] )",
        "params": [{
            "label": "$hKey",
            "documentation": "Handle to the root registry key, it must be one of the following predefined keys:    $HKEY_CLASSES_ROOT    $HKEY_CURRENT_USER    $HKEY_LOCAL_MACHINE    $HKEY_USERS"
        }, {
            "label": "$sSubKey",
            "documentation": "**[optional]** The name of the key to test. This key must be a subkey of the key identified by the $hKey parameter.If this parameter is not specified (Default), the function only checks whether the root registry key is protected."
        }, {
            "label": "$iFlag",
            "documentation": "**[optional]** The flag that specifies the alternate registry view that should be used by applications that run on 64-bit Windows.This flag is ignored on the x86 platform. It can be one of the following values:    $KEY_WOW64_32KEY    $KEY_WOW64_64KEY"
        }]
    },
    "_WinAPI_ShellAboutDlg": {
        "documentation": "Displays a Windows About dialog box",
        "label": "_WinAPI_ShellAboutDlg ( $sTitle, $sName, $sText [, $hIcon = 0 [, $hParent = 0]] )",
        "params": [{
            "label": "$sTitle",
            "documentation": "The title of the Windows About dialog box."
        }, {
            "label": "$sName",
            "documentation": "The first line after the text \"Microsoft\"."
        }, {
            "label": "$sText",
            "documentation": "The text to be displayed in the dialog box after the version and copyright information."
        }, {
            "label": "$hIcon",
            "documentation": "**[optional]** Handle to the icon that the function displays in the dialog box."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to a parent window."
        }]
    },
    "_WinAPI_ShellAddToRecentDocs": {
        "documentation": "Adds a file to the most recently and frequently item list",
        "label": "_WinAPI_ShellAddToRecentDocs ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The name of the file to be added. Set this parameter to empty string to clear all usage data on all items."
        }]
    },
    "_WinAPI_ShellChangeNotify": {
        "documentation": "Notifies the system of an event that an application has performed",
        "label": "_WinAPI_ShellChangeNotify ( $iEvent, $iFlags [, $iItem1 = 0 [, $iItem2 = 0]] )",
        "params": [{
            "label": "$iEvent",
            "documentation": "Describes the event that has occurred. Typically, only one event is specified at a time. If more thanone event is specified, the values contained in the $iItem1 and $iItem2 parameters must be the same,respectively, for all specified events. This parameter can be one or more of the following values.$SHCNE_ALLEVENTS$SHCNE_ASSOCCHANGED$SHCNE_ATTRIBUTES$SHCNE_CREATE$SHCNE_DELETE$SHCNE_DRIVEADD$SHCNE_DRIVEADDGUI$SHCNE_DRIVEREMOVED$SHCNE_EXTENDED_EVENT$SHCNE_FREESPACE$SHCNE_MEDIAINSERTED$SHCNE_MEDIAREMOVED$SHCNE_MKDIR$SHCNE_NETSHARE$SHCNE_NETUNSHARE$SHCNE_RENAMEFOLDER$SHCNE_RENAMEITEM$SHCNE_RMDIR$SHCNE_SERVERDISCONNECT$SHCNE_UPDATEDIR$SHCNE_UPDATEIMAGE$SHCNE_UPDATEITEM$SHCNE_DISKEVENTS$SHCNE_GLOBALEVENTS$SHCNE_INTERRUPT(See MSDN for more information)"
        }, {
            "label": "$iFlags",
            "documentation": "Flags that indicate the meaning of the $iItem1 and $iItem2 parameters. This parameter must be oneof the following values.$SHCNF_DWORD$SHCNF_IDLIST$SHCNF_PATH$SHCNF_PRINTER$SHCNF_FLUSH$SHCNF_FLUSHNOWAIT$SHCNF_NOTIFYRECURSIVE(See MSDN for more information)"
        }, {
            "label": "$iItem1",
            "documentation": "**[optional]** First event-dependent value. Default is 0."
        }, {
            "label": "$iItem2",
            "documentation": "**[optional]** Second event-dependent value. Default is 0."
        }]
    },
    "_WinAPI_ShellChangeNotifyDeregister": {
        "documentation": "Unregisters the client's window",
        "label": "_WinAPI_ShellChangeNotifyDeregister ( $iID )",
        "params": [{
            "label": "$iID",
            "documentation": "The value that specifies the registration ID returned by _WinAPI_ShellChangeNotifyRegister()."
        }]
    },
    "_WinAPI_ShellChangeNotifyRegister": {
        "documentation": "Registers a window to receive notifications from the file system or Shell",
        "label": "_WinAPI_ShellChangeNotifyRegister ( $hWnd, $iMsg, $iEvents, $iSources, $aPaths [, $bRecursive = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that receives the change or notification messages."
        }, {
            "label": "$iMsg",
            "documentation": "Message to be posted to the window procedure."
        }, {
            "label": "$iEvents",
            "documentation": "Change notification events for which to receive notification. This parameter can be one or moreof the $SHCNE_* values."
        }, {
            "label": "$iSources",
            "documentation": "One or more of the following values that indicate the type of events for which to receivenotifications.$SHCNRF_INTERRUPTLEVEL$SHCNRF_SHELLLEVEL$SHCNRF_RECURSIVEINTERRUPT$SHCNRF_NEWDELIVERY"
        }, {
            "label": "$aPaths",
            "documentation": "Single path or array of paths for which to receive notifications. These names should befully-qualified paths to prevent unexpected results."
        }, {
            "label": "$bRecursive",
            "documentation": "**[optional]** Specifies whether to post notifications for children paths in $aPaths parameter, valid values:    True - Notifications would come from the folder's children.    False  - Notifications would come from the specified folder's only (Default)."
        }]
    },
    "_WinAPI_ShellCreateDirectory": {
        "documentation": "Creates a new file system folder",
        "label": "_WinAPI_ShellCreateDirectory ( $sFilePath [, $hParent = 0 [, $tSecurity = 0]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The fully qualified path of the directory."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** A handle to a parent window."
        }, {
            "label": "$tSecurity",
            "documentation": "**[optional]** $tagSECURITY_ATTRIBUTES structure with the directory's security attribute. If this parameter is 0 (Default),no security attributes are set."
        }]
    },
    "_WinAPI_ShellEmptyRecycleBin": {
        "documentation": "Empties the Recycle Bin on the specified drive",
        "label": "_WinAPI_ShellEmptyRecycleBin ( [$sRoot = '' [, $iFlags = 0 [, $hParent = 0]]] )",
        "params": [{
            "label": "$sRoot",
            "documentation": "**[optional]** The string that contains the path of the root drive on which the Recycle Bin is located. This stringcan be formatted with the drive, folder, and subfolder names, for example \"c:\\windows\\system\\\".If this parameter is empty string (Default), all Recycle Bins on all drives will be emptied."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** This parameter can be one or more of the following values.$SHERB_NOCONFIRMATION$SHERB_NOPROGRESSUI$SHERB_NOSOUND$SHERB_NO_UI"
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to the parent window of any dialog boxes that might be displayed during the operation."
        }]
    },
    "_WinAPI_ShellExecute": {
        "documentation": "Performs an operation on a specified file",
        "label": "_WinAPI_ShellExecute ( $sFilePath [, $sArgs = '' [, $sDir = '' [, $sVerb = '' [, $iShow = 1 [, $hParent = 0]]]]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The string that specifies the file or object on which to execute the specified verb. Note that not allverbs are supported on all objects. For example, not all document types support the \"print\" verb."
        }, {
            "label": "$sArgs",
            "documentation": "**[optional]** The string that specifies the parameters to be passed to the application."
        }, {
            "label": "$sDir",
            "documentation": "**[optional]** The string that specifies the working directory for the action."
        }, {
            "label": "$sVerb",
            "documentation": "**[optional]** The string, referred to as a verb, that specifies the action to be performed. The set of available verbsdepends on the particular file or folder. Generally, the actions available from an object's shortcutmenu are available verbs. The following verbs are commonly used:\"edit\"\"explore\"\"find\"\"open\"\"edit\"\"print\""
        }, {
            "label": "$iShow",
            "documentation": "**[optional]** The flags that specify how an application is to be displayed when it is opened ($SW_*)."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to the owner window used for displaying a UI or error messages."
        }]
    },
    "_WinAPI_ShellExecuteEx": {
        "documentation": "Performs an operation on a specified file",
        "label": "_WinAPI_ShellExecuteEx ( ByRef $tSHEXINFO )",
        "params": [{
            "label": "$tSHEXINFO",
            "documentation": "$tagSHELLEXECUTEINFO structure that contains and receives information about the application being executed."
        }]
    },
    "_WinAPI_ShellExtractAssociatedIcon": {
        "documentation": "Returns a handle to the icon that associated with the specified file's",
        "label": "_WinAPI_ShellExtractAssociatedIcon ( $sFilePath [, $bSmall = False] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The full path and file name of the file that contains the icon, or its extension, such as \".txt\"."
        }, {
            "label": "$bSmall",
            "documentation": "**[optional]** Specifies whether to extract a small icon, valid values:    True - Extract a small icon.    False - Extract a large icon (Default)."
        }]
    },
    "_WinAPI_ShellExtractIcon": {
        "documentation": "Extracts the icon with the specified dimension from the specified file",
        "label": "_WinAPI_ShellExtractIcon ( $sIcon, $iIndex, $iWidth, $iHeight )",
        "params": [{
            "label": "$sIcon",
            "documentation": "Path and name of the file from which the icon are to be extracted."
        }, {
            "label": "$iIndex",
            "documentation": "The 0-based index of the icon to extract. If this value is a negative number, the function extractsthe icon whose resource identifier is equal to the absolute value of $iIndex."
        }, {
            "label": "$iWidth",
            "documentation": "Horizontal icon size wanted."
        }, {
            "label": "$iHeight",
            "documentation": "Vertical icon size wanted."
        }]
    },
    "_WinAPI_ShellFileOperation": {
        "documentation": "Copies, moves, renames, or deletes a file system object",
        "label": "_WinAPI_ShellFileOperation ( $sFrom, $sTo, $iFunc, $iFlags [, $sTitle = '' [, $hParent = 0]] )",
        "params": [{
            "label": "$sFrom",
            "documentation": "Single string or array of string that contains the source file name(s). These names should befully-qualified paths to prevent unexpected results."
        }, {
            "label": "$sTo",
            "documentation": "Single string or array of string that contains the destination file or directory name(s) (if used).These names should be fully-qualified paths to prevent unexpected results."
        }, {
            "label": "$iFunc",
            "documentation": "A value that indicates which operation to perform. This parameter can be one of the following values.$FO_COPY$FO_DELETE$FO_MOVE$FO_RENAME"
        }, {
            "label": "$iFlags",
            "documentation": "Flags that control the file operation. This parameter can be one of the following values.$FOF_ALLOWUNDO$FOF_CONFIRMMOUSE$FOF_FILESONLY$FOF_MULTIDESTFILES$FOF_NOCONFIRMATION$FOF_NOCONFIRMMKDIR$FOF_NO_CONNECTED_ELEMENTS$FOF_NOCOPYSECURITYATTRIBS$FOF_NOERRORUI$FOF_NORECURSEREPARSE$FOF_NORECURSION$FOF_RENAMEONCOLLISION$FOF_SILENT$FOF_SIMPLEPROGRESS$FOF_WANTMAPPINGHANDLE$FOF_WANTNUKEWARNING$FOF_NO_UI"
        }, {
            "label": "$sTitle",
            "documentation": "**[optional]** The title of a progress dialog box. This parameter is used only if $iFlags includes the $FOF_SIMPLEPROGRESS flag."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to the dialog box to display information about the status of the file operation."
        }]
    },
    "_WinAPI_ShellFlushSFCache": {
        "documentation": "Flushes the special folder cache",
        "label": "_WinAPI_ShellFlushSFCache (  )",
        "params": []
    },
    "_WinAPI_ShellGetFileInfo": {
        "documentation": "Retrieves information about an object in the file system",
        "label": "_WinAPI_ShellGetFileInfo ( $sFilePath, $iFlags, $iAttributes, ByRef $tSHFILEINFO )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "String that contains the absolute or relative path and file name. This string can use eithershort (the 8.3 form) or long file names.If the $iFlags parameter includes the $SHGFI_PIDL flag, this parameter must be the address of anITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies thefile within the Shell's namespace. The pointer to an item identifier list (PIDL) must be a fullyqualified PIDL. Relative PIDLs are not allowed.If the $iFlags parameter includes the $SHGFI_USEFILEATTRIBUTES flag, this parameter does not haveto be a valid file name. The function will proceed as if the file exists with the specified name andwith the file attributes passed in the $iAttributes parameter. This allows you to obtain informationabout a file type by passing just the extension for $sFilePath and passing $FILE_ATTRIBUTE_NORMALin $iAttributes."
        }, {
            "label": "$iFlags",
            "documentation": "The flags that specify the file information to retrieve. This parameter can be a combination of thefollowing values.$SHGFI_ATTR_SPECIFIED$SHGFI_ATTRIBUTES$SHGFI_DISPLAYNAME$SHGFI_EXETYPE$SHGFI_ICON$SHGFI_ICONLOCATION$SHGFI_LARGEICON$SHGFI_LINKOVERLAY$SHGFI_OPENICON$SHGFI_OVERLAYINDEX$SHGFI_PIDL$SHGFI_SELECTED$SHGFI_SHELLICONSIZE$SHGFI_SMALLICON$SHGFI_SYSICONINDEX$SHGFI_TYPENAME$SHGFI_USEFILEATTRIBUTES"
        }, {
            "label": "$iAttributes",
            "documentation": "A combination of one or more file attribute flags ($FILE_ATTRIBUTE_*)."
        }, {
            "label": "$tSHFILEINFO",
            "documentation": "$tagSHFILEINFO structure to receive the file information. This structure must be created before function call."
        }]
    },
    "_WinAPI_ShellGetIconOverlayIndex": {
        "documentation": "Retrieves the index of the overlay icon in the system image list",
        "label": "_WinAPI_ShellGetIconOverlayIndex ( $sIcon, $iIndex )",
        "params": [{
            "label": "$sIcon",
            "documentation": "The fully qualified path of the file that contains the icon."
        }, {
            "label": "$iIndex",
            "documentation": "The index of the icon. To request a standard overlay icon, set the path to an empty string,and index to one of the following values.    $IDO_SHGIOI_LINK    $IDO_SHGIOI_SHARE    $IDO_SHGIOI_SLOWFILEWindows 7 or later    $IDO_SHGIOI_DEFAULT"
        }]
    },
    "_WinAPI_ShellGetImageList": {
        "documentation": "Retrieves the system image list for small or large icons",
        "label": "_WinAPI_ShellGetImageList ( [$bSmall = False] )",
        "params": [{
            "label": "$bSmall",
            "documentation": "**[optional]** Specifies whether to retrieve an image list for small or large icons, valid values:    True - The small icons.    False - The large icons (Default)."
        }]
    },
    "_WinAPI_ShellGetKnownFolderIDList": {
        "documentation": "Retrieves the path of a known folder as an ITEMIDLIST structure",
        "label": "_WinAPI_ShellGetKnownFolderIDList ( $sGUID [, $iFlags = 0 [, $hToken = 0]] )",
        "params": [{
            "label": "$sGUID",
            "documentation": "The GUID ($FOLDERID_*) that identifies the standard folders registered with the system."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify special retrieval options. This parameter can be one or more of the following values.    $KF_FLAG_CREATE    $KF_FLAG_DONT_VERIFY    $KF_FLAG_DONT_UNEXPAND    $KF_FLAG_NO_ALIAS    $KF_FLAG_INIT    $KF_FLAG_DEFAULT_PATH    $KF_FLAG_NOT_PARENT_RELATIVE    $KF_FLAG_SIMPLE_IDLISTWindows 7 or later    $KF_FLAG_ALIAS_ONLY"
        }, {
            "label": "$hToken",
            "documentation": "**[optional]** The access token that represents a particular user. If this parameter is 0, the function requeststhe known folder for the current user. Assigning the $hToken parameter a value of (-1) indicates theDefault User. Note that access to the Default User folders requires administrator privileges."
        }]
    },
    "_WinAPI_ShellGetKnownFolderPath": {
        "documentation": "Retrieves the full path of a known folder identified",
        "label": "_WinAPI_ShellGetKnownFolderPath ( $sGUID [, $iFlags = 0 [, $hToken = 0]] )",
        "params": [{
            "label": "$sGUID",
            "documentation": "The GUID ($FOLDERID_*) that identifies the standard folders registered with the system."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify special retrieval options. This parameter can be one or more of the following values.    $KF_FLAG_CREATE    $KF_FLAG_DONT_VERIFY    $KF_FLAG_DONT_UNEXPAND    $KF_FLAG_NO_ALIAS    $KF_FLAG_INIT    $KF_FLAG_DEFAULT_PATH    $KF_FLAG_NOT_PARENT_RELATIVE    $KF_FLAG_SIMPLE_IDLISTWindows 7 or later    $KF_FLAG_ALIAS_ONLY"
        }, {
            "label": "$hToken",
            "documentation": "**[optional]** The access token that represents a particular user. If this parameter is 0, the function requeststhe known folder for the current user. Assigning the $hToken parameter a value of (-1) indicates theDefault User. Note that access to the Default User folders requires administrator privileges."
        }]
    },
    "_WinAPI_ShellGetLocalizedName": {
        "documentation": "Retrieves the localized name of a file in a Shell folder",
        "label": "_WinAPI_ShellGetLocalizedName ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the target file."
        }]
    },
    "_WinAPI_ShellGetPathFromIDList": {
        "documentation": "Converts an item identifier list to a file system path",
        "label": "_WinAPI_ShellGetPathFromIDList ( $pPIDL )",
        "params": [{
            "label": "$pPIDL",
            "documentation": "The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop)."
        }]
    },
    "_WinAPI_ShellGetSetFolderCustomSettings": {
        "documentation": "Sets or retrieves custom folder settings",
        "label": "_WinAPI_ShellGetSetFolderCustomSettings ( $sFilePath, $iFlag, ByRef $tSHFCS )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the folder."
        }, {
            "label": "$iFlag",
            "documentation": "A flag controlling the action of the function. It may be one of the following values.$FCS_READ$FCS_FORCEWRITE$FCS_WRITE"
        }, {
            "label": "$tSHFCS",
            "documentation": "$tagSHFOLDERCUSTOMSETTINGS structure that provides or receives the custom folder settings. This structuremust be created before function call."
        }]
    },
    "_WinAPI_ShellGetSettings": {
        "documentation": "Retrieves Shell state settings",
        "label": "_WinAPI_ShellGetSettings ( $iFlags )",
        "params": [{
            "label": "$iFlags",
            "documentation": "The flags that indicate which settings should be retrieved. This parameter can be one ormore of the following values (use ONLY this flags).$SSF_DESKTOPHTML$SSF_DONTPRETTYPATH$SSF_DOUBLECLICKINWEBVIEW$SSF_HIDEICONS$SSF_MAPNETDRVBUTTON$SSF_NOCONFIRMRECYCLE$SSF_NONETCRAWLING$SSF_SEPPROCESS$SSF_SHOWALLOBJECTS$SSF_SHOWCOMPCOLOR$SSF_SHOWEXTENSIONS$SSF_SHOWINFOTIP$SSF_SHOWSUPERHIDDEN$SSF_SHOWSYSFILES$SSF_STARTPANELON$SSF_WIN95CLASSIC$SSF_WEBVIEWWindows Vista or later$SSF_AUTOCHECKSELECT$SSF_ICONSONLY$SSF_SHOWTYPEOVERLAY"
        }]
    },
    "_WinAPI_ShellGetSpecialFolderLocation": {
        "documentation": "Retrieves a pointer to the ITEMIDLIST structure (PIDL) of a special folder",
        "label": "_WinAPI_ShellGetSpecialFolderLocation ( $iCSIDL )",
        "params": [{
            "label": "$iCSIDL",
            "documentation": "The CSIDL ($CSIDL_*) that identifies the folder of interest."
        }]
    },
    "_WinAPI_ShellGetSpecialFolderPath": {
        "documentation": "Retrieves the path of a special folder",
        "label": "_WinAPI_ShellGetSpecialFolderPath ( $iCSIDL [, $bCreate = False] )",
        "params": [{
            "label": "$iCSIDL",
            "documentation": "The CSIDL ($iCSIDL_*) that identifies the folder of interest."
        }, {
            "label": "$bCreate",
            "documentation": "**[optional]** Specifies whether the folder should be created if it does not already exist, valid values:True - The folder is created.False - The folder is not created (Default)."
        }]
    },
    "_WinAPI_ShellGetStockIconInfo": {
        "documentation": "Retrieves information about system-defined Shell icons",
        "label": "_WinAPI_ShellGetStockIconInfo ( $iSIID, $iFlags )",
        "params": [{
            "label": "$iSIID",
            "documentation": "One of the $SIID_* constants that specifies which icon should be retrieved.Those constants are defined in APIShellExConstants.au3."
        }, {
            "label": "$iFlags",
            "documentation": "The flags that specify which information is requested. This parameter can be a combination of thefollowing values.$SHGSI_ICONLOCATION$SHGSI_ICON$SHGSI_SYSICONINDEX$SHGSI_LINKOVERLAY$SHGSI_SELECTED$SHGSI_LARGEICON$SHGSI_SMALLICON$SHGSI_SHELLICONSIZE"
        }]
    },
    "_WinAPI_ShellILCreateFromPath": {
        "documentation": "Creates a pointer to an item identifier list (PIDL) from a path",
        "label": "_WinAPI_ShellILCreateFromPath ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to be converted."
        }]
    },
    "_WinAPI_ShellNotifyIcon": {
        "documentation": "Sends a message to the taskbar's status area",
        "label": "_WinAPI_ShellNotifyIcon ( $iMessage, $tNOTIFYICONDATA )",
        "params": [{
            "label": "$iMessage",
            "documentation": "The variable that specifies the action to be taken. It can have one of the following values.$NIM_ADD$NIM_MODIFY$NIM_DELETE$NIM_SETFOCUS$NIM_SETVERSION"
        }, {
            "label": "$tNOTIFYICONDATA",
            "documentation": "$tagNOTIFYICONDATA structure. The content and size of this structure depends on the valueof the $iMessage and version of the operating system."
        }]
    },
    "_WinAPI_ShellNotifyIconGetRect": {
        "documentation": "Gets the screen coordinates of the bounding rectangle of a notification icon",
        "label": "_WinAPI_ShellNotifyIconGetRect ( $hWnd, $iID [, $tGUID = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the parent window used by the notification's callback function. For more information,see the \"hWnd\" member of the $tagNOTIFYICONDATA structure."
        }, {
            "label": "$iID",
            "documentation": "Application-defined identifier of the notification icon. Multiple icons can be associated with a single$hWnd, each with their own $iID."
        }, {
            "label": "$tGUID",
            "documentation": "**[optional]** $tagGUID structure that identifies the icon."
        }]
    },
    "_WinAPI_ShellObjectProperties": {
        "documentation": "Invokes the Properties context menu command on a Shell object",
        "label": "_WinAPI_ShellObjectProperties ( $sFilePath [, $iType = 2 [, $sProperty = '' [, $hParent = 0]]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The object name."
        }, {
            "label": "$iType",
            "documentation": "**[optional]** The value that specifies the type of object.$SHOP_PRINTERNAME$SHOP_FILEPATH (Default)$SHOP_VOLUMEGUID"
        }, {
            "label": "$sProperty",
            "documentation": "**[optional]** The name of the property sheet page to be opened initially."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle of the parent window of the dialog box."
        }]
    },
    "_WinAPI_ShellOpenFolderAndSelectItems": {
        "documentation": "Opens a Windows Explorer window with specified items in a particular folder selected",
        "label": "_WinAPI_ShellOpenFolderAndSelectItems ( $sFilePath [, $aNames = 0 [, $iStart = 0 [, $iEnd = -1 [, $iFlags = 0]]]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The fully qualified path that specifies the folder or file. If $aNames parameter is used, $sFilePath shouldspecified only to a folder, otherwise, the function fails. This parameter can be an empty string."
        }, {
            "label": "$aNames",
            "documentation": "**[optional]** The array of the folder or file names to be selected. It should be just names in the specifiedfolder, without its path."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start selecting at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop selecting at."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The optional flags. This parameter can be one or more of the following values.Windows Vista or later$OFASI_EDIT$OFASI_OPENDESKTOP"
        }]
    },
    "_WinAPI_ShellOpenWithDlg": {
        "documentation": "Displays the Open With dialog box",
        "label": "_WinAPI_ShellOpenWithDlg ( $sFilePath [, $iFlags = 0 [, $hParent = 0]] )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The file name."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The characteristics of the Open With dialog box. This parameter can be one or more of the following values.$OAIF_ALLOW_REGISTRATION$OAIF_REGISTER_EXT$OAIF_EXEC$OAIF_FORCE_REGISTRATION$OAIF_HIDE_REGISTRATION$OAIF_URL_PROTOCOL"
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle of the parent window."
        }]
    },
    "_WinAPI_ShellQueryRecycleBin": {
        "documentation": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive",
        "label": "_WinAPI_ShellQueryRecycleBin ( [$sRoot = ''] )",
        "params": [{
            "label": "$sRoot",
            "documentation": "**[optional]** The string that contains the path of the root drive on which the Recycle Bin is located. This stringcan be formatted with the drive, folder, and subfolder names, for example \"c:\\windows\\system\\\".If this parameter is empty string, information is retrieved for all Recycle Bins on all drives."
        }]
    },
    "_WinAPI_ShellQueryUserNotificationState": {
        "documentation": "Checks the state of the computer for the current user",
        "label": "_WinAPI_ShellQueryUserNotificationState (  )",
        "params": []
    },
    "_WinAPI_ShellRemoveLocalizedName": {
        "documentation": "Removes the localized name of a file in a Shell folder",
        "label": "_WinAPI_ShellRemoveLocalizedName ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the target file."
        }]
    },
    "_WinAPI_ShellRestricted": {
        "documentation": "Determines whether a specified administrator policy is in effect",
        "label": "_WinAPI_ShellRestricted ( $iRestriction )",
        "params": [{
            "label": "$iRestriction",
            "documentation": "A restriction. This parameter can be one of the $REST_* constants defined in APIShellExConstants.au3."
        }]
    },
    "_WinAPI_ShellSetKnownFolderPath": {
        "documentation": "Redirects a known folder to a new location",
        "label": "_WinAPI_ShellSetKnownFolderPath ( $sGUID, $sFilePath [, $iFlags = 0 [, $hToken = 0]] )",
        "params": [{
            "label": "$sGUID",
            "documentation": "The GUID ($FOLDERID_*) that identifies the known folder."
        }, {
            "label": "$sFilePath",
            "documentation": "The folder's new path."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** This parameter can be 0 or the following value.$KF_FLAG_DONT_UNEXPAND"
        }, {
            "label": "$hToken",
            "documentation": "**[optional]** The access token that represents a particular user. If this parameter is 0, the function requeststhe known folder for the current user. Assigning the $hToken parameter a value of (-1) indicates theDefault User. Note that access to the Default User folders requires administrator privileges."
        }]
    },
    "_WinAPI_ShellSetLocalizedName": {
        "documentation": "Sets the localized name of a file in a Shell folder",
        "label": "_WinAPI_ShellSetLocalizedName ( $sFilePath, $sModule, $iResID )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The path to the target file."
        }, {
            "label": "$sModule",
            "documentation": "The path to the module containing string resource that specifies the localized version of the file name."
        }, {
            "label": "$iResID",
            "documentation": "ID of the localized file name resource."
        }]
    },
    "_WinAPI_ShellSetSettings": {
        "documentation": "Sets Shell state settings",
        "label": "_WinAPI_ShellSetSettings ( $iFlags, $bSet )",
        "params": [{
            "label": "$iFlags",
            "documentation": "The flags that indicate which settings should be set. This parameter can be one ormore of the following values (use ONLY this flags).$SSF_SHOWALLOBJECTS$SSF_SHOWEXTENSIONS$SSF_SHOWCOMPCOLOR$SSF_SHOWSYSFILES$SSF_DOUBLECLICKINWEBVIEW$SSF_DESKTOPHTML$SSF_WIN95CLASSIC$SSF_DONTPRETTYPATH$SSF_MAPNETDRVBUTTON$SSF_SHOWINFOTIP$SSF_HIDEICONS$SSF_NOCONFIRMRECYCLE$SSF_WEBVIEW$SSF_SHOWSUPERHIDDEN$SSF_SEPPROCESS$SSF_NONETCRAWLING$SSF_STARTPANELONWindows Vista or later$SSF_AUTOCHECKSELECT$SSF_ICONSONLY$SSF_SHOWTYPEOVERLAY"
        }, {
            "label": "$bSet",
            "documentation": "Specifies whether a settings ($SSF_*) is enable or disable, valid values:True - Enable.False - Disable."
        }]
    },
    "_WinAPI_ShellStartNetConnectionDlg": {
        "documentation": "Displays a general browsing dialog box for a network resource connection",
        "label": "_WinAPI_ShellStartNetConnectionDlg ( [$sRemote = '' [, $iFlags = 0 [, $hParent = 0]]] )",
        "params": [{
            "label": "$sRemote",
            "documentation": "**[optional]** The remote network name."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that identify the type of resource that the dialog is set to find. This parameter can beone or more of the following values."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle of the parent window."
        }]
    },
    "_WinAPI_ShellUpdateImage": {
        "documentation": "Notifies the Shell that an image in the system image list has changed",
        "label": "_WinAPI_ShellUpdateImage ( $sIcon, $iIndex, $iImage [, $iFlags = 0] )",
        "params": [{
            "label": "$sIcon",
            "documentation": "The fully qualified path of the file that contains the icon."
        }, {
            "label": "$iIndex",
            "documentation": "The 0-based index of the icon."
        }, {
            "label": "$iImage",
            "documentation": "The 0-based index in the system image list of the icon that is being updated."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that determine the icon attributes. It can be 0 or a combination of the following values.    $GIL_NOTFILENAME    $GIL_SIMULATEDOC"
        }]
    },
    "_WinAPI_ShellUserAuthenticationDlg": {
        "documentation": "Creates and displays a configurable dialog box that accepts credentials information from a user",
        "label": "_WinAPI_ShellUserAuthenticationDlg ( $sCaption, $sMessage, $sUser, $sPassword, $sTarget [, $iFlags = 0 [, $iError = 0 [, $bSave = False [, $hBitmap = 0 [, $hParent = 0]]]]] )",
        "params": [{
            "label": "$sCaption",
            "documentation": "The title for the dialog box."
        }, {
            "label": "$sMessage",
            "documentation": "A brief message to display in the dialog box."
        }, {
            "label": "$sUser",
            "documentation": "The user name to populate the credential fields in the dialog box. For domain users, the string mustbe in the following format (if domain is not specified, the trget string is used as the domain):DomainName\\UserName"
        }, {
            "label": "$sPassword",
            "documentation": "The initial password."
        }, {
            "label": "$sTarget",
            "documentation": "The name of the target, typically a server name. This parameter is used to identify target informationwhen storing and retrieving credentials."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specifies behavior for this function. It can be a bitwise-OR combination of zeroor more of the following values.$CREDUI_FLAGS_ALWAYS_SHOW_UI$CREDUI_FLAGS_COMPLETE_USERNAME$CREDUI_FLAGS_DO_NOT_PERSIST$CREDUI_FLAGS_EXCLUDE_CERTIFICATES$CREDUI_FLAGS_EXPECT_CONFIRMATION$CREDUI_FLAGS_GENERIC_CREDENTIALS$CREDUI_FLAGS_INCORRECT_PASSWORD$CREDUI_FLAGS_KEEP_USERNAME$CREDUI_FLAGS_PASSWORD_ONLY_OK$CREDUI_FLAGS_PERSIST$CREDUI_FLAGS_REQUEST_ADMINISTRATOR$CREDUI_FLAGS_REQUIRE_CERTIFICATE$CREDUI_FLAGS_REQUIRE_SMARTCARD$CREDUI_FLAGS_SERVER_CREDENTIAL$CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX$CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS$CREDUI_FLAGS_VALIDATE_USERNAME"
        }, {
            "label": "$iError",
            "documentation": "**[optional]** The system error code that specifies why the credential dialog box is needed."
        }, {
            "label": "$bSave",
            "documentation": "**[optional]** Specifies whether the \"Save\" check box is selected in the dialog box (it makes sense only if the$CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX flag is used), valid values:    True  - Selected.    False - Deselected (Default)."
        }, {
            "label": "$hBitmap",
            "documentation": "**[optional]** A bitmap handle to display in the dialog box. If this parameter is 0, the default bitmap is used.The bitmap size is limited to 320x60 pixels."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** The dialog box is modal with respect to the parent window. If this parameter is 0, the desktopis the parent window of the dialog box."
        }]
    },
    "_WinAPI_ShellUserAuthenticationDlgEx": {
        "documentation": "Creates and displays a configurable dialog box that accepts credentials information from a user",
        "label": "_WinAPI_ShellUserAuthenticationDlgEx ( $sCaption, $sMessage, $sUser, $sPassword [, $iFlags = 0 [, $iAuthError = 0 [, $bSave = False [, $iPackage = 0 [, $hParent = 0]]]]] )",
        "params": [{
            "label": "$sCaption",
            "documentation": "The title for the dialog box."
        }, {
            "label": "$sMessage",
            "documentation": "A brief message to display in the dialog box."
        }, {
            "label": "$sUser",
            "documentation": "The user name to populate the credential fields in the dialog box. For domain users, the string mustbe in the following format:DomainName\\UserName"
        }, {
            "label": "$sPassword",
            "documentation": "The initial password."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specifies behavior for this function. It can be a combination of the following values.$CREDUIWIN_AUTHPACKAGE_ONLY$CREDUIWIN_CHECKBOX$CREDUIWIN_ENUMERATE_ADMINS$CREDUIWIN_ENUMERATE_CURRENT_USER$CREDUIWIN_GENERIC$CREDUIWIN_IN_CRED_ONLY$CREDUIWIN_SECURE_PROMPT$CREDUIWIN_PACK_32_WOW$CREDUIWIN_PREPROMPTING"
        }, {
            "label": "$iAuthError",
            "documentation": "**[optional]** The system error code that is displayed in the dialog box."
        }, {
            "label": "$bSave",
            "documentation": "**[optional]** Specifies whether the \"Save\" check box is selected in the dialog box (it makes sense only if the$CREDUIWIN_CHECKBOX flag is used), valid values:True  - Selected. False - Deselected (Default)."
        }, {
            "label": "$iPackage",
            "documentation": "**[optional]** The authentication package for which the credentials are serialized."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** The dialog box is modal with respect to the parent window. If this parameter is 0 (Default), the desktopis the parent window of the dialog box."
        }]
    },
    "_WinAPI_ShortToWord": {
        "documentation": "Converts a value of type SHORT to a value of type WORD",
        "label": "_WinAPI_ShortToWord ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "The value to be converted."
        }]
    },
    "_WinAPI_ShowCaret": {
        "documentation": "Makes the caret visible on the screen at the caret's current position",
        "label": "_WinAPI_ShowCaret ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window that owns the caret. If this parameter is 0, _WinAPI_ShowCaret() searches thecurrent task for the window that owns the caret."
        }]
    },
    "_WinAPI_ShowCursor": {
        "documentation": "Displays or hides the cursor",
        "label": "_WinAPI_ShowCursor ( $bShow )",
        "params": [{
            "label": "$bShow",
            "documentation": "If True, the cursor is shown, otherwise it is hidden"
        }]
    },
    "_WinAPI_ShowError": {
        "documentation": "Displays an error message box with an optional exit",
        "label": "_WinAPI_ShowError ( $sText [, $bExit = True] )",
        "params": [{
            "label": "$sText",
            "documentation": "Error text to display"
        }, {
            "label": "$bExit",
            "documentation": "**[optional]** Specifies whether to exit after the display:True - Exit program after displayFalse - Return normally after display"
        }]
    },
    "_WinAPI_ShowLastError": {
        "documentation": "Shows the last error code and message",
        "label": "_WinAPI_ShowLastError ( [$sText = '' [, $bAbort = False [, $iLanguage = 0]]] )",
        "params": [{
            "label": "$sText",
            "documentation": "**[optional]** The user's text that to be displayed with the message."
        }, {
            "label": "$bAbort",
            "documentation": "**[optional]** Specifies whether to exit the script after displaying an error message, valid values:True - Exit the script after displaying a message if it indicates an error.False - Always return normally (Default)."
        }, {
            "label": "$iLanguage",
            "documentation": "**[optional]** The language identifier for the message."
        }]
    },
    "_WinAPI_ShowMsg": {
        "documentation": "Displays an \"Information\" message box",
        "label": "_WinAPI_ShowMsg ( $sText )",
        "params": [{
            "label": "$sText",
            "documentation": "\"Information\" text to display"
        }]
    },
    "_WinAPI_ShowOwnedPopups": {
        "documentation": "Shows or hides all pop-up windows owned by the specified window",
        "label": "_WinAPI_ShowOwnedPopups ( $hWnd, $bShow )",
        "params": [{
            "label": "$hWnd",
            "documentation": "A handle to the window that owns the pop-up windows to be shown or hidden."
        }, {
            "label": "$bShow",
            "documentation": "Specifies whether pop-up windows are to be shown or hidden, valid values:    True - All hidden pop-up windows are shown.    False - All visible pop-up windows are hidden."
        }]
    },
    "_WinAPI_ShowWindow": {
        "documentation": "Sets the specified window's show state",
        "label": "_WinAPI_ShowWindow ( $hWnd [, $iCmdShow = 5] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window"
        }, {
            "label": "$iCmdShow",
            "documentation": "**[optional]** Specifies how the window is to be shown:@SW_HIDE - Hides the window and activates another window@SW_MAXIMIZE - Maximizes the specified window@SW_MINIMIZE - Minimizes the specified window and activates the next top-level window in the Z order@SW_RESTORE - Activates and displays the window@SW_SHOW - Activates the window and displays it in its current size and position@SW_SHOWDEFAULT - Sets the show state based on the SW_ flag specified in the STARTUPINFO structure@SW_SHOWMAXIMIZED - Activates the window and displays it as a maximized window@SW_SHOWMINIMIZED - Activates the window and displays it as a minimized window@SW_SHOWMINNOACTIVE - Displays the window as a minimized window@SW_SHOWNA - Displays the window in its current state@SW_SHOWNOACTIVATE - Displays a window in its most recent size and position@SW_SHOWNORMAL - Activates and displays a window"
        }]
    },
    "_WinAPI_ShutdownBlockReasonCreate": {
        "documentation": "Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated",
        "label": "_WinAPI_ShutdownBlockReasonCreate ( $hWnd, $sText )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the main window of the application."
        }, {
            "label": "$sText",
            "documentation": "The string which explaining the reason the application must block system shutdown."
        }]
    },
    "_WinAPI_ShutdownBlockReasonDestroy": {
        "documentation": "Indicates that the system can be shut down and frees the reason string",
        "label": "_WinAPI_ShutdownBlockReasonDestroy ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the main window of the application."
        }]
    },
    "_WinAPI_ShutdownBlockReasonQuery": {
        "documentation": "Retrieves the reason string set by the _WinAPI_ShutdownBlockReasonCreate() function",
        "label": "_WinAPI_ShutdownBlockReasonQuery ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the main window of the application."
        }]
    },
    "_WinAPI_SizeOfResource": {
        "documentation": "Returns the size, in bytes, of the specified resource",
        "label": "_WinAPI_SizeOfResource ( $hInstance, $hResource )",
        "params": [{
            "label": "$hInstance",
            "documentation": "Handle to the module whose executable file contains the resource."
        }, {
            "label": "$hResource",
            "documentation": "Handle to the resource. This handle must be created by using the _WinAPI_FindResource() or _WinAPI_FindResourceEx()function."
        }]
    },
    "_WinAPI_StretchBlt": {
        "documentation": "Copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle",
        "label": "_WinAPI_StretchBlt ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRop )",
        "params": [{
            "label": "$hDestDC",
            "documentation": "Handle to the destination device context."
        }, {
            "label": "$iXDest",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iYDest",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iWidthDest",
            "documentation": "The width, in logical units, of the destination rectangle."
        }, {
            "label": "$iHeightDest",
            "documentation": "The height, in logical units, of the destination rectangle."
        }, {
            "label": "$hSrcDC",
            "documentation": "Handle to the source device context."
        }, {
            "label": "$iXSrc",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the source rectangle."
        }, {
            "label": "$iYSrc",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the source rectangle."
        }, {
            "label": "$iWidthSrc",
            "documentation": "The width, in logical units, of the source rectangle."
        }, {
            "label": "$iHeightSrc",
            "documentation": "The height, in logical units, of the source rectangle."
        }, {
            "label": "$iRop",
            "documentation": "The raster-operation code. These codes define how the color data for the source rectangle isto be combined with the color data for the destination rectangle to achieve the final color.This parameter must be 0 or one of the following values.$BLACKNESS$CAPTUREBLT$DSTINVERT$MERGECOPY$MERGEPAINT$NOMIRRORBITMAP$NOTSRCCOPY$NOTSRCERASE$PATCOPY$PATINVERT$PATPAINT$SRCAND$SRCCOPY$SRCERASE$SRCINVERT$SRCPAINT$WHITENESS"
        }]
    },
    "_WinAPI_StretchDIBits": {
        "documentation": "Copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle, stretching or compressing the rows and columns by using the specified raster operation",
        "label": "_WinAPI_StretchDIBits ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $tBITMAPINFO, $iUsage, $pBits, $iRop )",
        "params": [{
            "label": "$hDestDC",
            "documentation": "Handle to the destination device context."
        }, {
            "label": "$iXDest",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iYDest",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iWidthDest",
            "documentation": "The width, in logical units, of the destination rectangle."
        }, {
            "label": "$iHeightDest",
            "documentation": "The height, in logical units, of the destination rectangle."
        }, {
            "label": "$iXSrc",
            "documentation": "The x-coordinate, in pixels, of the source rectangle in the image."
        }, {
            "label": "$iYSrc",
            "documentation": "The y-coordinate, in pixels, of the source rectangle in the image."
        }, {
            "label": "$iWidthSrc",
            "documentation": "The width, in pixels, of the source rectangle in the image."
        }, {
            "label": "$iHeightSrc",
            "documentation": "The height, in pixels, of the source rectangle in the image."
        }, {
            "label": "$tBITMAPINFO",
            "documentation": "$tagBITMAPINFO structure that contains information about the DIB."
        }, {
            "label": "$iUsage",
            "documentation": "The type of colors used. (either logical palette indexes or literal RGB values).The following values are defined:    $DIB_PAL_COLORS    $DIB_RGB_COLORS"
        }, {
            "label": "$pBits",
            "documentation": "A pointer to the image bits, which are stored as an array of bytes."
        }, {
            "label": "$iRop",
            "documentation": "The raster-operation code that specifies how the source pixels, the destination device context'scurrent brush, and the destination pixels are to be combined to form the new image.It must be 0 or one of the following values:    $BLACKNESS    $CAPTUREBLT    $DSTINVERT    $MERGECOPY    $MERGEPAINT    $NOMIRRORBITMAP    $NOTSRCCOPY    $NOTSRCERASE    $PATCOPY    $PATINVERT    $PATPAINT    $SRCAND    $SRCCOPY    $SRCERASE    $SRCINVERT    $SRCPAINT    $WHITENESS"
        }]
    },
    "_WinAPI_StrFormatByteSize": {
        "documentation": "Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes",
        "label": "_WinAPI_StrFormatByteSize ( $iSize )",
        "params": [{
            "label": "$iSize",
            "documentation": "The numeric value to be converted."
        }]
    },
    "_WinAPI_StrFormatByteSizeEx": {
        "documentation": "Converts a numeric value into a string that represents the number expressed as separated groups of digits to the left of the decimal",
        "label": "_WinAPI_StrFormatByteSizeEx ( $iSize )",
        "params": [{
            "label": "$iSize",
            "documentation": "The numeric value to be converted."
        }]
    },
    "_WinAPI_StrFormatKBSize": {
        "documentation": "Converts a numeric value into a string that represents the number expressed as a size value in kilobytes",
        "label": "_WinAPI_StrFormatKBSize ( $iSize )",
        "params": [{
            "label": "$iSize",
            "documentation": "The numeric value to be converted."
        }]
    },
    "_WinAPI_StrFromTimeInterval": {
        "documentation": "Converts a time interval to a string",
        "label": "_WinAPI_StrFromTimeInterval ( $iTime [, $iDigits = 7] )",
        "params": [{
            "label": "$iTime",
            "documentation": "The time interval, in milliseconds."
        }, {
            "label": "$iDigits",
            "documentation": "**[optional]** The maximum number of significant digits to be represented in converted string. Default is 7."
        }]
    },
    "_WinAPI_StringFromGUID": {
        "documentation": "Converts a binary GUID to string form",
        "label": "_WinAPI_StringFromGUID ( $tGUID )",
        "params": [{
            "label": "$tGUID",
            "documentation": "A $tagGUID structure or a pointer to it"
        }]
    },
    "_WinAPI_StringLenA": {
        "documentation": "Calculates the size of ANSI string",
        "label": "_WinAPI_StringLenA ( Const ByRef $tString )",
        "params": [{
            "label": "$tString",
            "documentation": "String Structure to process"
        }]
    },
    "_WinAPI_StringLenW": {
        "documentation": "Calculates the size of wide string",
        "label": "_WinAPI_StringLenW ( Const ByRef $tString )",
        "params": [{
            "label": "$tString",
            "documentation": "String structure to process"
        }]
    },
    "_WinAPI_StrLen": {
        "documentation": "Returns the length of the specified string",
        "label": "_WinAPI_StrLen ( $pString [, $bUnicode = True] )",
        "params": [{
            "label": "$pString",
            "documentation": "Pointer to a null-terminated string."
        }, {
            "label": "$bUnicode",
            "documentation": "**[optional]** Specifies whether a string is Unicode or ASCII code of a character, valid values:True - Unicode (Default). False - ASCII."
        }]
    },
    "_WinAPI_StrokeAndFillPath": {
        "documentation": "Closes any open figures in a path, strokes the outline of the path, and fills its interior",
        "label": "_WinAPI_StrokeAndFillPath ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }]
    },
    "_WinAPI_StrokePath": {
        "documentation": "Renders the specified path by using the current pen",
        "label": "_WinAPI_StrokePath ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context that contains the completed path."
        }]
    },
    "_WinAPI_StructToArray": {
        "documentation": "Converts the structure to the array of strings",
        "label": "_WinAPI_StructToArray ( $tStruct [, $iItems = 0] )",
        "params": [{
            "label": "$tStruct",
            "documentation": "The structure to convert. This structure should be same as for _WinAPI_ArrayToStruct()."
        }, {
            "label": "$iItems",
            "documentation": "**[optional]** The number of strings that contains the structure. If this parameter is 0 (Default), the end of the structuredetermined by a double null-terminated character (\"... ;{0};{0}\")."
        }]
    },
    "_WinAPI_SubLangId": {
        "documentation": "Extract sublanguage id from a language id",
        "label": "_WinAPI_SubLangId ( $iLngID )",
        "params": [{
            "label": "$iLngID",
            "documentation": "Language id"
        }]
    },
    "_WinAPI_SubtractRect": {
        "documentation": "Determines the coordinates of a rectangle formed by subtracting one rectangle from another",
        "label": "_WinAPI_SubtractRect ( $tRECT1, $tRECT2 )",
        "params": [{
            "label": "$tRECT1",
            "documentation": "$tagRECT structure from which the function subtracts the rectangle specified by $tRECT2."
        }, {
            "label": "$tRECT2",
            "documentation": "$tagRECT structure that the function subtracts from the rectangle specified by $tRECT1."
        }]
    },
    "_WinAPI_SwapDWord": {
        "documentation": "Converts a ULONG from little-endian to big-endian, and vice versa",
        "label": "_WinAPI_SwapDWord ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "The ULONG value to convert."
        }]
    },
    "_WinAPI_SwapQWord": {
        "documentation": "Converts a ULONGLONG from little-endian to big-endian, and vice versa",
        "label": "_WinAPI_SwapQWord ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "The ULONGLONG value to convert."
        }]
    },
    "_WinAPI_SwapWord": {
        "documentation": "Converts a USHORT from little-endian to big-endian, and vice versa",
        "label": "_WinAPI_SwapWord ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "The USHORT value to convert."
        }]
    },
    "_WinAPI_SwitchColor": {
        "documentation": "Converts a color from BGR to RGB and vice versa",
        "label": "_WinAPI_SwitchColor ( $iColor )",
        "params": [{
            "label": "$iColor",
            "documentation": "The color to conversion."
        }]
    },
    "_WinAPI_SwitchDesktop": {
        "documentation": "Makes the specified desktop visible and activates it",
        "label": "_WinAPI_SwitchDesktop ( $hDesktop )",
        "params": [{
            "label": "$hDesktop",
            "documentation": "Handle to the desktop. This desktop must be associated with the current window station for the process."
        }]
    },
    "_WinAPI_SwitchToThisWindow": {
        "documentation": "Switches the focus to a specified window and bring it to the foreground",
        "label": "_WinAPI_SwitchToThisWindow ( $hWnd [, $bAltTab = False] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window being switched to."
        }, {
            "label": "$bAltTab",
            "documentation": "**[optional]** Specifies whether switches to using the Alt/Ctl+Tab key sequence, valid values:    True - The window is being switched to using the Alt/Ctl+Tab key sequence.    False - Otherwise (Default)."
        }]
    },
    "_WinAPI_SystemParametersInfo": {
        "documentation": "Retrieves or sets the value of one of the system-wide parameters",
        "label": "_WinAPI_SystemParametersInfo ( $iAction [, $iParam = 0 [, $vParam = 0 [, $iWinIni = 0]]] )",
        "params": [{
            "label": "$iAction",
            "documentation": "The system-wide parameter to be retrieved or set"
        }, {
            "label": "$iParam",
            "documentation": "**[optional]** A parameter whose usage and format depends on the parameter being queried or set"
        }, {
            "label": "$vParam",
            "documentation": "**[optional]** A parameter whose usage and format depends on the parameter being queried or set"
        }, {
            "label": "$iWinIni",
            "documentation": "**[optional]** If a system parameter is being set, specifies whether the user profile is to be updated, andif so, whether the $WM_SETTINGCHANGE message is to be broadcast. This parameter can be zero if you don't wantto update the user profile or it can be one or more of the following values:$SPIF_UPDATEINIFILE - Writes the new setting to the user profile$SPIF_SENDCHANGE - Broadcasts the $WM_SETTINGCHANGE message after updating the user profile"
        }]
    },
    "_WinAPI_TabbedTextOut": {
        "documentation": "Writes a character string at a specified location and expanding tabs to the specified tab-stop positions",
        "label": "_WinAPI_TabbedTextOut ( $hDC, $iX, $iY, $sText [, $aTab = 0 [, $iStart = 0 [, $iEnd = -1 [, $iOrigin = 0]]]] )",
        "params": [{
            "label": "$hDC",
            "documentation": "A handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate of the starting point of the string, in logical units."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate of the starting point of the string, in logical units."
        }, {
            "label": "$sText",
            "documentation": "The character string to draw."
        }, {
            "label": "$aTab",
            "documentation": "**[optional]** The array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasingorder; the smallest x-value should be the first item in the array. Also, it can be an integer value that isone tab-stop position. In this case, the tab stops are separated by the distance specified by this value.If this parameter is 0, tabs are expanded to eight times the average character width."
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array element that contains the first tab-stop position."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array element that contains the last tab-stop position."
        }, {
            "label": "$iOrigin",
            "documentation": "**[optional]** The x-coordinate of the starting position from which tabs are expanded, in logical units. This allowsan application to call the function several times for a single line. If the application calls the functionmore than once with the starting position set to the same value each time, the function expandsall tabs relative to the position specified by this parameter."
        }]
    },
    "_WinAPI_TerminateJobObject": {
        "documentation": "Terminates all processes currently associated with the job",
        "label": "_WinAPI_TerminateJobObject ( $hJob [, $iExitCode = 0] )",
        "params": [{
            "label": "$hJob",
            "documentation": "A handle to the job whose processes will be terminated. This handle must have the $JOB_OBJECT_TERMINATEaccess right. Furthermore, the handle for each process in the job object must have the$PROCESS_TERMINATE access right."
        }, {
            "label": "$iExitCode",
            "documentation": "**[optional]** The exit code to be used by all processes and threads in the job object."
        }]
    },
    "_WinAPI_TerminateProcess": {
        "documentation": "Terminates the specified process and all of its threads",
        "label": "_WinAPI_TerminateProcess ( $hProcess [, $iExitCode = 0] )",
        "params": [{
            "label": "$hProcess",
            "documentation": "A handle to the process to be terminated. The handle must have the $PROCESS_TERMINATE access right."
        }, {
            "label": "$iExitCode",
            "documentation": "**[optional]** The exit code to be used by the process and threads terminated as a result of this call."
        }]
    },
    "_WinAPI_TextOut": {
        "documentation": "Writes a string at the specified location, using the currently selected font, background color, and text color",
        "label": "_WinAPI_TextOut ( $hDC, $iX, $iY, $sText )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context."
        }, {
            "label": "$iX",
            "documentation": "The x-coordinate, in logical coordinates, of the reference point that the system uses to align the string."
        }, {
            "label": "$iY",
            "documentation": "The y-coordinate, in logical coordinates, of the reference point that the system uses to align the string."
        }, {
            "label": "$sText",
            "documentation": "The string to be drawn."
        }]
    },
    "_WinAPI_TileWindows": {
        "documentation": "Tiles the specified child windows of the specified parent window",
        "label": "_WinAPI_TileWindows ( $aWnds [, $tRECT = 0 [, $hParent = 0 [, $iFlags = 0 [, $iStart = 0 [, $iEnd = -1]]]]] )",
        "params": [{
            "label": "$aWnds",
            "documentation": "The array of handles to the child windows to arrange. If a specified child window is a top-level windowwith the style $WS_EX_TOPMOST or $WS_EX_TOOLWINDOW, the child window is not arranged. If this parameteris 0, all child windows of the specified parent window (or of the desktop window) are arranged."
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** $tagRECT structure that specifies the rectangular area, in client coordinates, within which the windowsare arranged. If this parameter is 0 (Default), the client area of the parent window is used."
        }, {
            "label": "$hParent",
            "documentation": "**[optional]** Handle to the parent window. If this parameter is 0 (Default), the desktop window is assumed."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** A cascade flag. This parameter can be one or more of the following values.$MDITILE_HORIZONTAL$MDITILE_VERTICAL (Default)"
        }, {
            "label": "$iStart",
            "documentation": "**[optional]** The index of array to start arranging at."
        }, {
            "label": "$iEnd",
            "documentation": "**[optional]** The index of array to stop arranging at."
        }]
    },
    "_WinAPI_TrackMouseEvent": {
        "documentation": "Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time",
        "label": "_WinAPI_TrackMouseEvent ( $hWnd, $iFlags [, $iTime = -1] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window to track."
        }, {
            "label": "$iFlags",
            "documentation": "The services requested. This parameter can be a combination of the following values.$TME_CANCEL$TME_HOVER$TME_LEAVE$TME_NONCLIENT$TME_QUERY"
        }, {
            "label": "$iTime",
            "documentation": "**[optional]** The hover time-out (if $TME_HOVER was specified in $Flags), in milliseconds. Can be (-1) (Default), whichmeans to use the system default hover time-out."
        }]
    },
    "_WinAPI_TransparentBlt": {
        "documentation": "Performs a bit-block transfer of the color data corresponding to a rectangle of pixels",
        "label": "_WinAPI_TransparentBlt ( $hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRGB )",
        "params": [{
            "label": "$hDestDC",
            "documentation": "Handle to the destination device context."
        }, {
            "label": "$iXDest",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iYDest",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the destination rectangle."
        }, {
            "label": "$iWidthDest",
            "documentation": "The width, in logical units, of the destination rectangle."
        }, {
            "label": "$iHeightDest",
            "documentation": "The height, in logical units, of the destination rectangle."
        }, {
            "label": "$hSrcDC",
            "documentation": "Handle to the source device context."
        }, {
            "label": "$iXSrc",
            "documentation": "The x-coordinate, in logical units, of the upper-left corner of the source rectangle."
        }, {
            "label": "$iYSrc",
            "documentation": "The y-coordinate, in logical units, of the upper-left corner of the source rectangle."
        }, {
            "label": "$iWidthSrc",
            "documentation": "The width, in logical units, of the source rectangle."
        }, {
            "label": "$iHeightSrc",
            "documentation": "The height, in logical units, of the source rectangle."
        }, {
            "label": "$iRGB",
            "documentation": "The RGB color in the source bitmap to treat as transparent."
        }]
    },
    "_WinAPI_TwipsPerPixelX": {
        "documentation": "Returns the width of a pixel, in twips",
        "label": "_WinAPI_TwipsPerPixelX (  )",
        "params": []
    },
    "_WinAPI_TwipsPerPixelY": {
        "documentation": "Returns the height of a pixel, in twips",
        "label": "_WinAPI_TwipsPerPixelY (  )",
        "params": []
    },
    "_WinAPI_UnhookWindowsHookEx": {
        "documentation": "Removes a hook procedure installed in a hook chain by the _WinAPI_SetWindowsHookEx function",
        "label": "_WinAPI_UnhookWindowsHookEx ( $hHook )",
        "params": [{
            "label": "$hHook",
            "documentation": "Handle to the hook to be removed"
        }]
    },
    "_WinAPI_UnhookWinEvent": {
        "documentation": "Removes an event hook function",
        "label": "_WinAPI_UnhookWinEvent ( $hEventHook )",
        "params": [{
            "label": "$hEventHook",
            "documentation": "Handle to the event hook returned in the previous call to _WinAPI_SetWinEventHook()."
        }]
    },
    "_WinAPI_UnionRect": {
        "documentation": "Creates the union of two rectangles",
        "label": "_WinAPI_UnionRect ( $tRECT1, $tRECT2 )",
        "params": [{
            "label": "$tRECT1",
            "documentation": "$tagRECT structure that contains the first source rectangle."
        }, {
            "label": "$tRECT2",
            "documentation": "$tagRECT structure that contains the second source rectangle."
        }]
    },
    "_WinAPI_UnionStruct": {
        "documentation": "Creates the structure of two structures",
        "label": "_WinAPI_UnionStruct ( $tStruct1, $tStruct2 [, $sStruct = ''] )",
        "params": [{
            "label": "$tStruct1",
            "documentation": "The structure that contains the first source data."
        }, {
            "label": "$tStruct2",
            "documentation": "The structure that contains the second source data."
        }, {
            "label": "$sStruct",
            "documentation": "**[optional]** The string representing the final structure (same as for the DllStructCreate() function)."
        }]
    },
    "_WinAPI_UniqueHardwareID": {
        "documentation": "Generates a unique hardware identifier (ID) for local computer",
        "label": "_WinAPI_UniqueHardwareID ( [$iFlags = 0] )",
        "params": [{
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specifies what information would be used to generate ID. This parameter can be one or more of the following values.$UHID_MB - Uses information about your motherboard. This flag is used by default regardless of whether specified or not.$UHID_BIOS - Uses information from BIOS.$UHID_CPU - Uses information about your processor(s). Note that $UHID_CPU flag reduces the function speed.$UHID_HDD - Uses information about the installed hard drives. Any change in the configuration disks will change ID returned by this function. Taken into account only non-removable disks with an ATA or SATA interfaces.$UHID_All - The sum of all the previous flags."
        }]
    },
    "_WinAPI_UnloadKeyboardLayout": {
        "documentation": "Unloads an input locale identifier",
        "label": "_WinAPI_UnloadKeyboardLayout ( $hLocale )",
        "params": [{
            "label": "$hLocale",
            "documentation": "The input locale identifier to be unloaded."
        }]
    },
    "_WinAPI_UnlockFile": {
        "documentation": "Unlocks a region in an open file",
        "label": "_WinAPI_UnlockFile ( $hFile, $iOffset, $iLength )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file that contains a region locked with _WinAPI_LockFile() function."
        }, {
            "label": "$iOffset",
            "documentation": "The starting byte offset in the file where the locked region begins."
        }, {
            "label": "$iLength",
            "documentation": "The length of the byte range to be unlocked."
        }]
    },
    "_WinAPI_UnmapViewOfFile": {
        "documentation": "Unmaps a mapped view of a file from the calling process's address space",
        "label": "_WinAPI_UnmapViewOfFile ( $pAddress )",
        "params": [{
            "label": "$pAddress",
            "documentation": "A pointer to the base address of the mapped view of a file that is to be unmapped.This value must be identical to the value returned by a previous call to the _WinAPI_MapViewOfFile() function."
        }]
    },
    "_WinAPI_UnregisterApplicationRestart": {
        "documentation": "Removes the active instance of an application from the restart list",
        "label": "_WinAPI_UnregisterApplicationRestart (  )",
        "params": []
    },
    "_WinAPI_UnregisterClass": {
        "documentation": "Unregisters a window class, freeing the memory required for the class",
        "label": "_WinAPI_UnregisterClass ( $sClass [, $hInstance = 0] )",
        "params": [{
            "label": "$sClass",
            "documentation": "A null-terminated string or a class atom. If $sClass is a string, it specifies the window classname. This class name must have been registered by a previous call to the _WinAPI_RegisterClass()or _WinAPI_RegisterClassEx() function. If this parameter is an atom, it must be in the low-orderword of $sClass; the high-order word must be zero."
        }, {
            "label": "$hInstance",
            "documentation": "**[optional]** Handle to the instance of the module that created the class."
        }]
    },
    "_WinAPI_UnregisterHotKey": {
        "documentation": "Frees a hot key previously registered by the calling thread",
        "label": "_WinAPI_UnregisterHotKey ( $hWnd, $iID )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window associated with the hot key to be freed. This parameter should be 0 if thehot key is not associated with a window."
        }, {
            "label": "$iID",
            "documentation": "Specifies the identifier of the hot key to be freed."
        }]
    },
    "_WinAPI_UnregisterPowerSettingNotification": {
        "documentation": "Unregisters the power setting notification",
        "label": "_WinAPI_UnregisterPowerSettingNotification ( $hNotify )",
        "params": [{
            "label": "$hNotify",
            "documentation": "Handle returned from the _WinAPI_RegisterPowerSettingNotification() function."
        }]
    },
    "_WinAPI_UpdateLayeredWindow": {
        "documentation": "Updates the position, size, shape, content, and translucency of a layered window",
        "label": "_WinAPI_UpdateLayeredWindow ( $hWnd, $hDestDC, $tPTDest, $tSize, $hSrcDC, $tPTSrce, $iRGB, $tBlend, $iFlags )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to a layered window. A layered window is created by specifying $WS_EX_LAYERED when creating the window."
        }, {
            "label": "$hDestDC",
            "documentation": "Handle to a device context for the screen"
        }, {
            "label": "$tPTDest",
            "documentation": "A $tagPOINT structure or a pointer to it that specifies the new screen position of the layered window.If the current position is not changing, this can be zero."
        }, {
            "label": "$tSize",
            "documentation": "A $tagSIZE structure or a pointer to it that specifies the new size of the layered window.If the size of the window is not changing, this can be 0."
        }, {
            "label": "$hSrcDC",
            "documentation": "Handle to a device context for the surface that defines the layered window.This handle can be obtained by calling the _WinAPI_CreateCompatibleDC() function."
        }, {
            "label": "$tPTSrce",
            "documentation": "A $tagPOINT structure or a pointer to it that specifies the location of the layer in the device context"
        }, {
            "label": "$iRGB",
            "documentation": "The color key to be used when composing the layered window"
        }, {
            "label": "$tBlend",
            "documentation": "A $tagBLENDFUNCTION structure or a pointer to it that specifies the transparency value to be used when composing the layered window."
        }, {
            "label": "$iFlags",
            "documentation": "This parameter can be one of the following values.    $ULW_ALPHA - Use $tblend as the blend function    $ULW_COLORKEY - Use $iRGB as the transparency color    $ULW_OPAQUE - Draw an opaque layered window"
        }]
    },
    "_WinAPI_UpdateLayeredWindowEx": {
        "documentation": "Updates a bitmap translucency of a layered window",
        "label": "_WinAPI_UpdateLayeredWindowEx ( $hWnd, $iX, $iY, $hBitmap [, $iOpacity = 255 [, $bDelete = False]] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to a layered window. A layered window is created by specifying $WS_EX_LAYERED when its creating."
        }, {
            "label": "$iX",
            "documentation": "The new position of the left side of the window."
        }, {
            "label": "$iY",
            "documentation": "The new position of the top of the window."
        }, {
            "label": "$hBitmap",
            "documentation": "Handle to the bitmap that will be set to the layered window."
        }, {
            "label": "$iOpacity",
            "documentation": "**[optional]** The alpha transparency value to be used on the entire source bitmap. Default is 255."
        }, {
            "label": "$bDelete",
            "documentation": "**[optional]** Specifies whether to delete the bitmap after updated the window, valid values:    True - Bitmap will be deleted if the function succeeds.    False - Do not delete, you must release the bitmap when you are finished using it (Default)."
        }]
    },
    "_WinAPI_UpdateLayeredWindowIndirect": {
        "documentation": "Updates the position, size, shape, content, and translucency of a layered window",
        "label": "_WinAPI_UpdateLayeredWindowIndirect ( $hWnd, $tULWINFO )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to a layered window. A layered window is created by specifying $WS_EX_LAYERED when its creating."
        }, {
            "label": "$tULWINFO",
            "documentation": "$tagUPDATELAYEREDWINDOWINFO structure that contains the information for the window."
        }]
    },
    "_WinAPI_UpdateResource": {
        "documentation": "Adds, deletes, or replaces a resource in a portable executable (PE) file",
        "label": "_WinAPI_UpdateResource ( $hUpdate, $sType, $sName, $iLanguage, $pData, $iSize )",
        "params": [{
            "label": "$hUpdate",
            "documentation": "A module handle returned by the _WinAPI_BeginUpdateResource(), referencing the file to be updated."
        }, {
            "label": "$sType",
            "documentation": "The resource type to be updated. Alternatively, rather than a pointer, this parameter can be aninteger value representing a predefined resource type. If the first character of the string is apound sign (#), then the remaining characters represent a decimal number that specifies the integeridentifier of the resource type. For example, the string \"#258\" represents the identifier 258.Also, you can use a predefined resource types ($RT_*)."
        }, {
            "label": "$sName",
            "documentation": "The name of the resource to be updated. This parameter can be string or integer value."
        }, {
            "label": "$iLanguage",
            "documentation": "The language identifier of the resource."
        }, {
            "label": "$pData",
            "documentation": "The resource data to be inserted into the file indicated by $hUpdate parameter. If the resource isone of the predefined types, the data must be valid and properly aligned. Note that this is the rawbinary data, not the data provided by _WinAPI_LoadIcon(), _WinAPI_LoadString(), or other resource-specific load functions. All data containing strings or text must be in Unicode format. If $pDatais 0 and $iSize is 0, the specified resource is deleted from the file indicated by $hUpdate."
        }, {
            "label": "$iSize",
            "documentation": "The size, in bytes, of the resource data at $pData."
        }]
    },
    "_WinAPI_UpdateWindow": {
        "documentation": "Updates the client area of a window by sending a WM_PAINT message to the window",
        "label": "_WinAPI_UpdateWindow ( $hWnd )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle of window to update"
        }]
    },
    "_WinAPI_UrlApplyScheme": {
        "documentation": "Determines a scheme for a specified URL string, and returns a string with an appropriate prefix",
        "label": "_WinAPI_UrlApplyScheme ( $sUrl [, $iFlags = 1] )",
        "params": [{
            "label": "$sUrl",
            "documentation": "The URL."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify how to determine the scheme. It can be a combination of the following values.$URL_APPLY_DEFAULT (Default)$URL_APPLY_GUESSSCHEME$URL_APPLY_GUESSFILE$URL_APPLY_FORCEAPPLY"
        }]
    },
    "_WinAPI_UrlCanonicalize": {
        "documentation": "Converts a URL string into canonical form",
        "label": "_WinAPI_UrlCanonicalize ( $sUrl, $iFlags )",
        "params": [{
            "label": "$sUrl",
            "documentation": "The URL."
        }, {
            "label": "$iFlags",
            "documentation": "The flags that specify how the URL is to be converted. It can be a combination of the following values.    $URL_DONT_SIMPLIFY    $URL_ESCAPE_PERCENT    $URL_ESCAPE_SPACES_ONLY    $URL_ESCAPE_UNSAFE    $URL_NO_META    $URL_PLUGGABLE_PROTOCOL    $URL_UNESCAPEWindows 7 or later    $URL_ESCAPE_AS_UTF8"
        }]
    },
    "_WinAPI_UrlCombine": {
        "documentation": "Combines the base an relative URLs in canonical form",
        "label": "_WinAPI_UrlCombine ( $sUrl, $sPart [, $iFlags = 0] )",
        "params": [{
            "label": "$sUrl",
            "documentation": "The base URL."
        }, {
            "label": "$sPart",
            "documentation": "The relative URL."
        }, {
            "label": "$iFlags",
            "documentation": "**[optional]** The flags that specify how the URL is to be converted. It can be a combination of the following values.    $URL_DONT_SIMPLIFY    $URL_ESCAPE_PERCENT    $URL_ESCAPE_SPACES_ONLY    $URL_ESCAPE_UNSAFE    $URL_NO_META    $URL_PLUGGABLE_PROTOCOL    $URL_UNESCAPEWindows 7 or later    $URL_ESCAPE_AS_UTF8"
        }]
    },
    "_WinAPI_UrlCompare": {
        "documentation": "Makes a case-sensitive comparison of two URL strings",
        "label": "_WinAPI_UrlCompare ( $sUrl1, $sUrl2 [, $bIgnoreSlash = False] )",
        "params": [{
            "label": "$sUrl1",
            "documentation": "The first URL."
        }, {
            "label": "$sUrl2",
            "documentation": "The second URL."
        }, {
            "label": "$bIgnoreSlash",
            "documentation": "**[optional]** Specifies whether to ignore a trailing '/' character on either or both URLs, valid values:    True - The function ignores a trailing characters.    False - The function takes into account the trailing characters (Default)."
        }]
    },
    "_WinAPI_UrlCreateFromPath": {
        "documentation": "Converts a Microsoft MS-DOS path to a canonicalized URL",
        "label": "_WinAPI_UrlCreateFromPath ( $sFilePath )",
        "params": [{
            "label": "$sFilePath",
            "documentation": "The MS-DOS path."
        }]
    },
    "_WinAPI_UrlFixup": {
        "documentation": "Attempts to correct a URL whose protocol identifier is incorrect",
        "label": "_WinAPI_UrlFixup ( $sUrl )",
        "params": [{
            "label": "$sUrl",
            "documentation": "The URL to be corrected."
        }]
    },
    "_WinAPI_UrlGetPart": {
        "documentation": "Retrieves a specified part from the URL",
        "label": "_WinAPI_UrlGetPart ( $sUrl, $iPart )",
        "params": [{
            "label": "$sUrl",
            "documentation": "The URL."
        }, {
            "label": "$iPart",
            "documentation": "The part of the URL to retrieve. It can be one of the following values.$URL_PART_HOSTNAME$URL_PART_PASSWORD$URL_PART_PORT$URL_PART_QUERY$URL_PART_SCHEME$URL_PART_USERNAME"
        }]
    },
    "_WinAPI_UrlHash": {
        "documentation": "Hashes a URL string",
        "label": "_WinAPI_UrlHash ( $sUrl [, $iLength = 32] )",
        "params": [{
            "label": "$sUrl",
            "documentation": "The URL."
        }, {
            "label": "$iLength",
            "documentation": "**[optional]** The length of the hash data, in bytes. It should be no larger than 256, otherwise, the function fails. Default is 32."
        }]
    },
    "_WinAPI_UrlIs": {
        "documentation": "Tests whether or not a URL is a specified type",
        "label": "_WinAPI_UrlIs ( $sUrl [, $iType = 0] )",
        "params": [{
            "label": "$sUrl",
            "documentation": "The URL."
        }, {
            "label": "$iType",
            "documentation": "**[optional]** The type of URL to be tested for. It can be one of the following values.$URLIS_APPLIABLE$URLIS_DIRECTORY$URLIS_FILEURL$URLIS_HASQUERY$URLIS_NOHISTORY$URLIS_OPAQUE$URLIS_URL (Default)"
        }]
    },
    "_WinAPI_UserHandleGrantAccess": {
        "documentation": "Grants or denies access to a handle to a User object to a job that has a user-interface restriction",
        "label": "_WinAPI_UserHandleGrantAccess ( $hObject, $hJob, $bGrant )",
        "params": [{
            "label": "$hObject",
            "documentation": "Handle to the User object."
        }, {
            "label": "$hJob",
            "documentation": "Handle to the job to be granted access to the User handle."
        }, {
            "label": "$bGrant",
            "documentation": "Specifies whether to grant or deny access to the User handle, valid values:True - The processes associated with the job can recognize and use the handle.False - The processes cannot use the handle."
        }]
    },
    "_WinAPI_ValidateRect": {
        "documentation": "Removes a rectangle from the current update region of the specified window",
        "label": "_WinAPI_ValidateRect ( $hWnd [, $tRECT = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose update region is to be modified. If this parameter is 0, the systeminvalidates and redraws all windows and sends the WM_ERASEBKGND and WM_NCPAINT messages to the windowprocedure before the function returns."
        }, {
            "label": "$tRECT",
            "documentation": "**[optional]** $tagRECT structure that contains the client coordinates of the rectangle to be removed from theupdate region. If this parameter is 0 (Default), the entire client area is removed."
        }]
    },
    "_WinAPI_ValidateRgn": {
        "documentation": "Removes a region from the current update region of the specified window",
        "label": "_WinAPI_ValidateRgn ( $hWnd [, $hRgn = 0] )",
        "params": [{
            "label": "$hWnd",
            "documentation": "Handle to the window whose update region is to be modified."
        }, {
            "label": "$hRgn",
            "documentation": "**[optional]** Handle to a region that defines the area to be removed from the update region. If this parameter is 0 (Default),the entire client area is removed."
        }]
    },
    "_WinAPI_VerQueryRoot": {
        "documentation": "Retrieves the fixed version information from the specified version-information resource",
        "label": "_WinAPI_VerQueryRoot ( $pData )",
        "params": [{
            "label": "$pData",
            "documentation": "A pointer to the buffer that contains the version-information resource returned by the_WinAPI_GetFileVersionInfo() function."
        }]
    },
    "_WinAPI_VerQueryValue": {
        "documentation": "Retrieves the non-fixed (strings) version information from the specified version-information resource",
        "label": "_WinAPI_VerQueryValue ( $pData [, $sValues = ''] )",
        "params": [{
            "label": "$pData",
            "documentation": "A pointer to the buffer that contains the version-information resource returned by the_WinAPI_GetFileVersionInfo() function."
        }, {
            "label": "$sValues",
            "documentation": "**[optional]** The string containing the field names for which you want to get values. The names must be separated by a \"|\".For example, \"name1|name2|...|namei\". If some fields do not exist, the corresponding array elements is an empty string.If this parameter is not specified (empty string), uses the reserved names (12) in the following sequence:    $FV_COMMENTS (\"Comments\")    $FV_COMPANYNAME (\"CompanyName\")    $FV_FILEDESCRIPTION (\"FileDescription\")    $FV_FILEVERSION (\"FileVersion\")    $FV_INTERNALNAME (\"InternalName\")    $FV_LEGALCOPYRIGHT (\"LegalCopyright\")    $FV_LEGALTRADEMARKS (\"LegalTrademarks\")    $FV_ORIGINALFILENAME (\"OriginalFilename\")    $FV_PRODUCTNAME (\"ProductName\")    $FV_PRODUCTVERSION (\"ProductVersion\")    $FV_PRIVATEBUILD (\"PrivateBuild\")    $FV_SPECIALBUILD (\"SpecialBuild\")Constants are defined in FileConstants.au3."
        }]
    },
    "_WinAPI_VerQueryValueEx": {
        "documentation": "Retrieves the text information from the version-information resource of the specified binary module",
        "label": "_WinAPI_VerQueryValueEx ( $hModule [, $sValues = '' [, $iLanguage = 0x0400]] )",
        "params": [{
            "label": "$hModule",
            "documentation": "The handle to a module to retrieve information. Also, this parameter can specify the name of themodule to load, it must be a full or relative path. If this parameter is 0 or an empty string, that isequivalent to passing in a handle to the module used to create the current process."
        }, {
            "label": "$sValues",
            "documentation": "**[optional]** The string containing the field names for which you want to get values. The names must be separated by a \"|\".For example, \"name1|name2|...|namei\". If some fields do not exist, the corresponding array elements is an empty string.If this parameter is not specified (empty string), uses the reserved names (12) in the following sequence:    $FV_COMMENTS (\"Comments\")    $FV_COMPANYNAME (\"CompanyName\")    $FV_FILEDESCRIPTION (\"FileDescription\")    $FV_FILEVERSION (\"FileVersion\")    $FV_INTERNALNAME (\"InternalName\")    $FV_LEGALCOPYRIGHT (\"LegalCopyright\")    $FV_LEGALTRADEMARKS (\"LegalTrademarks\")    $FV_ORIGINALFILENAME (\"OriginalFilename\")    $FV_PRODUCTNAME (\"ProductName\")    $FV_PRODUCTVERSION (\"ProductVersion\")    $FV_PRIVATEBUILD (\"PrivateBuild\")    $FV_SPECIALBUILD (\"SpecialBuild\")Constants are defined in FileConstants.au3."
        }, {
            "label": "$iLanguage",
            "documentation": "**[optional]** The language identifier of the version-information resource of interest. To retrieve information foruser default language set this parameter to $LOCALE_USER_DEFAULT (Default). To retrieve information for alllanguages that are located in the resource set this parameter to (-1)."
        }]
    },
    "_WinAPI_WaitForInputIdle": {
        "documentation": "Waits until a process is waiting for user input with no input pending, or a time out",
        "label": "_WinAPI_WaitForInputIdle ( $hProcess [, $iTimeout = -1] )",
        "params": [{
            "label": "$hProcess",
            "documentation": "A handle to the process. If this process is a console application or does not have a messagequeue, this function returns immediately."
        }, {
            "label": "$iTimeOut",
            "documentation": "**[optional]** The time out interval, in milliseconds. If set to -1, the function does not return until theprocess is idle."
        }]
    },
    "_WinAPI_WaitForMultipleObjects": {
        "documentation": "Waits until one or all of the specified objects are in the signaled state",
        "label": "_WinAPI_WaitForMultipleObjects ( $iCount, $paHandles [, $bWaitAll = False [, $iTimeout = -1]] )",
        "params": [{
            "label": "$iCount",
            "documentation": "The number of object handles in the array pointed to by $paHandles"
        }, {
            "label": "$paHandles",
            "documentation": "Pointer to an array of object handles"
        }, {
            "label": "$bWaitAll",
            "documentation": "**[optional]** If True, the function returns when the state of all objects in the $paHandles array is signaled.If False, the function returns when the state of any one of the objects is set to signaled.In the latter case, the return value indicates the object whose state caused the function to return."
        }, {
            "label": "$iTimeout",
            "documentation": "**[optional]** The time-out interval, in milliseconds.The function returns if the interval elapses, even if the conditions specified by the $bWaitAll parameter are not met.If 0, the function tests the states of the specified objects and returns immediately.If -1, the function's time-out interval never elapses."
        }]
    },
    "_WinAPI_WaitForSingleObject": {
        "documentation": "Waits until the specified object is in the signaled state",
        "label": "_WinAPI_WaitForSingleObject ( $hHandle [, $iTimeout = -1] )",
        "params": [{
            "label": "$hHandle",
            "documentation": "A handle to the object"
        }, {
            "label": "$iTimeout",
            "documentation": "**[optional]** The time-out interval, in milliseconds. The function returns if the interval elapses, even ifthe conditions specified by the fWaitAll parameter are not met. If 0, the function tests the states of thespecified objects and returns immediately. If -1, the function's time-out interval never elapses."
        }]
    },
    "_WinAPI_WideCharToMultiByte": {
        "documentation": "Converts a Unicode string to a multibyte string",
        "label": "_WinAPI_WideCharToMultiByte ( $vUnicode [, $iCodePage = 0 [, $bRetString = True]] )",
        "params": [{
            "label": "$vUnicode",
            "documentation": "String, DllStruct or Pointer to a byte array structure containing Unicode text to be converted"
        }, {
            "label": "$iCodePage",
            "documentation": "**[optional]** Code page to use in performing the conversion:    0 - The current system Windows ANSI code page    1 - The current system OEM code page    2 - The current system Macintosh code page    3 - The Windows ANSI code page for the current thread    42 - Symbol code page    65000 - UTF-7    65001 - UTF-8"
        }, {
            "label": "$bRetString",
            "documentation": "**[optional]** Flags that indicate whether to return a String or a DllStruct (default True : String)"
        }]
    },
    "_WinAPI_WidenPath": {
        "documentation": "Redefines the current path as the area that would be painted if the path were stroked",
        "label": "_WinAPI_WidenPath ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to a device context that contains a closed path."
        }]
    },
    "_WinAPI_WindowFromDC": {
        "documentation": "Retrieves a handle to the window associated with the specified display device context (DC)",
        "label": "_WinAPI_WindowFromDC ( $hDC )",
        "params": [{
            "label": "$hDC",
            "documentation": "Handle to the device context from which a handle to the associated window is to be retrieved."
        }]
    },
    "_WinAPI_WindowFromPoint": {
        "documentation": "Retrieves the handle of the window that contains the specified point",
        "label": "_WinAPI_WindowFromPoint ( ByRef $tPoint )",
        "params": [{
            "label": "$tPoint",
            "documentation": "$tagPOINT structure that defines the point to be checked"
        }]
    },
    "_WinAPI_WordToShort": {
        "documentation": "Converts a value of type WORD to a value of type SHORT",
        "label": "_WinAPI_WordToShort ( $iValue )",
        "params": [{
            "label": "$iValue",
            "documentation": "The value to be converted."
        }]
    },
    "_WinAPI_Wow64EnableWow64FsRedirection": {
        "documentation": "Enables or disables file system redirection for the calling thread",
        "label": "_WinAPI_Wow64EnableWow64FsRedirection ( $bEnable )",
        "params": [{
            "label": "$bEnable",
            "documentation": "Specifies whether enable or disable the WOW64 system folder redirection, valid values:    True - Enable.    False - Disable."
        }]
    },
    "_WinAPI_WriteConsole": {
        "documentation": "Writes a character string to a console screen buffer",
        "label": "_WinAPI_WriteConsole ( $hConsole, $sText )",
        "params": [{
            "label": "$hConsole",
            "documentation": "Handle to the console screen buffer"
        }, {
            "label": "$sText",
            "documentation": "Text to be written to the console screen buffer"
        }]
    },
    "_WinAPI_WriteFile": {
        "documentation": "Writes data to a file at the position specified by the file pointer",
        "label": "_WinAPI_WriteFile ( $hFile, $pBuffer, $iToWrite, ByRef $iWritten [, $tOverlapped = 0] )",
        "params": [{
            "label": "$hFile",
            "documentation": "Handle to the file to be written"
        }, {
            "label": "$pBuffer",
            "documentation": "Pointer to the buffer containing the data to be written"
        }, {
            "label": "$iToWrite",
            "documentation": "Number of bytes to be written to the file"
        }, {
            "label": "$iWritten",
            "documentation": "The number of bytes written"
        }, {
            "label": "$tOverlapped",
            "documentation": "**[optional]** A $tagOVERLAPPED structure or a pointer to it"
        }]
    },
    "_WinAPI_WriteProcessMemory": {
        "documentation": "Writes memory in a specified process",
        "label": "_WinAPI_WriteProcessMemory ( $hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iWritten [, $sBuffer = \"ptr\"] )",
        "params": [{
            "label": "$hProcess",
            "documentation": "Identifies an open handle to a process whose memory is to be written to"
        }, {
            "label": "$pBaseAddress",
            "documentation": "Points to the base address in the specified process to be written to"
        }, {
            "label": "$pBuffer",
            "documentation": "Points to the buffer that supplies data to be written into the address space"
        }, {
            "label": "$iSize",
            "documentation": "Specifies the number of bytes to write into the specified process"
        }, {
            "label": "$iWritten",
            "documentation": "The actual number of bytes transferred into the specified process"
        }, {
            "label": "$sBuffer",
            "documentation": "**[optional]** Contains the data type that $pBuffer represents"
        }]
    },
    "_WinAPI_ZeroMemory": {
        "documentation": "Fills a block of memory with zeros",
        "label": "_WinAPI_ZeroMemory ( $pMemory, $iLength )",
        "params": [{
            "label": "$pMemory",
            "documentation": "A pointer to the starting address of a memory to be filled."
        }, {
            "label": "$iLength",
            "documentation": "The number of bytes to be filled."
        }]
    }
}
